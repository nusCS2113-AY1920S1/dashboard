[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"mid\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"v1.1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "group \u0027seedu.spinbox\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00271.1.0\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    mainClassName \u003d \"spinbox.SpinBox\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.joestelmach\u0027, name: \u0027natty\u0027, version: \u00270.6\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 2,
      "-": 47
    }
  },
  {
    "path": "src/main/Resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"spinbox.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"724.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"724.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"800.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"562.0\" prefWidth\u003d\"798.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/opaqueInsets\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/spinbox/DateTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import com.joestelmach.natty.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class DateTime implements Comparable\u003cDateTime\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date dateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for simple dateTime object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateTime A Date Object with date and time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public DateTime(Date dateTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public DateTime(String dateTime) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.dateTime \u003d parser.parse(dateTime).get(0).getDates().get(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public DateTime(String dateTime, int index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.dateTime \u003d parser.parse(dateTime).get(0).getDates().get(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDateTime() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * Converts the Date object back to the string version in the format of MM/dd/yyyy HH:mm"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * This can be reused to create an identical dateTime object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String equivalent of Date object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"MM/dd/yyyy HH:mm\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String dateString \u003d dateFormat.format(dateTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return dateString;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public boolean before(DateTime dateTime) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return this.dateTime.before(dateTime.getDateTime());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public boolean equals(DateTime dateTime) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return this.dateTime.equals(dateTime.getDateTime());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public boolean after(DateTime dateTime) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return this.dateTime.after(dateTime.getDateTime());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(DateTime dateTimeTwo) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.getDateTime().compareTo(dateTimeTwo.getDateTime());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "ttippinyu": 1,
      "-": 35,
      "TCK1997": 26
    }
  },
  {
    "path": "src/main/java/spinbox/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.gui.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": " * A GUI for SpinBox using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private SpinBox spinBox \u003d new SpinBox();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setSpinBox(spinBox);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/spinbox/Module.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.CorruptedDataException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.FileCreationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.lists.FileList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.lists.GradeList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.lists.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String CORRUPTED_MODULES_DATA \u003d \"Corrupted modules data.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String STORE_DELIMITER \u003d \" | \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String DELIMITER_FILTER \u003d \" \\\\| \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String moduleName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private FileList files;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private GradeList grades;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    // private Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    // private Event exam;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Constructor for module."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public Module(String moduleCode, String moduleName) throws FileCreationException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.files \u003d new FileList(moduleCode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.tasks \u003d new TaskList(moduleCode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.grades \u003d new GradeList(moduleCode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Parses a string extracted from storage back into a Module object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param fromStorage This String is provided directly from the localStorage instance."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws CorruptedDataException Thrown when a user manually edits the .txt file incorrectly."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public Module(String fromStorage) throws CorruptedDataException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            String[] components \u003d fromStorage.split(DELIMITER_FILTER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.setModuleCode(components[0]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.setModuleName(components[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new CorruptedDataException(CORRUPTED_MODULES_DATA);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return this.getModuleCode() + STORE_DELIMITER + this.getModuleName();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Get module name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return module name."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String getModuleName() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return this.moduleName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Get module code."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return module code."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return this.moduleCode;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Get the FileList."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return FileList instance."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public FileList getFiles() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return files;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Get the GradeList."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return GradeList instance."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public GradeList getGrades() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return grades;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Get the TaskList."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return TaskList instance."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public TaskList getTasks() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void setModuleName(String moduleName) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 61,
      "ttippinyu": 38
    }
  },
  {
    "path": "src/main/java/spinbox/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.commands.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.commands.ViewCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static ArrayDeque\u003cString\u003e pageTrace;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public static void setPageTrace(ArrayDeque\u003cString\u003e pageTraceNew) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        pageTrace \u003d pageTraceNew;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Builds the required page data for command input. Return page and maybe moduleCode"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param inputPageData The page data input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @return Full page data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @throws InputException If the input is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static String commandBuilder(String inputPageData) throws InputException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        StringBuilder pageData \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        String[] pageComponent \u003d inputPageData.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        ArrayDeque\u003cString\u003e tempPageTrace \u003d pageTrace.clone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        // append page or page + module from pageTrace"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (pageComponent[0].isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            pageData.append(tempPageTrace.getLast());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            tempPageTrace.removeLast();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            if (tempPageTrace.size() !\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                pageData.append(\" \").append(tempPageTrace.getLast());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        // append page from input and maybe moduleCode from pageTrace"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        } else if (pageComponent.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            switch (pageComponent[0]) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"main\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"calendar\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                pageData.append(pageComponent[0]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"modules\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                pageData.append(pageComponent[0]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                tempPageTrace.removeLast();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                if (tempPageTrace.size() !\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    pageData.append(\" \").append(tempPageTrace.getLast());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                // means inputPageData is a moduleCode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                if (tempPageTrace.getLast().equals(\"modules\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    pageData.append(\"modules \").append(pageComponent[0]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    throw new InputException(\"Invalid input.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        // append \"modules\" + moduleCode from input"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        } else if (pageComponent.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            if (pageComponent[0].equals(\"modules\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                pageData.append(\"modules \").append(pageComponent[1]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                throw new InputException(\"Please input a valid command.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return pageData.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Parses an input string into a workable command."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param input user typed in this string."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return a Command that can executed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws SpinBoxException Storage errors or input errors."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public static Command parse(String input) throws SpinBoxException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String action \u003d \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String pageData \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        String[] colonSeparate \u003d input.split(\" : \");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            if (colonSeparate.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    action \u003d \"bye\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    throw new InputException(\"Please give valid command:\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                            + \"\u0027\u003caction\u003e \u003cpage\u003e : \u003ccontent\u003e\u0027 or \u0027bye\u0027\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                content \u003d colonSeparate[1].trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                String[] frontComponents \u003d colonSeparate[0].split(\" \");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                action \u003d frontComponents[0];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                pageData \u003d colonSeparate[0].replace(action, \"\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                pageData \u003d commandBuilder(pageData);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                String[] pageDataComponents \u003d pageData.split(\" \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            throw new InputException(\"Please give valid command:\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    + \"\u0027\u003caction\u003e \u003cpage\u003e : \u003ccontent\u003e\u0027 or \u0027bye\u0027\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            command \u003d new ViewCommand(pageData, content);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //      **This will be an example of how to turn the input into commands.**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //            switch (action) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //                case \"done\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //                    String moduleCode \u003d pageDataComponents[1];"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //                    command \u003d new DoneCommand(moduleCode, Integer.parseInt(content) - 1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //            throw new InputException(\"Please enter an integer for index\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 10,
      "ttippinyu": 48,
      "lackmoo": 69
    }
  },
  {
    "path": "src/main/java/spinbox/SpinBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.FileCreationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.StorageException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.lists.ModuleContainer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class SpinBox {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui userInterface;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private ModuleContainer modules;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private ArrayDeque\u003cString\u003e pageTrace;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean shutdown \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Full Constructor for CLI/GUI version of SpinBox."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public SpinBox(boolean cliMode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        userInterface \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace.add(\"main\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            modules \u003d new ModuleContainer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (FileCreationException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            userInterface.showFormatted(e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (cliMode) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            this.startSpinBoxCli();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Default Constructor, Entry point into this java program, for CLI version."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public SpinBox() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this(false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Entry point into this java program, for CLI version."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        new SpinBox(true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * CLI mode - the String returned by getResponse is to be printed to the console."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private void startSpinBoxCli() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        userInterface.print(userInterface.showWelcome());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!this.isShutdown()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            userInterface.print(userInterface.showPage(pageTrace));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            String input \u003d userInterface.readInput();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            userInterface.print(getResponse(input));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Method to interact with SpinBox."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input String input from GUI/CLI layer."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return output response String to be returned to GUI/CLI."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            Parser.setPageTrace(pageTrace);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            String response \u003d command.execute(modules.getModules(), pageTrace, userInterface);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            this.setShutdown(command.isExit());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        } catch (SpinBoxException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return userInterface.showFormatted(e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setShutdown(boolean shutdown) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.shutdown \u003d shutdown;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShutdown() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return shutdown;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 11,
      "ttippinyu": 23,
      "-": 55
    }
  },
  {
    "path": "src/main/java/spinbox/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.FileCreationException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.StorageException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private java.io.File spinBoxFile;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * This constructor takes in a path, creating the file and/or folder as needed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param fileLocation relative path of the text file to store data in."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws StorageException An exception is thrown for file creation errors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public Storage(String fileLocation) throws FileCreationException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            spinBoxFile \u003d new File(fileLocation);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            if (spinBoxFile.getParentFile().mkdir()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                spinBoxFile.createNewFile();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new FileCreationException(e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Retrieves lines of text from within the text file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return A list containing Strings of data retrieved from the text file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws SpinBoxException An exception is thrown for I/O errors."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public List\u003cString\u003e loadData() throws StorageException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            String currentLine;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            BufferedReader inputStream \u003d new BufferedReader(new FileReader(spinBoxFile));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            while ((currentLine \u003d inputStream.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                lines.add(currentLine);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            inputStream.close();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new StorageException(e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return lines;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Saves lines of text to a text file at the path specified."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param lines List of Strings to be saved line by line to the text file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws StorageException An exception is thrown for I/O errors."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void saveData(List\u003cString\u003e lines) throws StorageException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            BufferedWriter outputStream \u003d new BufferedWriter(new FileWriter(spinBoxFile));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            for (String line : lines) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                outputStream.write(line);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                outputStream.newLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            outputStream.close();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new StorageException(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 69,
      "ttippinyu": 3
    }
  },
  {
    "path": "src/main/java/spinbox/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is to show a welcome message on startup."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the welcome String."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e welcome \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        welcome.add(\"Hello! I\u0027m SpinBox\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        welcome.add(\"What can I do for you?\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return showFormatted(welcome);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is to show a goodbye message on exit."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showGoodbye() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return showFormatted(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * This is to add the SpinBox UI wrapper to printed messages."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param output A single string to be formatted."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the formatted output."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showFormatted(String output) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String horizontalLine \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String formattedOutput \u003d horizontalLine + \"\\n\" + output + \"\\n\" + horizontalLine;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return formattedOutput;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * This is to add the SpinBox UI wrapper to printed messages."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param output A List of strings that will be accumulated into a Single string."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the formatted String."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showFormatted(List\u003cString\u003e output) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String formattedOutput \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String outputItem : output) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedOutput \u003d formattedOutput.concat(outputItem + \"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (formattedOutput.length() \u003e 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return showFormatted(formattedOutput.substring(0, formattedOutput.length() - 1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return showFormatted(\"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void print(String input) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(input);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String readInput() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Returns the current page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param pageTrace the structure the pages are stored."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return a string of the page hierarchy."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String showPage(ArrayDeque\u003cString\u003e pageTrace) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        ArrayDeque\u003cString\u003e tempPageTrace \u003d pageTrace.clone();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String trace \u003d \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        trace \u003d trace.concat(\"Page: \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        while (tempPageTrace.size() \u003e 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            trace \u003d trace.concat(\"/\" + tempPageTrace.getLast());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            tempPageTrace.removeLast();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return trace;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 22,
      "-": 59
    }
  },
  {
    "path": "src/main/java/spinbox/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.tasks.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.items.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.items.tasks.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.items.tasks.Schedulable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.lists.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Constructor for creation of Task objects, does some input checking."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param components Components of the full command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param fullCommand the full command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws SpinBoxException Can throw from invalid input or storage errors"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public AddCommand(String[] components, String fullCommand) throws SpinBoxException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.type \u003d components[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        if (components.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new InputException(\"☹ OOPS!!! The description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } else if (this.type.equals(\"deadline\") \u0026\u0026 components[1].equals(\"/by\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new InputException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } else if (this.type.equals(\"event\") \u0026\u0026 components[1].equals(\"/by\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new InputException(\"☹ OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        } else if (this.type.equals(\"exam\") \u0026\u0026 components[1].equals(\"/by\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            throw new InputException(\"☹ OOPS!!! The description of an exam cannot be empty.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        } else if (this.type.equals(\"tutorial\") \u0026\u0026 components[1].equals(\"/by\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            throw new InputException(\"☹ OOPS!!! The description of an tutorial cannot be empty.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        } else if (this.type.equals(\"lab\") \u0026\u0026 components[1].equals(\"/by\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            throw new InputException(\"☹ OOPS!!! The description of an lab cannot be empty.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        } else if (this.type.equals(\"lecture\") \u0026\u0026 components[1].equals(\"/by\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            throw new InputException(\"☹ OOPS!!! The description of an lecture cannot be empty.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Add Task to task list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param taskList TaskList instance."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param storage Storage instance."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param ui Ui instance."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws SpinBoxException invalid input or storage error."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) throws SpinBoxException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cString\u003e formattedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Task added;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        List dates;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        String fixedDuration;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        String doAfter;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime start;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime end;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            switch (this.type) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                added \u003d taskList.add(new Todo(fullCommand.replaceFirst(\"todo \", \"\")));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                formattedOutput.add(\"Got it. I\u0027ve added this todo:\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                formattedOutput.add(added.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                start \u003d new DateTime(fullCommand.split(\"/by \")[1]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                added \u003d taskList.add(new Deadline(fullCommand.substring(0, fullCommand.lastIndexOf(\" /by\"))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                        .replaceFirst(\"deadline \", \"\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                        start));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                formattedOutput.add(\"Got it. I\u0027ve added this deadline:\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                formattedOutput.add(added.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            case \"exam\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            case \"tutorial\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            case \"lecture\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            case \"lab\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                start \u003d new DateTime(fullCommand.split(\"/at \")[1], 0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                end \u003d new DateTime(fullCommand.split(\"/at \")[1], 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                List\u003cTask\u003e tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                    Task currentTask \u003d tasks.get(i);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                    if (currentTask.isSchedulable()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                        if (((Schedulable) currentTask).isOverlapping(start, end)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                            throw new InputException(\"Time conflicting with:\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                                    + \"    \" + (i + 1) + \".\" + currentTask.toString() + \"\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                                    + \"Please choose another time interval.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                added \u003d taskList.add(new Event(fullCommand.substring(0, fullCommand.lastIndexOf(\" /at\"))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                        .replaceFirst(\"event \", \"\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                        start, end));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                formattedOutput.add(\"Got it. I\u0027ve added this event:\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                formattedOutput.add(added.toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new InputException(\"Please ensure that you enter the full command.\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    + \"SpinBox.Tasks.Deadline: deadline \u003ctask name\u003e /by \u003cMM/DD/YYYY HH:MM\u003e\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    + \"SpinBox.Tasks.Do-After: do-after \u003ctask name\u003e /after \u003cdo-after event or time\u003e\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    + \"SpinBox.Tasks.Event: event \u003ctask name\u003e /at \u003cstart as MM/DD/YYYY HH:MM\u003e \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    + \"to \u003cend as MM/DD/YYYY HH:MM\u003e\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    + \"SpinBox.Tasks.Fixed: fixed \u003ctask name\u003e /needs \u003cfixed task duration\u003e\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    + \"SpinBox.Tasks.Tentative: tentative \u003ctask name\u003e /around \u003cstart as MM/DD/YYYY HH:MM\u003e \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    + \"to \u003cend as MM/DD/YYYY HH:MM\u003e\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    + \"SpinBox.Tasks.Within: do-within \u003ctask name\u003e /between \u003cstart as MM/DD/YYYY HH:MM\u003e \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    + \"and \u003cend as MM/DD/YYYY HH:MM\u003e\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    + \"SpinBox.Tasks.Recurring: recurring \u003ctask name\u003e /at \u003cstart as MM/DD/YYYY HH:MM\u003e \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    + \"to \u003cend as MM/DD/YYYY HH:MM\u003e /every DD:HH:MM\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            );"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        formattedOutput.add(\"You currently have \" + taskList.getList().size()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                + ((taskList.getList().size() \u003d\u003d 1) ? \" task in the list.\" : \" tasks in the list.\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        taskList.saveData();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        taskList.sort();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 62,
      "ttippinyu": 30,
      "lackmoo": 2,
      "TCK1997": 34
    }
  },
  {
    "path": "src/main/java/spinbox/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.lists.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private boolean isFileCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    // New execute needs to be made abstract"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String execute(HashMap\u003cString, Module\u003e modules, ArrayDeque\u003cString\u003e pageTrace, Ui ui)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            throws SpinBoxException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return \"Blank\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    // Old execute"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) throws SpinBoxException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Check whether it is file command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return whether it is file command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public boolean isFileCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return isFileCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void setExit(boolean exit) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        isExit \u003d exit;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Set the isFileCommand value."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param fileCommand the value of isFileCommand."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public void setFileCommand(boolean fileCommand) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        isFileCommand \u003d fileCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 14,
      "ttippinyu": 35,
      "lackmoo": 1
    }
  },
  {
    "path": "src/main/java/spinbox/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.lists.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the relevant task in the task list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList TaskList instance."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage Storage instance."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui instance."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws SpinBoxException Invalid index or storage error."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) throws SpinBoxException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cString\u003e formattedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            List\u003cTask\u003e tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            Task removed \u003d taskList.remove(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            taskList.saveData();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedOutput.add(\"Noted. I\u0027ve removed this task:\\n\" + removed.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedOutput.add(\"You currently have \" + tasks.size()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    + ((tasks.size() \u003d\u003d 1) ? \" task in the list.\" : \" tasks in the list.\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            taskList.sort();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"Invalid index entered. Type \u0027list\u0027 to see your list.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "ttippinyu": 13,
      "-": 31
    }
  },
  {
    "path": "src/main/java/spinbox/commands/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.lists.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Mark task in task list as done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList TaskList instance."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage Storage instance."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui instance."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws SpinBoxException invalid index or storage error."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) throws SpinBoxException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cString\u003e formattedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            Task completed \u003d taskList.mark(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            taskList.remove(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedOutput.add(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedOutput.add(completed.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            formattedOutput.add(\"This task has been removed from the list.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            taskList.saveData();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            List\u003cTask\u003e tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            formattedOutput.add(\"You currently have \" + tasks.size()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    + ((tasks.size() \u003d\u003d 1) ? \" task in the list.\" : \" tasks in the list.\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"Invalid index entered. Type \u0027list\u0027 to see your list.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "ttippinyu": 12,
      "lackmoo": 3,
      "-": 29
    }
  },
  {
    "path": "src/main/java/spinbox/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.lists.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    // Old execute"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setExit(true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return ui.showGoodbye();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String execute(HashMap\u003cString, Module\u003e modules, ArrayDeque\u003cString\u003e pageTrace, Ui ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.setExit(true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return ui.showGoodbye();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 9,
      "ttippinyu": 15
    }
  },
  {
    "path": "src/main/java/spinbox/commands/FileCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.lists.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class FileCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String action;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Constructor for file command, either adding, marking as downloaded, or viewing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param action the type of file action, either \"add\", \"done\", or \"view\"."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param fullCommand input user typed in this string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws InputException input errors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public FileCommand(String action, String fullCommand) throws InputException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String[] components \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            this.fileName \u003d fullCommand.replaceFirst(\"file add \", \"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                this.index \u003d Integer.parseInt(components[2]) - 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                throw new InputException(\"Please provide an index. Eg. \u0027file done 5\u0027 or \u0027file delete 3\u0027\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            throw new InputException(\"Please specify the type of file command.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    + \"file add \u003cfilename\u003e, file done \u003cindex\u003e, or file view.\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (action.equals(\"add\") \u0026\u0026 fileName.equals(\"\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            throw new InputException(\"☹ OOPS!!! The filename cannot be empty.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.setFileCommand(true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Either add the file into fileTaskList, mark a file as downloaded, or view all the files."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param fileTaskList fileTaskList instance."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param fileStorage fileStorage instance."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param ui Ui instance."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws SpinBoxException invalid index or storage error."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String execute(TaskList fileTaskList, Storage fileStorage, Ui ui) throws SpinBoxException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cString\u003e formattedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cTask\u003e files;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        /*case \"add\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            Task added \u003d fileTaskList.add(new File(fileName));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            formattedOutput.add(\"Got it. I\u0027ve added this file:\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            formattedOutput.add(added.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            break;*/"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                Task downloaded \u003d fileTaskList.mark(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                fileTaskList.saveData();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                formattedOutput.add(\"Nice! I\u0027ve marked this file as downloaded:\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                formattedOutput.add(downloaded.toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                throw new InputException(\"Invalid index entered. Type \u0027file view\u0027 to see your files.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                Task removed \u003d fileTaskList.remove(index);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                files \u003d fileTaskList.getList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                fileTaskList.saveData();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                formattedOutput.add(\"Noted. I\u0027ve removed this file:\\n\" + removed.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                formattedOutput.add(\"You currently have \" + files.size()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                        + ((files.size() \u003d\u003d 1) ? \" task in the list.\" : \" tasks in the list.\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                throw new InputException(\"Invalid index entered. Type \u0027file view\u0027 to see your files.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            files \u003d fileTaskList.getList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            formattedOutput.add(\"Here are the files in your list:\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            for (int i \u003d 0; i \u003c fileTaskList.getList().size(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                formattedOutput.add(Integer.toString(i + 1) + \". \" + files.get(i).toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        fileTaskList.saveData();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 3,
      "ttippinyu": 101,
      "TCK1997": 3
    }
  },
  {
    "path": "src/main/java/spinbox/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.lists.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for finding tasks using a keyword."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param components Components of the full command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param fullCommand the full command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InputException missing keyword"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(String[] components, String fullCommand) throws InputException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (components.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"☹ OOPS!!! You need to enter a keyword.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            keyword \u003d fullCommand.replaceFirst(\"find \", \"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Searches for tasks using a keyword."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList TaskList instance"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage Storage instance"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui instance"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        int resultCount \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e formattedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        formattedOutput.add(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cTask\u003e tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            if (task.getName().contains(keyword)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                formattedOutput.add((resultCount++ + 1) + \". \" + task.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "ttippinyu": 7,
      "-": 41
    }
  },
  {
    "path": "src/main/java/spinbox/commands/FindFreeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.items.tasks.Schedulable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.lists.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindFreeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private DateTime startDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private DateTime endDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private List\u003cPair\u003cDateTime, DateTime\u003e\u003e freeTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for FindFree Command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date In the format of MM/dd/yyyy"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindFreeCommand(String date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d new DateTime(date + \" 00:00\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.endDate \u003d new DateTime(date + \" 23:59\");;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Output all the free time interval from startDate to endDate."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList TaskList instance."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage Storage instance."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui instance."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cTask\u003e tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        freeTime \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        freeTime.add(new Pair\u003c\u003e(startDate, endDate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            if (task.isSchedulable()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                if (((Schedulable) task).isOverlapping(startDate,endDate)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                    Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                    DateTime taskStart \u003d event.getStartDate();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                    DateTime taskEnd \u003d event.getEndDate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                    freeTime \u003d newFreeTime(taskStart, taskEnd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e formattedOutput \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        formattedOutput.add(\"Free Times are:\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        for (Pair\u003cDateTime, DateTime\u003e timeInterval : freeTime) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            DateTime start \u003d timeInterval.getKey();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            DateTime end \u003d timeInterval.getValue();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedOutput.add(\"From:\" + start.toString() + \" To:\" + end.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private List\u003cPair\u003cDateTime, DateTime\u003e\u003e newFreeTime(DateTime taskStart, DateTime taskEnd) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        List\u003cPair\u003cDateTime, DateTime\u003e\u003e newFreeTime \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c freeTime.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            DateTime startTime \u003d freeTime.get(i).getKey();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            DateTime endTime \u003d freeTime.get(i).getValue();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            if ((taskStart.getDateTime().before(startTime.getDateTime()) || taskStart.equals(startTime))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 taskEnd.after(startTime)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 taskEnd.before(endTime)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                newFreeTime.add(new Pair\u003c\u003e(taskEnd, endTime));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            if ((taskEnd.after(endTime) || taskEnd.equals(endTime))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 taskStart.after(startTime)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 taskStart.before(endTime)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                newFreeTime.add(new Pair\u003c\u003e(startTime, taskStart));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            if (taskStart.before(startTime) \u0026\u0026 taskEnd.after(endTime)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                assert true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            if (taskStart.after(startTime) \u0026\u0026 taskEnd.before(endTime)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                newFreeTime.add(new Pair\u003c\u003e(startTime,taskStart));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                newFreeTime.add(new Pair\u003c\u003e(taskEnd,endTime));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(taskStart.before(endTime) \u0026\u0026 startTime.before(taskEnd))) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                newFreeTime.add(new Pair\u003c\u003e(startTime,endTime));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return newFreeTime;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 8,
      "-": 59,
      "TCK1997": 22
    }
  },
  {
    "path": "src/main/java/spinbox/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.lists.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a list of tasks currently within the task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList TaskList instance."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage Storage instance."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui instance."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        taskList.sort();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cTask\u003e tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e formattedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        formattedOutput.add(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getList().size(); i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedOutput.add((Integer.toString(i + 1) + \". \" + tasks.get(i).toString()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 8,
      "-": 22
    }
  },
  {
    "path": "src/main/java/spinbox/commands/MultipleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.lists.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "public class MultipleCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private String commandType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private String indexes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * Constructor for multiple command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param commandType Either done-multiple or delete-multiple."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param indexes Indexes of the tasks to be deleted."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public MultipleCommand(String commandType, String indexes) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.indexes \u003d indexes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * Either delete multiple relevant tasks from the task list or"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * mark them as done and delete them."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param taskList TaskList instance."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param storage Storage instance."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param ui Ui instance."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws SpinBoxException Invalid index or storage error."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) throws SpinBoxException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        int inputSize \u003d indexes.split(\" \").length;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        if (inputSize \u003e 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(\"Ensure that the indexes are separated by \u0027,\u0027 without any spacing. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    + \"E.g. delete-multiple 2,3,4 or done-multiple 2,3,4\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            String[] splitIndexes \u003d indexes.split(\",\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            if (splitIndexes.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                throw new InputException(\"To delete or mark a single task as done, provide the input in this \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        + \"format instead: delete \u003cone index in integer form\u003e or done \u003cone index in integer form\u003e.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            List\u003cString\u003e formattedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            List\u003cInteger\u003e finalIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            for (int i \u003d 0; i \u003c splitIndexes.length; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                String convert \u003d splitIndexes[i];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                finalIndexes.add(Integer.parseInt(convert) - 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            Collections.sort(finalIndexes, Collections.reverseOrder());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            if (commandType.equals(\"delete-multiple\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                for (int i \u003d 0; i \u003c finalIndexes.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    Task removed \u003d taskList.remove(finalIndexes.get(i));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        formattedOutput.add(\"Noted. I\u0027ve removed these tasks:\\n\" + removed.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        formattedOutput.add(removed.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                for (int i \u003d 0; i \u003c finalIndexes.size(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    Task completed \u003d taskList.mark(finalIndexes.get(i));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    taskList.remove(finalIndexes.get(i));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        formattedOutput.add(\"Nice! I\u0027ve marked these tasks as done:\\n\" + completed.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        formattedOutput.add(completed.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    if (i \u003d\u003d finalIndexes.size() - 1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        formattedOutput.add(\"The above tasks have also been removed from the list of tasks.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            List\u003cTask\u003e tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            taskList.saveData();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            formattedOutput.add(\"You currently have \" + tasks.size()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    + ((tasks.size() \u003d\u003d 1) ? \" task in the list.\" : \" tasks in the list.\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(\"Invalid index entered. Type \u0027list\u0027 to see your list.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(\"Invalid index entered. Please ensure the index is in integer form. \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    + \"E.g. delete-multiple 2,5 or done-multiple 2,5\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "ttippinyu": 13,
      "lackmoo": 77
    }
  },
  {
    "path": "src/main/java/spinbox/commands/ReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.items.tasks.Schedulable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.lists.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cTask\u003e tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        TreeMap\u003cString, List\u003cTask\u003e\u003e byDate \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e formattedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        formattedOutput.add(\"Here are your reminders:\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            String date \u003d \"No start date\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task.getDone()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            if (task.isSchedulable()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                LocalDateTime today \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                LocalDateTime startDate \u003d ((Schedulable)task).getStartDate().getDateTime()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                        .toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                date \u003d startDate.toLocalDate().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                if (today.compareTo(startDate) \u003e 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    date \u003d date.concat(\" (Overdue)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                } else if (today.toLocalDate().compareTo(startDate.toLocalDate()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    date \u003d date.concat(\" (Today)\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                if (byDate.containsKey(date)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    byDate.get(date).add(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    byDate.put(date, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    byDate.get(date).add(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Map.Entry\u003cString, List\u003cTask\u003e\u003e entry : byDate.entrySet()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            String key \u003d entry.getKey();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedOutput.add(\"\\n-----------------\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedOutput.add(key);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedOutput.add(\"-----------------\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cTask\u003e currentTasks \u003d entry.getValue();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            currentTasks.forEach((Task currentTask) -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                formattedOutput.add(currentTask.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 6,
      "-": 63,
      "TCK1997": 4
    }
  },
  {
    "path": "src/main/java/spinbox/commands/SetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.lists.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class SetCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private DateTime startDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private DateTime endDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Takes the input and extract index, startDate, and endDate."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param components Components of the full command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param fullCommand the full command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InputException wrong format for set-tentative."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public SetCommand(String[] components, String fullCommand) throws InputException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            this.index \u003d Integer.parseInt(components[1]) - 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            startDate \u003d new DateTime(fullCommand.split(\"/set \")[1], 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            endDate \u003d new DateTime(fullCommand.split(\"/set \")[1], 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"Please ensure that you enter the full command.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"set-tentative \u003cindex\u003e /set \u003cstart as MM/DD/YYYY HH:MM\u003e\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"to \u003cend as MM/DD/YYYY HH:MM\u003e\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"Invalid index entered. Type \u0027list\u0027 to see your list.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks whether the task at index is tentative task. Then removes tentative"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * task and replace with event task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList TaskList instance."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage Storage instance."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui instance."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Output for this command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws SpinBoxException if task at index is not tentative task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) throws SpinBoxException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Task tentativeTask;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            tentativeTask \u003d taskList.getList().get(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"Invalid index entered. Type \u0027list\u0027 to see your list.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String firstComponent \u003d tentativeTask.toString().split(\" \")[0];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String taskType \u003d firstComponent.substring(0, firstComponent.lastIndexOf(\"[\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!taskType.equals(\"[TE]\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"The index given is not a tentative task.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        int tentativeTaskDone \u003d tentativeTask.getDone() ? 1 : 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Task addTask \u003d new Event(tentativeTaskDone,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                (tentativeTask).getName(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                this.startDate, this.endDate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.replace(index, addTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e formattedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        formattedOutput.add(\"Replaced tentative event:\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        formattedOutput.add(tentativeTask.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        formattedOutput.add(\"With event:\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        formattedOutput.add(addTask.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        taskList.saveData();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        taskList.sort();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "ttippinyu": 13,
      "-": 61,
      "TCK1997": 5
    }
  },
  {
    "path": "src/main/java/spinbox/commands/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.lists.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.tasks.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.tasks.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SnoozeCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private int dateSize;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date endDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for rescheduling of Task objects, does some input checking."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index index of the task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param components Components of the full command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param fullCommand the full command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InputException can throw error if there is invalid input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public SnoozeCommand(int index, String[] components, String fullCommand) throws InputException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String dateString;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            dateString \u003d fullCommand.split(\"snooze\\\\s\\\\d+\\\\s\")[1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"☹ OOPS!!! Please enter dates.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        com.joestelmach.natty.Parser parser \u003d new com.joestelmach.natty.Parser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        List dates \u003d parser.parse(dateString).get(0).getDates();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateSize \u003d dates.size();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.dateSize \u003d\u003d 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            startDate \u003d (Date) dates.get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (this.dateSize \u003d\u003d 2) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            startDate \u003d (Date) dates.get(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            endDate \u003d (Date) dates.get(1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reschedule the dates of the task."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList TaskList instance."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage Storage instance."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui instance."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws SpinBoxException invalid input or storage error."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) throws SpinBoxException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            List\u003cTask\u003e tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            Task indexedTask \u003d tasks.get(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Boolean isEvent \u003d indexedTask instanceof Event;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Boolean isDeadline \u003d indexedTask instanceof Deadline;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Boolean wrongDateSize \u003d !((isEvent \u0026\u0026 dateSize \u003d\u003d 2) || (isDeadline \u0026\u0026 dateSize \u003d\u003d 1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(isEvent || isDeadline)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new InputException(\"☹ OOPS!!! You can only reschedule Event or Deadline.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wrongDateSize) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new InputException(\"☹ OOPS!!! Please supply correct amount of dates.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isEvent) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                Event snoozeEvent \u003d (Event) indexedTask;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                snoozeEvent.setStartDate(new DateTime(startDate));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                snoozeEvent.setEndDate(new DateTime(endDate));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isDeadline) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Deadline snoozeDeadline \u003d (Deadline) indexedTask;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                snoozeDeadline.setStartDate(new DateTime(startDate));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cString\u003e formattedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedOutput.add(\"Noted. I\u0027ve rescheduled this task:\\n\" + indexedTask.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"Invalid index entered. Type \u0027list\u0027 to see your list.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 3,
      "ttippinyu": 13,
      "-": 73
    }
  },
  {
    "path": "src/main/java/spinbox/commands/UnknownCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.lists.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class UnknownCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) throws SpinBoxException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new InputException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 7,
      "-": 8
    }
  },
  {
    "path": "src/main/java/spinbox/commands/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String page;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String tab;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Constructs by splitting the input and pageTrace and storing it in private variables."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param pageData the page trace from parser."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param content the content of input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws InputException if invalid view command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public ViewCommand(String pageData, String content) throws InputException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String[] pageDataComponents \u003d pageData.split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String[] contentComponents \u003d content.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (contentComponents.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            throw new InputException(\"Please input the page you want to change to.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        // can be page, module, or tab"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        } else if (contentComponents.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            switch (contentComponents[0]) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            // content is page"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            case \"main\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                page \u003d \"main\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            case \"calendar\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                page \u003d \"calendar\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            case \"modules\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                page \u003d \"modules\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            // content is tab"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            case \"tasks\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            case \"files\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            case \"grades\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                // check if on a module page first"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    moduleCode \u003d pageDataComponents[1];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    throw new InputException(\"Please specify module before tab.\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                        + \"E.g. \u0027view : \u003cmoduleCode\u003e \u003ctab\u003e\u0027\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                tab \u003d contentComponents[0];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            // content is module code"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                // check that you are on modules page first"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                if (pageDataComponents[0].equals(\"modules\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    moduleCode \u003d contentComponents[0];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    throw new InputException(\"Please be on modules page first.\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                        + \"E.g. \u0027view : modules \u003cmoduleCode\u003e\u0027\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        // can be \u0027modules \u003cmoduleCode\u003e\u0027 or \u0027\u003cmoduleCode\u003e tab\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        } else if (contentComponents.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            if (contentComponents[0].equals(\"modules\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                page \u003d \"modules\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                moduleCode \u003d contentComponents[1];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else if (contentComponents[1].equals(\"tasks\") || contentComponents[1].equals(\"files\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    || contentComponents[1].equals(\"grades\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                page \u003d \"modules\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                moduleCode \u003d contentComponents[0];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                tab \u003d contentComponents[1];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                throw new InputException(\"Please input correct format for view command.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Replace pageTrace with the new pageTrace."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param modules the modules stored."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param pageTrace the current pageTrace."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param ui the Ui instance."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return the display once been changed.."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws SpinBoxException if page, module, or tab does not exist."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String execute(HashMap\u003cString, Module\u003e modules, ArrayDeque\u003cString\u003e pageTrace, Ui ui)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            throws SpinBoxException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        StringBuilder oldTrace \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        while (pageTrace.size() \u003e 0) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            oldTrace.append(\"/\").append(pageTrace.getLast());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            pageTrace.removeLast();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        // add page"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (page.equals(\"main\") || page.equals(\"calendar\") || page.equals(\"modules\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            pageTrace.addFirst(page);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            throw new InputException(\"Sorry, that page does not exist.\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    + \" Please choose \u0027main\u0027, \u0027calendar\u0027, or \u0027modules\u0027.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        // add module if exists"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (page.equals(\"modules\") \u0026\u0026 moduleCode !\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            // check if module exists"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            if (modules.containsKey(moduleCode)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                pageTrace.addFirst(moduleCode);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                String currentModules \u003d \"\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                for (HashMap.Entry\u003cString, Module\u003e entry : modules.entrySet()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    currentModules \u003d currentModules.concat(entry.getKey() + \"\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                throw new InputException(\"Sorry, that module does not exist. These are the current modules\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    + currentModules);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        // add tab"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (page.equals(\"modules\") \u0026\u0026 tab !\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            if (tab.equals(\"tasks\") || tab.equals(\"files\") || tab.equals(\"grades\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                pageTrace.addFirst(tab);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                throw new InputException(\"Sorry, that tab does not exist.\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                        + \" Please choose \u0027tasks\u0027, \u0027files\u0027, or \u0027grades\u0027.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        StringBuilder newTrace \u003d new StringBuilder();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        ArrayDeque\u003cString\u003e tempPageTrace \u003d pageTrace.clone();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        while (tempPageTrace.size() \u003e 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            newTrace.append(\"/\").append(tempPageTrace.getLast());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            tempPageTrace.removeLast();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return ui.showFormatted(\"Changed from page \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                + oldTrace.toString() + \" to \" + newTrace.toString());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 139
    }
  },
  {
    "path": "src/main/java/spinbox/commands/ViewScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.items.tasks.Schedulable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.lists.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewScheduleCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private DateTime inputDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for viewing schedule for a day."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param components Components of the full command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param fullCommand the full command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InputException if input format is incorrect."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewScheduleCommand(String[] components, String fullCommand) throws InputException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (components.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"Please input one date\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            inputDate \u003d new DateTime(fullCommand.substring(fullCommand.indexOf(\" \") + 1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"Please ensure that you enter the full command.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"view-schedule \u003cMM/DD/YYYY HH:MM\u003e\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Searches for tasks on the same day as the given day."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList TaskList instance."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage Storage instance."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui instance."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        int resultCount \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e formattedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        formattedOutput.add(\"Here are the tasks on the date given:\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        taskList.sort();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cTask\u003e tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            if (task.isSchedulable()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                if (((Schedulable) task).compareEquals(inputDate)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    formattedOutput.add((resultCount++ + 1) + \". \" + task.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 11,
      "-": 44,
      "TCK1997": 5
    }
  },
  {
    "path": "src/main/java/spinbox/exceptions/CorruptedDataException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class CorruptedDataException extends StorageException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public CorruptedDataException(String errMsg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(errMsg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 7
    }
  },
  {
    "path": "src/main/java/spinbox/exceptions/DateFormatException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class DateFormatException extends SpinBoxException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public DateFormatException(String errorMsg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Invalid Date Format\\n\\n\" + errorMsg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 2,
      "-": 5
    }
  },
  {
    "path": "src/main/java/spinbox/exceptions/DateValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class DateValueException extends SpinBoxException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public DateValueException(String errorMsg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Invalid Date Values\\n\" + errorMsg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 2,
      "-": 5
    }
  },
  {
    "path": "src/main/java/spinbox/exceptions/FileCreationException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class FileCreationException extends StorageException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public FileCreationException(String errMsg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(errMsg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 7
    }
  },
  {
    "path": "src/main/java/spinbox/exceptions/InputException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class InputException extends SpinBoxException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public InputException(String errorMsg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Invalid Input\\n\\n\" + errorMsg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 2,
      "-": 5
    }
  },
  {
    "path": "src/main/java/spinbox/exceptions/SpinBoxException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public abstract class SpinBoxException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public SpinBoxException(String errorMsg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 7
    }
  },
  {
    "path": "src/main/java/spinbox/exceptions/StorageException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class StorageException extends SpinBoxException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public StorageException(String errMsg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(\"Storage Error\\n\\n\" + errMsg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 5,
      "ttippinyu": 2
    }
  },
  {
    "path": "src/main/java/spinbox/gui/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Label getDialog() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialog;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Creates SpinBox\u0027s dialog by creating a dialogBox and flipping it horizontally."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param text Text to be added to the dialog box."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param img Profile picture to go with the dialog box."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A dialog box that will be displayed on the gui."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 2,
      "-": 69
    }
  },
  {
    "path": "src/main/java/spinbox/gui/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 2,
      "-": 8
    }
  },
  {
    "path": "src/main/java/spinbox/gui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.SpinBox;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private SpinBox spinBox;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public void setSpinBox(SpinBox d) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        spinBox \u003d d;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing SpinBox\u0027s reply and then appends"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (!spinBox.isShutdown()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            String response \u003d spinBox.getResponse(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            dialogContainer.getChildren().add(DialogBox.getUserDialog(input, userImage));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 9,
      "-": 49
    }
  },
  {
    "path": "src/main/java/spinbox/items/File.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "package spinbox.items;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.CorruptedDataException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public class File extends Item {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String CORRUPTED_FILES_DATA \u003d \"Corrupted files data.\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String DELIMITER_FILTER \u003d \" \\\\| \";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * This constructor is used for recreation of SpinBox.Tasks.FileTask from storage."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param done 1 if task has been mark completed, 0 otherwise."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param fileName the name of the file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public File(int done, String fileName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        super(fileName);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setDone(done \u003d\u003d 1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Parses a string extracted from storage back into a File object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param fromStorage This String is provided directly from the localStorage instance."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws CorruptedDataException Thrown when a user manually edits the .txt file incorrectly."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public File(String fromStorage) throws CorruptedDataException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            String[] components \u003d fromStorage.split(DELIMITER_FILTER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.setDone(Integer.parseInt(components[0]) \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.setName(components[1]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new CorruptedDataException(CORRUPTED_FILES_DATA);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return super.storeString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 22,
      "ttippinyu": 19,
      "TCK1997": 3
    }
  },
  {
    "path": "src/main/java/spinbox/items/GradedComponent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.items;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.CorruptedDataException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class GradedComponent extends Item {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String UNKNOWN_SCORE \u003d \"----\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String DIVIDE_BY_ZERO \u003d \"Maximum possible score should be non-zero\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String TWO_DP \u003d \"#.##\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String CORRUPTED_GRADES_DATA \u003d \"Corrupted grades data.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String STORE_DELIMITER \u003d \" | \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String DELIMITER_FILTER \u003d \" \\\\| \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private double weight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private boolean scoreKnown;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private double weightedScore;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Constructor for a Graded component."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param name Name of graded component as a String, e.g. \"English Essay\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param weight Percentage weight of this graded component as a double e.g. 20, 25.5065 etc"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public GradedComponent(String name, double weight) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.scoreKnown \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.weightedScore \u003d 0.0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Parses a string extracted from storage back into a GradedComponent object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param fromStorage This String is provided directly from the localStorage instance."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws CorruptedDataException Thrown when a user manually edits the .txt file incorrectly."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public GradedComponent(String fromStorage) throws CorruptedDataException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            String[] components \u003d fromStorage.split(DELIMITER_FILTER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.setDone(Integer.parseInt(components[0]) \u003d\u003d 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.setName(components[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.setScoreKnown(Integer.parseInt(components[2]) \u003d\u003d 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.setWeight(Double.parseDouble(components[3]));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.setWeightedScore(Double.parseDouble(components[4]));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new CorruptedDataException(CORRUPTED_GRADES_DATA);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * This is to create a stringified version of a GradedComponent instance for storage purposes."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return String version of GradedComponent, ready for storage."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return super.storeString() + STORE_DELIMITER + (this.isScoreKnown() ? 1 : 0)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            + STORE_DELIMITER + Double.toString(this.weight) + STORE_DELIMITER + Double.toString(this.weightedScore);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Converts a previously entered weighted score into a human-readable String to be displayed to user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * If the score was not previously entered, returns dashes to indicate that it does not exist."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return String containing weighted score to 2 decimal places, if it exists, or the String \u0027----\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String getWeightedScoreAsString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        if (this.isScoreKnown()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            DecimalFormat decimalFormat \u003d new DecimalFormat(TWO_DP);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            return decimalFormat.format(this.weightedScore);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            return UNKNOWN_SCORE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Calculates and updates the weighted percentage scored by a user. Also marks the graded component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * as done, regardless of previous state."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param yourScore This is the score achieved by the user for this graded component. e.g. 22.5"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     *                  It can exceed the maximumScore value as some graded components of certain modules"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     *                  may have bonus marks, allowing a user to potentially score higher than the maximum."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param maximumScore This is the maximum possible score achievable by the user for this graded component,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     *                     excluding bonus marks, if any. e.g. 25"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws InputException This is thrown when the maximum possible score entered for this graded component is zero."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void updateWeightedScore(double yourScore, double maximumScore) throws InputException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        if (this.checkDivideByZero(maximumScore)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new InputException(DIVIDE_BY_ZERO);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.setComplete();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            double score \u003d this.calculateWeightedScore(yourScore, maximumScore);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.setWeightedScore(score);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Takes in an already weighted score (%) and updates the weighted percentage achieved by the user. Also marks"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * the graded component as done, regardless of previous state."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param weightedScore A double that reflects the percentage achieved by the user for that graded component."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void updateWeightedScore(double weightedScore) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setComplete();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setWeightedScore(weightedScore);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private boolean checkDivideByZero(double maximumScore) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return (Double.compare(0.0, maximumScore) \u003d\u003d 0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void setScoreKnownAsTrue() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.scoreKnown \u003d true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void setScoreKnown(boolean scoreKnown) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.scoreKnown \u003d scoreKnown;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private boolean isScoreKnown() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return this.scoreKnown;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void setComplete() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.markDone();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setScoreKnownAsTrue();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void setWeight(double weight) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Returns the relative weight in % of the graded component across 100% of module assessment."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return a double, stating the relative weight of the graded component."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public double getWeight() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void setWeightedScore(double weightedScore) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.weightedScore \u003d weightedScore;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private double calculateWeightedScore(double yourScore, double maximumScore) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return ((yourScore / maximumScore)) * this.weight;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 144,
      "ttippinyu": 2
    }
  },
  {
    "path": "src/main/java/spinbox/items/Item.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.items;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public abstract class Item {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String STORE_DELIMITER \u003d \" | \";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String BRACKET_OPEN \u003d \"[\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String BRACKET_CLOSE \u003d \"] \";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String DONE \u003d \"✓\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String NOT_DONE \u003d \"✗\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private Boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    protected Item(String name) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    protected Item() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    protected void setName(String name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public Boolean getDone() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    protected String getStatusIcon() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return (this.getDone() ? DONE : NOT_DONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return BRACKET_OPEN + this.getStatusIcon() + BRACKET_CLOSE + this.getName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return (this.getDone() ? 1 : 0) + STORE_DELIMITER + this.getName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    protected void setDone(Boolean done) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setDone(true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 52,
      "ttippinyu": 1
    }
  },
  {
    "path": "src/main/java/spinbox/items/tasks/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public class Deadline extends Schedulable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * Constructor for creation of SpinBox.Tasks.Deadline."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @param description the name or description of the deadline."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @param startDate the due date/time of the deadline."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Deadline(String description, DateTime startDate) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * This constructor is used for recreation of SpinBox.Tasks.Deadline from storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param done 1 if task has been marked complete, 0 otherwise."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param description the name or description of the deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param startDate the due date/time of the deadline."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Deadline(int done, String description, DateTime startDate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setDone(done \u003d\u003d 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return \"D | \" + super.storeString() + \" | \" + this.getStartDateString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getStartDateString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return this.startDate.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getEndDateString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.startDate + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Check if given date is equal to deadline date."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param inputDate the date to be compared."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return true if equal, false if not equal."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public boolean compareEquals(DateTime inputDate) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return (this.startDate.compareTo(inputDate) \u003d\u003d 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 33,
      "ttippinyu": 13,
      "TCK1997": 13
    }
  },
  {
    "path": "src/main/java/spinbox/items/tasks/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public class Event extends Schedulable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Constructor for SpinBox.Tasks.Event object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description name of the event."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDate Date object for start DateTime."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endDate Date object for end DateTime."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Event(String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.EVENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * This constructor is used for recreation of SpinBox.Tasks.Deadline from storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param done  1 if task has been marked complete, 0 otherwise."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description the name or description of the event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDate Date object for start DateTime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endDate Date object for end DateTime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Event(int done, String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setDone(done \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.EVENT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"E | \" + super.storeString() + \" | \" + this.getStartDateString() + \" | \" + this.getEndDateString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getStartDateString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.startDate.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getEndDateString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.endDate.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.getStartDateString() + \" to \" + this.getEndDateString() + \")\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Check if date given is within event period."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param inputDate the date to be compared."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if within, false if not."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean compareEquals(DateTime inputDate) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isAfterStartDate \u003d (this.startDate.compareTo(inputDate) \u003c\u003d 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isBeforeEndDate \u003d (this.endDate.compareTo(inputDate) \u003e\u003d 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isAfterStartDate \u0026\u0026 isBeforeEndDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Boolean isOverlapping(DateTime startTime, DateTime endTime) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return startTime.before(endDate) \u0026\u0026 startDate.before(endTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 9,
      "ttippinyu": 4,
      "-": 47,
      "TCK1997": 11
    }
  },
  {
    "path": "src/main/java/spinbox/items/tasks/Exam.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "package spinbox.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public class Exam extends Event {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Exam(String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        super(description, startDate, endDate);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.EXAM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Exam(int done, String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        super(done, description, startDate, endDate);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.EXAM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TCK1997": 15
    }
  },
  {
    "path": "src/main/java/spinbox/items/tasks/Lab.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "package spinbox.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public class Lab extends Event {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Lab(String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        super(description, startDate, endDate);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.LAB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Lab(int done, String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        super(done, description, startDate, endDate);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.LAB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TCK1997": 15
    }
  },
  {
    "path": "src/main/java/spinbox/items/tasks/Lecture.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "package spinbox.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public class Lecture extends Event {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Lecture(String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        super(description, startDate, endDate);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.LECTURE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Lecture(int done, String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        super(done, description, startDate, endDate);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.LECTURE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TCK1997": 15
    }
  },
  {
    "path": "src/main/java/spinbox/items/tasks/NonSchedulable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "package spinbox.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public abstract class NonSchedulable extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * Constructor to initialize default values of any instances of children of Task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @param taskName the name of task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public NonSchedulable(String taskName) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public boolean isSchedulable() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TCK1997": 17
    }
  },
  {
    "path": "src/main/java/spinbox/items/tasks/Schedulable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "package spinbox.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public abstract class Schedulable extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    DateTime startDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    DateTime endDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * Constructor to initialize default values of any instances of children of Task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @param taskName name of the schedulable task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Schedulable(String taskName) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.endDate \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public DateTime getStartDate() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public DateTime getEndDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public void setStartDate(DateTime startDate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public void setEndDate(DateTime endDate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    abstract String getStartDateString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    abstract String getEndDateString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * Compare if input date is equals."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @return default is to return false, only implemented properly in deadline and event task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public boolean compareEquals(DateTime inputDate) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * Compare if time interval overlaps."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @param startTime the start of the interval"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @param endTime the end of the interval"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @return default to return false, only implemented in event task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Boolean isOverlapping(DateTime startTime, DateTime endTime) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public boolean isSchedulable() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TCK1997": 60
    }
  },
  {
    "path": "src/main/java/spinbox/items/tasks/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.Item;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public abstract class Task extends Item {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Constructor to initialize default values of any instances of children of Task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    TaskType taskType \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public Task(String taskName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return super.storeString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public abstract boolean isSchedulable();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 16,
      "ttippinyu": 3,
      "TCK1997": 3
    }
  },
  {
    "path": "src/main/java/spinbox/items/tasks/TaskType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "package spinbox.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    TUTORIAL,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    LAB,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    EXAM,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    LECTURE"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TCK1997": 11
    }
  },
  {
    "path": "src/main/java/spinbox/items/tasks/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public class Todo extends NonSchedulable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public Todo(String taskName) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * This constructor is used for recreation of SpinBox.Tasks.Todo from storage."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @param done  1 if task has been marked complete, 0 otherwise."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @param taskName the name or description of the todo."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public Todo(int done, String taskName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setDone(done \u003d\u003d 1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return \"T | \" + super.storeString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 20,
      "ttippinyu": 1,
      "TCK1997": 8
    }
  },
  {
    "path": "src/main/java/spinbox/items/tasks/Tutorial.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "package spinbox.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public class Tutorial extends Event {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Tutorial(String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        super(description, startDate, endDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.TUTORIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Tutorial(int done, String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        super(done, description, startDate, endDate);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.TUTORIAL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TCK1997": 16
    }
  },
  {
    "path": "src/main/java/spinbox/lists/FileList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.FileCreationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.StorageException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.items.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.items.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public class FileList extends SpinBoxList\u003cFile\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String FILE_LIST_FILE_NAME \u003d \"/files.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public FileList(String parentName) throws FileCreationException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(parentName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        localStorage \u003d new Storage(DIRECTORY_NAME + this.getParentCode() + FILE_LIST_FILE_NAME);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Does not order the files at the moment as not sure how to order yet."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    static class FileComparator implements Comparator\u003cFile\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        public int compare(File a, File b) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Collections.sort(list, new FileComparator());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void loadData() throws StorageException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cString\u003e savedData \u003d localStorage.loadData();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (String datum : savedData) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.add(new File(datum));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void saveData() throws StorageException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cString\u003e dataToSave \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (File file: this.getList()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            dataToSave.add(file.storeString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        localStorage.saveData(dataToSave);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 27,
      "ttippinyu": 22,
      "TCK1997": 4
    }
  },
  {
    "path": "src/main/java/spinbox/lists/GradeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.FileCreationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.StorageException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.GradedComponent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class GradeList extends SpinBoxList\u003cGradedComponent\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String GRADE_LIST_FILE_NAME \u003d \"/grades.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public GradeList(String parentName) throws FileCreationException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(parentName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        localStorage \u003d new Storage(DIRECTORY_NAME + this.getParentCode() + GRADE_LIST_FILE_NAME);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Order the grade components based on descending weight."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    static class GradedComponentComparator implements Comparator\u003cGradedComponent\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        public int compare(GradedComponent a, GradedComponent b) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            return (a.getWeight() \u003e b.getWeight()) ? -1 : 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Collections.sort(list, new GradedComponentComparator());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void loadData() throws StorageException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cString\u003e savedData \u003d localStorage.loadData();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (String datum : savedData) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.add(new GradedComponent(datum));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void saveData() throws StorageException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cString\u003e dataToSave \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (GradedComponent gradedComponent: this.getList()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            dataToSave.add(gradedComponent.storeString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        localStorage.saveData(dataToSave);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 26,
      "ttippinyu": 26
    }
  },
  {
    "path": "src/main/java/spinbox/lists/ModuleContainer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.FileCreationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.StorageException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class ModuleContainer {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String DIRECTORY_NAME \u003d \"SpinBoxData/\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String MODULES_FILE_NAME \u003d \"modules.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private HashMap\u003cString, Module\u003e modules;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private Storage localStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public ModuleContainer() throws FileCreationException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        modules \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        localStorage \u003d new Storage(DIRECTORY_NAME + MODULES_FILE_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public HashMap\u003cString, Module\u003e getModules() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Saves data using the localStorage instance to the relevant .txt file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws StorageException I/O error."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void saveData() throws StorageException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cString\u003e dataToSave \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (Map.Entry\u003cString, Module\u003e entry : modules.entrySet()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            dataToSave.add(entry.getValue().storeString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        localStorage.saveData(dataToSave);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Loads data using the localStorage instance from the relevant .txt file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws StorageException I/O error."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void loadData() throws StorageException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cString\u003e savedData \u003d localStorage.loadData();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (String datum : savedData) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            Module temp \u003d new Module(datum);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.modules.put(temp.getModuleCode(), temp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 52
    }
  },
  {
    "path": "src/main/java/spinbox/lists/SpinBoxList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.StorageException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.items.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public abstract class SpinBoxList\u003cT extends Item\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    static final String DIRECTORY_NAME \u003d \"SpinBoxData/\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    protected List\u003cT\u003e list;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private String parentCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    Storage localStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    SpinBoxList(String parentCode) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.list \u003d new ArrayList\u003cT\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.parentCode \u003d parentCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Constructor if already have list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param list list to be made into SpinBoxList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    SpinBoxList(List\u003cT\u003e list, String parentCode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.parentCode \u003d parentCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Return SpinBoxList as list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public List\u003cT\u003e getList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Gets the module code of the module containing an instance of this list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return the module code as a String."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getParentCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return parentCode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Add element into list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param element to be added."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return added element."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws StorageException saveData fail due to I/O Error."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public T add(T element) throws StorageException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.saveData();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return element;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Remove element at index from list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param index index of element."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return element removed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws IndexOutOfBoundsException if index is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws StorageException saveData fail due to I/O Error."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public T remove(int index) throws IndexOutOfBoundsException, StorageException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.saveData();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return list.remove(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Return element at index."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param index index of element."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return element at index."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public T get(int index) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Replace element at index with element."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param index index of element to be replaced."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param element new element to be inserted."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return new element."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws StorageException saveData fail due to I/O Error."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public T replace(int index, T element) throws StorageException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        list.set(index, element);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.saveData();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return element;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Marks an item as done."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param index index of element to be marked done."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return element marked done."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws StorageException saveData fail due to I/O Error."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public T mark(int index) throws StorageException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        list.get(index).markDone();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.saveData();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Sort the list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public abstract void sort();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * To populate data into this list from the list\u0027s localStorage."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public abstract void loadData() throws StorageException;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * To save current list data into the list\u0027s localStorage."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public abstract void saveData() throws StorageException;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 61,
      "ttippinyu": 60
    }
  },
  {
    "path": "src/main/java/spinbox/lists/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.FileCreationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.StorageException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.items.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.items.tasks.Schedulable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.items.tasks.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.items.tasks.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class TaskList extends SpinBoxList\u003cTask\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String TASK_LIST_FILE_NAME \u003d \"/tasks.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String DELIMITER_FILTER \u003d \" \\\\| \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public TaskList(String parentName) throws FileCreationException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(parentName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        localStorage \u003d new Storage(DIRECTORY_NAME + this.getParentCode() + TASK_LIST_FILE_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    static class StartDateComparator implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        public int compare(Task a, Task b) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            DateTime startDateA \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            DateTime startDateB \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            if (a.isSchedulable()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                startDateA \u003d ((Schedulable)a).getStartDate();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            if (b.isSchedulable()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                startDateB \u003d ((Schedulable)b).getStartDate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            if (startDateA \u003d\u003d null \u0026\u0026 startDateB \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else if (startDateA \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else if (startDateB \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                return startDateA.compareTo(startDateB);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Collections.sort(list, new StartDateComparator());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void loadData() throws StorageException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        DateTime start;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        DateTime end;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cString\u003e savedData \u003d localStorage.loadData();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (String datum : savedData) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            String[] arguments \u003d datum.split(DELIMITER_FILTER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            switch (arguments[0]) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                this.add(new Todo(Integer.parseInt(arguments[1]), arguments[2]));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                start \u003d new DateTime(arguments[3]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                this.add(new Deadline(Integer.parseInt(arguments[1]), arguments[2], start));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                start \u003d new DateTime(arguments[3]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                end \u003d new DateTime(arguments[4]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                this.add(new Event(Integer.parseInt(arguments[1]), arguments[2], start, end));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void saveData() throws StorageException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cString\u003e dataToSave \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (Task task: this.getList()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            dataToSave.add(task.storeString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        localStorage.saveData(dataToSave);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 46,
      "ttippinyu": 34,
      "TCK1997": 8
    }
  },
  {
    "path": "src/test/java/DateTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DateTimeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public void correctDateInputShouldCreateReusableString() throws SpinBoxException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test \u003d new DateTime(\"05/02/2020 12:00\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"05/02/2020 12:00\", test.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test2 \u003d new DateTime(test.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"05/02/2020 12:00\", test2.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test3 \u003d new DateTime(\"06/12/2300 5pm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"06/12/2300 17:00\", test3.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test4 \u003d new DateTime(test3.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"06/12/2300 17:00\", test4.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public void parseDifferentDateFormattedString() throws SpinBoxException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test \u003d new DateTime(\"the day before 12/16/2019 4pm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"12/15/2019 16:00\", test.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test2 \u003d new DateTime(\"16 December 1800 8am to 15th January 2019 9pm\", 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test3 \u003d new DateTime(\"16 December 1800 8am to 15th January 2019 9pm\",1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"12/16/1800 08:00\", test2.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"01/15/2019 21:00\", test3.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime santaVacationStartDate \u003d new DateTime(\"from christmas 2019 6am to christmas eve 2020 23:59\", 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime santaVacationEndDate \u003d new DateTime(\"from christmas 2019 6am to christmas eve 2020 23:59\", 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"12/25/2019 06:00\", santaVacationStartDate.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"12/24/2020 23:59\", santaVacationEndDate.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 4,
      "-": 7,
      "TCK1997": 30
    }
  },
  {
    "path": "src/test/java/FileTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.CorruptedDataException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.items.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.items.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class FileTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    void testToString_createAndMarkDoneNewTask() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Item item \u003d new File(0, \"file1\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"[✗] file1\", item.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        item.markDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"[✓] file1\", item.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    void testStoreString_createAndMarkDoneNewTask() throws CorruptedDataException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Item item \u003d new File(\"0 | file1\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(\"0 | file1\", item.storeString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        item.markDone();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(\"1 | file1\", item.storeString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 6,
      "ttippinyu": 12,
      "TCK1997": 6
    }
  },
  {
    "path": "src/test/java/GradedComponentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.CorruptedDataException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.GradedComponent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class GradedComponentTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void gradeCreation_variousGradedComponents_successfulCreationAndWorkingGetters() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeOne \u003d new GradedComponent(\"Essay\", 20);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeight(), 20);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.storeString(), \"0 | Essay | 0 | 20.0 | 0.0\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeightedScoreAsString(), \"----\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeTwo \u003d new GradedComponent(\"Report\", 26.7);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.getWeight(), 26.7);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.storeString(), \"0 | Report | 0 | 26.7 | 0.0\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.getWeightedScoreAsString(), \"----\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeThree \u003d new GradedComponent(\"Assignment 4\", 3.7654321);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeThree.getWeight(), 3.7654321);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeThree.storeString(), \"0 | Assignment 4 | 0 | 3.7654321 | 0.0\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeThree.getWeightedScoreAsString(), \"----\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void gradeUpdatePreWeighted_gradedEssayScored_successfulUpdateAndMarkedDone() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeOne \u003d new GradedComponent(\"Essay\", 20);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testGradeOne.updateWeightedScore(15);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeight(), 20);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.storeString(), \"1 | Essay | 1 | 20.0 | 15.0\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeightedScoreAsString(), \"15\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeTwo \u003d new GradedComponent(\"Essay\", 0.657);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testGradeTwo.updateWeightedScore(0.700);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.getWeight(), 0.657);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.storeString(), \"1 | Essay | 1 | 0.657 | 0.7\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.getWeightedScoreAsString(), \"0.7\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void gradeUpdateUnweighted_gradedEssayScored_successfulUpdateAndMarkedDone() throws InputException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeOne \u003d new GradedComponent(\"Essay\", 20);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testGradeOne.updateWeightedScore(15, 30);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeight(), 20);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.storeString(), \"1 | Essay | 1 | 20.0 | 10.0\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeightedScoreAsString(), \"10\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeTwo \u003d new GradedComponent(\"Essay\", 0.657);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testGradeTwo.updateWeightedScore(12, 15);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.getWeight(), 0.657);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.getWeightedScoreAsString(), \"0.53\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void gradeUpdateUnweighted_gradedEssayScoredZeroMaximumScore_ExceptionThrown() throws InputException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeOne \u003d new GradedComponent(\"Essay\", 20);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        assertThrows(SpinBoxException.class, () -\u003e testGradeOne.updateWeightedScore(15, 0));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeight(), 20);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.storeString(), \"0 | Essay | 0 | 20.0 | 0.0\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeightedScoreAsString(), \"----\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void storeStringCreation_gradedEssayScored_expectedString() throws InputException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeOne \u003d new GradedComponent(\"Essay\", 20);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testGradeOne.updateWeightedScore(15, 30);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.storeString(), \"1 | Essay | 1 | 20.0 | 10.0\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void storeStringRecreation_gradedEssayScored_expectedObjectAfterReconstruction()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throws InputException, CorruptedDataException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeOne \u003d new GradedComponent(\"Essay\", 20);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testGradeOne.updateWeightedScore(15, 30);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.storeString(), \"1 | Essay | 1 | 20.0 | 10.0\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeOneRecreated \u003d new GradedComponent(\"1 | Essay | 1 | 20.0 | 10.0\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOneRecreated.getWeight(), 20);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOneRecreated.storeString(), \"1 | Essay | 1 | 20.0 | 10.0\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOneRecreated.getWeightedScoreAsString(), \"10\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void getWeight_gradedQuizNotScored_expectedWeight() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeOne \u003d new GradedComponent(\"Quiz\", 8);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeight(), 8);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 95,
      "ttippinyu": 4
    }
  },
  {
    "path": "src/test/java/ModuleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.Module;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.FileCreationException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.StorageException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.items.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.items.GradedComponent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.items.tasks.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.lists.FileList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.lists.ModuleContainer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void moduleCreation_variousModules_successfulCreationWithWorkingGetters() throws FileCreationException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ModuleContainer testContainer \u003d new ModuleContainer();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Module testModuleOne \u003d new Module(\"CG1111\", \"Engineering Principles \u0026 Practice I\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleOne.getModuleCode(), \"CG1111\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleOne.getModuleName(), \"Engineering Principles \u0026 Practice I\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleOne.storeString(), \"CG1111 | Engineering Principles \u0026 Practice I\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Module testModuleTwo \u003d new Module(\"CS1231\", \"Discrete Structures\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleTwo.getModuleCode(), \"CS1231\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleTwo.getModuleName(), \"Discrete Structures\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleTwo.storeString(), \"CS1231 | Discrete Structures\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Module testModuleThree \u003d new Module(\"CG1112\", \"Engineering Principles \u0026 Practice II\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleThree.getModuleCode(), \"CG1112\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleThree.getModuleName(), \"Engineering Principles \u0026 Practice II\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleThree.storeString(), \"CG1112 | Engineering Principles \u0026 Practice II\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void storageStringRecreation_oneModule_expectedRecreatedObject() throws StorageException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ModuleContainer testContainer \u003d new ModuleContainer();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Module testModuleOne \u003d new Module(\"CG1111\", \"Engineering Principles \u0026 Practice I\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleOne.getModuleCode(), \"CG1111\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleOne.getModuleName(), \"Engineering Principles \u0026 Practice I\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Module testModuleOneRecreated \u003d new Module(testModuleOne.storeString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleOneRecreated.getModuleCode(), \"CG1111\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleOneRecreated.getModuleName(), \"Engineering Principles \u0026 Practice I\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleOneRecreated.storeString(), \"CG1111 | Engineering Principles \u0026 Practice I\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void addToStorage_oneModule_expectedFilesCreated() throws StorageException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ModuleContainer testContainer \u003d new ModuleContainer();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Module testModuleOne \u003d new Module(\"CG1111\", \"Engineering Principles \u0026 Practice I\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testModuleOne.getFiles().add(new File(0, \"testFile1\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testModuleOne.getGrades().add(new GradedComponent(\"Essay\", 20));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testModuleOne.getTasks().add(new Todo(\"test todo\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void addToStorage_oneModule_expectedFilesLoaded() throws StorageException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ModuleContainer testContainer \u003d new ModuleContainer();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Module testModuleOne \u003d new Module(\"CG1113\", \"Engineering Principles \u0026 Practice III\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testModuleOne.getFiles().add(new File(0, \"testFile1\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testModuleOne.getGrades().add(new GradedComponent(\"Essay\", 20));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testModuleOne.getTasks().add(new Todo(\"test todo\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testModuleOne.getFiles().getList().clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testModuleOne.getGrades().getList().clear();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testModuleOne.getTasks().getList().clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testModuleOne.getTasks().loadData();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testModuleOne.getGrades().loadData();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testModuleOne.getFiles().loadData();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleOne.getFiles().getList().remove(0).storeString(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                new File(0, \"testFile1\").storeString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleOne.getGrades().getList().remove(0).storeString(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                new GradedComponent(\"Essay\", 20).storeString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleOne.getTasks().getList().remove(0).storeString(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                new Todo(\"test todo\").storeString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 89
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    void testCommandBuilder_prependInformationToUserInput_fullUserInputAttained() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        Stack\u003cString\u003e inputInformation \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        inputInformation.push(\"modules\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        inputInformation.push(\"CG1111\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        inputInformation.push(\"files\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        StringBuilder fullUserInput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        fullUserInput.append(\"1\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        Stack\u003cString\u003e cloneLog \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        cloneLog.addAll(inputInformation);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        while (!cloneLog.empty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            String individualInput \u003d cloneLog.peek();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            fullUserInput.insert(0, \" \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            fullUserInput.insert(0, individualInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            cloneLog.pop();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        fullUserInput.insert(0, \" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        fullUserInput.insert(0, \"delete\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        assertEquals(\"delete modules CG1111 files 1\", fullUserInput.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lackmoo": 28
    }
  },
  {
    "path": "src/test/java/ReminderCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.lists.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.commands.ReminderCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ReminderCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//    public void reminderCommand_showReminders_ShouldShowPastRemindersWithOverdueTag() throws SpinBoxException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//        TaskList testTaskList \u003d new TaskList(\"CS1010\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//        long overdueDate \u003d 656740800000L;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//        testTaskList.add(new Deadline(\"overdue\", new DateTime(new Date(overdueDate))));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//        Storage testStorage \u003d new Storage(\"data/dukeTest.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//        ReminderCommand command \u003d new ReminderCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//        assertEquals(command.execute(testTaskList, testStorage, testUi).contains(\"(Overdue)\"), true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//    public void reminderCommand_CompleteTaskAndShowReminders_ShouldNotShowDoneReminders() throws SpinBoxException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//        TaskList testTaskList \u003d new TaskList(\"CS1010\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//        long overdueDate \u003d 656740800000L;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//        testTaskList.add(new Deadline(\"overdue\", new DateTime(new Date(overdueDate))));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//        testTaskList.mark(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//        Storage testStorage \u003d new Storage(\"data/dukeTest.txt\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//        ReminderCommand command \u003d new ReminderCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//        assertNotEquals(command.execute(testTaskList, testStorage, testUi).contains(\"(Overdue)\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//                true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//    public void reminderCommand_showReminders_ShouldShowDistantFutureRemindersWithoutTag() throws SpinBoxException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//        TaskList testTaskList \u003d new TaskList(\"CS1010\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//        long distantFutureDate \u003d 1893427200000L;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//        testTaskList.add(new Deadline(\"future\", new DateTime(new Date(distantFutureDate))));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//        Storage testStorage \u003d new Storage(\"data/dukeTest.txt\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//        ReminderCommand command \u003d new ReminderCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//        assertNotEquals(command.execute(testTaskList, testStorage, testUi).contains(\"(Overdue)\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//                true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 42,
      "ttippinyu": 7,
      "-": 7
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.FileCreationException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.StorageException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void createDataAndReadData_varietyOfStrings_successfulCreatesAndReads() throws StorageException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        File file \u003d new File(\"SpinBox/storageTest.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ArrayList\u003cString\u003e testStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testStrings.add(\"Houston we have a problem\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testStrings.add(\"Houston we have a merge conflict\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testStrings.add(\"Houston we have a pull request\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testStrings.add(\"Houston we have a user story\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testStrings.add(\"Houston pls\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Storage test \u003d new Storage(\"SpinBoxData/storageTest.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        test.saveData(testStrings);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cString\u003e loadedStrings \u003d test.loadData();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (int i \u003d 0; i \u003c loadedStrings.size(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            assertEquals(loadedStrings.get(i), testStrings.get(i));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 19,
      "-": 6,
      "TCK1997": 10
    }
  },
  {
    "path": "src/test/java/ViewScheduleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.tasks.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.tasks.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.items.tasks.Schedulable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.items.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewScheduleTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    void testDateCheckDeadline() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime inputDate \u003d new DateTime(new Date(2019, 9,20));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        Schedulable task \u003d new Deadline(\"Test\", inputDate);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertTrue(task.compareEquals(inputDate));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime inputDateTwo \u003d new DateTime(new Date(2019, 9,21));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertFalse(task.compareEquals(inputDateTwo));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void testDateCheckEvent() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime inputDate \u003d new DateTime(new Date(2019, 9,20));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime startDate \u003d new DateTime(new Date(2019, 9,19));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime endDate \u003d new DateTime(new Date(2019, 9,21));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        Schedulable task \u003d new Event(\"Test\", startDate, endDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertTrue(task.compareEquals(inputDate));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertTrue(task.compareEquals(startDate));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertTrue(task.compareEquals(endDate));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime inputDateTwo \u003d new DateTime(new Date(2019, 9,23));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertFalse(task.compareEquals(inputDateTwo));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 4,
      "-": 17,
      "TCK1997": 15
    }
  }
]
