[
  {
    "path": "src/main/java/duke/DateTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import com.joestelmach.natty.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class DateTime implements Comparable\u003cDateTime\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date dateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for simple dateTime object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateTime A Date Object with date and time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public DateTime(Date dateTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public DateTime(String dateTime) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.dateTime \u003d parser.parse(dateTime).get(0).getDates().get(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public DateTime(String dateTime, int index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.dateTime \u003d parser.parse(dateTime).get(0).getDates().get(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDateTime() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * Converts the Date object back to the string version in the format of MM/dd/yyyy HH:mm"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * This can be reused to create an identical dateTime object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String equivalent of Date object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"MM/dd/yyyy HH:mm\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String dateString \u003d dateFormat.format(dateTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return dateString;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public boolean before(DateTime dateTime) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return this.dateTime.before(dateTime.getDateTime());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public boolean equals(DateTime dateTime) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return this.dateTime.equals(dateTime.getDateTime());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public boolean after(DateTime dateTime) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return this.dateTime.after(dateTime.getDateTime());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(DateTime dateTimeTwo) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.getDateTime().compareTo(dateTimeTwo.getDateTime());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "TCK1997": 27
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.lists.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private TaskList files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui userInterface;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private Storage dukeData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private Storage fileData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean shutdown \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Full Constructor for CLI/GUI version of Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param dukeFilePath A String representing path to the storage file on hard disk for tasks data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param filesFilePath A string representing path to the storage file on hard disk for files data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public Duke(String dukeFilePath, String filesFilePath, boolean cliMode) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        userInterface \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            dukeData \u003d new Storage(dukeFilePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks \u003d new TaskList(dukeData.loadData());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            fileData \u003d new Storage(filesFilePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            files \u003d new TaskList(fileData.loadData());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (cliMode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                userInterface.print(userInterface.showFormatted(e.getMessage()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            files \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            if (cliMode) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                this.startDukeCli();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Default Constructor, Entry point into this java program, for CLI version."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this(\"data/duke.txt\", \"data/file.txt\", false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Entry point into this java program, for CLI version."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        new Duke(\"data/duke.txt\", \"data/file.txt\", true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * CLI mode - the String returned by getResponse is to be printed to the console."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void startDukeCli() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        userInterface.print(userInterface.showWelcome());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!this.isShutdown()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            String input \u003d userInterface.readInput();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            userInterface.print(getResponse(input));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to interact with Duke."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input String input from GUI/CLI layer."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return output response String to be returned to GUI/CLI."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            String response;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            if (!command.isFileCommand()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                response \u003d command.execute(tasks, dukeData, userInterface);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                response \u003d command.execute(files, fileData, userInterface);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            this.setShutdown(command.isExit());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return userInterface.showFormatted(e.getMessage());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setShutdown(boolean shutdown) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        this.shutdown \u003d shutdown;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShutdown() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return shutdown;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 18,
      "-": 76
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import duke.commands.MultipleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.UnknownCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.ReminderCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.ViewScheduleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.commands.FileCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.SnoozeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.SetCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.FindFreeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.InputException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses an input string into a workable command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input user typed in this string."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Command that can executed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException Storage errors or input errors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] components \u003d input.split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (components[0]) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                command \u003d new DoneCommand(Integer.parseInt(components[1]) - 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                command \u003d new ListCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"remind\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                command \u003d new ReminderCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                command \u003d new DeleteCommand(Integer.parseInt(components[1]) - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"delete-multiple\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"done-multiple\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                command \u003d new MultipleCommand(components[0], components[1], components.length);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                command \u003d new FindCommand(components, input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"view-schedule\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                command \u003d new ViewScheduleCommand(components, input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"do-within\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"do-after\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"tentative\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"fixed\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"recurring\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                command \u003d new AddCommand(components, input);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"set-tentative\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                command \u003d new SetCommand(components, input);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"snooze\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                command \u003d new SnoozeCommand(Integer.parseInt(components[1]) - 1, components, input);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"free\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                command \u003d new FindFreeCommand(components[1]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            case \"file\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                command \u003d new FileCommand(components[1], input);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                command \u003d new UnknownCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"Invalid index entered. Type \u0027list\u0027 to see your list.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            throw new InputException(\"Please provide an index or action. Eg. \u0027done 5\u0027, \u0027delete 3\u0027, \u0027file view\u0027\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "ttippinyu": 6,
      "lackmoo": 6,
      "-": 91
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.StorageException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.After;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.FileTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Fixed;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Recurring;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Tentative;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Within;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Vector;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private File dukeFile;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * This constructor creates the file if needed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param fileLocation relative path of the text file to store data in."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Storage(String fileLocation) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            dukeFile \u003d new File(fileLocation);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            if (dukeFile.getParentFile().mkdir()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                dukeFile.createNewFile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageException(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method retrieves data from the text file, and constructs objects to insert back into the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return tasks"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cTask\u003e loadData() throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Vector\u003cTask\u003e tasks \u003d new Vector\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            DateTime start;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            DateTime end;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            BufferedReader inputStream \u003d new BufferedReader(new FileReader(dukeFile));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            while (true) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                String currentLine \u003d inputStream.readLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                if (currentLine \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                    String[] arguments \u003d currentLine.split(\" \\\\| \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                    switch (arguments[0]) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                    case \"T\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                        tasks.addElement(new Todo(Integer.parseInt(arguments[1]), arguments[2]));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                    case \"D\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                        start \u003d new DateTime(arguments[3]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                        tasks.addElement(new Deadline(Integer.parseInt(arguments[1]), arguments[2], start));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                    case \"F\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                        tasks.addElement(new Fixed(Integer.parseInt(arguments[1]), arguments[2], arguments[3]));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                    case \"A\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                        tasks.addElement(new After(Integer.parseInt(arguments[1]), arguments[2], arguments[3]));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                    case \"W\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                        start \u003d new DateTime(arguments[3]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                        end \u003d new DateTime(arguments[4]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                        tasks.addElement(new Within(Integer.parseInt(arguments[1]), arguments[2], start, end));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                    case \"TE\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                        start \u003d new DateTime(arguments[3]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                        end \u003d new DateTime(arguments[4]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                        tasks.addElement(new Tentative(Integer.parseInt(arguments[1]), arguments[2], start, end));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                    case \"R\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                        start \u003d new DateTime(arguments[3]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                        end \u003d new DateTime(arguments[4]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                        tasks.addElement(new Recurring(arguments[2], start, end, Long.parseLong(arguments[5]),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                                Long.parseLong(arguments[6])));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    case \"FILE\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                        tasks.addElement(new FileTask(Integer.parseInt(arguments[1]), arguments[2]));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                        start \u003d new DateTime(arguments[3]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                        end \u003d new DateTime(arguments[4]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                        tasks.addElement(new Event(Integer.parseInt(arguments[1]), arguments[2], start, end));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            inputStream.close();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageException(e.getMessage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method takes in a vector and calls each task\u0027s storeString method to store its data in the correct format."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks A vector of tasks currently in the program."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setData(List\u003cTask\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            BufferedWriter outputStream \u003d new BufferedWriter(new FileWriter(dukeFile));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                outputStream.write(task.storeString());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                outputStream.newLine();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            outputStream.close();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageException(e.getMessage());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 10,
      "ttippinyu": 3,
      "-": 99,
      "TCK1997": 12
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.InputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.After;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Recurring;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Fixed;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Tentative;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Within;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.lists.TaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for creation of Task objects, does some input checking."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param components Components of the full command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param fullCommand the full command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException Can throw from invalid input or storage errors"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(String[] components, String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.type \u003d components[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (components.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"☹ OOPS!!! The description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (this.type.equals(\"deadline\") \u0026\u0026 components[1].equals(\"/by\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (this.type.equals(\"do-after\") \u0026\u0026 components[1].equals(\"/after\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"☹ OOPS!!! The description of a do-after event or time cannot be empty.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (this.type.equals(\"event\") \u0026\u0026 components[1].equals(\"/by\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"☹ OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (this.type.equals(\"fixed\") \u0026\u0026 components[1].equals(\"/needs\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"☹ OOPS!!! The description of a fixed duration task cannot be empty.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (this.type.equals(\"within\") \u0026\u0026 components[1].equals(\"/between\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"☹ OOPS!!! The description of a within task cannot be empty.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (this.type.equals(\"recurring\") \u0026\u0026 components[1].equals(\"/at\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"☹ OOPS!!! The description of a recurring task cannot be empty.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Add Task to task list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList TaskList instance."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage Storage instance."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui instance."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException invalid input or storage error."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e formattedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Task added;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        List dates;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String fixedDuration;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String doAfter;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime start;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime end;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (this.type) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                added \u003d taskList.add(new Todo(fullCommand.replaceFirst(\"todo \", \"\")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                formattedOutput.add(\"Got it. I\u0027ve added this todo:\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                formattedOutput.add(added.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                start \u003d new DateTime(fullCommand.split(\"/by \")[1]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                added \u003d taskList.add(new Deadline(fullCommand.substring(0, fullCommand.lastIndexOf(\" /by\"))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                        .replaceFirst(\"deadline \", \"\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                        start));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                formattedOutput.add(\"Got it. I\u0027ve added this deadline:\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                formattedOutput.add(added.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"fixed\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                fixedDuration \u003d fullCommand.split(\"/needs \")[1];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                added \u003d taskList.add(new Fixed(fullCommand.substring(0, fullCommand.lastIndexOf(\" /needs\"))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                        .replaceFirst(\"fixed \", \"\"),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                        fixedDuration));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                formattedOutput.add(\"Got it. I\u0027ve added this fixed duration task:\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                formattedOutput.add(added.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"do-after\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                doAfter \u003d fullCommand.split(\"/after \")[1];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                added \u003d taskList.add(new After(fullCommand.substring(0, fullCommand.lastIndexOf(\" /after\"))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                        .replaceFirst(\"do-after \", \"\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                        doAfter));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                formattedOutput.add(\"Got it. I\u0027ve added this do-after task:\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                formattedOutput.add(added.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"do-within\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                start \u003d new DateTime(fullCommand.split(\"/between \")[1], 0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                end \u003d new DateTime(fullCommand.split(\"/between \")[1], 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                added \u003d taskList.add(new Within(fullCommand.substring(0, fullCommand.lastIndexOf(\" /between\"))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                        .replaceFirst(\"do-within \", \"\"),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                        start, end));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                formattedOutput.add(\"Got it. I\u0027ve added this do-within task:\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                formattedOutput.add(added.toString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"tentative\":"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                start \u003d new DateTime(fullCommand.split(\"/around \")[1], 0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                end \u003d new DateTime(fullCommand.split(\"/around \")[1], 1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                added \u003d taskList.add(new Tentative(fullCommand.substring(0, fullCommand.lastIndexOf(\" /around\"))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                        .replaceFirst(\"tentative \", \"\"),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                        start, end));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                formattedOutput.add(\"Got it. I\u0027ve added this tentative event:\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                formattedOutput.add(added.toString());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"recurring\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                String[] partials \u003d fullCommand.split(\"/every \");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                start \u003d new DateTime(partials[0].split(\"/at \")[1], 0);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                end \u003d new DateTime(partials[0].split(\"/at \")[1], 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                String[] frequencies \u003d partials[1].split(\":\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                long minutes \u003d (Long.parseLong(frequencies[0]) * 60 * 24)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                        + (Long.parseLong(frequencies[1]) * 60)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                        + Long.parseLong(frequencies[2]);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                added \u003d taskList.add(new Recurring(fullCommand.substring(0, fullCommand.lastIndexOf(\" /at\"))"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                        .replaceFirst(\"recurring \", \"\"),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                        start, end, minutes));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                formattedOutput.add(\"Got it. I\u0027ve added this recurring task:\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                formattedOutput.add(added.toString());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                formattedOutput.add(\"Use the done command to advance to the next instance of the task.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                start \u003d new DateTime(fullCommand.split(\"/at \")[1], 0);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                end \u003d new DateTime(fullCommand.split(\"/at \")[1], 1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                List\u003cTask\u003e tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    Task currentTask \u003d tasks.get(i);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (currentTask.isOverlapping(start, end)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new InputException(\"Time conflicting with:\\n\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                                + \"    \" + (i + 1) + \".\" + currentTask.toString() + \"\\n\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                                + \"Please choose another time interval.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                added \u003d taskList.add(new Event(fullCommand.substring(0, fullCommand.lastIndexOf(\" /at\"))"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                        .replaceFirst(\"event \", \"\"),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                        start, end));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                formattedOutput.add(\"Got it. I\u0027ve added this event:\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                formattedOutput.add(added.toString());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"Please ensure that you enter the full command.\\n\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Duke.Tasks.Deadline: deadline \u003ctask name\u003e /by \u003cMM/DD/YYYY HH:MM\u003e\\n\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Duke.Tasks.Do-After: do-after \u003ctask name\u003e /after \u003cdo-after event or time\u003e\\n\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Duke.Tasks.Event: event \u003ctask name\u003e /at \u003cstart as MM/DD/YYYY HH:MM\u003e \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"to \u003cend as MM/DD/YYYY HH:MM\u003e\\n\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Duke.Tasks.Fixed: fixed \u003ctask name\u003e /needs \u003cfixed task duration\u003e\\n\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Duke.Tasks.Tentative: tentative \u003ctask name\u003e /around \u003cstart as MM/DD/YYYY HH:MM\u003e \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"to \u003cend as MM/DD/YYYY HH:MM\u003e\\n\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Duke.Tasks.Within: do-within \u003ctask name\u003e /between \u003cstart as MM/DD/YYYY HH:MM\u003e \""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"and \u003cend as MM/DD/YYYY HH:MM\u003e\\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Duke.Tasks.Recurring: recurring \u003ctask name\u003e /at \u003cstart as MM/DD/YYYY HH:MM\u003e \""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"to \u003cend as MM/DD/YYYY HH:MM\u003e /every DD:HH:MM\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        formattedOutput.add(\"You currently have \" + taskList.getList().size()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                + ((taskList.getList().size() \u003d\u003d 1) ? \" task in the list.\" : \" tasks in the list.\"));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        storage.setData(taskList.getList());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        taskList.sort();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 9,
      "ttippinyu": 14,
      "-": 149,
      "TCK1997": 14
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.lists.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private boolean isFileCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String execute(TaskList taskList, Storage storage, Ui ui) throws DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Check whether it is file command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return whether it is file command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public boolean isFileCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return isFileCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setExit(boolean exit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        isExit \u003d exit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Set the isFileCommand value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param fileCommand the value of isFileCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public void setFileCommand(boolean fileCommand) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        isFileCommand \u003d fileCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 18,
      "-": 19
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.InputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.lists.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the relevant task in the task list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList TaskList instance."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage Storage instance."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui instance."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException Invalid index or storage error."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cString\u003e formattedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            List\u003cTask\u003e tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            Task removed \u003d taskList.remove(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.setData(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedOutput.add(\"Noted. I\u0027ve removed this task:\\n\" + removed.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedOutput.add(\"You currently have \" + tasks.size()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    + ((tasks.size() \u003d\u003d 1) ? \" task in the list.\" : \" tasks in the list.\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            taskList.sort();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"Invalid index entered. Type \u0027list\u0027 to see your list.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "ttippinyu": 5,
      "-": 39
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteMultipleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.exceptions.InputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.lists.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.items.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class DeleteMultipleCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String indexes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private int inputSize;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public DeleteMultipleCommand(String indexes, int inputSize) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.indexes \u003d indexes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.inputSize \u003d inputSize;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Deletes multiple relevant tasks in the task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param taskList TaskList instance."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param storage Storage instance."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param ui Ui instance."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws DukeException Invalid index or storage error."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (inputSize \u003e 2) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            throw new InputException(\"Ensure that the indexes are separated by \u0027,\u0027 without any spacing. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    + \"E.g. delete-multiple 2,3,4\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            String[] splitIndexes \u003d indexes.split(\",\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            if (splitIndexes.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                throw new InputException(\"To delete a single task, provide the input in this format instead: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                        + \"delete \u003cone index in integer form\u003e\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            List\u003cString\u003e formattedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            List\u003cInteger\u003e finalIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            for (int i \u003d 0; i \u003c splitIndexes.length; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                String convert \u003d splitIndexes[i];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                finalIndexes.add(Integer.parseInt(convert) - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            Collections.sort(finalIndexes, Collections.reverseOrder());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            for (int i \u003d 0; i \u003c finalIndexes.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                Task removed \u003d taskList.remove(finalIndexes.get(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    formattedOutput.add(\"Noted. I\u0027ve removed these tasks:\\n\" + removed.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    formattedOutput.add(removed.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            List\u003cTask\u003e tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            storage.setData(tasks);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            formattedOutput.add(\"You currently have \" + tasks.size()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    + ((tasks.size() \u003d\u003d 1) ? \" task in the list.\" : \" tasks in the list.\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            taskList.sort();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            throw new InputException(\"Invalid index entered. Type \u0027list\u0027 to see your list.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            throw new InputException(\"Invalid index entered. Please ensure the index is in integer form. \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    + \"E.g. delete-multiple 2,5\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 70
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.InputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.lists.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Mark task in task list as done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList TaskList instance."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage Storage instance."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui instance."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException invalid index or storage error."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cString\u003e formattedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            Task completed \u003d taskList.mark(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            taskList.remove(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedOutput.add(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedOutput.add(completed.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            formattedOutput.add(\"This task has been removed from the list.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            storage.setData(taskList.getList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            List\u003cTask\u003e tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            formattedOutput.add(\"You currently have \" + tasks.size()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    + ((tasks.size() \u003d\u003d 1) ? \" task in the list.\" : \" tasks in the list.\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"Invalid index entered. Type \u0027list\u0027 to see your list.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "ttippinyu": 5,
      "lackmoo": 3,
      "-": 36
    }
  },
  {
    "path": "src/main/java/duke/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.lists.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setExit(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.showGoodbye();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/duke/commands/FileCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.exceptions.InputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.lists.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.FileTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class FileCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String action;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Constructor for file command, either adding, marking as downloaded, or viewing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param action the type of file action, either \"add\", \"done\", or \"view\"."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param fullCommand input user typed in this string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws InputException input errors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public FileCommand(String action, String fullCommand) throws InputException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String[] components \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            this.fileName \u003d fullCommand.replaceFirst(\"file add \", \"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                this.index \u003d Integer.parseInt(components[2]) - 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                throw new InputException(\"Please provide an index. Eg. \u0027file done 5\u0027 or \u0027file delete 3\u0027\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            throw new InputException(\"Please specify the type of file command.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    + \"file add \u003cfilename\u003e, file done \u003cindex\u003e, or file view.\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (action.equals(\"add\") \u0026\u0026 fileName.equals(\"\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            throw new InputException(\"☹ OOPS!!! The filename cannot be empty.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.setFileCommand(true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Either add the file into fileTaskList, mark a file as downloaded, or view all the files."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param fileTaskList fileTaskList instance."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param fileStorage fileStorage instance."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param ui Ui instance."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws DukeException invalid index or storage error."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String execute(TaskList fileTaskList, Storage fileStorage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cString\u003e formattedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cTask\u003e files;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            Task added \u003d fileTaskList.add(new FileTask(fileName));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            formattedOutput.add(\"Got it. I\u0027ve added this file:\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            formattedOutput.add(added.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                Task downloaded \u003d fileTaskList.mark(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                fileStorage.setData(fileTaskList.getList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                formattedOutput.add(\"Nice! I\u0027ve marked this file as downloaded:\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                formattedOutput.add(downloaded.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                throw new InputException(\"Invalid index entered. Type \u0027file view\u0027 to see your files.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                Task removed \u003d fileTaskList.remove(index);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                files \u003d fileTaskList.getList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                fileStorage.setData(fileTaskList.getList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                formattedOutput.add(\"Noted. I\u0027ve removed this file:\\n\" + removed.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                formattedOutput.add(\"You currently have \" + files.size()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                        + ((files.size() \u003d\u003d 1) ? \" task in the list.\" : \" tasks in the list.\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                throw new InputException(\"Invalid index entered. Type \u0027file view\u0027 to see your files.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            files \u003d fileTaskList.getList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            formattedOutput.add(\"Here are the files in your list:\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            for (int i \u003d 0; i \u003c fileTaskList.getList().size(); i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                formattedOutput.add(Integer.toString(i + 1) + \". \" + files.get(i).toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        fileStorage.setData(fileTaskList.getList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 2,
      "ttippinyu": 106
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.InputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.lists.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for finding tasks using a keyword."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param components Components of the full command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param fullCommand the full command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InputException missing keyword"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(String[] components, String fullCommand) throws InputException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (components.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"☹ OOPS!!! You need to enter a keyword.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            keyword \u003d fullCommand.replaceFirst(\"find \", \"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Searches for tasks using a keyword."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList TaskList instance"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage Storage instance"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui instance"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        int resultCount \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e formattedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        formattedOutput.add(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cTask\u003e tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            if (task.getName().contains(keyword)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                formattedOutput.add((resultCount++ + 1) + \". \" + task.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 2,
      "ttippinyu": 2,
      "-": 45
    }
  },
  {
    "path": "src/main/java/duke/commands/FindFreeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.lists.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindFreeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private DateTime startDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private DateTime endDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private List\u003cPair\u003cDateTime, DateTime\u003e\u003e freeTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for FindFree Command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date In the format of MM/dd/yyyy"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindFreeCommand(String date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d new DateTime(date + \" 00:00\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.endDate \u003d new DateTime(date + \" 23:59\");;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Output all the free time interval from startDate to endDate."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList TaskList instance."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage Storage instance."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui instance."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cTask\u003e tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        freeTime \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        freeTime.add(new Pair\u003c\u003e(startDate, endDate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task.isOverlapping(startDate,endDate)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                DateTime taskStart \u003d event.getStartDate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                DateTime taskEnd \u003d event.getEndDate();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                freeTime \u003d newFreeTime(taskStart, taskEnd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e formattedOutput \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        formattedOutput.add(\"Free Times are:\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        for (Pair\u003cDateTime, DateTime\u003e timeInterval : freeTime) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            DateTime start \u003d timeInterval.getKey();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            DateTime end \u003d timeInterval.getValue();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedOutput.add(\"From:\" + start.toString() + \" To:\" + end.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private List\u003cPair\u003cDateTime, DateTime\u003e\u003e newFreeTime(DateTime taskStart, DateTime taskEnd) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        List\u003cPair\u003cDateTime, DateTime\u003e\u003e newFreeTime \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c freeTime.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            DateTime startTime \u003d freeTime.get(i).getKey();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            DateTime endTime \u003d freeTime.get(i).getValue();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            if ((taskStart.getDateTime().before(startTime.getDateTime()) || taskStart.equals(startTime))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 taskEnd.after(startTime)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 taskEnd.before(endTime)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                newFreeTime.add(new Pair\u003c\u003e(taskEnd, endTime));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            if ((taskEnd.after(endTime) || taskEnd.equals(endTime))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 taskStart.after(startTime)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 taskStart.before(endTime)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                newFreeTime.add(new Pair\u003c\u003e(startTime, taskStart));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            if (taskStart.before(startTime) \u0026\u0026 taskEnd.after(endTime)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                assert true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            if (taskStart.after(startTime) \u0026\u0026 taskEnd.before(endTime)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                newFreeTime.add(new Pair\u003c\u003e(startTime,taskStart));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                newFreeTime.add(new Pair\u003c\u003e(taskEnd,endTime));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(taskStart.before(endTime) \u0026\u0026 startTime.before(taskEnd))) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                newFreeTime.add(new Pair\u003c\u003e(startTime,endTime));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return newFreeTime;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 2,
      "ttippinyu": 2,
      "-": 67,
      "TCK1997": 15
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.lists.SpinBoxList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.lists.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a list of tasks currently within the task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList TaskList instance."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage Storage instance."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui instance."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        taskList.sort();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cTask\u003e tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e formattedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        formattedOutput.add(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getList().size(); i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedOutput.add((Integer.toString(i + 1) + \". \" + tasks.get(i).toString()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "ttippinyu": 5,
      "-": 25
    }
  },
  {
    "path": "src/main/java/duke/commands/MultipleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import duke.exceptions.InputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import duke.items.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.lists.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "public class MultipleCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private String commandType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private String indexes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private int inputSize;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * Constructor for multiple command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param commandType Either done-multiple or delete-multiple."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param indexes Indexes of the tasks to be deleted."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param inputSize Length of the tokenized input command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public MultipleCommand(String commandType, String indexes, int inputSize) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.indexes \u003d indexes;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.inputSize \u003d inputSize;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * Either delete multiple relevant tasks from the task list or"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * mark them as done and delete them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param taskList TaskList instance."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param storage Storage instance."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param ui Ui instance."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @throws DukeException Invalid index or storage error."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        if (inputSize \u003e 2) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(\"Ensure that the indexes are separated by \u0027,\u0027 without any spacing. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    + \"E.g. delete-multiple 2,3,4 or done-multiple 2,3,4\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            String[] splitIndexes \u003d indexes.split(\",\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            if (splitIndexes.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                throw new InputException(\"To delete or mark a single task as done, provide the input in this \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        + \"format instead: delete \u003cone index in integer form\u003e or done \u003cone index in integer form\u003e.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            List\u003cString\u003e formattedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            List\u003cInteger\u003e finalIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            for (int i \u003d 0; i \u003c splitIndexes.length; i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                String convert \u003d splitIndexes[i];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                finalIndexes.add(Integer.parseInt(convert) - 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            Collections.sort(finalIndexes, Collections.reverseOrder());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            if (commandType.equals(\"delete-multiple\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                for (int i \u003d 0; i \u003c finalIndexes.size(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    Task removed \u003d taskList.remove(finalIndexes.get(i));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        formattedOutput.add(\"Noted. I\u0027ve removed these tasks:\\n\" + removed.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        formattedOutput.add(removed.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                for (int i \u003d 0; i \u003c finalIndexes.size(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    Task completed \u003d taskList.mark(finalIndexes.get(i));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    taskList.remove(finalIndexes.get(i));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        formattedOutput.add(\"Nice! I\u0027ve marked these tasks as done:\\n\" + completed.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        formattedOutput.add(completed.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    if (i \u003d\u003d finalIndexes.size() - 1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        formattedOutput.add(\"The above tasks have also been removed from the list of tasks.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            List\u003cTask\u003e tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            storage.setData(tasks);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            formattedOutput.add(\"You currently have \" + tasks.size()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    + ((tasks.size() \u003d\u003d 1) ? \" task in the list.\" : \" tasks in the list.\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(\"Invalid index entered. Type \u0027list\u0027 to see your list.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(\"Invalid index entered. Please ensure the index is in integer form. \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    + \"E.g. delete-multiple 2,5 or done-multiple 2,5\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 5,
      "lackmoo": 88
    }
  },
  {
    "path": "src/main/java/duke/commands/ReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.lists.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cTask\u003e tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        TreeMap\u003cString, List\u003cTask\u003e\u003e byDate \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e formattedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        formattedOutput.add(\"Here are your reminders:\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            String date \u003d \"No start date\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task.getDone()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task.getStartDate() !\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                LocalDateTime today \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                LocalDateTime startDate \u003d task.getStartDate().getDateTime()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                        .toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                date \u003d startDate.toLocalDate().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                if (today.compareTo(startDate) \u003e 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    date \u003d date.concat(\" (Overdue)\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                } else if (today.toLocalDate().compareTo(startDate.toLocalDate()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    date \u003d date.concat(\" (Today)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                if (byDate.containsKey(date)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    byDate.get(date).add(task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    byDate.put(date, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    byDate.get(date).add(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Map.Entry\u003cString, List\u003cTask\u003e\u003e entry : byDate.entrySet()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            String key \u003d entry.getKey();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedOutput.add(\"\\n-----------------\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedOutput.add(key);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedOutput.add(\"-----------------\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cTask\u003e currentTasks \u003d entry.getValue();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            currentTasks.forEach((Task currentTask) -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                formattedOutput.add(currentTask.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "ttippinyu": 2,
      "-": 68
    }
  },
  {
    "path": "src/main/java/duke/commands/SetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.lists.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.InputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Tentative;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SetCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private DateTime startDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private DateTime endDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Takes the input and extract index, startDate, and endDate."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param components Components of the full command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param fullCommand the full command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InputException wrong format for set-tentative."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public SetCommand(String[] components, String fullCommand) throws InputException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            this.index \u003d Integer.parseInt(components[1]) - 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            startDate \u003d new DateTime(fullCommand.split(\"/set \")[1], 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            endDate \u003d new DateTime(fullCommand.split(\"/set \")[1], 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"Please ensure that you enter the full command.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"set-tentative \u003cindex\u003e /set \u003cstart as MM/DD/YYYY HH:MM\u003e\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"to \u003cend as MM/DD/YYYY HH:MM\u003e\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"Invalid index entered. Type \u0027list\u0027 to see your list.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks whether the task at index is tentative task. Then removes tentative"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * task and replace with event task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList TaskList instance."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage Storage instance."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui instance."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Output for this command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if task at index is not tentative task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Task tentativeTask;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            tentativeTask \u003d taskList.getList().get(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"Invalid index entered. Type \u0027list\u0027 to see your list.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String firstComponent \u003d tentativeTask.toString().split(\" \")[0];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String taskType \u003d firstComponent.substring(0, firstComponent.lastIndexOf(\"[\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!taskType.equals(\"[TE]\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"The index given is not a tentative task.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        int tentativeTaskDone \u003d tentativeTask.getDone() ? 1 : 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Task addTask \u003d new Event(tentativeTaskDone,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                ((Tentative) tentativeTask).getDescription(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                this.startDate, this.endDate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.replace(index, addTask);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e formattedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        formattedOutput.add(\"Replaced tentative event:\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        formattedOutput.add(tentativeTask.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        formattedOutput.add(\"With event:\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        formattedOutput.add(addTask.toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        storage.setData(taskList.getList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        taskList.sort();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 3,
      "ttippinyu": 4,
      "-": 71,
      "TCK1997": 5
    }
  },
  {
    "path": "src/main/java/duke/commands/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.lists.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.InputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SnoozeCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private int dateSize;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date endDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for rescheduling of Task objects, does some input checking."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index index of the task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param components Components of the full command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param fullCommand the full command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InputException can throw error if there is invalid input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public SnoozeCommand(int index, String[] components, String fullCommand) throws InputException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String dateString;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            dateString \u003d fullCommand.split(\"snooze\\\\s\\\\d+\\\\s\")[1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"☹ OOPS!!! Please enter dates.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        com.joestelmach.natty.Parser parser \u003d new com.joestelmach.natty.Parser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        List dates \u003d parser.parse(dateString).get(0).getDates();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateSize \u003d dates.size();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.dateSize \u003d\u003d 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            startDate \u003d (Date) dates.get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (this.dateSize \u003d\u003d 2) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            startDate \u003d (Date) dates.get(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            endDate \u003d (Date) dates.get(1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reschedule the dates of the task."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList TaskList instance."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage Storage instance."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui instance."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException invalid input or storage error."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            List\u003cTask\u003e tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            Task indexedTask \u003d tasks.get(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Boolean isEvent \u003d indexedTask instanceof Event;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Boolean isDeadline \u003d indexedTask instanceof Deadline;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Boolean wrongDateSize \u003d !((isEvent \u0026\u0026 dateSize \u003d\u003d 2) || (isDeadline \u0026\u0026 dateSize \u003d\u003d 1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(isEvent || isDeadline)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new InputException(\"☹ OOPS!!! You can only reschedule Event or Deadline.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wrongDateSize) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new InputException(\"☹ OOPS!!! Please supply correct amount of dates.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isEvent) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                Event snoozeEvent \u003d (Event) indexedTask;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                snoozeEvent.setStartDate(new DateTime(startDate));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                snoozeEvent.setEndDate(new DateTime(endDate));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isDeadline) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Deadline snoozeDeadline \u003d (Deadline) indexedTask;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                snoozeDeadline.setStartDate(new DateTime(startDate));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cString\u003e formattedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedOutput.add(\"Noted. I\u0027ve rescheduled this task:\\n\" + indexedTask.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"Invalid index entered. Type \u0027list\u0027 to see your list.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 7,
      "ttippinyu": 2,
      "-": 80
    }
  },
  {
    "path": "src/main/java/duke/commands/UnknownCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.InputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.lists.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class UnknownCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new InputException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/duke/commands/ViewScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.InputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.lists.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewScheduleCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private DateTime inputDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for viewing schedule for a day."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param components Components of the full command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param fullCommand the full command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InputException if input format is incorrect."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewScheduleCommand(String[] components, String fullCommand) throws InputException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (components.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"Please input one date\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            inputDate \u003d new DateTime(fullCommand.substring(fullCommand.indexOf(\" \") + 1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InputException(\"Please ensure that you enter the full command.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"view-schedule \u003cMM/DD/YYYY HH:MM\u003e\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Searches for tasks on the same day as the given day."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList TaskList instance."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage Storage instance."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui Ui instance."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        int resultCount \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e formattedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        formattedOutput.add(\"Here are the tasks on the date given:\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        taskList.sort();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cTask\u003e tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            if (task.compareEquals(inputDate)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                formattedOutput.add((resultCount++ + 1) + \". \" + task.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.showFormatted(formattedOutput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "ttippinyu": 3,
      "-": 51,
      "TCK1997": 3
    }
  },
  {
    "path": "src/main/java/duke/items/GradedComponent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package duke.items;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.exceptions.InputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class GradedComponent extends Item {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String UNKNOWN_SCORE \u003d \"----\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String DIVIDE_BY_ZERO \u003d \"Maximum possible score should be non-zero\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String TWO_DP \u003d \"#.##\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private double weight;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private boolean scoreKnown;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private double weightedScore;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Constructor for a Graded component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param name Name of graded component as a String, e.g. \"English Essay\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param weight Percentage weight of this graded component as a double e.g. 20, 25.5065 etc"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public GradedComponent(String name, double weight) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.scoreKnown \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.weightedScore \u003d 0.0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public double getWeight() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return super.storeString() + \" | \" + (this.isScoreKnown() ? 1 : 0)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            + \" | \" + Double.toString(this.weight) + \" | \" + Double.toString(this.weightedScore);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Converts a previously entered weighted score into a human-readable String to be displayed to user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * If the score was not previously entered, returns dashes to indicate that it does not exist."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return String containing weighted score to 2 decimal places, if it exists, or the String \u0027----\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String getWeightedScoreAsString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        if (this.isScoreKnown()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            DecimalFormat decimalFormat \u003d new DecimalFormat(TWO_DP);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            return decimalFormat.format(this.weightedScore);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            return UNKNOWN_SCORE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Calculates and updates the weighted percentage scored by a user. Also marks the graded component"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * as done, regardless of previous state."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param yourScore This is the score achieved by the user for this graded component. e.g. 22.5"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     *                  It can exceed the maximumScore value as some graded components of certain modules"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     *                  may have bonus marks, allowing a user to potentially score higher than the maximum."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param maximumScore This is the maximum possible score achievable by the user for this graded component,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     *                     excluding bonus marks, if any. e.g. 25"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws InputException This is thrown when the maximum possible score entered for this graded component is zero."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void updateWeightedScore(double yourScore, double maximumScore) throws InputException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        if (this.checkDivideByZero(maximumScore)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new InputException(DIVIDE_BY_ZERO);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.setComplete();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            double score \u003d this.calculateWeightedScore(yourScore, maximumScore);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.setWeightedScore(score);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Takes in an already weighted score (%) and updates the weighted percentage achieved by the user. Also marks"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * the graded component as done, regardless of previous state."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param weightedScore A double that reflects the percentage achieved by the user for that graded component."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void updateWeightedScore(double weightedScore) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setComplete();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setWeightedScore(weightedScore);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private boolean checkDivideByZero(double maximumScore) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return (Double.compare(0.0, maximumScore) \u003d\u003d 0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void setScoreKnown() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.scoreKnown \u003d true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private boolean isScoreKnown() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return this.scoreKnown;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void setComplete() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.markDone();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setScoreKnown();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void setWeightedScore(double weightedScore) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.weightedScore \u003d weightedScore;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private double calculateWeightedScore(double yourScore, double maximumScore) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return ((yourScore / maximumScore)) * this.weight;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 106
    }
  },
  {
    "path": "src/main/java/duke/items/Item.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package duke.items;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public abstract class Item {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private Boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    protected Item(String name) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public Boolean getDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    protected String getStatusIcon() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return (this.getDone() ? \"✓\" : \"✗\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.getName();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return Integer.toString((this.getDone() ? 1 : 0)) + \" | \" + this.getName();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    protected void setDone(Boolean done) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setDone(true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 39
    }
  },
  {
    "path": "src/main/java/duke/items/tasks/After.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package duke.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class After extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    private String doAfter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for Duke.Tasks.After object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskName name or description of the after task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param doAfter the time or task for the current task to be completed after."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public After(String taskName, String doAfter) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.doAfter \u003d doAfter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * This constructor is used for recreation of Duke.Tasks.After from storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param done 1 if task has been marked complete, 0 otherwise."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskName the name or description of the after task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param doAfter the time or task for the current task to be completed after."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public After(int done, String taskName, String doAfter) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setDone(done \u003d\u003d 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.doAfter \u003d doAfter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[A]\" + super.toString() + \" (after: \" + getDoAfter() + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"A | \" + super.storeString() + \" | \" + getDoAfter();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getStartDateString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getEndDateString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDoAfter() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.doAfter;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 12,
      "-": 39
    }
  },
  {
    "path": "src/main/java/duke/items/tasks/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package duke.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Deadline(String description, DateTime startDate) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This constructor is used for recreation of Duke.Tasks.Deadline from storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param done 1 if task has been marked complete, 0 otherwise."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description the name or description of the deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDate the due date/time of the deadline."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Deadline(int done, String description, DateTime startDate) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setDone(done \u003d\u003d 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return \"D | \" + super.storeString() + \" | \" + this.getStartDateString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getStartDateString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return this.startDate.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getEndDateString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.startDate + \")\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Check if given date is equal to deadline date."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param inputDate the date to be compared."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if equal, false if not equal."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean compareEquals(DateTime inputDate) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return (this.startDate.compareTo(inputDate) \u003d\u003d 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 13,
      "-": 37,
      "TCK1997": 4
    }
  },
  {
    "path": "src/main/java/duke/items/tasks/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package duke.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for Duke.Tasks.Event object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description name of the event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDate Date object for start DateTime."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endDate Date object for end DateTime."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Event(String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * This constructor is used for recreation of Duke.Tasks.Deadline from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param done  1 if task has been marked complete, 0 otherwise."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description the name or description of the event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDate Date object for start DateTime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endDate Date object for end DateTime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Event(int done, String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setDone(done \u003d\u003d 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"E | \" + super.storeString() + \" | \" + this.getStartDateString() + \" | \" + this.getEndDateString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getStartDateString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.startDate.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getEndDateString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.endDate.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.getStartDateString() + \" to \" + this.getEndDateString() + \")\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Check if date given is within event period."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param inputDate the date to be compared."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if within, false if not."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean compareEquals(DateTime inputDate) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isAfterStartDate \u003d (this.startDate.compareTo(inputDate) \u003c\u003d 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isBeforeEndDate \u003d (this.endDate.compareTo(inputDate) \u003e\u003d 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isAfterStartDate \u0026\u0026 isBeforeEndDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Boolean isOverlapping(DateTime startTime, DateTime endTime) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return startTime.before(endDate) \u0026\u0026 startDate.before(endTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 10,
      "-": 53,
      "TCK1997": 8
    }
  },
  {
    "path": "src/main/java/duke/items/tasks/FileTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package duke.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class FileTask extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public FileTask(String fileName) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        super(fileName);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * This constructor is used for recreation of Duke.Tasks.FileTask from storage."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param done 1 if task has been mark completed, 0 otherwise."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param fileName the name of the file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public FileTask(int done, String fileName) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        super(fileName);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setDone(done \u003d\u003d 1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return \"FILE | \" + super.storeString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getStartDateString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getEndDateString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 12,
      "ttippinyu": 25
    }
  },
  {
    "path": "src/main/java/duke/items/tasks/Fixed.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package duke.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Fixed extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    private String fixedDuration;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for Duke.Tasks.Fixed object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskName name or description of the fixed duration task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param fixedDuration duration of the fixed duration task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public Fixed(String taskName, String fixedDuration) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.fixedDuration \u003d fixedDuration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * This constructor is used for recreation of Duke.Tasks.Fixed from storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param done 1 if task has been marked complete, 0 otherwise."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskName the name or description of the fixed duration task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param fixedDuration duration of the fixed duration task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Fixed(int done, String taskName, String fixedDuration) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setDone(done \u003d\u003d 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.fixedDuration \u003d fixedDuration;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[F]\" + super.toString() + \" (needs: \" + getFixedDuration() + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"F | \" + super.storeString() + \" | \" + getFixedDuration();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getStartDateString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getEndDateString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFixedDuration() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.fixedDuration;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 12,
      "-": 39
    }
  },
  {
    "path": "src/main/java/duke/items/tasks/Recurring.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package duke.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Recurring extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private long intervalMinutes;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private long instanceCount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor that is used for creation."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description the description of the recurring task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDate Date object for start DateTime."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endDate Date object for end DateTime."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param intervalMinutes Number of minutes to advance by for next instance."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Recurring(String description, DateTime startDate, DateTime endDate,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                     long intervalMinutes) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.intervalMinutes \u003d intervalMinutes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.instanceCount \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor that is used for recreation from storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description the description of the recurring task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDate Date object for start DateTime."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endDate Date object for end DateTime."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param intervalMinutes Number of minutes to advance by for next instance."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instanceCount the number of instances completed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Recurring(String description, DateTime startDate, DateTime endDate,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                     long intervalMinutes, long instanceCount) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.intervalMinutes \u003d intervalMinutes;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.instanceCount \u003d instanceCount;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"R | \" + super.storeString() + \" | \" + this.getStartDateString() + \" | \" + this.getEndDateString()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" | \" + this.getIntervalMinutes() + \" | \" + this.getInstanceCount();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[R]\" + super.toString() + \" (at: \" + this.getStartDateString() + \" to \" + this.getEndDateString()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" every \" + this.getIntervalMinutes() + \" minutes\" + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        long start \u003d getStartDate().getDateTime().getTime();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        long end \u003d getEndDate().getDateTime().getTime();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setStartDate(new DateTime(new Date(start + this.millisecondsToAdd())));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setEndDate(new DateTime(new Date(end + this.millisecondsToAdd())));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setInstanceCount(this.getInstanceCount() + 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getStartDateString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.startDate.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getEndDateString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.endDate.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    protected String getStatusIcon() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return Long.toString(instanceCount);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private long millisecondsToAdd() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return this.getIntervalMinutes() * 60 * 1000;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public long getIntervalMinutes() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return intervalMinutes;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public long getInstanceCount() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return instanceCount;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInstanceCount(long instanceCount) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.instanceCount \u003d instanceCount;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 11,
      "-": 78,
      "TCK1997": 6
    }
  },
  {
    "path": "src/main/java/duke/items/tasks/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package duke.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.Item;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public abstract class Task extends Item {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    DateTime startDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    DateTime endDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor to initialize default values of any instances of children of Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String taskName) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.startDate \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.endDate \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return super.storeString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public DateTime getStartDate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public DateTime getEndDate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void setEndDate(DateTime endDate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void setStartDate(DateTime startDate) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    abstract String getStartDateString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    abstract String getEndDateString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Compare if input date is equals."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return default is to return false, only implemented properly in deadline and event task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean compareEquals(DateTime inputDate) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Compare if time interval overlaps."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startTime the start of the interval"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endTime the end of the interval"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return default to return false, only implemented in event task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Boolean isOverlapping(DateTime startTime, DateTime endTime) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 19,
      "ttippinyu": 1,
      "-": 44,
      "TCK1997": 1
    }
  },
  {
    "path": "src/main/java/duke/items/tasks/Tentative.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package duke.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tentative extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for Duke.Tasks.Tentative object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description name of the tentative event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDate Date object for start DateTime."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endDate Date object for end DateTime."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Tentative(String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * This constructor is used for recreation of Duke.Tasks.Tentative from storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param done  1 if task has been marked complete, 0 otherwise."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description the name or description of the tentative event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDate Date object for start DateTime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endDate Date object for end DateTime."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Tentative(int done, String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setDone(done \u003d\u003d 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"TE | \" + super.storeString() + \" | \" + this.getStartDateString() + \" | \" + this.getEndDateString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getStartDateString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.startDate.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getEndDateString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.endDate.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return \"[TE]\" + super.toString() + \" (around: \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                + this.getStartDateString() + \" to \" + this.getEndDateString()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                + \" - date not fixed)\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return super.getName();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 13,
      "-": 42,
      "TCK1997": 6
    }
  },
  {
    "path": "src/main/java/duke/items/tasks/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package duke.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public Todo(String taskName) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public Todo(int done, String taskName) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setDone(done \u003d\u003d 1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"T | \" + super.storeString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getStartDateString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getEndDateString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 12,
      "-": 20
    }
  },
  {
    "path": "src/main/java/duke/items/tasks/Within.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package duke.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Within extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for Duke.Tasks.Within object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description name of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDate Date object for start DateTime."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endDate Date object for end DateTime."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Within(String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * This constructor is used for recreation of Duke.Tasks.Within from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param done  1 if task has been marked complete, 0 otherwise."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description name of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDate Date object for start DateTime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endDate Date object for end DateTime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Within(int done, String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setDone(done \u003d\u003d 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"W | \" + super.storeString() + \" | \" + this.getStartDateString() + \" | \" + this.getEndDateString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getStartDateString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.startDate.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getEndDateString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.endDate.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return \"[W]\" + super.toString() + \" (between: \" + this.getStartDateString()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                + \" and \" + this.getEndDateString() + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 11,
      "-": 37,
      "TCK1997": 6
    }
  },
  {
    "path": "src/main/java/duke/lists/FileList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package duke.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.items.tasks.FileTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class FileList extends SpinBoxList\u003cFileTask\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public FileList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public FileList(List\u003cFileTask\u003e files) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        super(files);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Mark the file at index as downloaded."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param index index of element to be marked."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return task that was marked as downloaded."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws IndexOutOfBoundsException if index is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public FileTask mark(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        list.get(index).markDone();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Does not order the files at the moment as not sure how to order yet."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    static class FileComparator implements Comparator\u003cFileTask\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        public int compare(FileTask a, FileTask b) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Collections.sort(list, new FileComparator());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 42
    }
  },
  {
    "path": "src/main/java/duke/lists/GradeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package duke.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.items.GradedComponent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class GradeList extends SpinBoxList\u003cGradedComponent\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public GradeList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public GradeList(List\u003cGradedComponent\u003e grades) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        super(grades);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Invalid Command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public GradedComponent mark(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Order the grade components based on descending weight."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    static class GradedComponentComparator implements Comparator\u003cGradedComponent\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        public int compare(GradedComponent a, GradedComponent b) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            return (a.getWeight() \u003e b.getWeight()) ? -1 : 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Collections.sort(list, new GradedComponentComparator());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 38
    }
  },
  {
    "path": "src/main/java/duke/lists/SpinBoxList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package duke.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public abstract class SpinBoxList\u003cT\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    protected List\u003cT\u003e list;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public SpinBoxList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        list \u003d new ArrayList\u003cT\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Constructor if already have list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param list list to be made into SpinBoxList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public SpinBoxList(List\u003cT\u003e list) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Add element into list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param element to be added."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return added element."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public T add(T element) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return element;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Remove element at index from list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param index index of element."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return element removed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws IndexOutOfBoundsException if index is invalid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public T remove(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return list.remove(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Return SpinBoxList as list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public List\u003cT\u003e getList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Return element at index."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param index index of element."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return element at index."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public T get(int index) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Mark the element."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param index index of element to be marked."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return element marked."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws IndexOutOfBoundsException if index is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public abstract T mark(int index) throws IndexOutOfBoundsException;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Replace element at index with element."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param index index of element to be replaced."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param element new element to be inserted."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return old element."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public T replace(int index, T element) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        list.set(index, element);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return element;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Sort the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public abstract void sort();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 84
    }
  },
  {
    "path": "src/main/java/duke/lists/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package duke.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.items.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class TaskList extends SpinBoxList\u003cTask\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        super(tasks);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Mark the task at index as done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param index index of element to be marked."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return task that was marked as done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws IndexOutOfBoundsException if index is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public Task mark(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        list.get(index).markDone();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    static class StartDateComparator implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        public int compare(Task a, Task b) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            DateTime startDateA \u003d a.getStartDate();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            DateTime startDateB \u003d b.getStartDate();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            if (startDateA \u003d\u003d null \u0026\u0026 startDateB \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else if (startDateA \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else if (startDateB \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                return startDateA.compareTo(startDateB);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Collections.sort(list, new StartDateComparator());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 52
    }
  },
  {
    "path": "src/test/java/AfterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.After;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "class AfterTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    void testToString_createAndMarkDoneNewTask_newDoAfterTaskCreatedAndMarkedDoneWithToStringFormat() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        Task firstTask \u003d new After(\"pack for holidays\", \"final examinations\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[A][✗] pack for holidays (after: final examinations)\", firstTask.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(\"[A][✓] pack for holidays (after: final examinations)\", firstTask.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        firstTask.markDone();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[A][✓] pack for holidays (after: final examinations)\", firstTask.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(\"[A][✗] pack for holidays (after: final examinations)\", firstTask.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Task secondTask \u003d new After(\"play with friends\", \"Friday 6pm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[A][✗] play with friends (after: Friday 6pm)\", secondTask.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(\"[A][✓] play with friends (after: Friday 6pm)\", secondTask.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        secondTask.markDone();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[A][✓] play with friends (after: Friday 6pm)\", secondTask.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(\"[A][✗] play with friends (after: Friday 6pm)\", secondTask.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void testStoreString_createAndMarkDoneNewTask_newDoAfterTaskCreatedAndMarkedDoneWithStoreStringFormat() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Task thirdTask \u003d new After(\"pack for holidays\", \"final examinations\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"A | 0 | pack for holidays | final examinations\", thirdTask.storeString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(\"A | 1 | pack for holidays | final examinations\", thirdTask.storeString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        thirdTask.markDone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"A | 1 | pack for holidays | final examinations\", thirdTask.storeString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(\"A | 0 | pack for holidays | final examinations\", thirdTask.storeString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Task fourthTask \u003d new After(\"play with friends\", \"Friday 6pm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"A | 0 | play with friends | Friday 6pm\", fourthTask.storeString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(\"A | 1 | play with friends | Friday 6pm\", fourthTask.storeString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        fourthTask.markDone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"A | 1 | play with friends | Friday 6pm\", fourthTask.storeString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(\"A | 0 | play with friends | Friday 6pm\", fourthTask.storeString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/DateTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class DateTimeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public void correctDateInputShouldCreateReusableString() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test \u003d new DateTime(\"05/02/2020 12:00\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"05/02/2020 12:00\", test.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test2 \u003d new DateTime(test.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"05/02/2020 12:00\", test2.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test3 \u003d new DateTime(\"06/12/2300 5pm\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"06/12/2300 17:00\", test3.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test4 \u003d new DateTime(test3.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"06/12/2300 17:00\", test4.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public void parseDifferentDateFormattedString() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test \u003d new DateTime(\"the day before 12/16/2019 4pm\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"12/15/2019 16:00\", test.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test2 \u003d new DateTime(\"16 December 1800 8am to 15th January 2019 9pm\", 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test3 \u003d new DateTime(\"16 December 1800 8am to 15th January 2019 9pm\",1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"12/16/1800 08:00\", test2.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"01/15/2019 21:00\", test3.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime santaVacationStartDate \u003d new DateTime(\"from christmas 2019 6am to christmas eve 2020 23:59\", 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime santaVacationEndDate \u003d new DateTime(\"from christmas 2019 6am to christmas eve 2020 23:59\", 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"12/25/2019 06:00\", santaVacationStartDate.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"12/24/2020 23:59\", santaVacationEndDate.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "TCK1997": 35
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Integration testing of Duke."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void duke_createNewTask_NewTaskCreatedPermanently() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        File file \u003d new File(\"data/dukeTest.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set pseudo-GUI mode to allow us to manually input commands"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Duke test \u003d new Duke(\"data/dukeTest.txt\", \"data/fileTest.txt\", false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 1: Check for empty list (successful creation of new file)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(test.getResponse(\"list\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"Here are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"____________________________________________________________\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 2: Add a task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        test.getResponse(\"todo test1\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 3: Exit program"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        test.getResponse(\"bye\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 4: Create a new instance of Duke"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Duke test2 \u003d new Duke(\"data/dukeTest.txt\", \"data/fileTest.txt\", false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 5: Check data persists across Duke instances."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(test.getResponse(\"list\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"Here are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"____________________________________________________________\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void duke_updateNonExistentTask_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        File file \u003d new File(\"data/dukeTest.txt\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set pseudo-GUI mode to allow us to manually input commands"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Duke test \u003d new Duke(\"data/dukeTest.txt\", \"data/fileTest.txt\", false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 1: Check for empty list (successful creation of new file)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(test.getResponse(\"list\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"Here are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"____________________________________________________________\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 2: Add an item"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        test.getResponse(\"todo test1\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 3: Update item"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String testList \u003d test.getResponse(\"list\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(test.getResponse(\"done 2\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"Invalid Input\\n\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"Invalid index entered. Type \u0027list\u0027 to see your list.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"____________________________________________________________\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(test.getResponse(\"done 0\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"Invalid Input\\n\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"Invalid index entered. Type \u0027list\u0027 to see your list.\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"____________________________________________________________\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(test.getResponse(\"done 1\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"Invalid Input\\n\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"Invalid index entered. Type \u0027list\u0027 to see your list.\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"____________________________________________________________\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void duke_updateExistingTask_ExistingTaskUpdatedPermanently() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        File file \u003d new File(\"data/dukeTest.txt\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set pseudo-GUI mode to allow us to manually input commands"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Duke test \u003d new Duke(\"data/dukeTest.txt\", \"data/fileTest.txt\", false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 1: Check for empty list (successful creation of new file)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(test.getResponse(\"list\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"Here are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"____________________________________________________________\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 2: Add an item"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        test.getResponse(\"todo test1\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 3: Update item"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String testList \u003d test.getResponse(\"list\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        test.getResponse(\"done 1\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 4: Exit program"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        test.getResponse(\"bye\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 5: Create a new instance of Duke"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Duke test2 \u003d new Duke(\"data/dukeTest.txt\", \"data/fileTest.txt\", false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(test2.getResponse(\"list\"), testList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void duke_deleteNonExistentTask_exceptionThrown() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        File file \u003d new File(\"data/dukeTest.txt\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set pseudo-GUI mode to allow us to manually input commands"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Duke test \u003d new Duke(\"data/dukeTest.txt\", \"data/fileTest.txt\", false);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 1: Check for empty list (successful creation of new file)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String testList \u003d test.getResponse(\"list\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(test.getResponse(\"list\"),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"Here are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"____________________________________________________________\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 2: Add an item"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        test.getResponse(\"todo test1\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 3: Check item is added to list"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(test.getResponse(\"list\"), testList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 4: Exit program"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        test.getResponse(\"bye\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 5: Create a new instance of Duke"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Duke test2 \u003d new Duke(\"data/dukeTest.txt\", \"data/fileTest.txt\", false);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 6: Attempt to delete non-existent items"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(test2.getResponse(\"delete 0\"),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"Invalid Input\\n\\n\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"Invalid index entered. Type \u0027list\u0027 to see your list.\\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"____________________________________________________________\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(test2.getResponse(\"delete 2\"),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"Invalid Input\\n\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"Invalid index entered. Type \u0027list\u0027 to see your list.\\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"____________________________________________________________\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(test2.getResponse(\"delete 0\"),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"Invalid Input\\n\\n\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"Invalid index entered. Type \u0027list\u0027 to see your list.\\n\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"____________________________________________________________\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        assertEquals(test2.getResponse(\"delete-multiple 1,2\"),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        + \"Invalid Input\\n\\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        + \"Invalid index entered. Type \u0027list\u0027 to see your list.\\n\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        + \"____________________________________________________________\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        assertEquals(test2.getResponse(\"done-multiple 3,4\"),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        + \"Invalid Input\\n\\n\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        + \"Invalid index entered. Type \u0027list\u0027 to see your list.\\n\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        + \"____________________________________________________________\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void duke_deleteExistingTask_ExistingTaskDeletedPermanently() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        File file \u003d new File(\"data/dukeTest.txt\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set pseudo-GUI mode to allow us to manually input commands"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Duke test \u003d new Duke(\"data/dukeTest.txt\", \"data/fileTest.txt\", false);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 1: Check for empty list (successful creation of new file)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        String testList \u003d test.getResponse(\"list\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(test.getResponse(\"list\"),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"Here are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"____________________________________________________________\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 2: Add an item"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        test.getResponse(\"todo test1\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 3: Check item is added to list"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(test.getResponse(\"list\"), testList);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //Step 4: Add another item"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        test.getResponse(\"todo test2\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //Step 5: Check item is added to list"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        assertNotEquals(test.getResponse(\"list\"), testList);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //Step 6: Add another item"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        test.getResponse(\"todo test3\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //Step 7: Check item is added to list"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        assertNotEquals(test.getResponse(\"list\"), testList);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //Step 8: Add another item"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        test.getResponse(\"todo test4\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //Step 9: Check item is added to list"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        assertNotEquals(test.getResponse(\"list\"), testList);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //Step 10: Add another item"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        test.getResponse(\"todo test5\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //Step 11: Check item is added to list"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        assertNotEquals(test.getResponse(\"list\"), testList);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //Step 12: Exit program"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        test.getResponse(\"bye\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //Step 13: Create a new instance of Duke"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Duke test2 \u003d new Duke(\"data/dukeTest.txt\", \"data/fileTest.txt\", false);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //Step 14: Delete added item"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        test2.getResponse(\"delete 1\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //Step 15: Delete multiple added items"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        test2.getResponse(\"delete-multiple 1,2\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //Step 16: Mark multiple added items as done and delete these tasks"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        test2.getResponse(\"done-multiple 1,2\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // Exit program"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        test2.getResponse(\"bye\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //Step 17: Create a new instance of Duke"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Duke test3 \u003d new Duke(\"data/dukeTest.txt\", \"data/fileTest.txt\", false);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        //Step 18: Verify that list is empty"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(test3.getResponse(\"list\"), testList);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "ttippinyu": 10,
      "lackmoo": 47,
      "-": 184
    }
  },
  {
    "path": "src/test/java/FileTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.FileTask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class FileTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    void testToString_createAndMarkDoneNewTask() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Task task \u003d new FileTask(\"file1\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        assertEquals(\"[✗] file1\", task.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        task.markDone();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        assertEquals(\"[✓] file1\", task.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    void testStoreString_createAndMarkDoneNewTask() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Task task \u003d new FileTask(\"file1\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        assertEquals(\"FILE | 0 | file1\", task.storeString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        task.markDone();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        assertEquals(\"FILE | 1 | file1\", task.storeString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 2,
      "ttippinyu": 21
    }
  },
  {
    "path": "src/test/java/FixedTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Fixed;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "class FixedTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    void testToString_createAndMarkDoneNewTask_newFixedDurationTaskCreatedAndMarkedDoneWithToStringFormat() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d new Fixed(\"read sales report\", \"2 hours\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[F][✗] read sales report (needs: 2 hours)\", task.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(\"[F][✓] read sales report (needs: 2 hours)\", task.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        task.markDone();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[F][✓] read sales report (needs: 2 hours)\", task.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(\"[F][✗] read sales report (needs: 2 hours)\", task.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void testStoreString_createAndMarkDoneNewTask_newFixedDurationTaskCreatedAndMarkedDoneWithStoreStringFormat() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d new Fixed(\"read sales report\", \"2 hours\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"F | 0 | read sales report | 2 hours\", task.storeString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(\"F | 1 | read sales report | 2 hours\", task.storeString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        task.markDone();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"F | 1 | read sales report | 2 hours\", task.storeString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(\"F | 0 | read sales report | 2 hours\", task.storeString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 2,
      "-": 26
    }
  },
  {
    "path": "src/test/java/GradedComponentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.exceptions.InputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.GradedComponent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class GradedComponentTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void gradeCreation_variousGradedComponents_successfulCreationAndWorkingGetters() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeOne \u003d new GradedComponent(\"Essay\", 20);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeight(), 20);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.storeString(), \"0 | Essay | 0 | 20.0 | 0.0\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeightedScoreAsString(), \"----\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeTwo \u003d new GradedComponent(\"Report\", 26.7);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.getWeight(), 26.7);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.storeString(), \"0 | Report | 0 | 26.7 | 0.0\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.getWeightedScoreAsString(), \"----\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeThree \u003d new GradedComponent(\"Assignment 4\", 3.7654321);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeThree.getWeight(), 3.7654321);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeThree.storeString(), \"0 | Assignment 4 | 0 | 3.7654321 | 0.0\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeThree.getWeightedScoreAsString(), \"----\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void gradeUpdatePreWeighted_gradedEssayScored_successfulUpdateAndMarkedDone() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeOne \u003d new GradedComponent(\"Essay\", 20);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testGradeOne.updateWeightedScore(15);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeight(), 20);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.storeString(), \"1 | Essay | 1 | 20.0 | 15.0\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeightedScoreAsString(), \"15\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeTwo \u003d new GradedComponent(\"Essay\", 0.657);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testGradeTwo.updateWeightedScore(0.700);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.getWeight(), 0.657);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.storeString(), \"1 | Essay | 1 | 0.657 | 0.7\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.getWeightedScoreAsString(), \"0.7\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void gradeUpdateUnweighted_gradedEssayScored_successfulUpdateAndMarkedDone() throws InputException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeOne \u003d new GradedComponent(\"Essay\", 20);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testGradeOne.updateWeightedScore(15, 30);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeight(), 20);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.storeString(), \"1 | Essay | 1 | 20.0 | 10.0\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeightedScoreAsString(), \"10\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeTwo \u003d new GradedComponent(\"Essay\", 0.657);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testGradeTwo.updateWeightedScore(12, 15);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.getWeight(), 0.657);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.getWeightedScoreAsString(), \"0.53\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void gradeUpdateUnweighted_gradedEssayScoredZeroMaximumScore_ExceptionThrown() throws InputException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeOne \u003d new GradedComponent(\"Essay\", 20);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e testGradeOne.updateWeightedScore(15, 0));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeight(), 20);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.storeString(), \"0 | Essay | 0 | 20.0 | 0.0\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeightedScoreAsString(), \"----\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 72
    }
  },
  {
    "path": "src/test/java/RecurringTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Recurring;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class RecurringTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void recurringTask_createNewWithValidInput_successfullyCreatedWithInstanceCountOne() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime startDate \u003d new DateTime(\"09/19/2019 12:00\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime endDate \u003d new DateTime(\"09/20/2019 12:00\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d new Recurring(\"meet with team daily\", startDate, endDate, 1440);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[R][1] meet with team daily (at: 09/19/2019 12:00 to 09/20/2019 12:00 every 1440 minutes)\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                task.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void recurringTask_incrementInstanceUsingDone_instanceCountIncrementedByOne() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime startDate \u003d new DateTime(\"10/1/2019 05:00\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime endDate \u003d new DateTime(\"10/1/2019 06:00\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d new Recurring(\"don\u0027t talk about the fight club\", startDate, endDate, 10080,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                3);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[R][3] don\u0027t talk about the fight club (at: 10/01/2019 05:00 to 10/01/2019\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" 06:00 every 10080 minutes)\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                task.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        task.markDone();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[R][4] don\u0027t talk about the fight club (at: 10/08/2019 05:00 to 10/08/2019\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" 06:00 every 10080 minutes)\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                task.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 2,
      "-": 32,
      "TCK1997": 5
    }
  },
  {
    "path": "src/test/java/ReminderCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.lists.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.ReminderCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ReminderCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void reminderCommand_showReminders_ShouldShowPastRemindersWithOverdueTag() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        long overdueDate \u003d 656740800000L;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        testTaskList.add(new Deadline(\"overdue\", new DateTime(new Date(overdueDate))));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage testStorage \u003d new Storage(\"data/dukeTest.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ReminderCommand command \u003d new ReminderCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(command.execute(testTaskList, testStorage, testUi).contains(\"(Overdue)\"), true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void reminderCommand_CompleteTaskAndShowReminders_ShouldNotShowDoneReminders() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        long overdueDate \u003d 656740800000L;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        testTaskList.add(new Deadline(\"overdue\", new DateTime(new Date(overdueDate))));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        testTaskList.mark(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage testStorage \u003d new Storage(\"data/dukeTest.txt\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ReminderCommand command \u003d new ReminderCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(command.execute(testTaskList, testStorage, testUi).contains(\"(Overdue)\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void reminderCommand_showReminders_ShouldShowDistantFutureRemindersWithoutTag() throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        long distantFutureDate \u003d 1893427200000L;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        testTaskList.add(new Deadline(\"future\", new DateTime(new Date(distantFutureDate))));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage testStorage \u003d new Storage(\"data/dukeTest.txt\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ReminderCommand command \u003d new ReminderCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(command.execute(testTaskList, testStorage, testUi).contains(\"(Overdue)\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "ttippinyu": 2,
      "-": 49,
      "TCK1997": 4
    }
  },
  {
    "path": "src/test/java/SnoozeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.lists.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class SnoozeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void snoozeCommand_rescheduleDeadline() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new Storage(\"data/dukeTest.txt\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Command addInitialTask \u003d new Parser().parse(\"deadline TestDeadline /by 09/19/2019 12:00\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        addInitialTask.execute(tasks, storage, ui);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        assertEquals(\"09/19/2019 12:00\", tasks.getList().get(0).getStartDate().toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Command rescheduleTask \u003d new Parser().parse(\"snooze 1 09/20/2019 13:11\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        rescheduleTask.execute(tasks, storage, ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        assertEquals(\"09/20/2019 13:11\", tasks.getList().get(0).getStartDate().toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void snoozeCommand_rescheduleEvent() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new Storage(\"data/dukeTest.txt\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Event testEvent;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Command addInitialTask \u003d new Parser()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                .parse(\"event TestEvent /at 09/19/2019 12:00 to 10/20/2019 00:01\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addInitialTask.execute(tasks, storage, ui);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        testEvent \u003d (Event) tasks.getList().get(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"E | 0 | TestEvent | 09/19/2019 12:00 | 10/20/2019 00:01\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                testEvent.storeString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Command rescheduleTask \u003d new Parser()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .parse(\"snooze 1 09/20/2019 13:11 to 10/20/2019 00:01\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        rescheduleTask.execute(tasks, storage, ui);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"E | 0 | TestEvent | 09/20/2019 13:11 | 10/20/2019 00:01\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                testEvent.storeString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "ttippinyu": 4,
      "-": 45
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Within;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Tentative;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Recurring;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.FileTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private static final String UPPER_CASE_CHARACTER \u003d \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private static final String LOWER_CASE_CHARACTER \u003d UPPER_CASE_CHARACTER.toLowerCase();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private static final String NUMBERS \u003d \"0123456789\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private static final String SPECIAL_CHARACTER \u003d \"~!@#$%^\u0026*()_+~[]{},./;\u0027\u003c\u003e?\\\\`-\u003d\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private static final String CHARACTER_STRING \u003d UPPER_CASE_CHARACTER"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            + LOWER_CASE_CHARACTER + NUMBERS + SPECIAL_CHARACTER;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * Generates Random String for JUnit testing."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @param count String Length"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @return Random String"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public String randomString(int count) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            int character \u003d (int)(Math.random() * CHARACTER_STRING.length());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            builder.append(CHARACTER_STRING.charAt(character));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public void setAndLoadData() throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        File file \u003d new File(\"data/storageTest.txt\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        Storage test \u003d new Storage(\"data/storageTest.txt\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        List\u003cTask\u003e testTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        Random random \u003d new Random();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        for (int i \u003d 0; i \u003c 2000; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            int taskType \u003d random.nextInt(7);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            int randomDone \u003d random.nextInt(2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            String randomTaskName \u003d randomString(random.nextInt(100) + 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            String randomStringForTask \u003d randomString(random.nextInt(20));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            long randomStartDateInMillis \u003d System.currentTimeMillis() + random.nextInt();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            long randomEndDateInMillis \u003d randomStartDateInMillis + random.nextInt() + 60000;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            DateTime randomStartDate \u003d new DateTime(new Date(randomStartDateInMillis));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            DateTime randomEndDate \u003d new DateTime(new Date(randomEndDateInMillis));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                testTasks.add(new Todo(randomDone, randomTaskName));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                testTasks.add(new Deadline(randomDone, randomTaskName,randomStartDate));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                testTasks.add(new Event(randomDone, randomTaskName, randomStartDate, randomEndDate));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                testTasks.add(new Within(randomDone, randomTaskName, randomStartDate, randomEndDate));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                testTasks.add(new Tentative(randomDone, randomTaskName, randomStartDate, randomEndDate));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            case 5:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                testTasks.add("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                        new Recurring(randomTaskName, randomStartDate, randomEndDate, random.nextInt(3000)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            case 6:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                testTasks.add(new FileTask(randomDone, randomTaskName));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        test.setData(testTasks);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        List\u003cTask\u003e testTasksCopy \u003d test.loadData();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        for (int i \u003d 0; i \u003c testTasksCopy.size(); i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            String testTasksString \u003d testTasks.get(i).toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            String testTasksCopyString \u003d testTasksCopy.get(i).toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            assertTrue(testTasksString.equals(testTasksCopyString));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 11,
      "-": 6,
      "TCK1997": 80
    }
  },
  {
    "path": "src/test/java/TentativeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Tentative;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "class TentativeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void testToString_createAndMarkDoneNewTask() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime startDate \u003d new DateTime(\"09/19/2019 12:00\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime endDate \u003d new DateTime(\"09/27/2019 12:00\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d new Tentative(\"holidays\", startDate, endDate);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[TE][✗] holidays (around: 09/19/2019 12:00 to 09/27/2019 12:00 - date not fixed)\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                task.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(\"[TE][✓] holidays (around: 09/19/2019 12:00 to 09/27/2019 12:00 - date not fixed)\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                task.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        task.markDone();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[TE][✓] holidays (around: 09/19/2019 12:00 to 09/27/2019 12:00 - date not fixed)\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                task.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(\"[TE][✗] holidays (around: 09/19/2019 12:00 to 09/27/2019 12:00 - date not fixed)\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                task.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void testStoreString_createAndMarkDoneNewTask() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime startDate \u003d new DateTime(\"09/19/2019 12:00\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime endDate \u003d new DateTime(\"09/27/2019 12:00\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d new Tentative(\"holidays\", startDate, endDate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"TE | 0 | holidays | 09/19/2019 12:00 | 09/27/2019 12:00\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                task.storeString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(\"TE | 1 | holidays | 09/19/2019 12:00 | 09/27/2019 12:00\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                task.storeString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        task.markDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"TE | 1 | holidays | 09/19/2019 12:00 | 09/27/2019 12:00\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                task.storeString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(\"TE | 0 | holidays | 09/19/2019 12:00 | 09/27/2019 12:00\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                task.storeString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 2,
      "-": 36,
      "TCK1997": 5
    }
  },
  {
    "path": "src/test/java/TimeConflictTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import duke.lists.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.InputException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class TimeConflictTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    void testIfTwoEventsOverlap_TestOne() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new Storage(\"data/dukeTest.txt\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Command addEventOne \u003d new Parser().parse(\"event eventOne /at 09/19/2019 14:00 to 09/19/2019 17:00\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        addEventOne.execute(tasks, storage, ui);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Command addEventTwo \u003d new Parser().parse(\"event eventTwo /at 09/19/2019 15:00 to 09/19/2019 17:00\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            addEventTwo.execute(tasks, storage, ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InputException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(e.getMessage(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"Invalid Input\\n\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Time conflicting with:\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"    \" + \"1.[E][✗] eventOne (at: 09/19/2019 14:00 to 09/19/2019 17:00)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Please choose another time interval.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void testIfTwoEventsOverlap_TestTwo() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new Storage(\"data/dukeTest.txt\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Command addEventOne \u003d new Parser().parse(\"event eventOne /at 09/19/2019 14:00 to 09/19/2019 17:00\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addEventOne.execute(tasks, storage, ui);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Command addEventTwo \u003d new Parser().parse(\"event eventTwo /at 09/19/2019 13:00 to 09/19/2019 18:00\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            addEventTwo.execute(tasks, storage, ui);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InputException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(e.getMessage(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"Invalid Input\\n\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"Time conflicting with:\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"    \" + \"1.[E][✗] eventOne (at: 09/19/2019 14:00 to 09/19/2019 17:00)\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"Please choose another time interval.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void testIfTwoEventsOverlap_TestThree() throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new Storage(\"data/dukeTest.txt\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Command addEventOne \u003d new Parser().parse(\"event eventOne /at 09/19/2019 14:00 to 09/19/2019 17:00\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        addEventOne.execute(tasks, storage, ui);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Command addEventTwo \u003d new Parser().parse(\"event eventTwo /at 09/19/2019 14:00 to 09/19/2019 15:00\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            addEventTwo.execute(tasks, storage, ui);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InputException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(e.getMessage(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"Invalid Input\\n\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"Time conflicting with:\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"    \" + \"1.[E][✗] eventOne (at: 09/19/2019 14:00 to 09/19/2019 17:00)\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"Please choose another time interval.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    void testIfTwoEventsOverlap_TestFour() throws DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new Storage(\"data/dukeTest.txt\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Command addEventOne \u003d new Parser().parse(\"event eventOne /at 09/19/2019 14:00 to 09/19/2019 17:00\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        addEventOne.execute(tasks, storage, ui);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Command addEventTwo \u003d new Parser().parse(\"event eventTwo /at 09/19/2019 18:00 to 09/19/2019 19:00\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addEventTwo.execute(tasks, storage, ui),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Got it. I\u0027ve added this event:\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"[E][✗] eventTwo (at: 09/19/2019 18:00 to 09/19/2019 19:00)\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"You currently have 2 tasks in the list.\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"____________________________________________________________\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 1,
      "-": 91
    }
  },
  {
    "path": "src/test/java/ViewScheduleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewScheduleTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    void testDateCheckDeadline() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime inputDate \u003d new DateTime(new Date(2019, 9,20));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d new Deadline(\"Test\", inputDate);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertTrue(task.compareEquals(inputDate));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime inputDateTwo \u003d new DateTime(new Date(2019, 9,21));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertFalse(task.compareEquals(inputDateTwo));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void testDateCheckEvent() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime inputDate \u003d new DateTime(new Date(2019, 9,20));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime startDate \u003d new DateTime(new Date(2019, 9,19));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime endDate \u003d new DateTime(new Date(2019, 9,21));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d new Event(\"Test\", startDate, endDate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertTrue(task.compareEquals(inputDate));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertTrue(task.compareEquals(startDate));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertTrue(task.compareEquals(endDate));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime inputDateTwo \u003d new DateTime(new Date(2019, 9,23));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertFalse(task.compareEquals(inputDateTwo));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 3,
      "-": 20,
      "TCK1997": 12
    }
  },
  {
    "path": "src/test/java/WithinTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Within;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import duke.items.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class WithinTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void testToString_createAndMarkDoneNewTask() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime startDate \u003d new DateTime(\"09/19/2019 12:00\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime endDate \u003d new DateTime(\"09/20/2019 12:00\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d new Within(\"Watch movie\", startDate, endDate);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[W][✗] Watch movie (between: 09/19/2019 12:00 and 09/20/2019 12:00)\", task.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(\"[W][✓] Watch movie (between: 09/19/2019 12:00 and 09/20/2019 12:00)\", task.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        task.markDone();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[W][✓] Watch movie (between: 09/19/2019 12:00 and 09/20/2019 12:00)\", task.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(\"[W][✗] Watch movie (between: 09/19/2019 12:00 and 09/20/2019 12:00)\", task.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void testStoreString_createAndMarkDoneNewTask() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime startDate \u003d new DateTime(\"09/19/2019 12:00\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime endDate \u003d new DateTime(\"09/20/2019 12:00\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d new Within(\"Watch movie\", startDate, endDate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"W | 0 | Watch movie | 09/19/2019 12:00 | 09/20/2019 12:00\", task.storeString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(\"W | 1 | Watch movie | 09/19/2019 12:00 | 09/20/2019 12:00\", task.storeString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        task.markDone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"W | 1 | Watch movie | 09/19/2019 12:00 | 09/20/2019 12:00\", task.storeString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(\"W | 0 | Watch movie | 09/19/2019 12:00 | 09/20/2019 12:00\", task.storeString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 2,
      "-": 29,
      "TCK1997": 5
    }
  }
]
