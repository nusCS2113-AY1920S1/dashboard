[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    archiveBaseName \u003d \"lite\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    archiveVersion \u003d \"v1.2.1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "group \u0027seedu.spinbox\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00271.1.0\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    mainClassName \u003d \"spinbox.gui.Launcher\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.joestelmach\u0027, name: \u0027natty\u0027, version: \u00270.6\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 3,
      "ttippinyu": 1,
      "-": 45
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "rootProject.name \u003d \u0027spinbox\u0027"
      }
    ],
    "authorContributionMap": {
      "TCK1997": 1
    }
  },
  {
    "path": "src/main/Resources/view/MainWindow.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    -fx-pref-width: 250"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ".tab-header-background {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    -fx-background-color:#25274D"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ".tab-pane \u003e .tab-header-area \u003e .headers-region \u003e .tab \u003e .tab-container \u003e .tab-label {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    -fx-pref-width: 230;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    -fx-text-fill: -fx-text-base-color;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "TCK1997": 11
    }
  },
  {
    "path": "src/main/Resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "\u003cGridPane prefHeight\u003d\"750.0\" prefWidth\u003d\"1000.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "          minWidth\u003d\"-Infinity\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "          fx:controller\u003d\"spinbox.gui.MainWindow\" hgap\u003d\"10.0\" style\u003d\"-fx-background-color: #464866\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"10.0\" percentHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    \u003cTabPane fx:id\u003d\"tabPane\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" tabClosingPolicy\u003d\"UNAVAILABLE\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "             GridPane.columnSpan\u003d\"3\" GridPane.rowSpan\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        \u003c!--Start of Main tab--\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        \u003cTab text\u003d\"Main\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            \u003cSplitPane dividerPositions\u003d\"0.6525\" prefHeight\u003d\"492.0\" prefWidth\u003d\"800.0\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                \u003cScrollPane fitToWidth\u003d\"true\" fitToHeight\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    \u003cVBox fx:id\u003d\"overallTasksView\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"528.0\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                          prefWidth\u003d\"515.0\" style\u003d\"-fx-background-color: #25274D\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                \u003cScrollPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    \u003cVBox fx:id\u003d\"examsList\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"511.0\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                          prefWidth\u003d\"270.0\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        \u003c!--End of Main tab--\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        \u003c!--Start of Calendar tab--\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        \u003cTab text\u003d\"Calendar\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        \u003c!--End of Calendar tab--\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        \u003c!--Start of Modules tab--\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        \u003cTab text\u003d\"Modules\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            \u003cGridPane fx:id\u003d\"modulesTabContainer\" style\u003d\"-fx-background-color: #464866\" \u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\"  percentWidth\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\"  percentWidth\u003d\"75.0\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    \u003cRowConstraints vgrow\u003d\"SOMETIMES\" percentHeight\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    \u003cRowConstraints vgrow\u003d\"SOMETIMES\" percentHeight\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        \u003c!--End of Modules tab--\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    \u003cButton fx:id\u003d\"submitButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            prefWidth\u003d\"76.0\" text\u003d\"Send\" GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"724.0\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rssujay"
        },
        "content": "               GridPane.columnSpan\u003d\"2\" GridPane.rowIndex\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rssujay"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "rssujay": 44,
      "-": 8,
      "TCK1997": 34
    }
  },
  {
    "path": "src/main/Resources/view/ModuleListBox/ModuleListBox.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "#vBox-pane {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    -fx-background-color: #2E9CCA;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "#vBox-pane:hover {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    -fx-background-color: #29648A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    -fx-cursor: hand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 8
    }
  },
  {
    "path": "src/main/Resources/view/ModuleListBox/ModuleListBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "\u003cfx:root xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"  type\u003d\"javafx.scene.layout.VBox\" stylesheets\u003d\"@ModuleListBox.css\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        id\u003d\"vBox-pane\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    \u003cLabel fx:id\u003d\"moduleCodeLabel\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    \u003cLabel fx:id\u003d\"moduleNameLabel\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "rssujay": 15
    }
  },
  {
    "path": "src/main/Resources/view/itemBoxes/FileBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "\u003c?import javafx.scene.shape.Line?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"110.0\" prefWidth\u003d\"403.0\" type\u003d\"javafx.scene.layout.VBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        \u003cLabel fx:id\u003d\"fileDetails\" layoutX\u003d\"16.0\" layoutY\u003d\"70.0\" prefHeight\u003d\"34.0\" prefWidth\u003d\"200.0\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        \u003cLine endX\u003d\"302.0\" layoutX\u003d\"101.0\" layoutY\u003d\"110.0\" startX\u003d\"-100.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "rssujay": 12
    }
  },
  {
    "path": "src/main/Resources/view/itemBoxes/GradedComponentBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "\u003c?import javafx.scene.shape.Line?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"110.0\" prefWidth\u003d\"403.0\" type\u003d\"javafx.scene.layout.VBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        \u003cLabel fx:id\u003d\"gradedComponentDetails\" layoutX\u003d\"16.0\" layoutY\u003d\"70.0\" prefHeight\u003d\"34.0\" prefWidth\u003d\"200.0\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        \u003cLine endX\u003d\"302.0\" layoutX\u003d\"101.0\" layoutY\u003d\"110.0\" startX\u003d\"-100.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "rssujay": 11
    }
  },
  {
    "path": "src/main/Resources/view/itemBoxes/TaskBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "\u003c?import javafx.scene.shape.Line?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"110.0\" prefWidth\u003d\"403.0\" type\u003d\"javafx.scene.layout.AnchorPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        \u003cLabel fx:id\u003d\"module\" layoutX\u003d\"16.0\" layoutY\u003d\"70.0\" prefHeight\u003d\"34.0\" prefWidth\u003d\"73.0\" text\u003d\"module\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        \u003cLabel fx:id\u003d\"dates\" layoutX\u003d\"112.0\" layoutY\u003d\"70.0\" prefHeight\u003d\"34.0\" prefWidth\u003d\"291.0\" text\u003d\"dates\" textAlignment\u003d\"RIGHT\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        \u003cLabel fx:id\u003d\"description\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"16.0\" layoutY\u003d\"14.0\" prefHeight\u003d\"66.0\" prefWidth\u003d\"372.0\" text\u003d\"description\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            \u003cFont name\u003d\"Segoe UI Light\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "      \u003cLine endX\u003d\"302.0\" layoutX\u003d\"101.0\" layoutY\u003d\"110.0\" startX\u003d\"-100.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "TCK1997": 18
    }
  },
  {
    "path": "src/main/java/spinbox/DateTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import com.joestelmach.natty.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class DateTime implements Comparable\u003cDateTime\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private Date dateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Constructor for simple dateTime object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @param dateTime A Date Object with date and time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public DateTime(Date dateTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public DateTime(String dateTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.dateTime \u003d parser.parse(dateTime).get(0).getDates().get(0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public DateTime(String dateTime, int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.dateTime \u003d parser.parse(dateTime).get(0).getDates().get(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public Date getDateTime() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * Return the day of the month."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @return day of the month"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public int getDayOfMonth() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        calendar.setTime(dateTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * Return the day of the week."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @return day of the week"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public int getDayOfWeek() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        calendar.setTime(dateTime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return calendar.get(Calendar.DAY_OF_WEEK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * Return hour."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @return hour"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public int getHour() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        calendar.setTime(dateTime);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return calendar.get(Calendar.HOUR_OF_DAY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * Converts the Date object back to the string version in the format of MM/dd/yyyy HH:mm"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * This can be reused to create an identical dateTime object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @return String equivalent of Date object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"MM/dd/yyyy HH:mm\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return dateFormat.format(dateTime);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public boolean before(DateTime dateTime) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return this.dateTime.before(dateTime.getDateTime());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public boolean equals(DateTime dateTime) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return this.dateTime.equals(dateTime.getDateTime());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public boolean after(DateTime dateTime) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return this.dateTime.after(dateTime.getDateTime());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public int compareTo(DateTime dateTimeTwo) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return this.getDateTime().compareTo(dateTimeTwo.getDateTime());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * Return another DateTime with date"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * set as start of the week relative to this DateTime."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @return start of the week"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public DateTime getStartOfTheWeek() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        calendar.setTime(dateTime);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        while (calendar.get(Calendar.DAY_OF_WEEK) !\u003d Calendar.SUNDAY) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            calendar.add(Calendar.DATE, -1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return new DateTime(calendar.getTime());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * Return another DateTime with date"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * set as end of the week relative to this DateTime."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @return end of the week"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public DateTime getEndOfTheWeek() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        calendar.setTime(dateTime);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        while (calendar.get(Calendar.DAY_OF_WEEK) !\u003d Calendar.SATURDAY) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            calendar.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return new DateTime(calendar.getTime());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * Return another DateTime with date"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * set as start of the month relative to this DateTime."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @return start of the month"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public DateTime getStartOfTheMonth() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        calendar.setTime(dateTime);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        calendar.set(Calendar.DAY_OF_MONTH, 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return new DateTime(calendar.getTime());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * Return another DateTime with date"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * set as end of the month relative to this DateTime."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @return end of the month"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public DateTime getEndOfTheMonth() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        calendar.setTime(dateTime);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMaximum(Calendar.DAY_OF_MONTH));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return new DateTime(calendar.getTime());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 23,
      "ttippinyu": 1,
      "TCK1997": 119
    }
  },
  {
    "path": "src/main/java/spinbox/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.gui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": " * A GUI for SpinBox using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            GridPane gridPane \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            Scene scene \u003d new Scene(gridPane);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().initializeGui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (SpinBoxException | IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 6,
      "ttippinyu": 3,
      "-": 21
    }
  },
  {
    "path": "src/main/java/spinbox/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.commands.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.commands.FindCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.commands.HelpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.commands.RemoveCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.commands.RemoveMultipleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.commands.SetDateCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.commands.ScoreCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.commands.SetNameCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.commands.UpdateCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.commands.UpdateMultipleCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.commands.ViewCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.commands.ExportCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String INVALID_COMMAND \u003d \"Please provide a valid command:\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\u0027\u003caction\u003e \u003cpage\u003e / \u003ccontent\u003e\u0027 or \u0027bye\u0027\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static ArrayDeque\u003cString\u003e pageTrace;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public static void setPageTrace(ArrayDeque\u003cString\u003e pageTraceNew) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        pageTrace \u003d pageTraceNew;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Builds the required page data for command input. Return page and maybe moduleCode"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param inputPageData The page data input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @return Full page data."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @throws InputException If the input is invalid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static String commandBuilder(String inputPageData) throws InputException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String pageData \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        String[] pageComponent \u003d inputPageData.split(\" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        ArrayDeque\u003cString\u003e tempPageTrace \u003d pageTrace.clone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        // append page or page + module from pageTrace"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (pageComponent[0].isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            pageData \u003d pageData.concat(tempPageTrace.getLast());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            tempPageTrace.removeLast();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            if (tempPageTrace.size() !\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                pageData \u003d pageData.concat(\" \" + tempPageTrace.getLast().toUpperCase());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        // append page from input and maybe moduleCode from pageTrace"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        } else if (pageComponent.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            switch (pageComponent[0]) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"main\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"calendar\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                pageData \u003d pageData.concat(pageComponent[0]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"modules\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                pageData \u003d pageData.concat(pageComponent[0]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                tempPageTrace.removeLast();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                if (tempPageTrace.size() !\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    pageData \u003d pageData.concat(\" \" + tempPageTrace.getLast().toUpperCase());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                // means inputPageData is a moduleCode"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                pageData \u003d pageData.concat(\"modules \" + pageComponent[0].toUpperCase());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        // append \"modules\" + moduleCode from input"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        } else if (pageComponent.length \u003d\u003d 2 || pageComponent.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            if (pageComponent[0].equals(\"modules\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                pageData \u003d pageData.concat(\"modules \" + pageComponent[1].toUpperCase());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                throw new InputException(INVALID_COMMAND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return pageData;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Parses an input string into a workable command."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param input user typed in this string."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return a Command that can executed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws SpinBoxException Storage errors or input errors."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public static Command parse(String input) throws SpinBoxException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String action \u003d \"\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String pageData \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        String[] pageDataComponents \u003d new String[10];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String[] slashSeparate \u003d input.split(\" / \", 2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            if (slashSeparate.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                if (input.toLowerCase().equals(\"bye\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    action \u003d \"bye\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                } else if (input.toLowerCase().trim().equals(\"help\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    action \u003d \"help\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    content \u003d \"\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    throw new InputException(INVALID_COMMAND);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            } else if (slashSeparate[0].toLowerCase().equals(\"help\") \u0026\u0026 slashSeparate.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                action \u003d \"help\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                content \u003d slashSeparate[1].trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                content \u003d slashSeparate[1].trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                String[] frontComponents \u003d slashSeparate[0].split(\" \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                action \u003d frontComponents[0];"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                pageData \u003d slashSeparate[0].replace(action, \"\").trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                pageData \u003d commandBuilder(pageData.toLowerCase());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                pageDataComponents \u003d pageData.split(\" \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(INVALID_COMMAND);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        switch (action.toLowerCase()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            command \u003d new ViewCommand(pageDataComponents, content);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            command \u003d new AddCommand(pageDataComponents, content);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"remove\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            command \u003d new RemoveCommand(pageDataComponents, content);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"update\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            command \u003d new UpdateCommand(pageDataComponents, content);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        case \"export\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            command \u003d new ExportCommand(pageDataComponents, content);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        case \"remove-*\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            command \u003d new RemoveMultipleCommand(pageDataComponents, content);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        case \"update-*\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            command \u003d new UpdateMultipleCommand(pageDataComponents, content);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        case \"score\":"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            command \u003d new ScoreCommand(pageDataComponents, content);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            command \u003d new FindCommand(pageDataComponents, content);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        case \"set-date\":"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            command \u003d new SetDateCommand(pageDataComponents, content);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        case \"set-name\":"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            command \u003d new SetNameCommand(pageDataComponents, content);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            command \u003d new HelpCommand(content);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(INVALID_COMMAND);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 23,
      "ttippinyu": 66,
      "lackmoo": 73
    }
  },
  {
    "path": "src/main/java/spinbox/SpinBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.entities.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.StorageException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.ModuleContainer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class SpinBox {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private Ui userInterface;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private ModuleContainer modules;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private ArrayDeque\u003cString\u003e pageTrace;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private boolean shutdown \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Full Constructor for CLI/GUI version of SpinBox."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public SpinBox(boolean cliMode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        userInterface \u003d new Ui(cliMode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace.add(\"main\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            modules \u003d new ModuleContainer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            userInterface.showFormatted(e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (cliMode) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            this.startSpinBoxCli();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Default Constructor, Entry point into this java program, for CLI version."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public SpinBox() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this(false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Entry point into this java program, for CLI version."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        new SpinBox(true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * CLI mode - the String returned by getResponse is to be printed to the console."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private void startSpinBoxCli() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        userInterface.print(userInterface.showWelcome());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        while (!this.isShutdown()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            userInterface.print(userInterface.showPage(pageTrace));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            String input \u003d userInterface.readInput();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            userInterface.print(getResponse(input, false));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Method to interact with SpinBox."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param input String input from GUI/CLI layer."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @param guiMode boolean to check if it is running gui."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return output response String to be returned to GUI/CLI."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public String getResponse(String input, boolean guiMode) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            Parser.setPageTrace(pageTrace);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            String response \u003d command.execute(modules, pageTrace, userInterface, guiMode);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            this.setShutdown(command.isExit());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        } catch (SpinBoxException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            return userInterface.showFormatted(e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private void setShutdown(boolean shutdown) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.shutdown \u003d shutdown;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public boolean isShutdown() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return shutdown;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public ModuleContainer getModuleContainer() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 10,
      "ttippinyu": 72,
      "TCK1997": 12
    }
  },
  {
    "path": "src/main/java/spinbox/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    boolean gui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Ui(boolean gui) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.gui \u003d gui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is to show a welcome message on startup."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the welcome String."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e welcome \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        welcome.add(\"Hello! I\u0027m SpinBox\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        welcome.add(\"What can I do for you?\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return showFormatted(welcome);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is to show a goodbye message on exit."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showGoodbye() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return showFormatted(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * This is to add the SpinBox UI wrapper to printed messages."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param output A single string to be formatted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the formatted output."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showFormatted(String output) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        String formattedOutput;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        if (!gui) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            formattedOutput \u003d output;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            formattedOutput \u003d HORIZONTAL_LINE + \"\\n\" + output + \"\\n\" + HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return formattedOutput;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * This is to add the SpinBox UI wrapper to printed messages."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param output A List of strings that will be accumulated into a Single string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the formatted String."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showFormatted(List\u003cString\u003e output) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String formattedOutput \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String outputItem : output) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedOutput \u003d formattedOutput.concat(outputItem + \"\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (formattedOutput.length() \u003e 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return showFormatted(formattedOutput.substring(0, formattedOutput.length() - 1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return showFormatted(\"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void print(String input) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String readInput() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Returns the current page."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param pageTrace the structure the pages are stored."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return a string of the page hierarchy."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String showPage(ArrayDeque\u003cString\u003e pageTrace) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        ArrayDeque\u003cString\u003e tempPageTrace \u003d pageTrace.clone();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String trace \u003d \"\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        trace \u003d trace.concat(\"Page: \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        while (tempPageTrace.size() \u003e 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            trace \u003d trace.concat(\"/\" + tempPageTrace.getLast());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            tempPageTrace.removeLast();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return trace;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "ttippinyu": 22,
      "-": 56,
      "TCK1997": 12
    }
  },
  {
    "path": "src/main/java/spinbox/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.ModuleContainer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.containers.lists.FileList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.Notepad;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.lists.GradeList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.entities.items.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.GradedComponent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.tasks.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.tasks.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Exam;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Lab;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Lecture;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Tutorial;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.tasks.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.tasks.Todo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.tasks.Schedulable;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.lists.TaskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String MODULE_ADDED \u003d \"The following module has been added to SpinBox: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String MODULE_NOT_ADDED \u003d \"A module with this code already exists in SpinBox.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String NON_EXISTENT_MODULE \u003d \"This module does not exist.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String NOTE_ADDED \u003d \"A new note has been successfully added to \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private static final String UNKNOWN_ITEM_TYPE \u003d \"Sorry, unknown item type to add.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private static final String FILE_ERROR_MESSAGE \u003d \"Please ensure that you enter \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            + \"the full command for adding files:\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private static final String NOTE_ERROR_MESSAGE \u003d \"Please ensure that you enter \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            + \"the full command for adding notes:\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private static final String TODO_ERROR_MESSAGE \u003d \"Please ensure that you enter \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            + \"the full command for adding todo:\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String GRADED_COMPONENT_ERROR_MESSAGE \u003d \"Please ensure that you enter \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            + \"the full command for adding graded components:\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private static final String DEADLINE_ERROR_MESSAGE \u003d \"Please ensure that you enter \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            + \"the full command for adding deadlines:\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private static final String EVENT_ERROR_MESSAGE \u003d \"Please ensure that you enter \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"the full command for adding this event type task:\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private static final String MODULE_ERROR_MESSAGE \u003d \"Please ensure that you enter \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            + \"the full command for adding modules:\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private static final String FILE_FORMAT \u003d \"add \u003cmoduleCode\u003e / file \u003cfileName\u003e\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private static final String NOTE_FORMAT \u003d \"add \u003cmoduleCode\u003e / note \u003cfileName\u003e\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String GRADED_COMP_FORMAT \u003d \"add \u003cmoduleCode\u003e / grade \u003ccomponentName\u003e weightage: \u003cweightage\u003e%\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private static final String TODO_FORMAT \u003d \"add \u003cmoduleCode\u003e / todo \u003cfileName\u003e\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String DEADLINE_FORMAT \u003d \"add \u003cmoduleCode\u003e / deadline \u003ctaskName\u003e by: \u003cMM/DD/YYYY HH:MM\u003e\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private static final String EVENT_FORMAT \u003d \"add \u003cmoduleCode\u003e / \u003ceventType\u003e \u003ctaskName\u003e at: \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        + \"\u003cstart as MM/DD/YYYY HH:MM\u003e to \u003cend as MM/DD/YYYY HH:MM\u003e\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private static final String MODULE_FORMAT \u003d \"add / module \u003cmoduleCode\u003e \u003cmoduleName\u003e\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String EMPTY_TODO_DESCRIPTION \u003d \"☹ OOPS!!! The description of a task cannot be empty.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String EMPTY_DEADLINE_DESCRIPTION \u003d \"☹ OOPS!!! The description of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String EMPTY_GRADE_DESCRIPTION \u003d \"☹ OOPS!!! The description of a component cannot be empty.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String EMPTY_EVENT_DESCRIPTION \u003d \"☹ OOPS!!! The description of an event cannot be empty.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String EMPTY_EXAM_DESCRIPTION \u003d \"☹ OOPS!!! The description of an exam cannot be empty.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String EMPTY_LAB_DESCRIPTION \u003d \"☹ OOPS!!! The description of a lab session cannot be empty.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String EMPTY_LECTURE_DESCRIPTION \u003d \"☹ OOPS!!! The description of a lecture cannot be empty.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String EMPTY_TUTORIAL_DESCRIPTION \u003d \"☹ OOPS!!! The description of a tutorial \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"session cannot be empty.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Constructor for initialization of variables to support addition of entities."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param pageDataComponents page data components."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param content A string containing the content of the processed user input."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public AddCommand(String[] pageDataComponents, String content) throws InputException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (pageDataComponents.length \u003e 1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            this.moduleCode \u003d pageDataComponents[1];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.type \u003d content.split(\" \")[0].toLowerCase();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public String execute(ModuleContainer moduleContainer, ArrayDeque\u003cString\u003e pageTrace, Ui ui, boolean guiMode) throws"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            SpinBoxException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        File fileAdded;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent gradedComponentAdded;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        Task taskAdded;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        DateTime start;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        DateTime end;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"file\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    FileList files \u003d module.getFiles();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    String fileName \u003d content.replace(type, \"\").trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    fileAdded \u003d files.add(new File(0, fileName));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return HORIZONTAL_LINE + \"\\nAdded into \" + module.toString() + \" file: \" + fileAdded.toString()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + \"\\nYou currently have \" + files.getList().size()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + ((files.getList().size() \u003d\u003d 1) ? \" file in the list.\" : \" files in the list.\") + \"\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                throw new InputException(FILE_ERROR_MESSAGE + FILE_FORMAT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        case \"note\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    Notepad notepad \u003d module.getNotepad();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    String noteContent \u003d content.replace(type, \"\").trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    notepad.addLine(noteContent);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return HORIZONTAL_LINE + \"\\n\" + NOTE_ADDED + moduleCode + \"\\n\" + HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                throw new InputException(NOTE_ERROR_MESSAGE + NOTE_FORMAT);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        case \"grade\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    GradeList gradeList \u003d module.getGrades();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    String gradedComponentDetails \u003d content.replace(type, \"\").trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    gradedComponentDetails \u003d gradedComponentDetails.replace(\"%\", \"\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    String gradedComponentName \u003d  gradedComponentDetails.substring(0,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                            gradedComponentDetails.lastIndexOf(\" weightage:\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    double weightage \u003d Double.parseDouble(gradedComponentDetails.split(\"weightage: \")[1]);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    if (gradedComponentDetails.split(\" \")[0].equals(\"weightage:\")) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                        throw new InputException(EMPTY_GRADE_DESCRIPTION);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    gradedComponentAdded \u003d gradeList.add(new GradedComponent(gradedComponentName, weightage));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    return HORIZONTAL_LINE + \"\\nAdded into \" + module.toString() + \" grades: \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                            + gradedComponentAdded.toString() + \"\\n You currently have \" + gradeList.size()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                            +  ((gradeList.size() \u003d\u003d 1) ? \" graded component in the list.\" : \" graded components\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                            + \" in the list.\") + \"\\n\" + HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                throw new InputException(GRADED_COMPONENT_ERROR_MESSAGE + GRADED_COMP_FORMAT);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    TaskList tasks \u003d module.getTasks();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    String taskDescription \u003d content.replace(type, \"\").trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    if (taskDescription.equals(\"\")) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        throw new InputException(EMPTY_TODO_DESCRIPTION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    taskAdded \u003d tasks.add(new Todo(taskDescription));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return HORIZONTAL_LINE + \"\\nAdded into \" + module.toString() + \" task: \" + taskAdded.toString()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + \"\\nYou currently have \" + tasks.getList().size()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + ((tasks.getList().size() \u003d\u003d 1) ? \" task in the list.\" : \" tasks in the list.\") + \"\\n\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                throw new InputException(TODO_ERROR_MESSAGE + TODO_FORMAT);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    TaskList tasks \u003d module.getTasks();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    String taskDescription \u003d content.replace(type, \"\").trim();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    if (taskDescription.split(\" \")[0].equals(\"by:\")) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        throw new InputException(EMPTY_DEADLINE_DESCRIPTION);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    start \u003d new DateTime(taskDescription.split(\"by: \")[1]);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    taskAdded \u003d tasks.add(new Deadline(taskDescription.substring(0,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                            taskDescription.lastIndexOf(\" by:\")), start));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return HORIZONTAL_LINE + \"\\nAdded into \" + module.toString() + \" task: \" + taskAdded.toString()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + \"\\nYou currently have \" + tasks.getList().size()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + ((tasks.getList().size() \u003d\u003d 1) ? \" task in the list.\" : \" tasks in the list.\") + \"\\n\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                throw new InputException(DEADLINE_ERROR_MESSAGE + DEADLINE_FORMAT);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        case \"exam\":"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        case \"lab\":"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        case \"lecture\":"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        case \"tutorial\":"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    String taskDescription \u003d content.replace(type, \"\").trim();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    if (taskDescription.split(\" \")[0].equals(\"at:\")) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        if (this.type.equals(\"event\")) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            throw new InputException(EMPTY_EVENT_DESCRIPTION);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        } else if (this.type.equals(\"exam\")) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            throw new InputException(EMPTY_EXAM_DESCRIPTION);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        } else if (this.type.equals(\"tutorial\")) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            throw new InputException(EMPTY_TUTORIAL_DESCRIPTION);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        } else if (this.type.equals(\"lab\")) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            throw new InputException(EMPTY_LAB_DESCRIPTION);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        } else if (this.type.equals(\"lecture\")) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            throw new InputException(EMPTY_LECTURE_DESCRIPTION);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    TaskList tasks \u003d module.getTasks();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    start \u003d new DateTime(taskDescription.split(\"at: \")[1], 0);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    end \u003d new DateTime(taskDescription.split(\"at: \")[1], 1);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    List\u003cTask\u003e tasksList \u003d tasks.getList();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    for (int i \u003d 0; i \u003c tasksList.size(); i++) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        Task currentTask \u003d tasksList.get(i);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                        if (currentTask.isSchedulable()) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                            if (((Schedulable) currentTask).isOverlapping(start, end)) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                                throw new InputException(\"Time conflicting with:\\n\""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                                        + \"    \" + (i + 1) + \".\" + currentTask.toString() + \"\\n\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                                        + \"Please choose another time interval.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    if (this.type.equals(\"exam\")) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        taskAdded \u003d tasks.add(new Exam(taskDescription.substring(0,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                                taskDescription.lastIndexOf(\" at:\")), start, end));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    } else if (this.type.equals(\"lab\")) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        taskAdded \u003d tasks.add(new Lab(taskDescription.substring(0,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                                taskDescription.lastIndexOf(\" at:\")), start, end));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    } else if (this.type.equals(\"lecture\")) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        taskAdded \u003d tasks.add(new Lecture(taskDescription.substring(0,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                                taskDescription.lastIndexOf(\" at:\")), start, end));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    } else if (this.type.equals(\"tutorial\")) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        taskAdded \u003d tasks.add(new Tutorial(taskDescription.substring(0,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                                taskDescription.lastIndexOf(\" at:\")), start, end));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        taskAdded \u003d tasks.add(new Event(taskDescription.substring(0,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                                taskDescription.lastIndexOf(\" at:\")), start, end));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return HORIZONTAL_LINE + \"\\nAdded into \" + module.toString() + \" task: \" + taskAdded.toString()"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + \"\\nYou currently have \" + tasks.getList().size()"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + ((tasks.getList().size() \u003d\u003d 1) ? \" task in the list.\" : \" tasks in the list.\") + \"\\n\""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                throw new InputException(EVENT_ERROR_MESSAGE + EVENT_FORMAT);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"module\":"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                String[] contentComponents \u003d content.split(\" \", 3);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                moduleCode \u003d contentComponents[1].toUpperCase();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                String moduleName \u003d contentComponents[2];"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                if (!moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    Module module \u003d new Module(this.moduleCode, moduleName);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    moduleContainer.addModule(module);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return HORIZONTAL_LINE + \"\\n\" + MODULE_ADDED + module.toString() + \"\\n\" + HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return MODULE_NOT_ADDED;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                throw new InputException(MODULE_ERROR_MESSAGE + MODULE_FORMAT);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            throw new InputException(UNKNOWN_ITEM_TYPE);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 89,
      "ttippinyu": 89,
      "lackmoo": 107,
      "TCK1997": 11
    }
  },
  {
    "path": "src/main/java/spinbox/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.ModuleContainer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String NOT_ON_MODULE_PAGE \u003d \"Please be on a module page or indicate \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"the specific module this action is for.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public abstract String execute(ModuleContainer moduleContainer, ArrayDeque\u003cString\u003e pageTrace, Ui ui,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "           boolean guiMode) throws SpinBoxException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void setExit(boolean exit) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        isExit \u003d exit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Check when there is a moduleCode indicated from the constructor."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param moduleCode the moduleCode variable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return true if there is a moduleCode indicated, false otherwise."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws InputException if there is no moduleCode indicated, tell User."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public boolean checkIfOnModulePage(String moduleCode) throws InputException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(NOT_ON_MODULE_PAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 15,
      "ttippinyu": 19,
      "lackmoo": 4
    }
  },
  {
    "path": "src/main/java/spinbox/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.ModuleContainer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.lists.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public String execute(ModuleContainer moduleContainer, ArrayDeque\u003cString\u003e pageTrace, Ui ui, boolean guiMode) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.setExit(true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return ui.showGoodbye();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 7,
      "ttippinyu": 8,
      "TCK1997": 1
    }
  },
  {
    "path": "src/main/java/spinbox/commands/ExportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.ModuleContainer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.lists.FileList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.lists.GradeList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.lists.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exporter.Exporter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String EXPORT_LOCATION \u003d \"SpinBoxData/exports/\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String FILE_HEADER \u003d \"These are your files for \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String GRADED_COMPONENTS_HEADER \u003d \"These are your graded components for \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String TASKS_HEADER \u003d \"These are your tasks for \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String FILENAME_MODIFIER_FILES \u003d \"_files.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String FILENAME_MODIFIER_GRADES \u003d \"_grades.txt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String FILENAME_MODIFIER_TASKS \u003d \"_tasks.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String ACKNOWLEDGEMENT \u003d \"Your selected items have been exported to SpinBoxData/exports\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String NON_EXISTENT_MODULE \u003d \"Sorry, that module does not exist.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String NON_EXISTENT_CATEGORY \u003d \"Sorry, that category does not exist. Please choose one of\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            + \" [tasks, files, grades]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Constructor for exporting items belonging to a module."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param pageDataComponents The current page context."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param content A string containing the content of the processed user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public ExportCommand(String[] pageDataComponents, String content) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        if (pageDataComponents.length \u003e 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.moduleCode \u003d pageDataComponents[1];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.type \u003d content.split(\" \")[0].toLowerCase();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String execute(ModuleContainer moduleContainer, ArrayDeque\u003cString\u003e pageTrace, Ui ui, boolean guiMode) throws"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            SpinBoxException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        if (!moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new InputException(NON_EXISTENT_MODULE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Module module \u003d moduleContainer.getModule(moduleCode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Exporter exporter;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        case \"files\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            exporter \u003d new Exporter(EXPORT_LOCATION + moduleCode + FILENAME_MODIFIER_FILES,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    FILE_HEADER + moduleCode);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            FileList fileList \u003d module.getFiles();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            exporter.writeData(fileList.getList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        case \"grades\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            exporter \u003d new Exporter(EXPORT_LOCATION + moduleCode + FILENAME_MODIFIER_GRADES,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    GRADED_COMPONENTS_HEADER + moduleCode);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            GradeList gradeList \u003d module.getGrades();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            exporter.writeData(gradeList.getList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        case \"tasks\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            exporter \u003d new Exporter(EXPORT_LOCATION + moduleCode + FILENAME_MODIFIER_TASKS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    TASKS_HEADER + moduleCode);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            TaskList taskList \u003d module.getTasks();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            exporter.writeData(taskList.getList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new InputException(NON_EXISTENT_CATEGORY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 80
    }
  },
  {
    "path": "src/main/java/spinbox/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.containers.ModuleContainer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.containers.lists.FileList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.entities.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.lists.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private static final String UNKNOWN_ITEM_TYPE \u003d \"Sorry, unknown item type to add.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private static final String FIND_ERROR_MESSAGE \u003d \"Please ensure that you enter \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            + \"the full command for find commands:\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private static final String FIND_FORMAT \u003d \"find \u003cmoduleCode\u003e / \u003ctype\u003e \u003ckeyword\u003e\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private static final String NON_EXISTENT_MODULE \u003d \"This module does not exist.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Constructor for finding tasks using a keyword."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param pageDataComponents pageDataComponents."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param content A string containing the content of the processed user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws InputException missing keyword"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public FindCommand(String[] pageDataComponents, String content) throws InputException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (pageDataComponents.length \u003e 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            this.moduleCode \u003d pageDataComponents[1];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.type \u003d content.split(\" \")[0].toLowerCase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String execute(ModuleContainer moduleContainer, ArrayDeque\u003cString\u003e pageTrace, Ui ui, boolean guiMode) throws"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            SpinBoxException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String[] contentComponents \u003d content.split(\" \", 2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            keyword \u003d contentComponents[1];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            return FIND_ERROR_MESSAGE + FIND_FORMAT;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"file\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                FileList files \u003d module.getFiles();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                return ui.showFormatted(files.containsKeyword(keyword));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"task\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                TaskList tasks \u003d module.getTasks();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                return ui.showFormatted(tasks.containsKeyword(keyword));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            throw new InputException(UNKNOWN_ITEM_TYPE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 19,
      "ttippinyu": 62
    }
  },
  {
    "path": "src/main/java/spinbox/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.containers.ModuleContainer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.containers.lists.HelpList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String COMMAND_NOT_FOUND \u003d \"The command specified is not a valid command. Type \u0027help\u0027 to view\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \" the full list of commands available.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private String specificCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public HelpCommand(String content) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.specificCommand \u003d content;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public String execute(ModuleContainer moduleContainer, ArrayDeque\u003cString\u003e pageTrace, Ui ui, boolean guiMode) throws"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            SpinBoxException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        HelpList helpText \u003d new HelpList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        String helpOutput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        if (specificCommand.equals(\"\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            helpOutput \u003d helpText.helpOnly;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            switch (specificCommand) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"view\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                helpOutput \u003d helpText.view;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"add\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                helpOutput \u003d helpText.add;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"remove\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                helpOutput \u003d helpText.remove;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"remove-*\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                helpOutput \u003d helpText.removeMultiple;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"set-date\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                helpOutput \u003d helpText.setDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"set-name\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                helpOutput \u003d helpText.setName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            case \"update\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                helpOutput \u003d helpText.update;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"update-*\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                helpOutput \u003d helpText.updateMultiple;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            case \"export\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                helpOutput \u003d helpText.export;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                throw new InputException(COMMAND_NOT_FOUND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return helpOutput;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 3,
      "ttippinyu": 3,
      "lackmoo": 55,
      "TCK1997": 1
    }
  },
  {
    "path": "src/main/java/spinbox/commands/RemoveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.containers.ModuleContainer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.containers.lists.FileList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.lists.GradeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.containers.lists.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.Notepad;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.entities.items.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.entities.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.GradedComponent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class RemoveCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String NON_EXISTENT_MODULE \u003d \"This module does not exist.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String NOTE_REMOVED \u003d \"A note has been successfully removed from \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String PROVIDE_INDEX \u003d \"Please provide an index to be removed.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String INVALID_REMOVE_FORMAT \u003d \"Please use valid remove format:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"remove \u003cpageContent\u003e / \u003ctype\u003e \u003cindex\u003e\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String INVALID_INDEX \u003d \"Please enter a valid index.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Constructor for initialization of variables to support removal of entities."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param pageDataComponents page data components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param content A string containing the content of the processed user input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public RemoveCommand(String[] pageDataComponents, String content) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (pageDataComponents.length \u003e 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            this.moduleCode \u003d pageDataComponents[1];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.type \u003d content.split(\" \")[0].toLowerCase();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public String execute(ModuleContainer moduleContainer, ArrayDeque\u003cString\u003e pageTrace, Ui ui, boolean guiMode) throws"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            SpinBoxException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"file\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    FileList files \u003d module.getFiles();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    int index \u003d Integer.parseInt(content.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    File fileRemoved \u003d files.get(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    files.remove(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return HORIZONTAL_LINE + \"\\nRemoved file: \" + fileRemoved.toString() + \"\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + \"You currently have \" + files.getList().size()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + ((files.getList().size() \u003d\u003d 1) ? \" file in the list.\" : \" files in the list.\") + \"\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    throw new InputException(INVALID_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    throw new InputException(PROVIDE_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        case \"note\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    Notepad notepad \u003d module.getNotepad();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    int index \u003d Integer.parseInt(content.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    notepad.removeLine(index);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return HORIZONTAL_LINE + \"\\n\" + NOTE_REMOVED + moduleCode + \"\\n\" + HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    throw new InputException(INVALID_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    throw new InputException(PROVIDE_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        case \"grade\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    GradeList gradeList \u003d module.getGrades();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    int index \u003d Integer.parseInt(content.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    GradedComponent removedComponent \u003d gradeList.get(index);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    gradeList.remove(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    return HORIZONTAL_LINE + \"\\nRemoved task: \" + removedComponent.toString() + \"\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                            + \"You currently have \" + gradeList.size()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                            + ((gradeList.size() \u003d\u003d 1) ? \" graded component in the list.\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                            : \" graded components in the list.\") + \"\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                            + HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    throw new InputException(INVALID_INDEX);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    throw new InputException(PROVIDE_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        case \"task\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    TaskList tasks \u003d module.getTasks();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    int index \u003d Integer.parseInt(content.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    Task taskRemoved \u003d tasks.get(index);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    tasks.remove(index);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return HORIZONTAL_LINE + \"\\nRemoved task: \" + taskRemoved.toString() + \"\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + \"You currently have \" + tasks.getList().size()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + ((tasks.getList().size() \u003d\u003d 1) ? \" task in the list.\" : \" tasks in the list.\") + \"\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    throw new InputException(INVALID_INDEX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    throw new InputException(PROVIDE_INDEX);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(INVALID_REMOVE_FORMAT);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 43,
      "ttippinyu": 65,
      "lackmoo": 34,
      "TCK1997": 1
    }
  },
  {
    "path": "src/main/java/spinbox/commands/RemoveMultipleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.containers.ModuleContainer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.containers.lists.FileList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.Notepad;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.exceptions.DataReadWriteException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.exceptions.InvalidIndexException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.tasks.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.lists.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "public class RemoveMultipleCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String NON_EXISTENT_MODULE \u003d \"This module does not exist.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String NOTES_REMOVED \u003d \"The specified notes have been successfully removed from \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String PROVIDE_INDEX \u003d \"Please provide the indexes to be removed.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String INVALID_INDEX \u003d \"Please enter a valid index.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String REMOVE_SINGLE_TASK \u003d \"To remove a single task, provide the input in this \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"format instead: remove \u003cpageContent\u003e / \u003ctype\u003e \u003cone index in integer form\u003e.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String INDEX_SEPARATION \u003d \"Ensure that the indexes are separated by \u0027,\u0027 without any spacing. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"E.g. remove-* \u003cpageContent\u003e / \u003ctype\u003e 2,3,4\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String INVALID_REMOVE_FORMAT \u003d \"Please use valid multiple removal format:\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"remove-* \u003cpageContent\u003e : \u003ctype\u003e \u003cindex\u003e\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String REMOVED_MULTIPLE_FILES \u003d \"Noted. I\u0027ve removed these files:\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String REMOVED_MULTIPLE_TASKS \u003d \"Noted. I\u0027ve removed these tasks:\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * Constructor for initialization of variables to support removal of entities."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param pageDataComponents page data components."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param content A string containing the content of the processed user input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public RemoveMultipleCommand(String[] pageDataComponents, String content) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (pageDataComponents.length \u003e 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            this.moduleCode \u003d pageDataComponents[1];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.type \u003d content.split(\" \")[0].toLowerCase();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * Method to remove multiple files from the file list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param finalIndexes Indexes of the files to be removed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param files The list of files in the storage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param outputMessage The message to be output to the screen."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @return outputMessage to be printed to the screen."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @throws InvalidIndexException If an invalid index is accessed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @throws DataReadWriteException If there is an error reading/writing to the file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String removeMultipleFile(List\u003cInteger\u003e finalIndexes, FileList files, String outputMessage)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throws InvalidIndexException, DataReadWriteException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        for (int i \u003d 0; i \u003c finalIndexes.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            File fileRemoved \u003d files.remove(finalIndexes.get(i));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                outputMessage \u003d outputMessage.concat(HORIZONTAL_LINE + \"\\n\" + REMOVED_MULTIPLE_FILES + \"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            outputMessage \u003d outputMessage.concat(fileRemoved.toString() + \"\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * Method to remove multiple tasks from the task list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param finalIndexes Indexes of the tasks to be removed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param tasks The list of tasks in the storage."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param outputMessage The message to be output to the screen."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @return outputMessage to be printed to the screen."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @throws InvalidIndexException If an invalid index is accessed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @throws DataReadWriteException If there is an error reading/writing to the file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String removeMultipleTask(List\u003cInteger\u003e finalIndexes, TaskList tasks, String outputMessage)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throws InvalidIndexException, DataReadWriteException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        for (int i \u003d 0; i \u003c finalIndexes.size(); i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            Task taskRemoved \u003d tasks.remove(finalIndexes.get(i));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                outputMessage \u003d outputMessage.concat(HORIZONTAL_LINE + \"\\n\" + REMOVED_MULTIPLE_TASKS + \"\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            outputMessage \u003d outputMessage.concat(taskRemoved.toString() + \"\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public String execute(ModuleContainer moduleContainer, ArrayDeque\u003cString\u003e pageTrace, Ui ui, boolean guiMode) throws"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            SpinBoxException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        int inputSize \u003d content.split(\" \").length;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        if (inputSize \u003e 2) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(INDEX_SEPARATION);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            String[] splitIndexes \u003d content.replace(type.concat(\" \"), \"\").split(\",\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            if ((type.equals(\"file\") || type.equals(\"note\") || type.equals(\"task\")) \u0026\u0026 (splitIndexes.length \u003d\u003d 1)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                \u0026\u0026 splitIndexes[0].matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                throw new InputException(REMOVE_SINGLE_TASK);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            } else if ((type.equals(\"file\") || type.equals(\"note\") || type.equals(\"task\"))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    \u0026\u0026 (splitIndexes.length \u003d\u003d 1)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                throw new InputException(PROVIDE_INDEX);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            } else if (!type.equals(\"file\") \u0026\u0026 !type.equals(\"note\") \u0026\u0026 !type.equals(\"task\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                throw new InputException(INVALID_REMOVE_FORMAT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            List\u003cInteger\u003e finalIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            for (String convert : splitIndexes) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                finalIndexes.add(Integer.parseInt(convert) - 1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            finalIndexes.sort(Collections.reverseOrder());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"file\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    FileList files \u003d module.getFiles();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    if (inputSize \u003d\u003d 1) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        throw new InputException(PROVIDE_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    outputMessage \u003d removeMultipleFile(finalIndexes, files, outputMessage).concat("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                            \"You currently have \" + files.getList().size()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + ((files.getList().size() \u003d\u003d 1) ? \" file in the list.\" : \" files in the list.\") + \"\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                                    + HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    return outputMessage;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"note\":"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    Notepad notepad \u003d module.getNotepad();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    if (inputSize \u003d\u003d 1) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        throw new InputException(PROVIDE_INDEX);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    for (Integer finalIndex : finalIndexes) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        notepad.removeLine(finalIndex);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return NOTES_REMOVED + moduleCode;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"task\":"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    TaskList tasks \u003d module.getTasks();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    if (inputSize \u003d\u003d 1) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        throw new InputException(PROVIDE_INDEX);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    outputMessage \u003d removeMultipleTask(finalIndexes, tasks, outputMessage).concat("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                            \"You currently have \" + tasks.getList().size()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + ((tasks.getList().size() \u003d\u003d 1) ? \" task in the list.\" : \" tasks in the list.\") + \"\\n\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                                    + HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    return outputMessage;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                throw new InputException(INVALID_REMOVE_FORMAT);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(INVALID_INDEX);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 3,
      "ttippinyu": 23,
      "lackmoo": 156,
      "TCK1997": 1
    }
  },
  {
    "path": "src/main/java/spinbox/commands/ScoreCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.ModuleContainer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.lists.GradeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.GradedComponent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class ScoreCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String NON_EXISTENT_MODULE \u003d \"This module does not exist.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String INVALID_FORMAT \u003d \"Please use the valid score format:\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            + \"Absolute percentage: [score \u003cmoduleCode\u003e / \u003cindex\u003e marks:\u003cattained\u003e%]\" + \"\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            + \"Relative percentage: [score \u003cmoduleCode\u003e / \u003cindex\u003e marks: \u003cattained\u003e/\u003cmaximum\u003e\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String INVALID_VALUE \u003d \"PLease enter valid numerical value(s).\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String PROVIDE_INDEX \u003d \"Please provide a valid index of the graded component to be scored.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String COMPONENT_SCORED \u003d \"The following component has been scored: \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Constructor for initialization of variables to support scoring of graded components."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param pageDataComponents page data components to provide context based input completion."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param content A string containing the content of the processed user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public ScoreCommand(String[] pageDataComponents, String content) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        if (pageDataComponents.length \u003e 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.moduleCode \u003d pageDataComponents[1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String execute(ModuleContainer moduleContainer, ArrayDeque\u003cString\u003e pageTrace, Ui ui, boolean guiMode)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throws SpinBoxException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                GradeList gradeList \u003d module.getGrades();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                String[] scoreComponents \u003d this.content.split(\" marks:\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                int index \u003d Integer.parseInt(content.split(\" \")[0]) - 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                String[] scores \u003d scoreComponents[1].split(\"/\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                if (scoreComponents[1].contains(\"%\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    scoreComponents[1] \u003d scoreComponents[1].replace(\"%\", \"\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    double attainedPercentage \u003d Double.parseDouble(scoreComponents[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    gradeList.updateGradeWeightedScore(index, attainedPercentage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                } else if (scores.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    double attainedScore \u003d Double.parseDouble(scores[0]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    double maximumScore \u003d Double.parseDouble(scores[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    gradeList.updateGradeWeightedScore(index, attainedScore, maximumScore);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    throw new InputException(INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                return HORIZONTAL_LINE + \"\\n\" + COMPONENT_SCORED + \"\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                        + gradeList.get(index).toString() + \"\\n\" + HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                throw new InputException(INVALID_VALUE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                throw new InputException(INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 76
    }
  },
  {
    "path": "src/main/java/spinbox/commands/SetDateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.containers.ModuleContainer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.containers.lists.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Exam;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Lab;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Lecture;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Tutorial;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "public class SetDateCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String TASK_SET \u003d \"Task date and time details successfully changed.\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String INVALID_INDEX \u003d \"Please enter a valid index to be set.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String NON_EXISTENT_MODULE \u003d \"This module does not exist.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String INVALID_SET_DATE_FORMAT \u003d \"Please use the valid set-date format:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"set-date \u003cpageContent\u003e / task \u003cindex\u003e to: \u003cnew date and time details\u003e\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String INVALID_DATETIME_FORMAT \u003d \"Please use the valid set-date format:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"1. Event/Exam/Lab/Lecture/Tutorial: set-date \u003cpageContent\u003e / task \u003cindex\u003e to: \u003cnew start datetime\u003e to\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \" \u003cnew end datetime\u003e\\n\" + \"2. Deadline: set-date \u003cpageContent\u003e / task \u003cindex\u003e to: \u003cnew deadline \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"datetime\u003e\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String SET_DATE_UNAVAILABLE_OTHERS \u003d \"Sorry, set-date is not available for the selected tab.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String SET_DATE_UNAVAILABLE_TODO \u003d \"Sorry, set-date is not available for a To-Do task.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"Set-date is only available for a Deadline/Event/Exam/Lab/Lecture/Tutorial.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String DATETIME_ERROR \u003d \"Datetime value provided is incorrect. Please follow the format \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"below:\\n\" + \"1. Event/Exam/Lab/Lecture/Tutorial: 1 start datetime value and 1 end datetime value\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"2. Deadline: 1 deadline datetime value\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String CHANGE_FROM \u003d \" changed from: \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String TO \u003d \"\\n\\t\\t\\t\\t to: \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * Constructor for initialization of variables to support the set date command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param pageDataComponents page data components."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param content A string containing the content of the processed user input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public SetDateCommand(String[] pageDataComponents, String content) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        if (pageDataComponents.length \u003e 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            this.moduleCode \u003d pageDataComponents[1];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.type \u003d content.split(\" \")[0].toLowerCase();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public String execute(ModuleContainer moduleContainer, ArrayDeque\u003cString\u003e pageTrace, Ui ui, boolean guiMode) throws"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            SpinBoxException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        Task taskChanged;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        int doneStatus;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        String taskDescription;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        String replaceDateTime;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        DateTime replaceStart;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        DateTime replaceEnd;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        if (!content.contains(\"to: \")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(INVALID_SET_DATE_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        case \"task\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    TaskList tasks \u003d module.getTasks();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    int index \u003d Integer.parseInt(content.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    Task taskSelected \u003d tasks.get(index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    String fullTaskDescription \u003d taskSelected.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    String taskType \u003d taskSelected.getTaskType().name();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    replaceDateTime \u003d content.split(\"to: \")[1].trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    int dateTimeLength \u003d replaceDateTime.split(\" \").length;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    if (taskSelected.getDone()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        doneStatus \u003d 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        doneStatus \u003d 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    if ((taskType.equals(\"EVENT\") || taskType.equals(\"EXAM\") || taskType.equals(\"LAB\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            || taskType.equals(\"LECTURE\") || taskType.equals(\"TUTORIAL\")) \u0026\u0026 (dateTimeLength \u003e\u003d 3)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        taskDescription \u003d fullTaskDescription.substring(fullTaskDescription.lastIndexOf(\"] \")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                                + 2, fullTaskDescription.lastIndexOf(\"(at: \") - 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        replaceStart \u003d new DateTime(replaceDateTime.substring(0,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                                replaceDateTime.lastIndexOf(\" to\")));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        replaceEnd \u003d new DateTime(replaceDateTime.substring(replaceDateTime.lastIndexOf(\"to \")));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    } else if (taskType.equals(\"DEADLINE\") \u0026\u0026 dateTimeLength \u003c\u003d 2) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        taskDescription \u003d fullTaskDescription.substring(fullTaskDescription.lastIndexOf(\"] \")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                                + 2, fullTaskDescription.lastIndexOf(\"(by: \") - 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        replaceStart \u003d new DateTime(replaceDateTime);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        replaceEnd \u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    } else if (taskType.equals(\"TODO\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        throw new InputException(SET_DATE_UNAVAILABLE_TODO);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        throw new InputException(DATETIME_ERROR);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    tasks.remove(index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    switch (taskType) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    case \"DEADLINE\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        taskChanged \u003d tasks.add(new Deadline(doneStatus, taskDescription, replaceStart));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    case \"EVENT\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        taskChanged \u003d tasks.add(new Event(doneStatus, taskDescription, replaceStart, replaceEnd));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    case \"EXAM\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        taskChanged \u003d tasks.add(new Exam(doneStatus, taskDescription, replaceStart, replaceEnd));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    case \"LAB\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        taskChanged \u003d tasks.add(new Lab(doneStatus, taskDescription, replaceStart, replaceEnd));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    case \"LECTURE\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        taskChanged \u003d tasks.add(new Lecture(doneStatus, taskDescription, replaceStart, replaceEnd));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        taskChanged \u003d tasks.add(new Tutorial(doneStatus, taskDescription, replaceStart, replaceEnd));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return HORIZONTAL_LINE + \"\\n\" + TASK_SET + \"Task \" + (index + 1) + CHANGE_FROM"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + taskSelected.toString() + TO + taskChanged.toString() + \"\\n\" + HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    throw new InputException(INVALID_INDEX);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    throw new InputException(INVALID_DATETIME_FORMAT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        case \"file\":"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        case \"note\":"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        case \"grade\":"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(SET_DATE_UNAVAILABLE_OTHERS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(INVALID_SET_DATE_FORMAT);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lackmoo": 149
    }
  },
  {
    "path": "src/main/java/spinbox/commands/SetNameCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.containers.ModuleContainer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.containers.lists.FileList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.containers.lists.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.Notepad;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Exam;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Lab;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Lecture;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Tutorial;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Todo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "public class SetNameCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String FILE_SET \u003d \"File name successfully changed.\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String NOTE_SET \u003d \"Note name successfully changed.\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String TASK_SET \u003d \"Task name successfully changed.\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String INVALID_INDEX \u003d \"Please enter a valid index to be set.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String PROVIDE_INDEX \u003d \"Please provide an index to be set.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String NON_EXISTENT_MODULE \u003d \"This module does not exist.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String INVALID_SET_NAME_FORMAT \u003d \"Please use the valid set name format:\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"set-name \u003cpageContent\u003e / \u003ctype\u003e \u003cindex\u003e to: \u003cdescription\u003e\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String CHANGE_FROM \u003d \" changed from: \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String TO \u003d \"\\n\\t\\t\\t\\t to: \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * Constructor for initialization of variables to support the set name command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param pageDataComponents page data components."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param content A string containing the content of the processed user input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public SetNameCommand(String[] pageDataComponents, String content) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        if (pageDataComponents.length \u003e 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            this.moduleCode \u003d pageDataComponents[1];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.type \u003d content.split(\" \")[0].toLowerCase();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public String execute(ModuleContainer moduleContainer, ArrayDeque\u003cString\u003e pageTrace, Ui ui, boolean guiMode) throws"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            SpinBoxException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        File fileChanged;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        Task taskChanged;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        String noteSelected;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        int doneStatus;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        String replaceName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        DateTime start;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        DateTime end;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        if (!content.contains(\"to: \")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(INVALID_SET_NAME_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        case \"file\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    FileList files \u003d module.getFiles();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    String[] contentComponents \u003d content.split(\" \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    int index \u003d Integer.parseInt(contentComponents[1]) - 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    File fileSelected \u003d files.get(index);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    replaceName \u003d content.split(\"to: \")[1].trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    if (fileSelected.getDone()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        doneStatus \u003d 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        doneStatus \u003d 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    files.remove(index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    fileChanged \u003d files.add(new File(doneStatus, replaceName));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return HORIZONTAL_LINE + \"\\n\" + FILE_SET + \"File \" + (index + 1) + CHANGE_FROM"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + fileSelected.toString() + TO + fileChanged.toString() + \"\\n\" + HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    throw new InputException(INVALID_INDEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    throw new InputException(PROVIDE_INDEX);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        case \"note\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    Notepad notepad \u003d module.getNotepad();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    int index \u003d Integer.parseInt(content.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    replaceName \u003d content.split(\"to: \")[1].trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    noteSelected \u003d notepad.getLine(index);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    notepad.removeLine(index);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    notepad.addLine(replaceName);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return HORIZONTAL_LINE + \"\\n\" + NOTE_SET + \"Note \" + (index + 1) + CHANGE_FROM"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + noteSelected + TO + replaceName + \"\\n\" + HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    throw new InputException(INVALID_INDEX);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    throw new InputException(PROVIDE_INDEX);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        case \"task\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    TaskList tasks \u003d module.getTasks();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    int index \u003d Integer.parseInt(content.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    Task taskSelected \u003d tasks.get(index);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    String taskDescription \u003d taskSelected.toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    String taskType \u003d taskSelected.getTaskType().name();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    replaceName \u003d content.split(\"to: \")[1].trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    if (taskSelected.getDone()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        doneStatus \u003d 1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        doneStatus \u003d 0;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    if (taskType.equals(\"EVENT\") || taskType.equals(\"EXAM\") || taskType.equals(\"LAB\")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            || taskType.equals(\"LECTURE\") || taskType.equals(\"TUTORIAL\")) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        start \u003d new DateTime(taskDescription.substring(taskDescription.lastIndexOf(\"(at: \"),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                                taskDescription.lastIndexOf(\" to\")));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        end \u003d new DateTime(taskDescription.substring(taskDescription.lastIndexOf(\"to \")));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    } else if (taskType.equals(\"DEADLINE\")) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        start \u003d new DateTime(taskDescription.substring(taskDescription.lastIndexOf(\"(by: \")));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        end \u003d null;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        start \u003d null;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        end \u003d null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    tasks.remove(index);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    switch (taskType) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    case \"TODO\":"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        taskChanged \u003d tasks.add(new Todo(doneStatus, replaceName));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    case \"DEADLINE\":"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        taskChanged \u003d tasks.add(new Deadline(doneStatus, replaceName, start));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    case \"EVENT\":"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        taskChanged \u003d tasks.add(new Event(doneStatus, replaceName, start, end));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    case \"EXAM\":"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        taskChanged \u003d tasks.add(new Exam(doneStatus, replaceName, start, end));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    case \"LAB\":"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        taskChanged \u003d tasks.add(new Lab(doneStatus, replaceName, start, end));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    case \"LECTURE\":"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        taskChanged \u003d tasks.add(new Lecture(doneStatus, replaceName, start, end));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        taskChanged \u003d tasks.add(new Tutorial(doneStatus, replaceName, start, end));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return HORIZONTAL_LINE + \"\\n\" + TASK_SET + \"Task \" + (index + 1) + CHANGE_FROM"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + taskSelected.toString() + TO + taskChanged.toString() + \"\\n\" + HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    throw new InputException(INVALID_INDEX);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(INVALID_SET_NAME_FORMAT);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "lackmoo": 188
    }
  },
  {
    "path": "src/main/java/spinbox/commands/UpdateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.containers.ModuleContainer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.containers.lists.FileList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.lists.GradeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.containers.lists.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.entities.items.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.entities.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.GradedComponent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private static final String NON_EXISTENT_MODULE \u003d \"This module does not exist.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private static final String FILE_MARKED \u003d \"Updated file: \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String GRADE_MARKED \u003d \"Updated graded component: \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private static final String TASK_MARKED \u003d \"Updated task: \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private static final String PROVIDE_INDEX \u003d \"Please provide an index of item to be updated.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String INVALID_MARK_FORMAT \u003d \"Please use the valid update format:\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            + \"update \u003cpageContent\u003e / \u003ctype\u003e \u003cindex\u003e \u003cbooleanValue\u003e\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String INVALID_INDEX \u003d \"Please enter a valid index.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private static final String INVALID_VALUE \u003d \"PLease enter a valid boolean value.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Constructor for initialization of variables to support marking of entities."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param pageDataComponents page data components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param content A string containing the content of the processed user input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public UpdateCommand(String[] pageDataComponents, String content) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (pageDataComponents.length \u003e 1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            this.moduleCode \u003d pageDataComponents[1];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.type \u003d content.split(\" \")[0].toLowerCase();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public String execute(ModuleContainer moduleContainer, ArrayDeque\u003cString\u003e pageTrace, Ui ui, boolean guiMode) throws"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            SpinBoxException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        case \"file\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    FileList files \u003d module.getFiles();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    String[] contentComponents \u003d content.split(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    int index \u003d Integer.parseInt(contentComponents[1]) - 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    File fileMarked \u003d files.get(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    if (contentComponents[2].toLowerCase().equals(\"true\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                        files.update(index, true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    } else if (contentComponents[2].toLowerCase().equals(\"false\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                        files.update(index, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                        throw new InputException(INVALID_VALUE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return HORIZONTAL_LINE + \"\\n\" + FILE_MARKED + fileMarked.toString() + \"\\n\" + HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    throw new InputException(INVALID_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    throw new InputException(PROVIDE_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        case \"grade\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    GradeList gradeList \u003d module.getGrades();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    int index \u003d Integer.parseInt(content.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    GradedComponent gradeMarked \u003d gradeList.get(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    String[] contentComponents \u003d content.split(\" \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    if (contentComponents[2].toLowerCase().equals(\"true\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                        gradeList.update(index, true);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    } else if (contentComponents[2].toLowerCase().equals(\"false\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                        gradeList.update(index, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                        throw new InputException(INVALID_VALUE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    return HORIZONTAL_LINE + \"\\n\" + GRADE_MARKED + gradeMarked.toString() + \"\\n\" + HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    throw new InputException(INVALID_INDEX);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    throw new InputException(PROVIDE_INDEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        case \"task\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    TaskList tasks \u003d module.getTasks();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    int index \u003d Integer.parseInt(content.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    Task taskMarked \u003d tasks.get(index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    String[] contentComponents \u003d content.split(\" \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    if (contentComponents[2].toLowerCase().equals(\"true\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                        tasks.update(index, true);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    } else if (contentComponents[2].toLowerCase().equals(\"false\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                        tasks.update(index, false);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                        throw new InputException(INVALID_VALUE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    outputMessage \u003d outputMessage.concat(HORIZONTAL_LINE + \"\\n\" + TASK_MARKED + taskMarked.toString()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                            + \"\\n\" + HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    return outputMessage;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    throw new InputException(INVALID_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    throw new InputException(PROVIDE_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(INVALID_MARK_FORMAT);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 31,
      "ttippinyu": 82,
      "lackmoo": 25,
      "TCK1997": 1
    }
  },
  {
    "path": "src/main/java/spinbox/commands/UpdateMultipleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.containers.ModuleContainer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.containers.lists.FileList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.exceptions.DataReadWriteException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.lists.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "public class UpdateMultipleCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String NON_EXISTENT_MODULE \u003d \"This module does not exist.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String PROVIDE_INDEX \u003d \"Please provide the indexes to be updated.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String INVALID_INDEX \u003d \"Please enter a valid index.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String UPDATE_SINGLE_TASK \u003d \"To update a single task, provide the input in this \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"format instead: update \u003cpageContent\u003e / \u003ctype\u003e \u003cone index in integer form\u003e \u003cboolean value\u003e\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String INVALID_UPDATE_FORMAT \u003d \"Please use valid multiple update format:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"update-* \u003cpageContent\u003e / \u003ctype\u003e \u003cindexes separated by \u0027,\u0027 without any spacing\u003e \u003cboolean value\u003e\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"E.g. update-* CG1111 / task 1,2,3 true\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String INCORRECT_TAB \u003d \"Please specify a valid tab to carry out multiple updates.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"List of tabs available: task, note, file\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String UPDATED_MULTIPLE_FILES \u003d \"Noted. I\u0027ve updated these files:\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String UPDATED_MULTIPLE_TASKS \u003d \"Noted. I\u0027ve updated these tasks:\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String INVALID_BOOLEAN_VALUE \u003d \"Please provide a valid boolean value to be updated to.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * Constructor for initialization of variables to support update of multiple entities."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param pageDataComponents page data components."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param content A string containing the content of the processed user input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public UpdateMultipleCommand(String[] pageDataComponents, String content) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (pageDataComponents.length \u003e 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            this.moduleCode \u003d pageDataComponents[1];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.type \u003d content.split(\" \")[0].toLowerCase();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * Method to update multiple files with the new boolean value."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param finalIndexes Indexes of the files to be updated."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param updateValue Boolean value of the value to be updated to."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param files The list of files in the storage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param outputMessage The message to be output to the screen."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @return outputMessage to be printed to the screen."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @throws InputException If boolean value is not either true or false."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @throws DataReadWriteException If there is an error reading/writing to the file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private String updateMultipleFile(List\u003cInteger\u003e finalIndexes, String updateValue, FileList files, String"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            outputMessage) throws InputException, DataReadWriteException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        for (int i \u003d 0; i \u003c finalIndexes.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            File fileUpdated \u003d files.get(finalIndexes.get(i));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            if (updateValue.equals(\"true\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                files.update(finalIndexes.get(i), true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            } else if (updateValue.equals(\"false\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                files.update(finalIndexes.get(i), false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                throw new InputException(INVALID_BOOLEAN_VALUE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                outputMessage \u003d outputMessage.concat(HORIZONTAL_LINE + \"\\n\" + UPDATED_MULTIPLE_FILES + \"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            outputMessage \u003d outputMessage.concat(fileUpdated.toString() + \"\\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * Method to update multiple tasks with the new boolean value."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param finalIndexes Indexes of the tasks to be updated."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param updateValue Boolean value of the value to be updated to."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param tasks The list of tasks in the storage."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param outputMessage The message to be output to the screen."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @return outputMessage to be printed to the screen."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @throws InputException If boolean value is not either true or false."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @throws DataReadWriteException If there is an error reading/writing to the file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private String updateMultipleTask(List\u003cInteger\u003e finalIndexes, String updateValue, TaskList tasks, String"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            outputMessage) throws InputException, DataReadWriteException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        if (updateValue.equals(\"false\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            for (int i \u003d finalIndexes.size() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                tasks.update(finalIndexes.get(i), false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                if (i \u003d\u003d finalIndexes.size() - 1) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    outputMessage \u003d outputMessage.concat(HORIZONTAL_LINE + \"\\n\" + UPDATED_MULTIPLE_TASKS + \"\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                Task taskUpdated \u003d tasks.get(finalIndexes.get(i));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                outputMessage \u003d outputMessage.concat(taskUpdated.toString() + \"\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        } else if (updateValue.equals(\"true\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            for (int i \u003d 0; i \u003c finalIndexes.size(); i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                tasks.update(finalIndexes.get(i), true);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    outputMessage \u003d outputMessage.concat(HORIZONTAL_LINE + \"\\n\" + UPDATED_MULTIPLE_TASKS + \"\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                Task taskUpdated \u003d tasks.get(finalIndexes.get(i));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                outputMessage \u003d outputMessage.concat(taskUpdated.toString() + \"\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(INVALID_BOOLEAN_VALUE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public String execute(ModuleContainer moduleContainer, ArrayDeque\u003cString\u003e pageTrace, Ui ui, boolean guiMode) throws"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            SpinBoxException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        int inputSize \u003d content.split(\" \").length;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        if (inputSize !\u003d 3) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(INVALID_UPDATE_FORMAT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            String[] splitIndexes \u003d content.split(\" \")[1].split(\",\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            if ((type.equals(\"file\") || type.equals(\"note\") || type.equals(\"task\")) \u0026\u0026 (splitIndexes.length \u003d\u003d 1)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    \u0026\u0026 splitIndexes[0].matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                throw new InputException(UPDATE_SINGLE_TASK);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            } else if ((type.equals(\"file\") || type.equals(\"note\") || type.equals(\"task\"))"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    \u0026\u0026 (splitIndexes.length \u003d\u003d 1)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                throw new InputException(PROVIDE_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            } else if (!type.equals(\"file\") \u0026\u0026 !type.equals(\"note\") \u0026\u0026 !type.equals(\"task\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                throw new InputException(INCORRECT_TAB);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            List\u003cInteger\u003e finalIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            for (String convert : splitIndexes) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                finalIndexes.add(Integer.parseInt(convert) - 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            finalIndexes.sort(Collections.reverseOrder());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            String updateValue \u003d content.split(\" \")[2].toLowerCase();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"file\":"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    FileList files \u003d module.getFiles();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    outputMessage \u003d updateMultipleFile(finalIndexes, updateValue, files, outputMessage).concat("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                                    HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    return outputMessage;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"task\":"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                checkIfOnModulePage(moduleCode);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    TaskList tasks \u003d module.getTasks();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    outputMessage \u003d updateMultipleTask(finalIndexes, updateValue, tasks, outputMessage).concat("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                                    HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    return outputMessage;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    return NON_EXISTENT_MODULE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                throw new InputException(INVALID_UPDATE_FORMAT);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(INVALID_INDEX);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 2,
      "ttippinyu": 14,
      "lackmoo": 162,
      "TCK1997": 1
    }
  },
  {
    "path": "src/main/java/spinbox/commands/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.ModuleContainer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String MISSING_PAGE_INPUT \u003d \"Please input the page you want to change to.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String SPECIFY_PAGE \u003d \"Please specify module before tab.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"E.g. \u0027view / \u003cmoduleCode\u003e \u003ctab\u003e\u0027\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String INCORRECT_VIEW_FORMAT \u003d \"Please input correct format for view command.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String NON_EXISTENT_PAGE \u003d \"Sorry, that page does not exist.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \" Please choose \u0027main\u0027, \u0027calendar\u0027, or \u0027modules\u0027.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String NON_EXISTENT_MODULE \u003d \"Sorry, that module does not exist. These are the current \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"modules:\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private static final String NON_EXISTENT_TAB \u003d \"Sorry, that tab does not exist.\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \" Please choose \u0027tasks\u0027, \u0027files\u0027, \u0027notes\u0027 or \u0027grades\u0027.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String page;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String tab;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Constructs by splitting the input and pageTrace and storing it in private variables."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param pageDataComponents the page trace from parser."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param content the content of input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws InputException if invalid view command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public ViewCommand(String[] pageDataComponents, String content) throws InputException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String[] contentComponents \u003d content.toLowerCase().split(\" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (contentComponents.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(MISSING_PAGE_INPUT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        // can be page, module, or tab"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        } else if (contentComponents.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            switch (contentComponents[0]) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            // content is page"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            case \"main\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                page \u003d \"main\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            case \"calendar\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                page \u003d \"calendar\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            case \"modules\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                page \u003d \"modules\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            // content is tab"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            case \"tasks\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            case \"files\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            case \"grades\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            case \"notes\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                // check if on a module page first"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    moduleCode \u003d pageDataComponents[1];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                    throw new InputException(SPECIFY_PAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                page \u003d \"modules\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                moduleCode \u003d pageDataComponents[1];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                tab \u003d contentComponents[0];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            // content is module code"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                page \u003d \"modules\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                moduleCode \u003d contentComponents[0];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        // can be \u0027modules \u003cmoduleCode\u003e\u0027 or \u0027\u003cmoduleCode\u003e tab\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        } else if (contentComponents.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            if (contentComponents[0].equals(\"modules\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                page \u003d \"modules\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                moduleCode \u003d contentComponents[1];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else if (contentComponents[1].equals(\"tasks\") || contentComponents[1].equals(\"files\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    || contentComponents[1].equals(\"grades\") || contentComponents[1].equals(\"notes\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                page \u003d \"modules\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                moduleCode \u003d contentComponents[0];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                tab \u003d contentComponents[1];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                throw new InputException(INCORRECT_VIEW_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        // modules \u003cmoduleCode\u003e \u003ctab\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        } else if (contentComponents.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            if (contentComponents[0].equals(\"modules\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                page \u003d \"modules\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                moduleCode \u003d contentComponents[1];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                tab \u003d contentComponents[2];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(INCORRECT_VIEW_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (moduleCode !\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            moduleCode \u003d moduleCode.toUpperCase();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Replace pageTrace with the new pageTrace."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param moduleContainer the modules stored."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param pageTrace the current pageTrace."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param ui the Ui instance."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @param guiMode boolean to check if in gui mode."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return the display once been changed.."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @throws SpinBoxException if page, module, or tab does not exist."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public String execute(ModuleContainer moduleContainer, ArrayDeque\u003cString\u003e pageTrace, Ui ui, boolean guiMode)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            throws SpinBoxException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        ArrayDeque\u003cString\u003e tempPageTrace \u003d pageTrace.clone();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        StringBuilder oldTrace \u003d new StringBuilder();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        while (tempPageTrace.size() \u003e 0) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            oldTrace.append(\"/\").append(tempPageTrace.getLast());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            tempPageTrace.removeLast();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        ArrayDeque\u003cString\u003e newPageTrace \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        // add page"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (page.equals(\"main\") || page.equals(\"calendar\") || page.equals(\"modules\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            newPageTrace.addFirst(page);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InputException(NON_EXISTENT_PAGE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        // add module if exists"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (page.equals(\"modules\") \u0026\u0026 moduleCode !\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            // check if module exists"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            if (moduleContainer.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                newPageTrace.addFirst(moduleCode);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                String currentModules \u003d \"\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                for (HashMap.Entry\u003cString, Module\u003e entry : moduleContainer.getModules().entrySet()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    currentModules \u003d currentModules.concat(entry.getKey() + \"\\n\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                throw new InputException(NON_EXISTENT_MODULE + \"\\n\" + currentModules);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cString\u003e outputList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        outputList.add(\"First line\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        // add tab"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        if (page.equals(\"modules\") \u0026\u0026 tab !\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            Module module \u003d modules.get(moduleCode);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            switch (tab) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            case \"tasks\":"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                newPageTrace.addFirst(tab);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                outputList \u003d module.getTasks().viewList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            case \"files\":"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                newPageTrace.addFirst(tab);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                outputList \u003d module.getFiles().viewList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            case \"grades\":"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                newPageTrace.addFirst(tab);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                outputList \u003d module.getGrades().viewList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            case \"notes\":"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                newPageTrace.addFirst(tab);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                outputList \u003d module.getNotepad().viewList();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                throw new InputException(NON_EXISTENT_TAB);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace.clear();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        StringBuilder newTrace \u003d new StringBuilder();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        tempPageTrace \u003d newPageTrace.clone();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        while (tempPageTrace.size() \u003e 0) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            newTrace.append(\"/\").append(tempPageTrace.getLast());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            pageTrace.addFirst(tempPageTrace.getLast());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            tempPageTrace.removeLast();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        if (guiMode) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            outputList.set(0, newTrace.toString());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            return outputList.get(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            outputList.set(0, \"Changed from page \""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                    + oldTrace.toString() + \" to \" + newTrace.toString());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return ui.showFormatted(outputList);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 13,
      "ttippinyu": 154,
      "lackmoo": 17,
      "TCK1997": 7
    }
  },
  {
    "path": "src/main/java/spinbox/containers/ModuleContainer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.containers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.CorruptedDataException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.DataReadWriteException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.FileCreationException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.storage.StorageContainer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class ModuleContainer implements StorageContainer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String DIRECTORY_NAME \u003d \"SpinBoxData/\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String MODULES_FILE_NAME \u003d \"modules.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private HashMap\u003cString, Module\u003e modules;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private Storage localStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Constructor for a module container. Retrieves added modules, populates them and stores in program memory."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws FileCreationException Creation of file hierarchy failed, perhaps due to permissions."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws DataReadWriteException I/O error during file read/writes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws CorruptedDataException Text files have been improperly modified (unexpected formatting)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public ModuleContainer() throws FileCreationException, DataReadWriteException, CorruptedDataException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        modules \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        localStorage \u003d new Storage(DIRECTORY_NAME + MODULES_FILE_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.loadData();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public HashMap\u003cString, Module\u003e getModules() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Saves data using the localStorage instance to the relevant .txt file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws DataReadWriteException I/O error."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void saveData() throws DataReadWriteException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cString\u003e dataToSave \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (Map.Entry\u003cString, Module\u003e entry : modules.entrySet()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            dataToSave.add(entry.getValue().storeString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        localStorage.saveData(dataToSave);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Adds a module to be saved to the module container."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param module Module object to be added."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return the Module object which has been stored."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws DataReadWriteException I/O Error."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public Module addModule(Module module) throws DataReadWriteException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.getModules().put(module.getModuleCode(), module);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.saveData();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Check the existence of a module within SpinBox."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param moduleCode A String denoting the module code."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return True if the module already exists."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public boolean checkModuleExists(String moduleCode) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return this.getModules().containsKey(moduleCode);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Gets a specific module from within the container."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param moduleCode A string containing the module code to be used as the key."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return a Module object, or null if no such module exists."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public Module getModule(String moduleCode) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        if (this.checkModuleExists(moduleCode)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            return this.getModules().get(moduleCode);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Loads data using the localStorage instance from the relevant .txt file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws DataReadWriteException I/O error."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws CorruptedDataException polluted data within txt files."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void loadData() throws DataReadWriteException, CorruptedDataException, FileCreationException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cString\u003e savedData \u003d localStorage.loadData();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (String datum : savedData) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            Module temp \u003d new Module(datum);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.modules.put(temp.getModuleCode(), temp);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 98
    }
  },
  {
    "path": "src/main/java/spinbox/containers/Notepad.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.containers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.DataReadWriteException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.FileCreationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.InvalidIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.storage.StorageContainer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class Notepad implements StorageContainer {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String DIRECTORY_NAME \u003d \"SpinBoxData/\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String NOTEPAD_FILE_NAME \u003d \"/notes.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String CLI_LIST_HEADER \u003d  \"Here are your notes: \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private Storage localStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    List\u003cString\u003e notes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public Notepad(String parentName) throws FileCreationException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        localStorage \u003d new Storage(DIRECTORY_NAME + parentName + NOTEPAD_FILE_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Adds a line of text to the notepad."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param line A string representing one line of entered text."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws DataReadWriteException I/O error."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void addLine(String line) throws DataReadWriteException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        notes.add(line);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.saveData();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * Return note at index."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param index Index of note."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @return Note at index."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @throws InvalidIndexException If index is out of range."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public String getLine(int index) throws InvalidIndexException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            return notes.get(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            throw new InvalidIndexException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Updates a line of text within the notepad."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param index The line\u0027s index/number, starting from 0."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param line A string representing one line of entered text."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws DataReadWriteException I/O error."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws InvalidIndexException The index provided is out of range."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void updateLine(int index, String line) throws DataReadWriteException, InvalidIndexException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            notes.set(index, line);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new InvalidIndexException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.saveData();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Removes one line of text within the notepad."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param index The line\u0027s index/number, starting from 0."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws InvalidIndexException The index provided is out of range."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws DataReadWriteException I/O error."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void removeLine(int index) throws DataReadWriteException, InvalidIndexException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            notes.remove(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            saveData();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new InvalidIndexException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Creates a list of notes with a header for CLI output."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return notes with a header as element zero."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public List\u003cString\u003e viewList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cString\u003e outputList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        outputList.add(0, CLI_LIST_HEADER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size(); i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            outputList.add((Integer.toString(i + 1) + \". \" + notes.get(i)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return outputList;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public List\u003cString\u003e getNotes() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return notes;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void loadData() throws DataReadWriteException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        notes \u003d localStorage.loadData();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void saveData() throws DataReadWriteException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        localStorage.saveData(notes);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 93,
      "lackmoo": 14
    }
  },
  {
    "path": "src/main/java/spinbox/containers/lists/FileList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.containers.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.CorruptedDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.FileCreationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.DataReadWriteException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public class FileList extends SpinBoxList\u003cFile\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String FILE_LIST_FILE_NAME \u003d \"/files.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public FileList(String parentName) throws FileCreationException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(parentName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        localStorage \u003d new Storage(DIRECTORY_NAME + this.getParentCode() + FILE_LIST_FILE_NAME);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Does not order the files at the moment as not sure how to order yet."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    static class FileComparator implements Comparator\u003cFile\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        public int compare(File a, File b) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            return a.getName().compareToIgnoreCase(b.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        list.sort(new FileComparator());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void loadData() throws DataReadWriteException, CorruptedDataException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cString\u003e savedData \u003d localStorage.loadData();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (String datum : savedData) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.addFromStorage(new File(datum));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void saveData() throws DataReadWriteException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cString\u003e dataToSave \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (File file: this.getList()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            dataToSave.add(file.storeString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        localStorage.saveData(dataToSave);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public List\u003cString\u003e viewList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        output.add(\"Here are the files in your module:\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            output.add(((i + 1) + \". \" + list.get(i).toString()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public List\u003cString\u003e containsKeyword(String keyword) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cFile\u003e contains \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        for (File file : this.getList()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            if (file.getName().toLowerCase().contains(keyword)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                contains.add(file);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        contains.sort(new FileComparator());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        output.add(\"Here are the files that contain \" + keyword"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                + \" in your module:\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        for (int i \u003d 0; i \u003c contains.size(); i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            output.add(((i + 1) + \". \" + contains.get(i).toString()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 28,
      "ttippinyu": 51,
      "TCK1997": 3
    }
  },
  {
    "path": "src/main/java/spinbox/containers/lists/GradeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.containers.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.CorruptedDataException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.DataReadWriteException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.FileCreationException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.GradedComponent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class GradeList extends SpinBoxList\u003cGradedComponent\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String GRADE_LIST_FILE_NAME \u003d \"/grades.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public GradeList(String parentName) throws FileCreationException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(parentName);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        localStorage \u003d new Storage(DIRECTORY_NAME + this.getParentCode() + GRADE_LIST_FILE_NAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Order the grade components based on descending weight."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    static class GradedComponentComparator implements Comparator\u003cGradedComponent\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        public int compare(GradedComponent a, GradedComponent b) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            return (a.getWeight() \u003e b.getWeight()) ? -1 : 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        list.sort(new GradedComponentComparator());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void loadData() throws DataReadWriteException, CorruptedDataException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cString\u003e savedData \u003d localStorage.loadData();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (String datum : savedData) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.addFromStorage(new GradedComponent(datum));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void saveData() throws DataReadWriteException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cString\u003e dataToSave \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (GradedComponent gradedComponent: this.getList()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            dataToSave.add(gradedComponent.storeString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        localStorage.saveData(dataToSave);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public List\u003cString\u003e viewList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        output.add(\"Here are the graded components in your module:\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            output.add(((i + 1) + \". \" + list.get(i).toString()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public List\u003cString\u003e containsKeyword(String keyword) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cGradedComponent\u003e contains \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        for (GradedComponent gradedComponent : this.getList()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            if (gradedComponent.getName().toLowerCase().contains(keyword)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                contains.add(gradedComponent);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        contains.sort(new GradedComponentComparator());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        output.add(\"Here are the graded components that contain \" + keyword"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                + \" in your module:\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        for (int i \u003d 0; i \u003c contains.size(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            output.add(((i + 1) + \". \" + contains.get(i).toString()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void updateGradeWeightedScore(int index, double yourScore, double maximumScore) throws InputException,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            DataReadWriteException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        list.get(index).updateWeightedScore(yourScore, maximumScore);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.saveData();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void updateGradeWeightedScore(int index, double weightedScore) throws DataReadWriteException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        list.get(index).updateWeightedScore(weightedScore);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.saveData();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 41,
      "ttippinyu": 54
    }
  },
  {
    "path": "src/main/java/spinbox/containers/lists/HelpList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "package spinbox.containers.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "public class HelpList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private String helpOutput \u003d \"\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    private final String horizontalLine \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public final String helpOnly \u003d helpOutput.concat(horizontalLine + \"\\n\" + \"Welcome to the help page. Below is the \""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"full list of help commands.\\n\" + \"You may view individual help commands by providing the specific \""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"command after the \u0027help\u0027 keyword.\\n\" + \"Example:\\n\" + \"\\tTo view the help page for the \u0027remove\u0027 \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"command: help / remove\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"Full list of help commands:\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t1. help / view : To navigate and change view from the current page to the specified page\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t2. help / add : To add a module/task/grade/file/note component\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t3. help / remove : To remove a module/task/grade/file/note component\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t4. help / remove-* : To remove multiple task/grade/file/note components\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t5. help / set-date : To set deadline/event/exam/lab/lecture/tutorial date to a new date\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t6. help / set-name : To set task/grade/file/note name to a new name\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t7. help / update : To update a task/grade/file component to a value\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t8. help / update-* : To update multiple task/grade/file components to a value\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            + \"\\t9. help / export : To export a current snapshot of a module\u0027s tasks/grades/files\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            + horizontalLine);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public final String view \u003d helpOutput.concat(horizontalLine + \"\\n\" + \"Command: view\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"Function: To navigate and change view from the current page to the specified page\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"Format: view / \u003cpage\u003e\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t1. View the main page: view / main\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t2. View the calendar page: view / calendar\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t3. View the modules page: view / modules\\n\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t* Note: omit \u0027modules\u0027 and module code if current page is the specific module *\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t4. View the list of files under module CG1111: view / modules cg1111 files\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t5. View the list of grade components under module CG1111: view / modules cg1111 grades\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t6. View the list of notes under module CG1111: view / modules cg1111 notes\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t7. View the list of tasks under module CG1111: view / modules cg1111 tasks\\n\" + horizontalLine);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public final String add \u003d helpOutput.concat(horizontalLine + \"\\n\" + \"Command: add\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"Function: To add a module/task/grade/file/note component\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"Format:\\n\" + \"\\t1. Add a new module: add / module \u003cmodule code\u003e \u003cmodule name\u003e\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t2. Add items for a specific module: add \u003cmodule code\u003e / \u003citem type\u003e \u003citem description\u003e\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t* Adding a new module *\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t1. Add a new module CG1111, module name EPP1: add / module CG1111 EPP1\\n\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t* Adding an item for a specific module (omit module code if current page is the specific module \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"page) *\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t2. Add a new file under module CG1111: add CG1111 / file quiz 2 2018\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            + \"\\t3. Add a new grade component under CG1111: add CG1111 / grade Report weightage: 12.5%\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t4. Add a new note under CG1111: add CG1111 / note bring textbook\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t5. Add a new todo task under module CG1111: add CG1111 / todo finish assignment\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t   -List of task type includes:\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t\\ta. todo -- Format: add \u003cmodule code\u003e / todo \u003ctodo description\u003e\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t\\tb. deadline -- Format: add \u003cmodule code\u003e / deadline \u003cdeadline description\u003e by: \u003cMM/DD/YYYY HH:MM\u003e\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t\\tc. event/exam/lab/lecture/tutorial -- Format: add \u003cmodule code\u003e / \u003cevent/exam/lab/lecture/\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"tutorial\u003e\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t\\t \u003cevent/exam/lab/lecture/tutorial description\u003e at: \u003cstart as MM/DD/YYYY HH:MM\u003e\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \" to \u003cend as MM/DD/YYYY HH:MM\u003e\\n\" + horizontalLine);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public final String remove \u003d helpOutput.concat(horizontalLine + \"\\n\" + \"Command: remove\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"Function: To remove a module/task/grade/file/note component\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"Format:\\n\" + \"\\t1. Remove a module: remove / module \u003cmodule code\u003e\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t2. Remove items for a specific module: remove \u003cmodule code\u003e / \u003citem type\u003e \u003citem index\u003e\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t* Removing a module *\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t1. Remove a module CG1111: remove / module CG1111\\n\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t* Removing an item for a specific module (omit module code if current page is the specific module \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"page) *\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t2. Remove the first file under module CG1111: remove CG1111 / file 1\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t3. Remove the first grade component under CG1111: remove CG1111 / grade 1\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t4. Remove the first note under CG1111: remove CG1111 / note 1\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t5. Remove the first task under module CG1111: remove CG1111 / task 1\\n\" + horizontalLine);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public final String removeMultiple \u003d helpOutput.concat(horizontalLine + \"\\n\" + \"Command: remove-*\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"Function: To remove multiple task/grade/file/note components\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"Format: remove-* \u003cmodule code\u003e / \u003citem type\u003e \u003citem indexes\u003e\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t* Note: omit module code if current page is the specific module *\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t1. Remove the first 2 files under module CG1111: remove-* CG1111 / file 1,2\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t2. Remove the first 2 grade components under CG1111: remove-* CG1111 / grade 1,2\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t3. Remove the first 2 notes under CG1111: remove-* CG1111 / note 1,2\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t4. Remove the first 2 tasks under module CG1111: remove-* CG1111 / task 1,2\\n\" + horizontalLine);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public final String setDate \u003d helpOutput.concat(horizontalLine + \"\\n\" + \"Command: set-date\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"Function: To set deadline/event/exam/lab/lecture/tutorial date to a new date\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"Format: set-date \u003cmodule code\u003e / task \u003citem index\u003e to: \u003cnew date and time details\u003e\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t* Note: omit module code if current page is the specific module *\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t1. Set the date of the first task (deadline) under module CG1111 : set-date CG1111 / task 1 to: \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"01/01/2019 23:59\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t2. Set the date of the second task (event) under module CG1111 : set-date CG1111 / task 2 to: \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"02/01/2019 10:00 to 02/01/2019 15:00\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + horizontalLine);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public final String setName \u003d helpOutput.concat(horizontalLine + \"\\n\" + \"Command: set-name\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"Function: To set task/grade/file/note name to a new name\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"Format: set-name \u003cmodule code\u003e / \u003citem type\u003e \u003citem index\u003e to: \u003cnew name\u003e\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t* Note: omit module code if current page is the specific module *\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t1. Set the first file under module CG1111 to \u0027lecture note\u0027: set-name CG1111 / file 1 to: lecture\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \" note\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t2. Set the first grade component under CG1111: TBC\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t3. Set the first note under module CG1111 to \u0027bring textbook\u0027: set-name CG1111 / note 1 to: bring\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \" textbook\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t4. Set the first task under module CG1111 to \u0027return book\u0027: set-name CG1111 / task 1 to: \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"return book\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + horizontalLine);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public final String update \u003d helpOutput.concat(horizontalLine + \"\\n\" + \"Command: update\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            + \"Function: To update a task/grade/file component to a boolean value\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            + \"Format: update \u003cmodule code\u003e / \u003citem type\u003e \u003citem index\u003e \u003cbooleanValue\u003e\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t* Note: omit module code if current page is the specific module *\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t1. Update a file to downloaded under module CG1111: update CG1111 / file 1 true\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            + \"\\t2. Update a grade component under CG1111: update CG1111 / grade 1 false\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t3. Update a task to done under module CG1111: update CG1111 / task 1 true\\n\" + horizontalLine);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public final String updateMultiple \u003d helpOutput.concat(horizontalLine + \"\\n\" + \"Command: update-*\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            + \"Function: To update multiple task/grade/file components to a value\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"Format: update-* \u003cmodule code\u003e / \u003citem type\u003e \u003citem indexes\u003e \u003citem values\u003e\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t* Note: omit module code if current page is the specific module *\\n\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t1. Update the first 2 files under module CG1111: update-* CG1111 / file 1,2 true\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t2. Update the first 2 grade components under CG1111: TBC\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + \"\\t3. Update the first 2 tasks under module CG1111: update-* CG1111 / task 1,2 true\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            + horizontalLine);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public final String export \u003d helpOutput.concat(horizontalLine + \"\\n\" + \"Command: export\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            + \"Function: To export a snapshot of the current tasks/files/grades within a module\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            + \"Format: export \u003cmodule code\u003e / \u003citem type\u003e\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            + \"\\t* Note: omit module code if current page is the specific module *\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            + \"\\t1. Export the files under module CG1111: export CG1111 / files\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            + \"\\t2. Export the tasks under module CG1111, while viewing CG1111:  export / tasks\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            + horizontalLine);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 12,
      "ttippinyu": 4,
      "lackmoo": 117
    }
  },
  {
    "path": "src/main/java/spinbox/containers/lists/SpinBoxList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.containers.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.CorruptedDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.DataReadWriteException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.InvalidIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.storage.StorageContainer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public abstract class SpinBoxList\u003cT extends Item\u003e implements StorageContainer {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    static final String DIRECTORY_NAME \u003d \"SpinBoxData/\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    protected List\u003cT\u003e list;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private String parentCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    Storage localStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    SpinBoxList(String parentCode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.list \u003d new ArrayList\u003cT\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.parentCode \u003d parentCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Return SpinBoxList as list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public List\u003cT\u003e getList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Gets the module code of the module containing an instance of this list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return the module code as a String."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getParentCode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return parentCode;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Add element into list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param element to be added."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return added element."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws DataReadWriteException saveData fail due to I/O Error."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public T add(T element) throws DataReadWriteException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.sort();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.saveData();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return element;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Add element into list, without an intermediate save step."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param element to be added from storage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return added element."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public T addFromStorage(T element) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.sort();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return element;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Remove element at index from list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param index index of element."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return element removed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws InvalidIndexException provided Index is out range."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws DataReadWriteException saveData fail due to I/O Error."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public T remove(int index) throws DataReadWriteException, InvalidIndexException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            T removedItem \u003d list.remove(index);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.saveData();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            return removedItem;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new InvalidIndexException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Return element at index."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param index index of element."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return element at index."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws InvalidIndexException provided Index is out range."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public T get(int index) throws InvalidIndexException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            return list.get(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new InvalidIndexException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Replace element at index with element."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param index index of element to be replaced."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param element new element to be inserted."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return new element."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws DataReadWriteException saveData fail due to I/O Error."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws InvalidIndexException provided Index is out range."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public T replace(int index, T element) throws DataReadWriteException, InvalidIndexException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            list.set(index, element);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new InvalidIndexException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.sort();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.saveData();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return element;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Updates an item to value."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param index index of element to be set."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param value value to be marked"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return element marked done."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws DataReadWriteException saveData fail due to I/O Error."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws InvalidIndexException provided Index is out range."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public T update(int index, boolean value) throws DataReadWriteException, InvalidIndexException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            list.get(index).updateDone(value);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new InvalidIndexException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.sort();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.saveData();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Sort the list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public abstract void sort();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * To populate data into this list from the list\u0027s localStorage."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public abstract void loadData() throws DataReadWriteException, CorruptedDataException;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * To save current list data into the list\u0027s localStorage."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public abstract void saveData() throws DataReadWriteException;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * To view the list for output."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public abstract List\u003cString\u003e viewList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Returns list of items containing keyword."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param keyword keyword to be searched."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return a list of string of items."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public abstract List\u003cString\u003e containsKeyword(String keyword);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 144,
      "ttippinyu": 20,
      "TCK1997": 4
    }
  },
  {
    "path": "src/main/java/spinbox/containers/lists/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.containers.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.DataReadWriteException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.FileCreationException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Exam;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Lab;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Lecture;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Schedulable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.tasks.Todo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import spinbox.entities.items.tasks.Tutorial;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class TaskList extends SpinBoxList\u003cTask\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String TASK_LIST_FILE_NAME \u003d \"/tasks.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String DELIMITER_FILTER \u003d \" \\\\| \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public TaskList(String parentName) throws FileCreationException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(parentName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        localStorage \u003d new Storage(DIRECTORY_NAME + this.getParentCode() + TASK_LIST_FILE_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    static class TaskComparator implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        public int compare(Task a, Task b) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            DateTime startDateA \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            DateTime startDateB \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            if (!a.getDone() \u0026\u0026 b.getDone()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else if (a.getDone() \u0026\u0026 !b.getDone()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            if (a.isSchedulable()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                startDateA \u003d ((Schedulable)a).getStartDate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            if (b.isSchedulable()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                startDateB \u003d ((Schedulable)b).getStartDate();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            if (startDateA \u003d\u003d null \u0026\u0026 startDateB \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else if (startDateA \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else if (startDateB \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                return startDateA.compareTo(startDateB);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        list.sort(new TaskComparator());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void loadData() throws DataReadWriteException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        DateTime start;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        DateTime end;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cString\u003e savedData \u003d localStorage.loadData();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (String datum : savedData) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            String[] arguments \u003d datum.split(DELIMITER_FILTER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            switch (arguments[0]) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                this.addFromStorage(new Todo(Integer.parseInt(arguments[1]), arguments[2]));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                start \u003d new DateTime(arguments[3]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                this.addFromStorage(new Deadline(Integer.parseInt(arguments[1]), arguments[2], start));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                start \u003d new DateTime(arguments[3]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                end \u003d new DateTime(arguments[4]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                this.addFromStorage(new Event(Integer.parseInt(arguments[1]), arguments[2], start, end));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"EXAM\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                start \u003d new DateTime(arguments[3]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                end \u003d new DateTime(arguments[4]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                this.addFromStorage(new Exam(Integer.parseInt(arguments[1]), arguments[2], start, end));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"LAB\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                start \u003d new DateTime(arguments[3]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                end \u003d new DateTime(arguments[4]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                this.addFromStorage(new Lab(Integer.parseInt(arguments[1]), arguments[2], start, end));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            case \"LEC\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                start \u003d new DateTime(arguments[3]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                end \u003d new DateTime(arguments[4]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                this.addFromStorage(new Lecture(Integer.parseInt(arguments[1]), arguments[2], start, end));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                start \u003d new DateTime(arguments[3]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                end \u003d new DateTime(arguments[4]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                this.addFromStorage(new Tutorial(Integer.parseInt(arguments[1]), arguments[2], start, end));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void saveData() throws DataReadWriteException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cString\u003e dataToSave \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (Task task: this.getList()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            dataToSave.add(task.storeString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        localStorage.saveData(dataToSave);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public List\u003cString\u003e viewList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        output.add(\"Here are the tasks in your module:\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            output.add(((i + 1) + \". \" + list.get(i).toString()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * Return list of task that overlaps with start and end interval."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @param startInterval start of the interval."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @param endInterval end of the interval."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @return list of task"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public List\u003cString\u003e viewListInterval(DateTime startInterval, DateTime endInterval) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        Task currentTask;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        List\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        output.add(\"Here are the task in your module:\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            currentTask \u003d list.get(i);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            if (currentTask.isSchedulable()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                Schedulable task \u003d (Schedulable) currentTask;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                if (task.isOverlapping(startInterval, endInterval)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                    output.add(((i + 1) + \". \" + task.toString()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public List\u003cString\u003e containsKeyword(String keyword) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cTask\u003e contains \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        for (Task task : this.getList()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            if (task.getName().toLowerCase().contains(keyword)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                contains.add(task);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        contains.sort(new TaskComparator());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        List\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        output.add(\"Here are the tasks that contain \" + keyword"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "                + \" in your module:\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        for (int i \u003d 0; i \u003c contains.size(); i++) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            output.add(((i + 1) + \". \" + contains.get(i).toString()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 45,
      "ttippinyu": 67,
      "lackmoo": 27,
      "TCK1997": 31
    }
  },
  {
    "path": "src/main/java/spinbox/entities/Calendar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "package spinbox.entities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.containers.lists.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.exceptions.CalendarSelectorException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public class Calendar {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private static final String MIDNIGHT \u003d \" 00:00\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private static final String BEFORE_MIDNIGHT \u003d \" 23:59\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    DateTime startDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    DateTime endDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    int modifier;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Calendar(int modifier, String date) throws CalendarSelectorException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.modifier \u003d modifier;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        setDates(date);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private void setDates(String date) throws CalendarSelectorException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        switch (modifier) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            startDate \u003d new DateTime(date + MIDNIGHT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            endDate \u003d new DateTime(date + BEFORE_MIDNIGHT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            startDate \u003d new DateTime(date + MIDNIGHT).getStartOfTheWeek();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            endDate \u003d new DateTime(date + BEFORE_MIDNIGHT).getEndOfTheWeek();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            startDate \u003d new DateTime(date + MIDNIGHT).getStartOfTheMonth();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            endDate \u003d new DateTime(date + BEFORE_MIDNIGHT).getEndOfTheMonth();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            throw new CalendarSelectorException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public List\u003cString\u003e tasksInCalendar(TaskList taskList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return taskList.viewListInterval(startDate, endDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TCK1997": 43
    }
  },
  {
    "path": "src/main/java/spinbox/entities/Module.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.entities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.Notepad;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.CorruptedDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.DataReadWriteException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.FileCreationException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.lists.FileList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.lists.GradeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.lists.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String CORRUPTED_MODULES_DATA \u003d \"Corrupted modules data.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String STORE_DELIMITER \u003d \" | \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String DELIMITER_FILTER \u003d \" \\\\| \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private String moduleName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private FileList files;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private GradeList grades;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private Notepad notepad;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    // private Event exam;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Constructor for module."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public Module(String moduleCode, String moduleName) throws FileCreationException,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            DataReadWriteException, CorruptedDataException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.files \u003d new FileList(moduleCode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.tasks \u003d new TaskList(moduleCode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.grades \u003d new GradeList(moduleCode);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.notepad \u003d new Notepad(moduleCode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.loadData();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Parses a string extracted from storage back into a Module object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param fromStorage This String is provided directly from the localStorage instance."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws CorruptedDataException Thrown when a user manually edits the .txt file incorrectly."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public Module(String fromStorage) throws CorruptedDataException, DataReadWriteException, FileCreationException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            String[] components \u003d fromStorage.split(DELIMITER_FILTER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.setModuleCode(components[0]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.setModuleName(components[1]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.files \u003d new FileList(moduleCode);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.tasks \u003d new TaskList(moduleCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.grades \u003d new GradeList(moduleCode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.notepad \u003d new Notepad(moduleCode);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.loadData();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new CorruptedDataException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Returns a human readable String of module information."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return String containing code and name."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return this.getModuleCode().concat(\" \").concat(this.getModuleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return this.getModuleCode() + STORE_DELIMITER + this.getModuleName();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Get module name."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return module name."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String getModuleName() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return this.moduleName;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Get module code."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return module code."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return this.moduleCode;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Get the FileList."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return FileList instance."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public FileList getFiles() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return files;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Get the GradeList."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return GradeList instance."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public GradeList getGrades() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return grades;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Get the TaskList."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return TaskList instance."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public TaskList getTasks() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public Notepad getNotepad() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return notepad;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void setModuleName(String moduleName) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * To be used upon once Module object has been constructed to populate pre-existing data."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws DataReadWriteException I/O error."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws CorruptedDataException Data has been modified incorrectly within the .txt files."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void loadData() throws DataReadWriteException, CorruptedDataException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.files.loadData();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.tasks.loadData();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.grades.loadData();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.notepad.loadData();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 101,
      "ttippinyu": 33
    }
  },
  {
    "path": "src/main/java/spinbox/entities/items/File.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.entities.items;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.CorruptedDataException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public class File extends Item {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String BRACKET_OPEN \u003d \"[\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String BRACKET_CLOSE \u003d \"] \";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String CORRUPTED_FILES_DATA \u003d \"Corrupted files data.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String DELIMITER_FILTER \u003d \" \\\\| \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String DOWNLOADED \u003d \"DOWNLOADED\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String NOT_DOWNLOADED \u003d \"NOT DOWNLOADED\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * This constructor is used for recreation of SpinBox.Tasks.FileTask from storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param done 1 if task has been mark completed, 0 otherwise."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param fileName the name of the file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public File(int done, String fileName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        super(fileName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.updateDone(done \u003d\u003d 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Parses a string extracted from storage back into a File object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param fromStorage This String is provided directly from the localStorage instance."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws CorruptedDataException Thrown when a user manually edits the .txt file incorrectly."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public File(String fromStorage) throws CorruptedDataException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            String[] components \u003d fromStorage.split(DELIMITER_FILTER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            this.updateDone(Integer.parseInt(components[0]) \u003d\u003d 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.setName(components[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new CorruptedDataException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String getStatusText() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return (this.getDone() ? DOWNLOADED : NOT_DOWNLOADED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return BRACKET_OPEN + this.getStatusText() + BRACKET_CLOSE + this.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return super.storeString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 31,
      "ttippinyu": 20,
      "TCK1997": 2
    }
  },
  {
    "path": "src/main/java/spinbox/entities/items/GradedComponent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.entities.items;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.CorruptedDataException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class GradedComponent extends Item {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String UNKNOWN_SCORE \u003d \"----\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String DIVIDE_BY_ZERO \u003d \"Maximum possible score should be non-zero\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String TWO_DP \u003d \"#.##\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String CORRUPTED_GRADES_DATA \u003d \"Corrupted grades data.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String STORE_DELIMITER \u003d \" | \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String DELIMITER_FILTER \u003d \" \\\\| \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String BRACKET_OPEN \u003d \"[\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String BRACKET_CLOSE \u003d \"] \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String COMPLETED \u003d \"COMPLETED\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String NOT_COMPLETED \u003d \"NOT COMPLETED\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private double weight;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private boolean scoreKnown;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private double weightedScore;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Constructor for a Graded component."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param name Name of graded component as a String, e.g. \"English Essay\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param weight Percentage weight of this graded component as a double e.g. 20, 25.5065 etc"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public GradedComponent(String name, double weight) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.scoreKnown \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.weightedScore \u003d 0.0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Parses a string extracted from storage back into a GradedComponent object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param fromStorage This String is provided directly from the localStorage instance."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws CorruptedDataException Thrown when a user manually edits the .txt file incorrectly."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public GradedComponent(String fromStorage) throws CorruptedDataException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            String[] components \u003d fromStorage.split(DELIMITER_FILTER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "            this.updateDone(Integer.parseInt(components[0]) \u003d\u003d 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.setName(components[1]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.setScoreKnown(Integer.parseInt(components[2]) \u003d\u003d 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.setWeight(Double.parseDouble(components[3]));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.setWeightedScore(Double.parseDouble(components[4]));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new CorruptedDataException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String getStatusText() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return (this.getDone() ? COMPLETED : NOT_COMPLETED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return BRACKET_OPEN + this.getStatusText() + BRACKET_CLOSE + this.getName() + \"\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                + this.getWeightedScoreAsString() + \"/\" + Double.toString(this.getWeight());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * This is to create a stringified version of a GradedComponent instance for storage purposes."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return String version of GradedComponent, ready for storage."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return super.storeString() + STORE_DELIMITER + (this.isScoreKnown() ? 1 : 0)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            + STORE_DELIMITER + Double.toString(this.weight) + STORE_DELIMITER + Double.toString(this.weightedScore);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Converts a previously entered weighted score into a human-readable String to be displayed to user."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * If the score was not previously entered, returns dashes to indicate that it does not exist."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return String containing weighted score to 2 decimal places, if it exists, or the String \u0027----\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String getWeightedScoreAsString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        if (this.isScoreKnown()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            DecimalFormat decimalFormat \u003d new DecimalFormat(TWO_DP);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            return decimalFormat.format(this.weightedScore);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            return UNKNOWN_SCORE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Calculates and updates the weighted percentage scored by a user. Also marks the graded component"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * as done, regardless of previous state."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param yourScore This is the score achieved by the user for this graded component. e.g. 22.5"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     *                  It can exceed the maximumScore value as some graded components of certain modules"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     *                  may have bonus marks, allowing a user to potentially score higher than the maximum."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param maximumScore This is the maximum possible score achievable by the user for this graded component,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     *                     excluding bonus marks, if any. e.g. 25"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws InputException This is thrown when the maximum possible score entered for this graded component is zero."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void updateWeightedScore(double yourScore, double maximumScore) throws InputException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        if (this.checkDivideByZero(maximumScore)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new InputException(DIVIDE_BY_ZERO);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.setComplete();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            double score \u003d this.calculateWeightedScore(yourScore, maximumScore);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.setWeightedScore(score);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Takes in an already weighted score (%) and updates the weighted percentage achieved by the user. Also marks"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * the graded component as done, regardless of previous state."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param weightedScore A double that reflects the percentage achieved by the user for that graded component."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void updateWeightedScore(double weightedScore) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setComplete();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setWeightedScore(weightedScore);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private boolean checkDivideByZero(double maximumScore) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return (Double.compare(0.0, maximumScore) \u003d\u003d 0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void setScoreKnownAsTrue() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.scoreKnown \u003d true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void setScoreKnown(boolean scoreKnown) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.scoreKnown \u003d scoreKnown;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private boolean isScoreKnown() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return this.scoreKnown;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void setComplete() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.markDone();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setScoreKnownAsTrue();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void setWeight(double weight) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Returns the relative weight in % of the graded component across 100% of module assessment."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return a double, stating the relative weight of the graded component."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public double getWeight() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void setWeightedScore(double weightedScore) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.weightedScore \u003d weightedScore;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private double calculateWeightedScore(double yourScore, double maximumScore) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return ((yourScore / maximumScore)) * this.weight;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 160,
      "ttippinyu": 2
    }
  },
  {
    "path": "src/main/java/spinbox/entities/items/Item.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.entities.items;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exporter.Exportable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public abstract class Item implements Exportable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String STORE_DELIMITER \u003d \" | \";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String BRACKET_OPEN \u003d \"[\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String BRACKET_CLOSE \u003d \"] \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String DONE \u003d \"DONE\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String NOT_DONE \u003d \"NOT DONE\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private Boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    protected Item(String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    protected Item() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    protected void setName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public Boolean getDone() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    protected String getStatusText() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return (this.getDone() ? DONE : NOT_DONE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return BRACKET_OPEN + this.getStatusText() + BRACKET_CLOSE + this.getName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String exportString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return (this.getDone() ? 1 : 0) + STORE_DELIMITER + this.getName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public void updateDone(Boolean done) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.updateDone(true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 58,
      "ttippinyu": 2
    }
  },
  {
    "path": "src/main/java/spinbox/entities/items/tasks/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.entities.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public class Deadline extends Schedulable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * Constructor for creation of SpinBox.Tasks.Deadline."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @param description the name or description of the deadline."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @param startDate the due date/time of the deadline."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Deadline(String description, DateTime startDate) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * This constructor is used for recreation of SpinBox.Tasks.Deadline from storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param done 1 if task has been marked complete, 0 otherwise."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param description the name or description of the deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param startDate the due date/time of the deadline."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Deadline(int done, String description, DateTime startDate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.updateDone(done \u003d\u003d 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return \"D | \" + super.storeString() + \" | \" + this.getStartDateString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getStartDateString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return this.startDate.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getEndDateString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.startDate + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Check if given date is equal to deadline date."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @param inputDate the date to be compared."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * @return true if equal, false if not equal."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public boolean compareEquals(DateTime inputDate) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        return (this.startDate.compareTo(inputDate) \u003d\u003d 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 33,
      "ttippinyu": 13,
      "TCK1997": 13
    }
  },
  {
    "path": "src/main/java/spinbox/entities/items/tasks/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.entities.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public class Event extends Schedulable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Constructor for SpinBox.Tasks.Event object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description name of the event."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDate Date object for start DateTime."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endDate Date object for end DateTime."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Event(String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.EVENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * This constructor is used for recreation of SpinBox.Tasks.Event from storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param done  1 if task has been marked complete, 0 otherwise."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description the name or description of the event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDate Date object for start DateTime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endDate Date object for end DateTime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Event(int done, String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.updateDone(done \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.EVENT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"E | \" + super.storeString() + \" | \" + this.getStartDateString() + \" | \" + this.getEndDateString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getStartDateString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.startDate.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String getEndDateString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.endDate.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.getStartDateString() + \" to \" + this.getEndDateString() + \")\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Check if date given is within event period."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param inputDate the date to be compared."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if within, false if not."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean compareEquals(DateTime inputDate) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isAfterStartDate \u003d (this.startDate.compareTo(inputDate) \u003c\u003d 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isBeforeEndDate \u003d (this.endDate.compareTo(inputDate) \u003e\u003d 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isAfterStartDate \u0026\u0026 isBeforeEndDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Boolean isOverlapping(DateTime startTime, DateTime endTime) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return startTime.before(endDate) \u0026\u0026 startDate.before(endTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 9,
      "ttippinyu": 3,
      "lackmoo": 1,
      "-": 47,
      "TCK1997": 11
    }
  },
  {
    "path": "src/main/java/spinbox/entities/items/tasks/Exam.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.entities.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "public class Exam extends Schedulable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * Constructor for SpinBox.Tasks.Exam object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param description name of the exam."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param startDate Date object for start DateTime."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param endDate Date object for end DateTime."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Exam(String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.EXAM;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * This constructor is used for recreation of SpinBox.Tasks.Exam from storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param done  1 if task has been marked complete, 0 otherwise."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param description the name or description of the exam."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param startDate Date object for start DateTime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param endDate Date object for end DateTime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Exam(int done, String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.updateDone(done \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.EXAM;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return \"EXAM | \" + super.storeString() + \" | \" + this.getStartDateString() + \" | \" + this.getEndDateString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    String getStartDateString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return this.startDate.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    String getEndDateString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return this.endDate.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return \"[EXAM]\" + super.toString() + \" (at: \" + this.getStartDateString() + \" to \" + this.getEndDateString()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * Check if date given is within event period."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param inputDate the date to be compared."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @return true if within, false if not."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public boolean compareEquals(DateTime inputDate) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        boolean isAfterStartDate \u003d (this.startDate.compareTo(inputDate) \u003c\u003d 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        boolean isBeforeEndDate \u003d (this.endDate.compareTo(inputDate) \u003e\u003d 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return (isAfterStartDate \u0026\u0026 isBeforeEndDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public Boolean isOverlapping(DateTime startTime, DateTime endTime) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return startTime.before(endDate) \u0026\u0026 startDate.before(endTime);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "lackmoo": 60,
      "TCK1997": 11
    }
  },
  {
    "path": "src/main/java/spinbox/entities/items/tasks/Lab.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.entities.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "public class Lab extends Schedulable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * Constructor for SpinBox.Tasks.Lab object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param description name of the lab."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param startDate Date object for start DateTime."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param endDate Date object for end DateTime."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Lab(String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.LAB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * This constructor is used for recreation of SpinBox.Tasks.Lab from storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param done  1 if task has been marked complete, 0 otherwise."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param description the name or description of the lab."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param startDate Date object for start DateTime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param endDate Date object for end DateTime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Lab(int done, String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.updateDone(done \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.LAB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return \"LAB | \" + super.storeString() + \" | \" + this.getStartDateString() + \" | \" + this.getEndDateString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    String getStartDateString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return this.startDate.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    String getEndDateString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return this.endDate.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return \"[LAB]\" + super.toString() + \" (at: \" + this.getStartDateString() + \" to \" + this.getEndDateString()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * Check if date given is within event period."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param inputDate the date to be compared."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @return true if within, false if not."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public boolean compareEquals(DateTime inputDate) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        boolean isAfterStartDate \u003d (this.startDate.compareTo(inputDate) \u003c\u003d 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        boolean isBeforeEndDate \u003d (this.endDate.compareTo(inputDate) \u003e\u003d 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return (isAfterStartDate \u0026\u0026 isBeforeEndDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public Boolean isOverlapping(DateTime startTime, DateTime endTime) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return startTime.before(endDate) \u0026\u0026 startDate.before(endTime);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "lackmoo": 60,
      "TCK1997": 11
    }
  },
  {
    "path": "src/main/java/spinbox/entities/items/tasks/Lecture.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.entities.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "public class Lecture extends Schedulable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * Constructor for SpinBox.Tasks.Lecture object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param description name of the lecture."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param startDate Date object for start DateTime."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param endDate Date object for end DateTime."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Lecture(String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.LECTURE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * This constructor is used for recreation of SpinBox.Tasks.Lecture from storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param done  1 if task has been marked complete, 0 otherwise."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param description the name or description of the lecture."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param startDate Date object for start DateTime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param endDate Date object for end DateTime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Lecture(int done, String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.updateDone(done \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.LECTURE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return \"LEC | \" + super.storeString() + \" | \" + this.getStartDateString() + \" | \" + this.getEndDateString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    String getStartDateString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return this.startDate.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    String getEndDateString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return this.endDate.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return \"[LEC]\" + super.toString() + \" (at: \" + this.getStartDateString() + \" to \" + this.getEndDateString()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * Check if date given is within event period."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param inputDate the date to be compared."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @return true if within, false if not."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public boolean compareEquals(DateTime inputDate) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        boolean isAfterStartDate \u003d (this.startDate.compareTo(inputDate) \u003c\u003d 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        boolean isBeforeEndDate \u003d (this.endDate.compareTo(inputDate) \u003e\u003d 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return (isAfterStartDate \u0026\u0026 isBeforeEndDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public Boolean isOverlapping(DateTime startTime, DateTime endTime) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return startTime.before(endDate) \u0026\u0026 startDate.before(endTime);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "lackmoo": 60,
      "TCK1997": 11
    }
  },
  {
    "path": "src/main/java/spinbox/entities/items/tasks/NonSchedulable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.entities.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public abstract class NonSchedulable extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * Constructor to initialize default values of any instances of children of Task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @param taskName the name of task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public NonSchedulable(String taskName) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public boolean isSchedulable() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "TCK1997": 16
    }
  },
  {
    "path": "src/main/java/spinbox/entities/items/tasks/Schedulable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.entities.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public abstract class Schedulable extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    DateTime startDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    DateTime endDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * Constructor to initialize default values of any instances of children of Task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @param taskName name of the schedulable task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Schedulable(String taskName) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.endDate \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public DateTime getStartDate() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public DateTime getEndDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public void setStartDate(DateTime startDate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public void setEndDate(DateTime endDate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    abstract String getStartDateString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    abstract String getEndDateString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * Compare if input date is equals."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @return default is to return false, only implemented properly in deadline and event task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public boolean compareEquals(DateTime inputDate) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * Compare if time interval overlaps."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @param startTime the start of the interval"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @param endTime the end of the interval"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @return default to return false, only implemented in event task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Boolean isOverlapping(DateTime startTime, DateTime endTime) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public boolean isSchedulable() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "TCK1997": 59
    }
  },
  {
    "path": "src/main/java/spinbox/entities/items/tasks/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.entities.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public abstract class Task extends Item {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Constructor to initialize default values of any instances of children of Task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    TaskType taskType \u003d null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public Task(String taskName) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return super.storeString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public abstract boolean isSchedulable();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 18,
      "TCK1997": 7
    }
  },
  {
    "path": "src/main/java/spinbox/entities/items/tasks/TaskType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.entities.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    TUTORIAL,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    LAB,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    EXAM,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    LECTURE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public static EnumSet\u003cTaskType\u003e taskWithBothDates() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return EnumSet.of(EVENT, TUTORIAL, LAB, EXAM, LECTURE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "TCK1997": 18
    }
  },
  {
    "path": "src/main/java/spinbox/entities/items/tasks/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.entities.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public class Todo extends NonSchedulable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public Todo(String taskName) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * This constructor is used for recreation of SpinBox.Tasks.Todo from storage."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @param done  1 if task has been marked complete, 0 otherwise."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     * @param taskName the name or description of the todo."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public Todo(int done, String taskName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        this.updateDone(done \u003d\u003d 1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return \"T | \" + super.storeString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 20,
      "ttippinyu": 1,
      "TCK1997": 8
    }
  },
  {
    "path": "src/main/java/spinbox/entities/items/tasks/Tutorial.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.entities.items.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "public class Tutorial extends Schedulable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * Constructor for SpinBox.Tasks.Tutorial object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param description name of the tutorial."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param startDate Date object for start DateTime."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param endDate Date object for end DateTime."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Tutorial(String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.TUTORIAL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * This constructor is used for recreation of SpinBox.Tasks.Tutorial from storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param done  1 if task has been marked complete, 0 otherwise."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param description the name or description of the tutorial."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param startDate Date object for start DateTime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param endDate Date object for end DateTime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public Tutorial(int done, String description, DateTime startDate, DateTime endDate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.updateDone(done \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        taskType \u003d TaskType.TUTORIAL;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public String storeString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return \"TUT | \" + super.storeString() + \" | \" + this.getStartDateString() + \" | \" + this.getEndDateString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    String getStartDateString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return this.startDate.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    String getEndDateString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return this.endDate.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return \"[TUT]\" + super.toString() + \" (at: \" + this.getStartDateString() + \" to \" + this.getEndDateString()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * Check if date given is within event period."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @param inputDate the date to be compared."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     * @return true if within, false if not."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public boolean compareEquals(DateTime inputDate) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        boolean isAfterStartDate \u003d (this.startDate.compareTo(inputDate) \u003c\u003d 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        boolean isBeforeEndDate \u003d (this.endDate.compareTo(inputDate) \u003e\u003d 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return (isAfterStartDate \u0026\u0026 isBeforeEndDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    public Boolean isOverlapping(DateTime startTime, DateTime endTime) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        return startTime.before(endDate) \u0026\u0026 startDate.before(endTime);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 1,
      "lackmoo": 60,
      "TCK1997": 11
    }
  },
  {
    "path": "src/main/java/spinbox/exceptions/CalendarSelectorException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "package spinbox.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public class CalendarSelectorException extends SpinBoxException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"Error: Please supply 1, 2, 3 to corresponding\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            + \" to day, month or year for calendar selection\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public CalendarSelectorException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        super(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TCK1997": 10
    }
  },
  {
    "path": "src/main/java/spinbox/exceptions/CorruptedDataException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class CorruptedDataException extends StorageException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"The data within your files have been corrupted. Pleas consider\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            +  \" modifying them or deleting the folder and starting over.\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public CorruptedDataException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 10
    }
  },
  {
    "path": "src/main/java/spinbox/exceptions/DataReadWriteException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class DataReadWriteException extends StorageException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"Error writing to/reading from files. Please ensure that they are \""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            + \"not currently opened in other text editors. You may also wish to delete past data (the entire folder) \""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            + \"and start over.\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public DataReadWriteException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 11
    }
  },
  {
    "path": "src/main/java/spinbox/exceptions/DateFormatException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class DateFormatException extends SpinBoxException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public DateFormatException(String errorMsg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Invalid Date Format\\n\\n\" + errorMsg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 2,
      "-": 5
    }
  },
  {
    "path": "src/main/java/spinbox/exceptions/DateValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class DateValueException extends SpinBoxException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public DateValueException(String errorMsg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Invalid Date Values\\n\" + errorMsg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 2,
      "-": 5
    }
  },
  {
    "path": "src/main/java/spinbox/exceptions/FileCreationException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class FileCreationException extends StorageException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public FileCreationException(String errMsg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(errMsg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 7
    }
  },
  {
    "path": "src/main/java/spinbox/exceptions/InputException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class InputException extends SpinBoxException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public InputException(String errorMsg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Invalid Input\\n\\n\" + errorMsg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 2,
      "-": 5
    }
  },
  {
    "path": "src/main/java/spinbox/exceptions/InvalidIndexException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class InvalidIndexException extends InputException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"You have entered an invalid index.\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public InvalidIndexException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 9
    }
  },
  {
    "path": "src/main/java/spinbox/exceptions/SpinBoxException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public abstract class SpinBoxException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    public SpinBoxException(String errorMsg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 7
    }
  },
  {
    "path": "src/main/java/spinbox/exceptions/StorageException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class StorageException extends SpinBoxException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public StorageException(String errMsg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        super(\"Storage Error\\n\\n\" + errMsg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 5,
      "ttippinyu": 2
    }
  },
  {
    "path": "src/main/java/spinbox/exporter/Exportable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.exporter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public interface Exportable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String exportString();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 5
    }
  },
  {
    "path": "src/main/java/spinbox/exporter/Exporter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.exporter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.Item;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.DataReadWriteException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.FileCreationException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class Exporter {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String TIMESTAMP \u003d \" as of \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private DateTime currentTime \u003d new DateTime(new Date());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private java.io.File spinBoxFile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private String titleLine;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * A constructor for an instance of the exporter class, which creates the parent folder and/or file as needed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param fileLocation The path of the file to be exported to."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param titleLine The human-understandable title/header for the exported file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws FileCreationException An exception is thrown for file creation errors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public Exporter(String fileLocation, String titleLine) throws FileCreationException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            this.titleLine \u003d titleLine;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            spinBoxFile \u003d new File(fileLocation);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            spinBoxFile.getParentFile().mkdir();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            spinBoxFile.createNewFile();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new FileCreationException(e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Saves the provided exportable items into a human-readable snapshot text file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param exportables A list of items that implement the Exportable interface."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws DataReadWriteException An exception is thrown for file creation errors."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void writeData(List\u003c? extends Item\u003e exportables) throws DataReadWriteException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            BufferedWriter outputStream \u003d new BufferedWriter(new FileWriter(spinBoxFile));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            outputStream.write(titleLine);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            outputStream.write(TIMESTAMP);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            outputStream.write(currentTime.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            outputStream.newLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            outputStream.newLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            for (int lineNumber \u003d 0; lineNumber \u003c exportables.size(); lineNumber++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                outputStream.write(Integer.toString(lineNumber + 1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                outputStream.write(\". \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                outputStream.write(exportables.get(lineNumber).exportString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                outputStream.newLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            outputStream.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new DataReadWriteException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 65
    }
  },
  {
    "path": "src/main/java/spinbox/gui/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Label getDialog() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialog;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Creates SpinBox\u0027s dialog by creating a dialogBox and flipping it horizontally."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param text Text to be added to the dialog box."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param img Profile picture to go with the dialog box."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A dialog box that will be displayed on the gui."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 2,
      "-": 69
    }
  },
  {
    "path": "src/main/java/spinbox/gui/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 2,
      "-": 8
    }
  },
  {
    "path": "src/main/java/spinbox/gui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package spinbox.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import javafx.stage.Popup;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import javafx.stage.PopupWindow;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import javafx.stage.Window;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.SpinBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.containers.ModuleContainer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.lists.FileList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.lists.GradeList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.containers.lists.TaskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.entities.Module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.File;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.GradedComponent;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.entities.items.tasks.Schedulable;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.entities.items.tasks.Task;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.entities.items.tasks.TaskType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.exceptions.DataReadWriteException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.exceptions.FileCreationException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import spinbox.exceptions.InvalidIndexException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.gui.boxes.FileBox;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.gui.boxes.GradedComponentBox;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.gui.boxes.ModuleBox;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class MainWindow extends GridPane {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String WHITESPACE \u003d \"    \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String TASKS \u003d \"Tasks\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String FILES \u003d \"Files\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private static final String GRADES \u003d \"Grades\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private VBox overallTasksView;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private Button submitButton;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private GridPane modulesTabContainer;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    private SpinBox spinBox;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private String specificModuleCode;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private String subTab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private Popup popup \u003d new Popup();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private ArrayList\u003cString\u003e commandHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private int commandCount \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * FXML method that is used as a post-constructor function to initialize variables and tabbed views."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void initialize()  {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.spinBox \u003d new SpinBox();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.specificModuleCode \u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.subTab \u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        tabPane.getSelectionModel().selectedIndexProperty().addListener(new ChangeListener\u003cNumber\u003e() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            public void changed(ObservableValue\u003c? extends Number\u003e observable, Number oldValue, Number newValue) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                switch (newValue.intValue()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                case 0:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                        updateMain();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    } catch (SpinBoxException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                case 1:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    updateCalendar();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    updateModules();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        });"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Uses a list of strings and a listener to cycle through user commands using the keyboard."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void enableCommandHistory() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        userInput.setOnKeyPressed(event -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            switch (event.getCode()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            case UP:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                if (commandCount \u003c commandHistory.size()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    userInput.setText(commandHistory.get(commandCount));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    commandCount +\u003d 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                userInput.end();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            case DOWN:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                commandCount -\u003d 1;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                if (commandCount \u003e 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    commandCount -\u003d 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    userInput.setText(commandHistory.get(commandCount));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                    userInput.clear();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    commandCount \u003d 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                userInput.end();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        });"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing SpinBox\u0027s reply and then appends"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "     * them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private void handleUserInput() throws InvalidIndexException, DataReadWriteException, FileCreationException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        commandHistory.add(0, userInput.getText());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        commandCount \u003d 0;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        String response \u003d spinBox.getResponse(input, true);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        String[] responseFragments \u003d response.split(\"/\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        String comparator;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        if (responseFragments.length \u003e 1) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            comparator \u003d responseFragments[1];"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            comparator \u003d response;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        switch (comparator) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        case \"main\":"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            tabPane.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        case \"calendar\":"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            tabPane.getSelectionModel().select(1);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        case \"modules\":"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            tabPane.getSelectionModel().select(2);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            if (responseFragments.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                this.specificModuleCode \u003d responseFragments[2];"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                this.subTab \u003d responseFragments[3].split(\" \")[0];"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                this.specificModuleCode \u003d null;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                this.subTab \u003d null;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            updateModules();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            updateAll();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            getPopup(response);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        if (spinBox.isShutdown()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Initializes the contents of the Main tab, which is the default upon startup."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws DataReadWriteException should be displayed."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws FileCreationException should be displayed."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws InvalidIndexException should be displayed."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void initializeGui() throws DataReadWriteException, FileCreationException, InvalidIndexException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.updateMain();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setPopup(popup);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.enableCommandHistory();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void updateAll() throws DataReadWriteException, FileCreationException, InvalidIndexException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        updateMain();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        updateCalendar();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        updateModules();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private void updateMain() throws InvalidIndexException, DataReadWriteException, FileCreationException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        updateOverallTasksView();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        updateExams();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void updateModules() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        modulesTabContainer.getChildren().clear();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        if (this.specificModuleCode !\u003d null \u0026\u0026 this.subTab !\u003d null) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            updateSpecificModule(this.specificModuleCode, this.subTab);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            updateModulesList();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void updateOverallTasksView() throws DataReadWriteException, InvalidIndexException, FileCreationException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        TaskList allTasks \u003d new TaskList(\"Main\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        overallTasksView.getChildren().clear();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ModuleContainer moduleContainer \u003d spinBox.getModuleContainer();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        for (Map.Entry module : modules.entrySet()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            String moduleCode \u003d (String) module.getKey();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            Module moduleObject \u003d (Module) module.getValue();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            TaskList tasks \u003d moduleObject.getTasks();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            for (Task task : tasks.getList()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                if (!task.getDone()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                    allTasks.add(task);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        allTasks.sort();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        int boxes;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        if (allTasks.size() \u003c 5) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            boxes \u003d allTasks.size();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        }  else {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            boxes \u003d 5;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        for (int i \u003d 0; i \u003c boxes; i++) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            Task addTask \u003d allTasks.get(i);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            String description \u003d addTask.getTaskType().name();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            description +\u003d \": \" + addTask.getName();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            String dates \u003d \"\";"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            if (addTask.isSchedulable()) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                Schedulable task \u003d ((Schedulable)addTask);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                dates +\u003d task.getStartDate().toString();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                if (TaskType.taskWithBothDates().contains(task.getTaskType())) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                    dates +\u003d \" \" + task.getEndDate().toString();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                    dates \u003d \"At: \" + dates;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                    dates \u003d \"By: \" + dates;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            String moduleCode \u003d \"\";"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            overallTasksView.getChildren().add(TaskBox.getTaskBox(description, moduleCode, dates));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void updateModulesList() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ScrollPane scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        scrollPane.setFitToHeight(true);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        modulesTabContainer.add(scrollPane, 1, 0, 1, 2);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        VBox modulesList \u003d new VBox();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        modulesList.setStyle(\"-fx-background-color: #25274D\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        scrollPane.setContent(modulesList);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ModuleContainer moduleContainer \u003d spinBox.getModuleContainer();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        HashMap\u003cString, Module\u003e modules \u003d moduleContainer.getModules();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (Map.Entry module : modules.entrySet()) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            Module currentModule \u003d (Module) module.getValue();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            ModuleBox wrappedModule \u003d ModuleBox.getModuleListBox(currentModule.getModuleCode(),"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    currentModule.getModuleName());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            wrappedModule.setOnMouseClicked(event -\u003e {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                userInput.setText(\"view / modules \" + currentModule.getModuleCode() + \" tasks\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    handleUserInput();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                } catch (SpinBoxException e) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            });"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            modulesList.getChildren().add(wrappedModule);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void updateSpecificModule(String moduleCode, String subTab) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ModuleContainer moduleContainer \u003d spinBox.getModuleContainer();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Module currentModule \u003d moduleContainer.getModule(moduleCode);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        updateSpecificModuleHeader(currentModule, subTab);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        updateSpecificModuleNotes(currentModule);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        updateSpecificModuleList(currentModule, subTab);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void updateSpecificModuleHeader(Module currentModule, String subTabName) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        TextFlow textFlow \u003d new TextFlow();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        textFlow.setPadding(new Insets(10, 10, 10, 10));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        textFlow.setTextAlignment(TextAlignment.CENTER);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        textFlow.setLineSpacing(5.0);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        textFlow.setStyle(\"-fx-background-color: #464866\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Text modCode \u003d new Text(currentModule.getModuleCode());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        modCode.setFont(new Font(\"Roboto\", 18.0));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        modCode.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        modCode.setStyle(\"-fx-font-weight: bold\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        textFlow.getChildren().add(modCode);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        textFlow.getChildren().add(new Text(WHITESPACE));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Text modName \u003d new Text(currentModule.getModuleName());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        modName.setFont(new Font(\"Roboto\", 14.0));"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        modName.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        textFlow.getChildren().add(modName);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        textFlow.getChildren().add(new Text(System.lineSeparator()));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Text taskSubHeader \u003d new Text((TASKS));"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Text fileSubHeader \u003d new Text((FILES));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Text gradeSubHeader \u003d new Text((GRADES));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        taskSubHeader.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        fileSubHeader.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        gradeSubHeader.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        switch (subTabName) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        case \"grades\":"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            gradeSubHeader.setStyle(\"-fx-font-weight: bold\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            gradeSubHeader.setFill(Color.AQUA);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        case \"files\":"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            fileSubHeader.setStyle(\"-fx-font-weight: bold\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            fileSubHeader.setFill(Color.AQUA);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        case \"tasks\":"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            taskSubHeader.setStyle(\"-fx-font-weight: bold\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            taskSubHeader.setFill(Color.AQUA);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        textFlow.getChildren().add(taskSubHeader);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        textFlow.getChildren().add(new Text(WHITESPACE));"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        textFlow.getChildren().add(fileSubHeader);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        textFlow.getChildren().add(new Text(WHITESPACE));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        textFlow.getChildren().add(gradeSubHeader);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        modulesTabContainer.add(textFlow, 0, 0,  2, 1);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void updateSpecificModuleNotes(Module currentModule) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        TextFlow textFlow \u003d new TextFlow();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        textFlow.setStyle(\"-fx-background-color: #AAABB8\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        textFlow.setPadding(new Insets(5, 5, 5, 5));"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        textFlow.setLineSpacing(5.0);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        textFlow.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cString\u003e notes \u003d currentModule.getNotepad().getNotes();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (String note : notes) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            textFlow.getChildren().add(new Text(note));"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            textFlow.getChildren().add(new Text(System.lineSeparator()));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        modulesTabContainer.add(textFlow, 0, 1, 1, 1);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void updateSpecificModuleList(Module currentModule, String subTab) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        switch (subTab) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        case \"files\":"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            updateSpecificModuleFileList(currentModule);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        case \"grades\":"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            updateSpecificModuleGradeList(currentModule);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            updateSpecificModuleTaskList(currentModule);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void updateSpecificModuleGradeList(Module currModule) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradeList gradeList \u003d currModule.getGrades();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cGradedComponent\u003e gradedComponents \u003d gradeList.getList();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ScrollPane scrollPane \u003d this.createScrollPane();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        modulesTabContainer.add(scrollPane, 1, 1, 1, 1);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        VBox gradesList \u003d new VBox();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (GradedComponent gradedComponent : gradedComponents) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            GradedComponentBox wrappedGradedComponent \u003d GradedComponentBox.getGradedComponentsBox(gradedComponent);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            gradesList.getChildren().add(wrappedGradedComponent);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        gradesList.setStyle(\"-fx-background-color: #25274D\");"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        scrollPane.setContent(gradesList);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void updateSpecificModuleTaskList(Module currModule) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ScrollPane scrollPane \u003d this.createScrollPane();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        modulesTabContainer.add(scrollPane, 1, 1, 1, 1);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        VBox tasksList \u003d new VBox();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        tasksList.setStyle(\"-fx-background-color: #25274D\");"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        scrollPane.setContent(tasksList);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        TaskList taskList \u003d currModule.getTasks();"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cTask\u003e tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            String description \u003d task.getTaskType().name();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            description +\u003d \": \" + task.getName();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            String dates \u003d \"\";"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            if (task.isSchedulable()) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                Schedulable schedulable \u003d ((Schedulable) task);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                dates +\u003d schedulable.getStartDate().toString();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                if (TaskType.taskWithBothDates().contains(task.getTaskType())) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    dates +\u003d \" \" + schedulable.getEndDate().toString();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    dates \u003d \"At: \" + dates;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    dates \u003d \"By: \" + dates;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            TaskBox wrappedTask \u003d TaskBox.getTaskBox(description, \"\", dates);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            if (!task.getDone()) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                tasksList.getChildren().add(wrappedTask);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void updateSpecificModuleFileList(Module currModule) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ScrollPane scrollPane \u003d this.createScrollPane();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        modulesTabContainer.add(scrollPane, 1, 1, 1, 1);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        VBox filesList \u003d new VBox();"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        filesList.setStyle(\"-fx-background-color: #25274D\");"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        scrollPane.setContent(filesList);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        FileList fileList \u003d currModule.getFiles();"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cFile\u003e files \u003d fileList.getList();"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (File file : files) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            FileBox wrappedFile \u003d FileBox.getFileBox(file);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            filesList.getChildren().add(wrappedFile);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void updateExams() {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assert true;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void updateCalendar() {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assert true;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public void setPopup(Popup popup) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        popup.setAutoHide(true);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        popup.setAnchorLocation(PopupWindow.AnchorLocation.WINDOW_TOP_LEFT);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Retrieve a popup to display text in a styled manner."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param displayText the String to be displayed to the user."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private void getPopup(String displayText) {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        popup.getContent().clear();"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        GridPane grid \u003d new GridPane();"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        Label response \u003d new Label();"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        response.setText(displayText);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        grid.setStyle(\"-fx-background-color:white;\""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                + \"-fx-border-color: black;\""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                + \"-fx-border-width:2;\""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                + \"-fx-border-radius:3;\""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                + \"-fx-hgap:3;\""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "                + \"-fx-vgap:5;\");"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        grid.getChildren().add(response);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        popup.getContent().add(grid);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        Window window \u003d tabPane.getScene().getWindow();"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        popup.setX(600);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        popup.setY(788);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        popup.show(window);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private ScrollPane createScrollPane() {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ScrollPane scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        scrollPane.setFitToHeight(true);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return scrollPane;"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 358,
      "ttippinyu": 4,
      "TCK1997": 140
    }
  },
  {
    "path": "src/main/java/spinbox/gui/TaskBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "package spinbox.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public class TaskBox extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private Label module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private Label dates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    private TaskBox(String description, String module, String dates) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/itemBoxes/TaskBox.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.description.setTextFill(Color.WHITE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.module.setTextFill(Color.WHITE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.dates.setTextFill(Color.WHITE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.description.setText(description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.module.setText(module);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.dates.setText(dates);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        this.dates.setAlignment(Pos.BASELINE_RIGHT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public static TaskBox getTaskBox(String description, String module, String dates) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        return new TaskBox(description, module, dates);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 6,
      "TCK1997": 37
    }
  },
  {
    "path": "src/main/java/spinbox/gui/boxes/FileBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.gui.boxes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.gui.MainWindow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class FileBox extends VBox {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private Label fileDetails;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private FileBox(File file) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/itemBoxes/FileBox.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setStyle(\"-fx-border-color: #FFF\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setPadding(new Insets(10, 10, 10, 10));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setSpacing(10.0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        setMargin(this, new Insets(10, 10, 10, 10));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.fileDetails.setStyle(\"-fx-font-weight: bold\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.fileDetails.setTextFill(Color.WHITE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.fileDetails.setText(file.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public static FileBox getFileBox(File file) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return new FileBox(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 42
    }
  },
  {
    "path": "src/main/java/spinbox/gui/boxes/GradedComponentBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.gui.boxes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.GradedComponent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.gui.MainWindow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class GradedComponentBox extends VBox {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private Label gradedComponentDetails;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private GradedComponentBox(GradedComponent gradedComponent) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    \"/view/itemBoxes/GradedComponentBox.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setStyle(\"-fx-border-color: #FFF\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setPadding(new Insets(10, 10, 10, 10));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setSpacing(10.0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        setMargin(this, new Insets(10, 10, 10, 10));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.gradedComponentDetails.setStyle(\"-fx-font-weight: bold\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.gradedComponentDetails.setTextFill(Color.WHITE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.gradedComponentDetails.setText(gradedComponent.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public static GradedComponentBox getGradedComponentsBox(GradedComponent gradedComponent) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return new GradedComponentBox(gradedComponent);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 41
    }
  },
  {
    "path": "src/main/java/spinbox/gui/boxes/ModuleBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.gui.boxes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.gui.MainWindow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class ModuleBox extends VBox {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private Label moduleNameLabel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private Label moduleCodeLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private ModuleBox(String moduleCode, String moduleName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                    .getResource(\"/view/ModuleListBox/ModuleListBox.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setStyle(\"-fx-border-color: #FFF\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setPadding(new Insets(10, 10, 10, 10));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.setSpacing(10.0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        setMargin(this, new Insets(10, 10, 10, 10));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.moduleCodeLabel.setStyle(\"-fx-font-weight: bold\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.moduleCodeLabel.setTextFill(Color.WHITE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.moduleCodeLabel.setText(moduleCode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        this.moduleNameLabel.setText(moduleName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public static ModuleBox getModuleListBox(String moduleCode, String moduleName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return new ModuleBox(moduleCode, moduleName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 45
    }
  },
  {
    "path": "src/main/java/spinbox/storage/Storable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public interface Storable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    String storeString();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    void fromStoredString(String fromStorage);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 7
    }
  },
  {
    "path": "src/main/java/spinbox/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.DataReadWriteException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.FileCreationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    private java.io.File spinBoxFile;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * This constructor takes in a path, creating the file and/or folder as needed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param fileLocation relative path of the text file to store data in."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws FileCreationException An exception is thrown for file creation errors."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public Storage(String fileLocation) throws FileCreationException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            spinBoxFile \u003d new File(fileLocation);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            spinBoxFile.getParentFile().mkdir();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            spinBoxFile.createNewFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new FileCreationException(e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Retrieves lines of text from within the text file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @return A list containing Strings of data retrieved from the text file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws DataReadWriteException An exception is thrown for I/O errors."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public List\u003cString\u003e loadData() throws DataReadWriteException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            String currentLine;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            BufferedReader inputStream \u003d new BufferedReader(new FileReader(spinBoxFile));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            while ((currentLine \u003d inputStream.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                lines.add(currentLine);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            inputStream.close();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new DataReadWriteException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        return lines;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * Saves lines of text to a text file at the path specified."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @param lines List of Strings to be saved line by line to the text file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     * @throws DataReadWriteException An exception is thrown for I/O errors."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void saveData(List\u003cString\u003e lines) throws DataReadWriteException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            BufferedWriter outputStream \u003d new BufferedWriter(new FileWriter(spinBoxFile));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            for (String line : lines) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                outputStream.write(line);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                outputStream.newLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            outputStream.close();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throw new DataReadWriteException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 70
    }
  },
  {
    "path": "src/main/java/spinbox/storage/StorageContainer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package spinbox.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.CorruptedDataException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.DataReadWriteException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.FileCreationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public interface StorageContainer {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    void saveData() throws DataReadWriteException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    void loadData() throws DataReadWriteException, CorruptedDataException, FileCreationException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "rssujay": 12
    }
  },
  {
    "path": "src/test/java/integration/ModuleIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package integration;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.ModuleContainer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.GradedComponent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.tasks.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.StorageException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class ModuleIntegrationTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void loadDataFromStorageSuccessful_oneModule_expectedFilesLoaded() throws StorageException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ModuleContainer testContainer \u003d new ModuleContainer();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Module testModuleOne \u003d new Module(\"testMod5\", \"Engineering Principles \u0026 Practice III\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testModuleOne.getFiles().add(new File(0, \"testFile1\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testModuleOne.getGrades().add(new GradedComponent(\"Essay\", 20));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testModuleOne.getTasks().add(new Todo(\"test todo\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testModuleOne.getNotepad().addLine(\"hello123\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testModuleOne.getFiles().getList().clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testModuleOne.getGrades().getList().clear();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testModuleOne.getTasks().getList().clear();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testModuleOne.getNotepad().getNotes().clear();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testModuleOne.loadData();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleOne.getFiles().getList().remove(0).storeString(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                new File(0, \"testFile1\").storeString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleOne.getGrades().getList().remove(0).storeString(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                new GradedComponent(\"Essay\", 20).storeString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleOne.getTasks().getList().remove(0).storeString(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "                new Todo(\"test todo\").storeString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleOne.getNotepad().getNotes().remove(0), \"hello123\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 42
    }
  },
  {
    "path": "src/test/java/integration/NotepadIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package integration;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.ModuleContainer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.Notepad;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.CorruptedDataException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.DataReadWriteException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.FileCreationException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class NotepadIntegrationTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void loadDataSuccessful_AddLinesThenManualClear_successfulRepopulationOfData() throws"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            DataReadWriteException, FileCreationException, CorruptedDataException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ModuleContainer testContainer \u003d new ModuleContainer();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Notepad testPad \u003d new Notepad(\"notesTest5\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testPad.addLine(\"test line0\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testPad.addLine(\"test line1\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testPad.addLine(\"test line2\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testPad.addLine(\"test line3\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testPad.getNotes().clear();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testPad.loadData();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testPad.getNotes().get(0), \"test line0\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testPad.getNotes().get(1), \"test line1\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testPad.getNotes().get(2), \"test line2\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testPad.getNotes().get(3), \"test line3\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 31
    }
  },
  {
    "path": "src/test/java/integration/ParserViewCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "package integration;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.commands.ViewCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.containers.ModuleContainer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.entities.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class ParserViewCommandIntegrationTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    void testParser_viewCommand_toMainPages() throws SpinBoxException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        ArrayDeque\u003cString\u003e pageTrace \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        ModuleContainer testContainer \u003d new ModuleContainer();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Ui ui \u003d new Ui(true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace.add(\"main\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        ArrayDeque\u003cString\u003e checkTrace \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String toCalendar \u003d \"view / calendar\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Parser.setPageTrace(pageTrace);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Command command \u003d Parser.parse(toCalendar);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command.execute(testContainer, pageTrace, ui, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        checkTrace.add(\"calendar\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        assertTrue(Arrays.equals(checkTrace.toArray(), pageTrace.toArray()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String toModules \u003d \"view / modules\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Parser.setPageTrace(pageTrace);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command \u003d Parser.parse(toModules);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command.execute(testContainer, pageTrace, ui, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        checkTrace.clear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        checkTrace.add(\"modules\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        assertTrue(Arrays.equals(checkTrace.toArray(), pageTrace.toArray()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String toMain \u003d \"view / main\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Parser.setPageTrace(pageTrace);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command \u003d Parser.parse(toMain);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command.execute(testContainer, pageTrace, ui, false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        checkTrace.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        checkTrace.add(\"main\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        assertTrue(Arrays.equals(checkTrace.toArray(), pageTrace.toArray()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    void testParser_viewCommand_toModule() throws SpinBoxException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        ArrayDeque\u003cString\u003e pageTrace \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        ModuleContainer testContainer \u003d new ModuleContainer();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Module testModule \u003d new Module(\"CG1112\", \"Engineering Principles \u0026 Practice III\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        testContainer.addModule(testModule);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Ui ui \u003d new Ui(true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace.add(\"main\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        ArrayDeque\u003cString\u003e checkTrace \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String toModule \u003d \"view / CG1112\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Parser.setPageTrace(pageTrace);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Command command \u003d Parser.parse(toModule);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command.execute(testContainer, pageTrace, ui, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        checkTrace.addFirst(\"modules\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        checkTrace.addFirst(\"CG1112\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        assertTrue(Arrays.equals(checkTrace.toArray(), pageTrace.toArray()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace.clear();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace.add(\"calendar\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Parser.setPageTrace(pageTrace);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command \u003d Parser.parse(toModule);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command.execute(testContainer, pageTrace, ui, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        assertTrue(Arrays.equals(checkTrace.toArray(), pageTrace.toArray()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace.clear();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace.add(\"modules\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Parser.setPageTrace(pageTrace);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command \u003d Parser.parse(toModule);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command.execute(testContainer, pageTrace, ui, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        assertTrue(Arrays.equals(checkTrace.toArray(), pageTrace.toArray()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace.add(\"CG1112\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Parser.setPageTrace(pageTrace);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command \u003d Parser.parse(toModule);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command.execute(testContainer, pageTrace, ui, false);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        assertTrue(Arrays.equals(checkTrace.toArray(), pageTrace.toArray()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    void testParser_viewCommand_toModuleTasks() throws SpinBoxException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        ArrayDeque\u003cString\u003e pageTrace \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        ModuleContainer testContainer \u003d new ModuleContainer();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Module testModule \u003d new Module(\"CG1112\", \"Engineering Principles \u0026 Practice III\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        testContainer.addModule(testModule);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace.add(\"main\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        ArrayDeque\u003cString\u003e checkTrace \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        checkTrace.addFirst(\"modules\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        checkTrace.addFirst(\"CG1112\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        checkTrace.addFirst(\"tasks\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Ui ui \u003d new Ui(true);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String toModulesThenTasks \u003d \"view / modules CG1112 tasks\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Parser.setPageTrace(pageTrace);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Command command \u003d Parser.parse(toModulesThenTasks);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command.execute(testContainer, pageTrace, ui, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        assertTrue(Arrays.equals(checkTrace.toArray(), pageTrace.toArray()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace.clear();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace.add(\"main\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String toModuleTasks \u003d \"view / CG1112 tasks\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Parser.setPageTrace(pageTrace);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command \u003d Parser.parse(toModuleTasks);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command.execute(testContainer, pageTrace, ui, false);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        assertTrue(Arrays.equals(checkTrace.toArray(), pageTrace.toArray()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace.clear();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace.add(\"calendar\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Parser.setPageTrace(pageTrace);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command \u003d Parser.parse(toModuleTasks);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command.execute(testContainer, pageTrace, ui, false);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        assertTrue(Arrays.equals(checkTrace.toArray(), pageTrace.toArray()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace.clear();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace.add(\"modules\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Parser.setPageTrace(pageTrace);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command \u003d Parser.parse(toModuleTasks);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command.execute(testContainer, pageTrace, ui, false);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        assertTrue(Arrays.equals(checkTrace.toArray(), pageTrace.toArray()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace.clear();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace.addFirst(\"modules\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace.addFirst(\"CG1112\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String toTasks \u003d \"view / tasks\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Parser.setPageTrace(pageTrace);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command \u003d Parser.parse(toTasks);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command.execute(testContainer, pageTrace, ui, false);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        assertTrue(Arrays.equals(checkTrace.toArray(), pageTrace.toArray()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    void testParser_viewCommand_toModuleCaseInsensitive() throws SpinBoxException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        ArrayDeque\u003cString\u003e pageTrace \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        ModuleContainer testContainer \u003d new ModuleContainer();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Module testModule \u003d new Module(\"CG1112\", \"Engineering Principles \u0026 Practice III\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        testContainer.addModule(testModule);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace.add(\"main\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        ArrayDeque\u003cString\u003e checkTrace \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        checkTrace.addFirst(\"modules\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        checkTrace.addFirst(\"CG1112\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Ui ui \u003d new Ui(true);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        String toModule \u003d \"view / cg1112\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Parser.setPageTrace(pageTrace);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Command command \u003d Parser.parse(toModule);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command.execute(testContainer, pageTrace, ui, false);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        assertTrue(Arrays.equals(checkTrace.toArray(), pageTrace.toArray()));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace.clear();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        pageTrace.add(\"main\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        toModule \u003d \"view / CG1112\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        Parser.setPageTrace(pageTrace);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command \u003d Parser.parse(toModule);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        command.execute(testContainer, pageTrace, ui, false);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        assertTrue(Arrays.equals(checkTrace.toArray(), pageTrace.toArray()));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ttippinyu": 203
    }
  },
  {
    "path": "src/test/java/unit/DateTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package unit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class DateTimeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public void dateTimeCreation_variousDateTimeString_successfulCreationAndExpectedStringOutput() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test \u003d new DateTime(\"05/02/2020 12:00\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"05/02/2020 12:00\", test.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test2 \u003d new DateTime(test.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"05/02/2020 12:00\", test2.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test3 \u003d new DateTime(\"06/12/2300 5pm\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"06/12/2300 17:00\", test3.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test4 \u003d new DateTime(test3.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"06/12/2300 17:00\", test4.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public void dateTimeCreation_differentlyFormattedDateTimeString_successfulCreationAndExpectedStringOutput() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test \u003d new DateTime(\"the day before 12/16/2019 4pm\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"12/15/2019 16:00\", test.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test2 \u003d new DateTime(\"16 December 1800 8am to 15th January 2019 9pm\", 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test3 \u003d new DateTime(\"16 December 1800 8am to 15th January 2019 9pm\",1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"12/16/1800 08:00\", test2.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"01/15/2019 21:00\", test3.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime santaVacationStartDate \u003d new DateTime(\"from christmas 2019 6am to christmas eve 2020 23:59\", 0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime santaVacationEndDate \u003d new DateTime(\"from christmas 2019 6am to christmas eve 2020 23:59\", 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"12/25/2019 06:00\", santaVacationStartDate.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"12/24/2020 23:59\", santaVacationEndDate.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public void getDayOfMonth_DateTimeString_expectedDay() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test \u003d new DateTime(\"10/16/2019 12:33\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(16, test.getDayOfMonth());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public void getDayOfWeek_DateTimeString_expectedDay() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test \u003d new DateTime(\"10/16/2019 12:33\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(4, test.getDayOfWeek());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public void getHour_DateTimeString_expectedHour() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        String date \u003d \"10/16/2019 12:33\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test \u003d new DateTime(date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(12, test.getHour());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public void getStartOfTheWeek_DateTimeString_expectedDateTimeString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        String date \u003d \"10/16/2019\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test \u003d new DateTime(date + \" 00:00\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"10/13/2019 00:00\", test.getStartOfTheWeek().toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public void getEndOfTheWeek_DateTimeString_expectedDateTimeString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        String date \u003d \"10/16/2019\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test \u003d new DateTime(date + \" 23:59\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"10/19/2019 23:59\", test.getEndOfTheWeek().toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public void getStartOfTheMonth_DateTimeString_expectedDateTimeString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        String date \u003d \"10/16/2019\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test \u003d new DateTime(date + \" 00:00\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"10/01/2019 00:00\", test.getStartOfTheMonth().toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    public void getEndOfTheMonth_DateTimeString_expectedDateTimeString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        String date \u003d \"10/16/2019\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        DateTime test \u003d new DateTime(date + \" 23:59\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        assertEquals(\"10/31/2019 23:59\", test.getEndOfTheMonth().toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 9,
      "ttippinyu": 2,
      "TCK1997": 81
    }
  },
  {
    "path": "src/test/java/unit/FileTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package unit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.CorruptedDataException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "public class FileTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    void testToString_createAndMarkDoneNewTask() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Item item \u003d new File(0, \"file1\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(\"[NOT DOWNLOADED] file1\", item.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        item.markDone();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(\"[DOWNLOADED] file1\", item.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    void testStoreString_createAndMarkDoneNewTask() throws CorruptedDataException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Item item \u003d new File(\"0 | file1\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(\"0 | file1\", item.storeString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        item.markDone();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(\"1 | file1\", item.storeString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 12,
      "ttippinyu": 12,
      "TCK1997": 2
    }
  },
  {
    "path": "src/test/java/unit/GradedComponentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package unit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.CorruptedDataException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.SpinBoxException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.exceptions.InputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.GradedComponent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class GradedComponentTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void gradeCreation_variousGradedComponents_successfulCreationAndWorkingGetters() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeOne \u003d new GradedComponent(\"Essay\", 20);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeight(), 20);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.storeString(), \"0 | Essay | 0 | 20.0 | 0.0\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeightedScoreAsString(), \"----\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeTwo \u003d new GradedComponent(\"Report\", 26.7);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.getWeight(), 26.7);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.storeString(), \"0 | Report | 0 | 26.7 | 0.0\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.getWeightedScoreAsString(), \"----\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeThree \u003d new GradedComponent(\"Assignment 4\", 3.7654321);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeThree.getWeight(), 3.7654321);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeThree.storeString(), \"0 | Assignment 4 | 0 | 3.7654321 | 0.0\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeThree.getWeightedScoreAsString(), \"----\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void gradeUpdatePreWeighted_gradedEssayScored_successfulUpdateAndMarkedDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeOne \u003d new GradedComponent(\"Essay\", 20);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testGradeOne.updateWeightedScore(15);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeight(), 20);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.storeString(), \"1 | Essay | 1 | 20.0 | 15.0\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeightedScoreAsString(), \"15\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeTwo \u003d new GradedComponent(\"Essay\", 0.657);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testGradeTwo.updateWeightedScore(0.700);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.getWeight(), 0.657);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.storeString(), \"1 | Essay | 1 | 0.657 | 0.7\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.getWeightedScoreAsString(), \"0.7\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void gradeUpdateUnweighted_gradedEssayScored_successfulUpdateAndMarkedDone() throws InputException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeOne \u003d new GradedComponent(\"Essay\", 20);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testGradeOne.updateWeightedScore(15, 30);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeight(), 20);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.storeString(), \"1 | Essay | 1 | 20.0 | 10.0\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeightedScoreAsString(), \"10\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeTwo \u003d new GradedComponent(\"Essay\", 0.657);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testGradeTwo.updateWeightedScore(12, 15);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.getWeight(), 0.657);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeTwo.getWeightedScoreAsString(), \"0.53\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void gradeUpdateUnweighted_gradedEssayScoredZeroMaximumScore_ExceptionThrown() throws InputException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeOne \u003d new GradedComponent(\"Essay\", 20);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "        assertThrows(SpinBoxException.class, () -\u003e testGradeOne.updateWeightedScore(15, 0));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeight(), 20);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.storeString(), \"0 | Essay | 0 | 20.0 | 0.0\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeightedScoreAsString(), \"----\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void storeStringCreation_gradedEssayScored_expectedString() throws InputException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeOne \u003d new GradedComponent(\"Essay\", 20);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testGradeOne.updateWeightedScore(15, 30);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.storeString(), \"1 | Essay | 1 | 20.0 | 10.0\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void storeStringRecreation_gradedEssayScored_expectedObjectAfterReconstruction()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            throws InputException, CorruptedDataException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeOne \u003d new GradedComponent(\"Essay\", 20);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testGradeOne.updateWeightedScore(15, 30);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.storeString(), \"1 | Essay | 1 | 20.0 | 10.0\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeOneRecreated \u003d new GradedComponent(\"1 | Essay | 1 | 20.0 | 10.0\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOneRecreated.getWeight(), 20);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOneRecreated.storeString(), \"1 | Essay | 1 | 20.0 | 10.0\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOneRecreated.getWeightedScoreAsString(), \"10\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void getWeight_gradedQuizNotScored_expectedWeight() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        GradedComponent testGradeOne \u003d new GradedComponent(\"Quiz\", 8);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testGradeOne.getWeight(), 8);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 98,
      "ttippinyu": 3
    }
  },
  {
    "path": "src/test/java/unit/ModuleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package unit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.CorruptedDataException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.DataReadWriteException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.FileCreationException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.StorageException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.ModuleContainer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void moduleCreation_variousModules_successfulCreationWithWorkingGetters() throws FileCreationException,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            CorruptedDataException, DataReadWriteException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ModuleContainer testContainer \u003d new ModuleContainer();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Module testModuleOne \u003d new Module(\"testMod1\", \"Engineering Principles \u0026 Practice I\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleOne.getModuleCode(), \"testMod1\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleOne.getModuleName(), \"Engineering Principles \u0026 Practice I\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleOne.storeString(), \"testMod1 | Engineering Principles \u0026 Practice I\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Module testModuleTwo \u003d new Module(\"testMod2\", \"Discrete Structures\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleTwo.getModuleCode(), \"testMod2\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleTwo.getModuleName(), \"Discrete Structures\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleTwo.storeString(), \"testMod2 | Discrete Structures\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Module testModuleThree \u003d new Module(\"testMod3\", \"Engineering Principles \u0026 Practice II\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleThree.getModuleCode(), \"testMod3\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleThree.getModuleName(), \"Engineering Principles \u0026 Practice II\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleThree.storeString(), \"testMod3 | Engineering Principles \u0026 Practice II\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void storageStringRecreation_oneModule_expectedRecreatedObject() throws StorageException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ModuleContainer testContainer \u003d new ModuleContainer();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Module testModuleOne \u003d new Module(\"testMod4\", \"Engineering Principles \u0026 Practice I\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleOne.getModuleCode(), \"testMod4\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleOne.getModuleName(), \"Engineering Principles \u0026 Practice I\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Module testModuleOneRecreated \u003d new Module(testModuleOne.storeString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleOneRecreated.getModuleCode(), \"testMod4\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleOneRecreated.getModuleName(), \"Engineering Principles \u0026 Practice I\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testModuleOneRecreated.storeString(), \"testMod4 | Engineering Principles \u0026 Practice I\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 51
    }
  },
  {
    "path": "src/test/java/unit/NotepadTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package unit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.ModuleContainer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.containers.Notepad;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.CorruptedDataException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.DataReadWriteException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.FileCreationException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.InvalidIndexException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class NotepadTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void notepadCreation_oneNewNotepad_successfulCreationAndWorkingGetters() throws"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            FileCreationException, CorruptedDataException, DataReadWriteException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ModuleContainer testContainer \u003d new ModuleContainer();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Notepad testPad \u003d new Notepad(\"notesTest1\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testPad.getNotes().size(),0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void notepadAddLine_addNewLineToNewNotepad_successfulAddition() throws FileCreationException,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            DataReadWriteException, CorruptedDataException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ModuleContainer testContainer \u003d new ModuleContainer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Notepad testPad \u003d new Notepad(\"notesTest2\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testPad.addLine(\"test line\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testPad.getNotes().get(0), \"test line\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void notepadUpdateLine_AddThenUpdateLineInNewNotepad_successfulUpdateAndIndexException() throws"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            DataReadWriteException, InvalidIndexException, FileCreationException, CorruptedDataException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ModuleContainer testContainer \u003d new ModuleContainer();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Notepad testPad \u003d new Notepad(\"notesTest3\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testPad.addLine(\"test line\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testPad.updateLine(0, \"test line2\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testPad.getNotes().get(0), \"test line2\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertThrows(InvalidIndexException.class, () -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            testPad.updateLine(3, \"test line3\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testPad.getNotes().get(0), \"test line2\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void notepadRemoveLine_AddMultipleLinesThenRemoveOne_successfulRemoveAndIndexException() throws"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            InvalidIndexException, DataReadWriteException, FileCreationException, CorruptedDataException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ModuleContainer testContainer \u003d new ModuleContainer();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Notepad testPad \u003d new Notepad(\"notesTest4\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testPad.addLine(\"test line0\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testPad.addLine(\"test line1\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testPad.addLine(\"test line2\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testPad.addLine(\"test line3\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testPad.removeLine(2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testPad.getNotes().size(), 3);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertEquals(testPad.getNotes().get(2), \"test line3\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertThrows(InvalidIndexException.class, () -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            testPad.removeLine(3);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        });"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 65
    }
  },
  {
    "path": "src/test/java/unit/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package unit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": "import spinbox.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ttippinyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lackmoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    void testCommandBuilder_prependInformationToUserInput_fullUserInputAttained() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        Stack\u003cString\u003e inputInformation \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        inputInformation.push(\"modules\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        inputInformation.push(\"CG1111\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        inputInformation.push(\"files\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        StringBuilder fullUserInput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        fullUserInput.append(\"1\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        Stack\u003cString\u003e cloneLog \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        cloneLog.addAll(inputInformation);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        while (!cloneLog.empty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            String individualInput \u003d cloneLog.peek();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            fullUserInput.insert(0, \" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            fullUserInput.insert(0, individualInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "            cloneLog.pop();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        fullUserInput.insert(0, \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        fullUserInput.insert(0, \"delete\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "        assertEquals(\"delete modules CG1111 files 1\", fullUserInput.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lackmoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 2,
      "ttippinyu": 3,
      "lackmoo": 28
    }
  },
  {
    "path": "src/test/java/unit/StorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package unit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.exceptions.StorageException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    public void createDataAndReadData_varietyOfStrings_successfulCreatesAndReads() throws StorageException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        File file \u003d new File(\"SpinBox/storageTest.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        ArrayList\u003cString\u003e testStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TCK1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testStrings.add(\"Houston we have a problem\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testStrings.add(\"Houston we have a merge conflict\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testStrings.add(\"Houston we have a pull request\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testStrings.add(\"Houston we have a user story\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        testStrings.add(\"Houston pls\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Storage test \u003d new Storage(\"SpinBoxData/storageTest.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        test.saveData(testStrings);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        List\u003cString\u003e loadedStrings \u003d test.loadData();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        for (int i \u003d 0; i \u003c loadedStrings.size(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": "            assertEquals(loadedStrings.get(i), testStrings.get(i));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TCK1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 24,
      "TCK1997": 11
    }
  },
  {
    "path": "src/test/java/unit/ViewScheduleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rssujay"
        },
        "content": "package unit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.DateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import spinbox.entities.items.tasks.Schedulable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rssujay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rssujay"
        },
        "content": "public class ViewScheduleTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    void testDateCheckDeadline() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Calendar inputDateOne \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        inputDateOne.set(2019, 9, 28);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        DateTime inputDateTimeOne \u003d new DateTime(inputDateOne.getTime());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Schedulable task \u003d new Deadline(\"Test\", inputDateTimeOne);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertTrue(task.compareEquals(inputDateTimeOne));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Calendar inputDateTwo \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        inputDateTwo.set(2019,9,21);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        DateTime inputDateTimeTwo \u003d new DateTime(inputDateTwo.getTime());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertFalse(task.compareEquals(inputDateTimeTwo));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    void testDateCheckEvent() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Calendar inputOne \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        inputOne.set(2019, 9, 20);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Calendar inputTwo \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        inputTwo.set(2019, 9, 19);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Calendar inputThree \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        inputThree.set(2019, 9,21);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        DateTime inputDate \u003d new DateTime(inputOne.getTime());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        DateTime startDate \u003d new DateTime(inputTwo.getTime());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        DateTime endDate \u003d new DateTime(inputThree.getTime());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Schedulable task \u003d new Event(\"Test\", startDate, endDate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertTrue(task.compareEquals(inputDate));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertTrue(task.compareEquals(startDate));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertTrue(task.compareEquals(endDate));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rssujay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        Calendar inputFour \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        inputFour.set(2019, 9, 23);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        DateTime inputDateTwo \u003d new DateTime(inputFour.getTime());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rssujay"
        },
        "content": "        assertFalse(task.compareEquals(inputDateTwo));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rssujay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rssujay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rssujay": 58
    }
  }
]
