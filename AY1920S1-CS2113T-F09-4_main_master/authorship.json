[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "rishi12438": 2,
      "-": 44
    }
  },
  {
    "path": "src/main/java/duke/ConflictChecker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "public class ConflictChecker  {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    protected TaskList taskArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public ConflictChecker(TaskList taskArrayListTemp) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        taskArrayList \u003d taskArrayListTemp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *Checks if there is a conflict in a list and a given task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param checkTask the event item to be checked."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @return a boolean if there is a conflict or not."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public boolean is_conflict(Event checkTask) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //System.out.println(check_task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        ArrayList\u003cTask\u003e taskTempList \u003d  taskArrayList.getTaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        for (Task temp : taskTempList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            LocalDateTime startDateCheck \u003d checkTask.getStartDate();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            LocalDateTime endDateCheck \u003d checkTask.getEndDate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            if (temp.getType().equals(\"E\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //System.out.println(\"Hi i am checking for conflicts\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                Event temp1 \u003d (Event) temp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                if (temp1.hasDate()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                    LocalDateTime startDate \u003d temp1.getStartDate();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                    LocalDateTime endDate \u003d temp1.getEndDate();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    1. if the start_date is before/equal to the start_date_check "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    and if the  end_date is after/equal to  start_date_check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                            OR "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    2. the start_date is before/equal to the end_date_check "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    and the the end_date is  after/equal to end_date_check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                            OR "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    3. the start_date is before/equal to the start_date_check and the "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    the end_date is after/equal to the end_date_check "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                            OR "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    4. the start_date_check is before/equal to the start_date and the "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    end_date_check is after end_date "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    //condition 1 "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    if ((startDate.isBefore(startDateCheck)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                            || startDate.isEqual(startDateCheck)) \u0026\u0026 (endDate.isAfter(startDateCheck)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                            || endDate.isEqual(startDateCheck))) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        return true; "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    if ((startDate.isBefore(endDateCheck)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                            || startDate.isEqual(endDateCheck)) \u0026\u0026 (endDate.isAfter(endDateCheck)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                            || endDate.isEqual(endDateCheck))) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        return true; "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    if ((startDate.isBefore(startDateCheck)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                            || startDate.isEqual(startDateCheck)) \u0026\u0026 (endDate.isAfter(endDateCheck)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                            || endDate.isEqual(endDateCheck))) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        return true; "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    if ((startDateCheck.isBefore(startDate)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                            || startDateCheck.isEqual(startDate)) \u0026\u0026 (endDateCheck.isAfter(endDate)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                            || endDateCheck.isEqual(endDate))) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        return true; "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }   "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 66,
      "jwyf": 9
    }
  },
  {
    "path": "src/main/java/duke/DatePattern.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "class DatePattern {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    enum TimePatternType { "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        DAY_OF_WEEK,DATE_TIME,DATE, TIME"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private String pattern; "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    private ParseTime.TimePatternType type;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    DatePattern(String patternTemp, ParseTime.TimePatternType typeDate)  {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        pattern \u003d patternTemp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        type  \u003d typeDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public ParseTime.TimePatternType get_type() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return type; "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public String get_pattern() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return pattern; "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 13,
      "-": 11
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.commands.AddBarCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.commands.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.commands.NewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.RemindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.commands.ViewCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.components.SongList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Chat bot cum task management application that can handle events, deadlines and normal to-do tasks,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * as well as basic exception handling."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private SongList songs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the duke.Duke object, which initializes the UI, duke.TaskList and duke.Storage in"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * order to carry out its functions."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        songs \u003d new SongList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        System.out.println(\"/home/rishi/Desktop/cs2113t/team/main/data/todo_list.txt\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        storage \u003d new Storage(Paths.get(\"/home/rishi/Desktop/cs2113t/team/main/data/todo_list.txt\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.loadList(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(ui.showError(e));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs the program, constantly asking for and responding to user input, finally terminating"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * upon the word \"Bye\"."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(ui.showWelcomeMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        TimerTask repeatedTask \u003d new TimerTask() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                Command c \u003d new RemindCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                String output \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                    output \u003d c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!output.equals(\"\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                        System.out.println(output);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                    System.out.println(ui.showError(e));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Timer timer \u003d new Timer(\"Timer\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        timer.scheduleAtFixedRate(repeatedTask, 1000, 900000);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                //if the command uses the SongList"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                String output;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                if (c instanceof AddBarCommand || c instanceof ViewCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                        || c instanceof NewCommand || c instanceof HelpCommand) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                    output \u003d c.execute(songs, ui, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                    output \u003d c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(output);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(ui.showError(e));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        timer.cancel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * duke.Main function for duke.Duke, which creates a new duke.Duke object and runs it."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args Standard Java arguments for a main function, in this case, not used"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 3,
      "rohan-av": 3,
      "jwyf": 15,
      "-": 78
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Custom exception class for all duke.Duke-related exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private String type \u003d \"other\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for duke.DukeException for default type."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input input message that triggered the exception"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for duke.DukeException for specific Tasks, in order to provide"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * type-specific error messages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input input message that triggered the exception"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param type the type of the duke.tasks.Task that was attempted to be created which"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *             caused the exception (i.e. duke.tasks.ToDo, duke.tasks.Event, or duke.tasks.Deadline)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String input, String type) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the message associated with the type of duke.DukeException that has occurred."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the error message associated with the exception"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d \"An unknown exception has occurred.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String word \u003d input.trim().equals(\"event\") ? \"an \" : \"a \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        if (input.trim().equals(\"todo\") || input.trim().equals(\"event\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                || input.trim().equals(\"deadline\") || input.trim().equals(\"doafter\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                || input.trim().equals(\"new\") || input.trim().equals(\"view\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                || input.trim().equals(\"addbar\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            message \u003d \"OOPS!!! The description of \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    + word"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    + input.trim()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" task cannot be empty.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (!type.equals(\"other\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"todo\": {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                message \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"event\": {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!input.contains(\"/at\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                    message \u003d \"OOPS!!! duke.tasks.Event is missing a location.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"deadline\": {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!input.contains(\"/by\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                    message \u003d \"OOPS!!! duke.tasks.Deadline is missing a deadline.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"doafter\": {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!input.contains(\"/after\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    message \u003d \"OOPS!!! duke.tasks.DoAfter is missing a task it is supposed to be done after.\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                    message \u003d \"Please enter the task number of the task that the DoAfter should be after.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            case \"new\": {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                message \u003d \"OOPS!!! duke.components.Song cannot be created due to invalid input format.\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            case \"view\": {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                message \u003d \"OOPS!!! I don\u0027t know that song. Please be more specific in the song name.\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            case \"addbar\": {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                message \u003d \"OOPS!!! New bar cannot be added due to invalid input.\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"io\": {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                message \u003d \"OOPS!!! An IO exception has occurred.\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"empty\": {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                message \u003d \"List is empty! Please enter a valid command.\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"conflict\": {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                message \u003d \"There is a conflict between this event and another event!\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"index\": {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                message \u003d \"Invalid index! Please try again.\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"between\": {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                message \u003d \"Invalid input for a between task. \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        + \"Please follow this format: between \u003ctask_description\u003e /between \u003cstart\u003e and \u003cend\u003e\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case \"recur\": {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                message \u003d \"Invalid input for a recurring task. Please follow this format:\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        + \" recur \u003cfrequency\u003e \u003cdescription\u003e /on \u003cdate\u003e /at \u003ctime\u003e\\n\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                message +\u003d \"\u003cfrequency\u003e could only be one of: daily, weekly, monthly or yearly\\n\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                message +\u003d \"\u003cdate\u003e has to follow the specific format of: dd/mm/yy\\n\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                message +\u003d \"/at \u003ctime\u003e is optional.\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            default: {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                message \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            message \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return Ui.wrap(message);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // wrap is called from Ui in order to standardize the formatting of the output"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 6,
      "Samuel787": 1,
      "jwyf": 16,
      "-": 108
    }
  },
  {
    "path": "src/main/java/duke/DukeTimeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeTimeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeTimeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/java/duke/ParseTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.temporal.TemporalAccessor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class ParseTime {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    enum TimePatternType {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        DAY_OF_WEEK,DATE_TIME,DATE, TIME"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    LocalDateTime parseStringToDate(String line) throws DukeTimeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        DatePattern[] patterns \u003d {  new DatePattern(\"[\u0027next \u0027][\u0027this \u0027]E\",TimePatternType.DAY_OF_WEEK),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                                    new DatePattern(\"[\u0027this \u0027][\u0027next \u0027]EEEE\",TimePatternType.DAY_OF_WEEK),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                                    new DatePattern(\"dd/MM/yyyy HHmm\",TimePatternType.DATE_TIME),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                                    new DatePattern(\"dd/MM/yy HHmm\",TimePatternType.DATE_TIME),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                                    new DatePattern(\"d/MM/yyyy HHmm\",TimePatternType.DATE_TIME),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                                    new DatePattern(\"HHmm\",TimePatternType.TIME),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                                    new DatePattern(\"dd/MM/yy\",TimePatternType.DATE),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                                    new DatePattern(\"yyyy-MM-dd\u0027T\u0027HH:mm[:ss.n]\",TimePatternType.DATE_TIME) };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c patterns.length;) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                TemporalAccessor accessor \u003d DateTimeFormatter.ofPattern(patterns[i].get_pattern()).parse(line);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                if (patterns[i].get_type() \u003d\u003d  TimePatternType.DAY_OF_WEEK) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    LocalDateTime localDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    return localDateTime.with(TemporalAdjusters.nextOrSame(DayOfWeek.from(accessor)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                } else if (patterns[i].get_type() \u003d\u003d TimePatternType.DATE_TIME) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    return LocalDateTime.from(accessor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                } else if (patterns[i].get_type() \u003d\u003d TimePatternType.TIME) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    LocalDate localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    return localDate.atTime(LocalTime.from(accessor));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                } else if (patterns[i].get_type() \u003d\u003d TimePatternType.DATE) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    LocalTime localTime \u003d LocalTime.now();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    return localTime.atDate(LocalDate.from(accessor));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                i +\u003d 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new DukeTimeException(\"invalid format!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 21,
      "-": 35
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.commands.AddBarCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import duke.commands.ByeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.commands.NewCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.commands.ViewCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to interpret the incoming messages and translate them into the appropriate duke.Commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class Parser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Returns the duke.Commands.duke.Commands.Command object interpreted from the input message,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * and throws a duke.DukeException otherwise."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message the input message to be parsed"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the duke.Commands.duke.Commands.Command object interpreted from the input message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException in the case of parsing errors"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    static Command parse(String message) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        if (message.equals(\"bye\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (message.equals(\"list\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (message.length() \u003e\u003d 8 \u0026\u0026 message.substring(0, 6).equals(\"delete\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(message);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } else if (message.length() \u003e\u003d 6 \u0026\u0026 message.substring(0, 4).equals(\"find\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommand(message);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (message.length() \u003e\u003d 6 \u0026\u0026 message.substring(0, 4).equals(\"done\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DoneCommand(message);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } else if (message.length() \u003e\u003d 5 \u0026\u0026 message.substring(0, 3).equals(\"new\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return new NewCommand(message);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } else if (message.length() \u003e\u003d 6 \u0026\u0026 message.substring(0, 4).equals(\"help\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return new HelpCommand(message);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } else if (message.length() \u003e\u003d 6 \u0026\u0026 message.substring(0, 4).equals(\"view\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return new ViewCommand(message);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } else if (message.length() \u003e\u003d 8 \u0026\u0026 message.substring(0, 6).equals(\"addbar\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return new AddBarCommand(message);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommand(message);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 6,
      "rohan-av": 1,
      "jwyf": 16,
      "-": 29
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import duke.tasks.DoAfter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import duke.tasks.BetweenTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import duke.tasks.RecurringTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to implement persistent storage of the task list using a .txt file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path file;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the duke.Storage class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file the Path object representing the path to the file being used to store the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    Storage(Path file) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an ArrayList of the String representations of all the duke.tasks.Task objects in the task list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param list the task list containing all the duke.tasks.Task objects"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return an ArrayList of the String representations of the tasks in the task list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e formatFile(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            result.add(task.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes the task list to the .txt file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks an ArrayList of the String representations of the tasks in the task list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException in the case of input or output exceptions"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void writeFile(ArrayList\u003cString\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.write(file, tasks, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"\",\"io\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reads the .txt fil and returns an ArrayList of Strings that represent the tasks in the task"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return an ArrayList of Strings that represent the tasks in the task list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException in the case of input or output exceptions"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e readFile() throws DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // reads file and returns an ArrayList of lines"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        try (BufferedReader br \u003d Files.newBufferedReader(file)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                result.add(line);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"\", \"io\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * After reading the file, converts each String representation back into its corresponding"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * duke.tasks.Task object and pushes it into the duke.TaskList."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList the duke.TaskList object used to store the task list"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException in the case of input or output exceptions"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    void loadList(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // loads data into list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d readFile();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String line: data) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            //System.out.println(line);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            convertString(taskList, line);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Interprets the String, translates it to the appropriate duke.tasks.Task object, and adds it"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * to the duke.TaskList."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList the duke.TaskList object used to store the task list"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param s the String representation to be converted"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException in the case of input or output exceptions"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void convertString(TaskList taskList, String s) throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            String type \u003d s.substring(1,2); // T, D, E or A"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isDone \u003d s.substring(4,5).equals(\"v\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            String description;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String addendum;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                description \u003d s.substring(7);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                ToDo todo \u003d new ToDo(description);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                if (isDone) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    todo.setDone();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                taskList.add(todo);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"E\": {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                String[] sections \u003d s.substring(7).split(\"\\\\(from:\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                sections[1] \u003d sections[1].replace(\"to\",\"-\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                sections[1] \u003d sections[1].replace(\")\",\"\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                //System.out.println(sections[1]);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                //description \u003d sections[0].substring(0, sections[0].length() - 2);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                //addendum \u003d sections[1].substring(1, sections[1].length() - 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                //String[] to_from  \u003d addendum.split(\"to\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                Event event \u003d (Event)taskList.get_first_e(sections,1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                if (isDone) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                    event.setDone();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                taskList.add(event);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"D\": {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                String[] sections \u003d s.substring(7).split(\"by:\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                description \u003d sections[0].substring(0, sections[0].length() - 2);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                addendum \u003d sections[1].substring(1, sections[1].length() - 1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                Deadline deadline \u003d new Deadline(description, addendum);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                if (isDone) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    deadline.setDone();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                taskList.add(deadline);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"A\": {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                String[] sections \u003d s.substring(7).split(\"after:\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                description \u003d sections[0].substring(0, sections[0].length() - 2);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                addendum \u003d sections[1].substring(6, sections[1].length() - 1);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                int previousTaskNumber \u003d Integer.parseInt(addendum);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                DoAfter doAfter \u003d new DoAfter(description, previousTaskNumber, taskList.getSize() + 1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                DoAfterList.add(previousTaskNumber);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                if (isDone) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                    doAfter.setDone();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                taskList.add(doAfter);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"B\": {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                String[] sections \u003d s.substring(7).split(\"between\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                description \u003d sections[0].substring(0, sections[0].length() - 2);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                String[] sections2 \u003d sections[1].split(\"and\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                String start \u003d sections2[0].substring(1, sections2[0].length() - 1).trim();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                String end \u003d sections2[1].substring(0, sections2[1].length() - 1).trim();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                BetweenTask betweenTask \u003d new BetweenTask(description, start, end);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                if (isDone) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                    betweenTask.setDone();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                taskList.add(betweenTask);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case \"R\": {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                String[] sections \u003d s.substring(7).split(\"\\\\(\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                description \u003d sections[0];"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                String frequency \u003d sections[1].split(\" \")[0];"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                String[] dateInfo \u003d sections[1].split(\"on: \");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                String[] dateNewInfo \u003d dateInfo[1].split(\" \");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                String date \u003d dateNewInfo[0];"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                String time;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                if (dateNewInfo.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    time \u003d dateNewInfo[2].substring(0, dateNewInfo[2].length() - 1);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                    time \u003d \"\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                //String date \u003d \"\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                //       String time \u003d \"\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                RecurringTask recurringTask \u003d new RecurringTask(description, date, time, frequency);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                taskList.add(recurringTask);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"\",\"io\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"\",\"io\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the .txt file with the latest task list found within the duke.Duke program."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList the duke.TaskList object used to store the task list"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException in the case of input or output exceptions"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFile(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        writeFile(formatFile(taskList.getTaskList()));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 17,
      "Samuel787": 6,
      "-": 198
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Class used to store the task list and perform necessary manipulations to the task list such as"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * adding tasks, removing tasks and finding tasks based on keywords, as well as obtaining the size"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * of the task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Modifies the task with the end and start time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param stringList the list of the string of the description of the event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param first if its the first time you are creating it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @return the Task with the start and end date if possible to parse"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @throws DukeException if an exception occurs in the parsing of the message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public Task get_first_e(String[] stringList,int first) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Task c1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        //System.out.println(\"help me\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        //System.out.println(\"here \"+Arrays.toString(string_list));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            //System.out.println(Arrays.toString(string_list));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            String[] timing \u003d stringList[1].split(\"-\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            if (timing.length \u003e\u003d 2 \u0026\u0026 !(timing[1].trim().equals(\"\"))) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                //System.out.println(Arrays.toString(timing));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                LocalDateTime startDate \u003d new ParseTime().parseStringToDate(timing[0].trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                LocalDateTime endDate \u003d  new ParseTime().parseStringToDate(timing[1].trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                c1 \u003d new duke.tasks.Event(stringList[0],startDate,endDate,timing[0],timing[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                //System.out.println(\"Before : \" + c1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"Please give a starting and ending time!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        } catch (DukeTimeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            String[] timing \u003d stringList[2].split(\"-\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            if (timing.length \u003e\u003d 2 \u0026\u0026 !(timing[1].trim().equals(\"\"))) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                c1 \u003d new duke.tasks.Event(stringList[1],timing[0],timing[1]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"Please give a starting and ending time!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return c1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes an element from the task list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index the index of the duke.tasks.Task in the task list that is to be removed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds an element to the task list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param t the duke.tasks.Task object to be added to the task list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Task t) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(t);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a subset of the task list (implemented as an ArrayList of duke.tasks.Task objects) that contains"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * the query specified in the argument."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query the search query to be obtained from the input command"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the ArrayList of duke.tasks.Task objects whose description contained the query"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e findTask(String query) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task t: list) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            if (t.getDescription().contains(query)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                result.add(t);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size of the task list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the current size of the task list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Returns the Tasks that need to be done soon."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @return an arraylist of the tasks that need to be done soon!"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasksDueSoon() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        for (Task t: list) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                if ((((Deadline) t).getByLdt() !\u003d null)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                        \u0026\u0026 (Duration.between(((Deadline) t).getByLdt(), now).toSeconds() \u003c\u003d 10800)) { // 3 hours"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                    result.add(t);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the task list for duke.Duke, which is implemented as an ArrayList of duke.tasks.Task objects."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the task list"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns the duke.tasks.Task object at the specified index"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param num the index of the duke.tasks.Task object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the duke.tasks.Task object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public Task getTaskIndex(int num) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(num);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes from this list all of its elements that are contained in the ArrayList."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param removeList the specified collection; its elements are removed from the list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeAll(ArrayList\u003cTask\u003e removeList) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        list.removeAll(removeList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 28,
      "rohan-av": 3,
      "jwyf": 11,
      "-": 103
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.components.Bar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.components.Song;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.RecurringTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to read the input duke.commands (for the command line implementation of duke.Duke) and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * return the messages to be displayed in duke.Duke as a response to the user\u0027s input messages."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reads the input message of the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the input message of the user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    String readCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a welcome message for duke.Duke."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a welcome message for duke.Duke"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    String showWelcomeMessage() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"Hello from\\n\" + logo + wrap(\"What can I do for you?\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a final message from duke.Duke in the case of termination."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a terminal message from duke.Duke."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String showByeMessage() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return wrap(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the error message associated with the caught duke.DukeException."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param e the duke.DukeException that was caught"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the error message associated with the duke.DukeException"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    String showError(DukeException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return e.getMessage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the String but wrapped in between two horizontal lines for enhanced"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading and display on the command line interface."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param content the String to be wrapped with horizontal lines"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the wrapped String to be displayed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    static String wrap(String content) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"\\n__________________________________\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                + content"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n__________________________________\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a String formatted for display that shows the results of the find command."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param list the results of the find command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String formatFind(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            result.append(\"No such results!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            result.append(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                result.append(i + 1)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                        .append(\". \")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                        .append(list.get(i).toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                if (i !\u003d list.size() - 1) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                    result.append(\"\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return wrap(result.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a String formatted for display that shows all the elements in the task list"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * due to the list command."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param list the task list"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public String formatList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            result.append(i + 1)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                    .append(\". \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                    .append(list.get(i).toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (i !\u003d list.size() - 1) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                result.append(\"\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            result.append(\"The list is empty!\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return wrap(result.toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a String formatted for display that indicates that a task has been marked as done"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * by the done command."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param list the task list"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index the index of the duke.tasks.Task object that was marked as done"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public String formatDone(ArrayList\u003cTask\u003e list, int index) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String result;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if (list.get(index - 1) instanceof RecurringTask) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            result \u003d \"Nice! I\u0027ve marked this task as done:\\n \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    + ((RecurringTask)list.get(index - 1)).toOldString()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"\\n\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            result \u003d \"Nice! I\u0027ve marked this task as done:\\n \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                    + list.get(index - 1).toString()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"\\n\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return wrap(result);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a String formatted for display that indicates that a task has been deleted by"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * the done command."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param list the task list prior to deletion"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index the index of the item that was deleted"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public String formatDelete(ArrayList\u003cTask\u003e list,ArrayList\u003cTask\u003e newList, int index) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String word \u003d (list.size() \u003d\u003d 2) ? \"task\" : \"tasks\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String result \u003d \"Noted! I\u0027ve removed this task:\\n \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                + list.get(index - 1).toString()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Now you have \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                + (newList.size())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                + word"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" in the list.\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return wrap(result);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a String formatted for display that indicates that a duke.tasks.Task object has been added"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * by the add command."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param list the task list"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task the item that was added to the task list"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public String formatAdd(ArrayList\u003cTask\u003e list, Task task) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        String word \u003d (list.size() \u003d\u003d 1) ? \"task\" : \"tasks\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        String result \u003d \"Got it. I\u0027ve added this task:\\n  \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                + task.toString()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\nNow you have \""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                + list.size()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                + word"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" in the list.\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return wrap(result);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Returns a String for the items that need to be reminded from a list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param list the task list."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @return the formatted String to be displayed."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public String formatReminder(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        result.append(\"The following tasks are due in 3 hours or less!\\n\\n\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            result.append(i + 1)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                    .append(\". \")"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                    .append(list.get(i).toString());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            if (i !\u003d list.size() - 1) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                result.append(\"\\n\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        return wrap(result.toString());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a String formatted for display that indicates that a duke.components.Song object has been added"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * by the new command."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param list the song list"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param song the item that was added to the song list"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String formatNewSong(ArrayList\u003cSong\u003e list, Song song) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String word \u003d (list.size() \u003d\u003d 1) ? \"song\" : \"songs\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String result \u003d \"Got it. I\u0027ve added this song:\\n  \""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + song.getName()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \"\\nNow you have \""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + list.size()"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + word"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \" in the list.\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return wrap(result);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a String formatted for display that shows all the elements in the command list"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * due to the help command."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param list the command list"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String formatHelp(ArrayList\u003cSong\u003e list) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            result.append(i + 1)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                    .append(\". \")"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                    .append(list.get(i).toString());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            if (i !\u003d list.size() - 1) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                result.append(\"\\n\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            result.append(\"The help list for that command is empty!\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return wrap(result.toString());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a String formatted for display that shows a song in the song list due to the view command."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param song the item that is to be displayed"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String formatView(Song song) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return song.getBars().toString();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a String formatted for display that indicates that a duke.components.Bar object has been added"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * by the addbar command."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param list the song list"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param song the item that was modified"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String formatAddBar(ArrayList\u003cSong\u003e list, Bar bar, Song song) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String word \u003d (list.size() \u003d\u003d 1) ? \"bar\" : \"bars\";"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String result \u003d \"Got it. I\u0027ve added this bar:\\n  \""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + bar.toString()"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \"\\nto \""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + song.getName()"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \"\\nNow you have \""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + song.getBars().size()"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + word"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \" in the song.\";"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return wrap(result);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 6,
      "Samuel787": 1,
      "jwyf": 75,
      "-": 199
    }
  },
  {
    "path": "src/main/java/duke/commands/AddBarCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.components.Bar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.components.Note;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.components.Song;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.components.SongList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": " * A class representing the command to add a new bar of notes to the current song."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class AddBarCommand extends Command\u003cSongList\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private int songIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Constructor for the command to add a new bar to the current song."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public AddBarCommand(String message) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Modifies the song in the song list and returns the messages intended to be displayed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param songList the duke.components.SongList object that contains the song list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param ui the Ui object responsible for the reading of user input and the display of"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *           the responses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param storage the Storage object used to read and manipulate the .txt file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws DukeException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        Note note1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        Note note2;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        Note note3;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        Note note4;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        int barNo;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (message.length() \u003c 7 || !message.substring(0, 7).equals(\"addbar \")) { //exception if not fully spelt"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DukeException(message);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            String[] sections \u003d message.substring(7).split(\" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            barNo \u003d Integer.parseInt(sections[4].substring(4));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Bar newBar \u003d new Bar(barNo, sections[0] + \" \" + sections[1] + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                    + sections[2] + \" \" + sections[3]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Song song \u003d songList.getSongIndex(songIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            //add the bar to the song in the songlist"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            //storage.updateFile(taskList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return ui.formatAddBar(songList.getSongList(), newBar, song);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DukeException(message, \"addbar\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 69
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.ConflictChecker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.DoAfterList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.tasks.BetweenTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.tasks.DoAfter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import duke.tasks.FixedDurationTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.tasks.RecurringTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A class representing the command to add tasks to the task list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class AddCommand extends Command\u003cTaskList\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the command to add a task to the task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(String message) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifies the task list in use and returns the messages intended to be displayed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList the duke.TaskList object that contains the task list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the Ui object that determines the displayed output of duke.Duke"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage the storage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String identifier;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            identifier \u003d message.substring(0, 4);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"\",\"other\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (identifier) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"todo\": {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            ToDo todo;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            if (message.length() \u003c 5 || !message.substring(4,5).equals(\" \")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                todo \u003d new ToDo(message.trim().substring(5));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                taskList.add(todo);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.updateFile(taskList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                return ui.formatAdd(taskList.getTaskList(), todo);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(message, \"todo\"); //empty to-do"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"dead\": {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            if (message.length() \u003c 9 || !message.substring(4,9).equals(\"line \")) { //exception if not fully spelt"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            Deadline deadline;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                String[] sections \u003d message.substring(9).split(\" /by \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                deadline \u003d new Deadline(sections[0], sections[1]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                taskList.add(deadline);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.updateFile(taskList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                return ui.formatAdd(taskList.getTaskList(), deadline);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(message,\"deadline\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"even\": {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (message.length() \u003c 6 || !message.substring(4,6).equals(\"t \")) { //exception if not fully spelt"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            Event event;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String[] sections \u003d message.substring(6).split(\" /at \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                String[] startEnd \u003d sections[1].split(\"-\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                String start \u003d  startEnd[0];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                String end \u003d startEnd[1];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                ConflictChecker conflictChecker1 \u003d new ConflictChecker(taskList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                event \u003d (Event) taskList.get_first_e(sections,0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                if (event.hasDate()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    if (conflictChecker1.is_conflict(event)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(\"\", \"conflict\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                        taskList.add(event);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskList.add(event);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.updateFile(taskList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                return ui.formatAdd(taskList.getTaskList(), event);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"\", \"conflict\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"doaf\": {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            if (message.length() \u003c 8 || !message.substring(4,8).equals(\"ter \")) { //exception if not fully spelt"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            DoAfter doAfter;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                String[] sections \u003d message.substring(8).split(\" /after \");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                int previousTaskNumber \u003d Integer.parseInt(sections[1]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                doAfter \u003d new DoAfter(sections[0], previousTaskNumber, taskList.getSize() + 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                taskList.add(doAfter);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                DoAfterList.add(previousTaskNumber);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.updateFile(taskList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                return ui.formatAdd(taskList.getTaskList(), doAfter);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(message, \"doafter\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"chan\": {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                String[] sections \u003d message.substring(7).split(\" /to \");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                int itemToDelete \u003d Integer.parseInt(sections[0]) - 1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                if (itemToDelete \u003c taskList.getSize()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    Task item \u003d taskList.getTaskIndex(itemToDelete);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                    if (item.getType() \u003d\u003d \"E\") {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                        Event event;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        String itemDescription \u003d item.getDescription();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                        String status \u003d item.getStatusIcon();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        String[] sections1 \u003d {itemDescription, sections[1]};"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        event \u003d (Event) taskList.get_first_e(sections1, 0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (status \u003d\u003d \"v\") {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                            event.setDone();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        taskList.remove(itemToDelete);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                        taskList.add(event);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                        storage.updateFile(taskList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                        return ui.formatAdd(taskList.getTaskList(), event);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                    } else if (item.getType() \u003d\u003d \"D\") {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        String itemDescription \u003d item.getDescription();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                        String status \u003d item.getStatusIcon();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                        Deadline deadline;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                            deadline \u003d new Deadline(itemDescription, sections[1]);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                            taskList.remove(itemToDelete);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                            if (status \u003d\u003d \"v\") {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                                deadline.setDone();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                            taskList.add(deadline);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                            storage.updateFile(taskList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                            return ui.formatAdd(taskList.getTaskList(), deadline);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                        } catch (Exception e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                            throw new DukeException(message, \"deadline\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        //not a event or deadline so we need either"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        throw new DukeException(message, \"event\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(message, \"event\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(message, \"event\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        case \"betw\": {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if (message.length() \u003c 8 || !message.substring(4, 8).equals(\"een \")) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            BetweenTask betweenTask;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                String[] sections \u003d message.substring(8).split(\"/between\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                String[] periods \u003d sections[1].split(\"and\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                betweenTask \u003d new BetweenTask(sections[0].trim(), periods[0].trim(), periods[1].trim());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                taskList.add(betweenTask);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.updateFile(taskList);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                return ui.formatAdd(taskList.getTaskList(), betweenTask);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(message, \"between\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"recu\": {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if (message.length() \u003c 5 || !message.substring(4, 6).equals(\"r \")) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            RecurringTask recurringTask;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                String[] sections \u003d message.split(\" \");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                String frequency;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                String description;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                String date;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                String time;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                if (sections[1].equals(\"daily\")"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        || sections[1].equals(\"weekly\")"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        || sections[1].equals(\"monthly\")"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        || sections[1].equals(\"yearly\")) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                    frequency \u003d sections[1];"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                    //form back the content"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                    String result \u003d \"\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    for (int i \u003d 2; i \u003c sections.length; i++) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                        result +\u003d sections[i];"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    String[] subContent \u003d result.split(\"/on\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    description \u003d subContent[0].trim();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    String[] subContent2 \u003d subContent[1].split(\"/at\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    date \u003d subContent2[0].trim();  //this must be in dd/mm/yy specific format"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    if (subContent2.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        time \u003d subContent2[1].trim();  //this could be anything"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                        time \u003d \"\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    int day;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    int month;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    int year;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    String[] dateData \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    day \u003d Integer.parseInt(dateData[0].trim());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    month \u003d Integer.parseInt(dateData[1].trim());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    year \u003d Integer.parseInt(dateData[2].trim());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    if (!RecurringTask.isDateVaid(day, month, year)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(\"\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                    recurringTask \u003d new RecurringTask(description, date, time, frequency);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskList.add(recurringTask);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                    storage.updateFile(taskList);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                    return ui.formatAdd(taskList.getTaskList(), recurringTask);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                    //invalid frequency input"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(message, \"recur\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"fixe\": {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            if (message.length() \u003c 14 || !message.substring(4, 14).equals(\"dDuration \")) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                String[] sections \u003d message.substring(14).split(\" /need \");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                Task fixedDurationTask \u003d new FixedDurationTask(sections[0], sections[1]);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                taskList.add(fixedDurationTask);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.updateFile(taskList);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                return ui.formatAdd(taskList.getTaskList(), fixedDurationTask);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(message, \"fixedDuration\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        default: {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(message);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 49,
      "Samuel787": 10,
      "jwyf": 12,
      "-": 208
    }
  },
  {
    "path": "src/main/java/duke/commands/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A class representing the command to terminate and exit duke.Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class ByeCommand extends Command\u003cTaskList\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean exit \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and terminates duke.Duke."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList the duke.TaskList object that contains the task list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the Ui object that determines the displayed output of duke.Duke"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage the storage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exit \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.showByeMessage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 3,
      "jwyf": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * An abstract class used to represent a command interpreted from an input message. Extended by"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * \u003cul\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     \u003cli\u003eAddCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     \u003cli\u003eListCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *     \u003cli\u003eDoneCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " *     \u003cli\u003eDeleteCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *     \u003cli\u003eFindCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *     \u003cli\u003eByeCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": " *     \u003cli\u003eNewCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": " *     \u003cli\u003eHelpCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": " *     \u003cli\u003eViewCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": " *     \u003cli\u003eAddBarCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * \u003c/ul\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public abstract class Command\u003cT\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    String message;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command by performing the necessary changes to the task list and the .txt"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * file used as persistent storage, and returns a formatted String to be displayed by the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * command line interface / GUI."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param object the duke.TaskList or duke.components.SongList object that contains the task list in use"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the Ui object responsible for the reading of user input and the display of"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *           the responses"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage the Storage object used to read and manipulate the .txt file"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException in the case of either parsing or IO errors"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public abstract String execute(T object, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 7,
      "-": 41
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.DoAfter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import duke.DoAfterList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A class that represents the command to delete an item from the task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class DeleteCommand extends Command\u003cTaskList\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the duke.Commands.Command created to delete a task from the duke.TaskList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if an exception occurs in the parsing of the message"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(String message) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d Integer.parseInt(message.substring(7));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"\",\"other\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifies the task list in use and returns the messages intended to be displayed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList the duke.TaskList object that contains the task list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the Ui object that determines the displayed output of duke.Duke"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage the storage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (taskList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"\",\"empty\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003e taskList.getSize() || index \u003c 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"\",\"index\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            int counter \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cInteger\u003e indexSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            ArrayList\u003cTask\u003e finalTasksRemoveList \u003d getRemovedTasks(index, taskList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            //populating the indexSet with the indexes of all the tasks to be deleted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task: finalTasksRemoveList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                if (task instanceof DoAfter) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                    indexSet.add(((DoAfter) task).getCurrentNumber());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                indexSet.add(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            DoAfterList.removeAll(indexSet);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            //updating the values of DoAfterList to supposed values after the tasks are all removed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int index: indexSet) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c DoAfterList.getSize(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (index \u003c DoAfterList.get(i)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                        DoAfterList.set(i, DoAfterList.get(i) - 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.removeAll(finalTasksRemoveList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            //updating the values of the current position of each DoAfter task with respect to the taskList"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task : taskList.getTaskList()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                if (task instanceof DoAfter) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                    int currentNumber \u003d ((DoAfter) task).getCurrentNumber();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                    int count \u003d 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                    for (int index: indexSet) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (index \u003c\u003d currentNumber) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                            count +\u003d 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                    ((DoAfter) task).setCurrentNumber(currentNumber - count);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //updating the values of the task numbers of previous tasks for DoAfter tasks"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task: taskList.getTaskList()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                if (task instanceof DoAfter) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                    ((DoAfter) task).setPreviousTaskNumber(DoAfterList.get(counter));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                    counter++;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            ArrayList\u003cTask\u003e oldList \u003d new ArrayList\u003c\u003e(taskList.getTaskList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.updateFile(taskList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"\",\"io\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            ArrayList\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e(taskList.getTaskList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return ui.formatDelete(oldList, newList, index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a list of tasks that are linked to the current task being removed."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param removedIndex The integer representing the index of the current task being removed"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList The general list of tasks"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cTask\u003e getRemovedTasks(int removedIndex, TaskList taskList) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cInteger\u003e indexList \u003d new ArrayList\u003c\u003e(); //index of tasks that is going to be removed"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e removeList \u003d new ArrayList\u003c\u003e(); //list of tasks that is going to be removed"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cDoAfter\u003e tempList \u003d new ArrayList\u003c\u003e(); //temporary lists of DoAfter tasks"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        //populating the indexList with indexes of tasks that are going to be deleted"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c DoAfterList.getSize(); i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            if (DoAfterList.get(i) \u003d\u003d removedIndex) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                indexList.add(i + 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        //exit if there are no extra tasks to be deleted"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (indexList.isEmpty()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            Task removedTask \u003d taskList.getTaskList().get(removedIndex - 1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            removeList.add(removedTask);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return removeList;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        //populating the tempList with all the DoAfter tasks"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getTaskList().size(); i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            Task task \u003d taskList.getTaskList().get(i);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task instanceof DoAfter) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                tempList.add((DoAfter) task);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        //populating the removeList with all tasks that are supposed to be deleted"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int index: indexList) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            removeList.add(tempList.get(index - 1));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            int removedDoAfterIndex \u003d tempList.get(index - 1).getCurrentNumber();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            removeList.addAll(getRemovedTasks(removedDoAfterIndex, taskList));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Task removedTask \u003d taskList.getTaskList().get(removedIndex - 1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        removeList.add(removedTask);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return removeList;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 3,
      "rohan-av": 3,
      "jwyf": 2,
      "-": 153
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class DoneCommand extends Command\u003cTaskList\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the duke.Commands.Command to mark a task in the duke.TaskList as \u0027done\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoneCommand(String message) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d Integer.parseInt(message.substring(5));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"\",\"other\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifies the task list in use and returns the messages intended to be displayed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList the TaskList object that contains the task list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the Ui object that determines the displayed output of duke.Duke"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage the storage"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (taskList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"List is empty! Please enter a valid command.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003e taskList.getSize() || index \u003c 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"Invalid index! Please try again.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.getTaskList().get(index - 1).setDone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.updateFile(taskList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                return \"OOPS!!! An IO exception has occurred.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return ui.formatDone(taskList.getTaskList(), index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A class representing the command used to find all tasks in the task list that contain the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * inputted query."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class FindCommand extends Command\u003cTaskList\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private String query;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the duke.Commands.Command to find a task based on inputted query."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if an exception occurs in the parsing of the message"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(String message) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            this.query \u003d message.substring(5);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"\",\"other\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifies the task list in use and returns the messages intended to be displayed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList the duke.TaskList object that contains the task list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the Ui object that determines the displayed output of duke.Duke"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage the storage"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e res \u003d taskList.findTask(query);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.formatFind(res);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 1,
      "-": 56
    }
  },
  {
    "path": "src/main/java/duke/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.components.Song;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.components.SongList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": " * A class representing the command to display help: the command list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class HelpCommand extends Command\u003cSongList\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Constructor for the command to display help."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public HelpCommand(String message) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Displays the command list in use; returns the help messages intended to be displayed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param songList the duke.components.SongList object that contains the song list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param ui the Ui object responsible for the reading of user input and the display of"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *           the responses"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param storage the Storage object used to read and manipulate the .txt file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws DukeException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String helpMessage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        helpMessage \u003d message.substring(5).trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (message.isBlank()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return ui.formatHelp(songList.getSongList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            ArrayList\u003cSong\u003e helpList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            helpList \u003d songList.findSong(helpMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return ui.formatHelp(helpList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 56
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class ListCommand extends Command\u003cTaskList\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifies the task list in use and returns the messages intended to be displayed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList the duke.TaskList object that contains the task list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the Ui object that determines the displayed output of duke.Duke"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage the storage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.formatList(taskList.getTaskList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 1,
      "-": 30
    }
  },
  {
    "path": "src/main/java/duke/commands/NewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.components.Song;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.components.SongList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": " * A class representing the command to add a new song to the song list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class NewCommand extends Command\u003cSongList\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Constructor for the command to add a task to the task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public NewCommand(String message) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Modifies the song list and returns the messages intended to be displayed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param songList the duke.components.SongList object that contains the song list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param ui the Ui object responsible for the reading of user input and the display of"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *           the responses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param storage the Storage object used to read and manipulate the .txt file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws DukeException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String songName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String key;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String timeSignature;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        int tempo;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (message.length() \u003c 4 || !message.substring(0, 4).equals(\"new \")) { //exception if not fully spelt"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DukeException(message);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        Song song;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            String[] sections \u003d message.substring(4).split(\" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            songName \u003d sections[0];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            key \u003d sections[1];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            timeSignature \u003d sections[2];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            tempo \u003d Integer.parseInt(sections[3]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            song \u003d new Song(songName, key, tempo);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            songList.add(song);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            //storage.updateFile(songList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return ui.formatNewSong(songList.getSongList(), song);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DukeException(message, \"new\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 67
    }
  },
  {
    "path": "src/main/java/duke/commands/RemindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class RemindCommand extends Command\u003cTaskList\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifies the task list in use and returns the messages intended to be displayed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList the duke.TaskList object that contains the task list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the Ui object that determines the displayed output of duke.Duke"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage the storage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e res \u003d taskList.getTasksDueSoon();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.formatReminder(res);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/java/duke/commands/Tutorial.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": " * Favourite short cuts."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " *  Alt + enter"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " *  sout tab"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " *  Alt + insert"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " *  Ctrl+k -\u003e commit"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " *  Ctrl +k + shift -\u003e push"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " *  Ctrl + n -\u003e *+\"name of whatever u want\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " *  Shift + shift"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " *  Ctrl + click -\u003e go to method definition"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " *  Refactor -\u003e abstract methods out, remove magic numbers/strings"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class Tutorial {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private String rishi;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void rishiF() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        System.out.println(\"woahh!\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 24,
      "jwyf": 1
    }
  },
  {
    "path": "src/main/java/duke/commands/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.components.Song;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import duke.components.SongList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": " * A class representing the command to view a song from the song list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class ViewCommand extends Command\u003cSongList\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Constructor for the command to view a song from the song list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public ViewCommand(String message) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Access the song list and returns the song intended to be displayed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param songList the duke.components.SongList object that contains the song list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param ui the Ui object responsible for the reading of user input and the display of"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *           the responses"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param storage the Storage object used to read and manipulate the .txt file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws DukeException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String songName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (message.length() \u003c 5 || !message.substring(0, 5).equals(\"view \")) { //exception if not fully spelt"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DukeException(message);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        Song song;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        songName \u003d message.substring(5).trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        ArrayList\u003cSong\u003e findList \u003d songList.findSong(songName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (findList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DukeException(message, \"view\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return ui.formatView(findList.get(0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 60
    }
  },
  {
    "path": "src/main/java/duke/components/Bar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class Bar {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private ArrayList\u003cChord\u003e chords;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Constructor takes in a String representing a list of notes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param id the ID of the Bar in the Song"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param notes the String representing the list of notes that compose a bar"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Bar(int id, String notes) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.chords \u003d compileNotesToChords(convertStringToNotes(notes));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an ArrayList of Note objects from the input String of the constructor."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param notes the input String representing the list of notes that compose a bar"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return an ArrayList of Note objects corresponding to the above notes"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public ArrayList\u003cNote\u003e convertStringToNotes(String notes) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ArrayList\u003cNote\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String[] notesArray \u003d notes.split(\" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        for (String note: notesArray) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            result.add(new Note(note));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Compiles an ArrayList of Note objects together to create an ArrayList of Chord"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * objects that compose the Bar."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param noteList an ArrayList of Note objects, which can be of different durations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return an ArrayList of Chord objects with the specified duration of an 1/8th note"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public ArrayList\u003cChord\u003e compileNotesToChords(ArrayList\u003cNote\u003e noteList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ArrayList\u003cChord\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        for (Note note: noteList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            for (int i \u003d 0; i \u003c note.getRelativeUnitDuration(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                Chord chord \u003d new Chord();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                Note note1 \u003d note.getUnitNote();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                if (i !\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    note1.setStart(false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                chord.addToChord(note1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public ArrayList\u003cChord\u003e getChords() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return chords;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void setId(int id) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 65
    }
  },
  {
    "path": "src/main/java/duke/components/Chord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class Chord {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private ArrayList\u003cNote\u003e notes;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * A Chord has the set relative duration of 1/8, and is comprised of all the Note objects that are to be played"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * in that specific duration of time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param notes the ArrayList of Note objects to be played in the relative duration of the chord (1/8)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Chord(ArrayList\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Chord() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public ArrayList\u003cNote\u003e getNotes() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return notes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void addToChord(Note note) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        notes.add(note);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 29
    }
  },
  {
    "path": "src/main/java/duke/components/Group.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class Group {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private ArrayList\u003cBar\u003e bars;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Group(String name, ArrayList\u003cBar\u003e bars) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.bars \u003d bars;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 15
    }
  },
  {
    "path": "src/main/java/duke/components/Note.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Pitch pitch;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private String duration; // 1, 2*, 2, 4*, 4, 8"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private boolean isStart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Constructor for the Note object, taking in a String representation of the note."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param description A String representation of the Note object to be created of the form [DURATION]_[PITCH]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *                    E.g. 4_UA represents an A note from the upper octave with the duration of a 1/4 note."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Note(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String[] characteristics \u003d description.split(\"_\", 2);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.duration \u003d characteristics[0];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.isStart \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        switch (characteristics[1]) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"LC\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.LOWER_C;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"LD\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.LOWER_D;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"LE\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.LOWER_E;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"LF\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.LOWER_F;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"LG\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.LOWER_G;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"LA\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.LOWER_A;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"LB\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.LOWER_B;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"MC\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.MIDDLE_C;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"UD\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.UPPER_D;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"UE\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.UPPER_E;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"UF\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.UPPER_F;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"UG\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.UPPER_G;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"UA\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.UPPER_A;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"UB\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.UPPER_B;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"UC\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.UPPER_C;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.REST;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Note(String duration, Pitch pitch) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.pitch \u003d pitch;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void setStart(boolean val) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.isStart \u003d val;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Pitch getPitch() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return pitch;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String getDuration() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Note getUnitNote() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new Note(\"1\", this.pitch);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns the relative duration of the note in the form of a float. Asterisks (*) increase the relative duration"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * by 50%, just like the dotted notes in sheet music (notes that are followed by a ·)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the relative duration of the note in the form of a float."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public float getNumericalDuration() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        float result \u003d (float) (1.0 / Character.getNumericValue(this.duration.charAt(0)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        if (this.duration.length() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            result *\u003d 1.5;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer that is equivalent its duration relative to an 1/8 note."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return an integer representing how many times of an 1/8 note the duration is"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int getRelativeUnitDuration() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        switch (this.duration) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"1\": return 8;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"2*\": return 6;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"2\": return 4;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"4*\": return 3;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"4\": return 2;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"8\": return 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        default: return -1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 122
    }
  },
  {
    "path": "src/main/java/duke/components/Pitch.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public enum Pitch {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    LOWER_C,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    LOWER_D,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    LOWER_E,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    LOWER_F,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    LOWER_G,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    LOWER_A,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    LOWER_B,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    MIDDLE_C,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    UPPER_D,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    UPPER_E,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    UPPER_F,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    UPPER_G,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    UPPER_A,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    UPPER_B,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    UPPER_C,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    REST"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 20
    }
  },
  {
    "path": "src/main/java/duke/components/Song.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class Song {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private String key; // default key: C Major (implemented in NewCommand)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private int tempo; // default tempo: 120 (implemented in NewCommand)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private ArrayList\u003cBar\u003e bars;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private ArrayList\u003cGroup\u003e groups;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Constructor for Song object, taking in a name, key and tempo."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param name the name of the Song"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param key the key the Song is to be composed in"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param tempo the tempo at which the Song is to be played"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Song(String name, String key, int tempo) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.key \u003d key;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.tempo \u003d tempo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Creates a grouping of Bar objects to be easily copied and inserted for repetitions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * in music."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param name the name of the Group (e.g. Verse, Chorus, Pre-Chorus)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param startingId ID of the Bar to start copying from"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param endingId ID of the Bar to end the copying"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void createGroup(String name, int startingId, int endingId) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ArrayList\u003cBar\u003e groupedBars \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        for (int i \u003d startingId; i \u003c\u003d endingId; i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            groupedBars.add(bars.get(i - 1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        groups.add(new Group(name, groupedBars));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String getKey() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return key;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int getTempo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return tempo;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public ArrayList\u003cBar\u003e getBars() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return bars;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public ArrayList\u003cGroup\u003e getGroups() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return groups;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 62
    }
  },
  {
    "path": "src/main/java/duke/components/SongList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package duke.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": " * Class used to store the song list and perform necessary manipulations to the song list such as"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": " * adding songs, removing songs and finding songs based on keywords, as well as obtaining the size"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": " * of the song list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class SongList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private ArrayList\u003cSong\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Removes an element from the song list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param index the index of the duke.components.Song in the song list that is to be removed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Adds an element to the song list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param newSong the duke.components.Song object to be added to the song list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void add(Song newSong) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        list.add(newSong);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns the duke.components.Song object at the specified index"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param index the index of the duke.components.Song object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the duke.components.Song object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public Song getSongIndex(int index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns the current size of the song list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the current size of the task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns the task list for duke.Duke, which is implemented as an ArrayList of duke.components.Song objects."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the song list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public ArrayList\u003cSong\u003e getSongList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a subset of the song list (implemented as an ArrayList of duke.components.Song objects) that contains"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * the query specified in the argument."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param query the search query to be obtained from the input command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the ArrayList of duke.components.Song objects whose description contained the query"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public ArrayList\u003cSong\u003e findSong(String query) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        ArrayList\u003cSong\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        for (Song song: list) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            if (song.getName().contains(query)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                result.add(song);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Removes from this list all of its elements that are contained in the ArrayList."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param removeList the specified collection; its elements are removed from the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void removeAll(ArrayList\u003cSong\u003e removeList) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        list.removeAll(removeList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 86
    }
  },
  {
    "path": "src/main/java/duke/tasks/BetweenTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class BetweenTask extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private String startDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private String endDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for a duke.tasks.BetweenTask task, which consists of the description of the task and the period"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * associated with it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description refers to the description of the task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param startDate refers to the start of the period"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param endDate refers to the end of the period"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public BetweenTask(String description, String startDate, String endDate) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a String representation of the duke.tasks.BetweenTask object, displaying its type"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * (duke.tasks.BetweenTask), description and the period associated with it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a String representation of the duke.tasks.BetweenTask object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return \"[B]\" + super.toString() + \" (between: \" + startDate + \" and \" + endDate + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 1,
      "jwyf": 10,
      "-": 21
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A class inheriting from duke.tasks.Task used to represent tasks that have both a description and an"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * associated deadline."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private LocalDateTime byLdt \u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for a duke.tasks.Deadline task, which consists of the description of the task and the deadline"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * associated with it."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * The program assumes the following formats for date and time:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *         dd/MM/yyyy HHmm"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *         dd/MM/yyyy hh:mm a"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *         dd/MM/yyyy          (time assumed as 2359)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *                    HHmm"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *                    hh:mm a  (date assumed as today)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param by the deadline associated with the task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] simpleDateTime \u003d by.trim().split(\" \",2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime byDT \u003d convertToLocalDateTime(simpleDateTime);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            this.byLdt \u003d byDT;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            this.by \u003d byDT.format(dateTimeFormatter);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            this.by \u003d by; // custom deadline"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a String representation of the duke.tasks.Deadline object, displaying its type (duke.tasks.Deadline),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * description and the deadline associated with it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a String representation of the duke.tasks.Deadline object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deciphers the date and time mentioned in the input and returns a LocalDateTime object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * to be used for standardized date and time representation."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param simpleDateTime a String array that is the result of splicing the \"by\" section of the input command"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the LocalDateTime object that is translated from the simple date and time keyed in as Strings"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime convertToLocalDateTime(String[] simpleDateTime) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultDate \u003d now.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultTime \u003d \"2359\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (simpleDateTime.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            String s \u003d simpleDateTime[0];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            if (s.split(\" \").length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                // hh:mm a"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                return LocalDateTime.parse(defaultDate + \" \" + s, formatter);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (s.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                // HHmm"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                return LocalDateTime.parse(defaultDate + \" \" + s, formatter);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                // dd/MM/yyyy"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                return LocalDateTime.parse(s + \" \" + defaultTime, formatter);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            String date \u003d simpleDateTime[0];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            String time \u003d simpleDateTime[1];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            DateTimeFormatter formatter;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (time.length() \u003e\u003d 7) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                // dd/MM/yyyy hh:mm a"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                // dd/MM/yyyy HHmm"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return LocalDateTime.parse(date + \" \" + time, formatter);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns LocalDateTime object that corresponds to the assigned deadline to the task."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return deadline in the form of a LocalDateTime object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public LocalDateTime getByLdt() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return byLdt;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 6,
      "-": 102
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A class inheriting from duke.tasks.Task used to represent tasks that have both a description and an"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * associated location."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private String at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String end;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    protected LocalDateTime endDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean date \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String start;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    protected LocalDateTime startDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the duke.tasks.Event object, which consists of the description of a task and a"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * start and end date that is associated with it."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param start the start date of the event"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param end the end date of the event"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public Event(String description, String start, String end) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *  Constructor for the duke.tasks.Event object, which consists of the description of a task and a"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *  start date, end date, start time and end time that is associated with it."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param startDate the start date of the event"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param endDate the end date of the event"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param commandStart the start time of the event"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param commandEnd the end time of the event"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public Event(String description, LocalDateTime startDate,LocalDateTime endDate, String commandStart,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                 String commandEnd) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        endDate \u003d endDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        startDate \u003d startDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        date \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.end \u003d commandEnd.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.start \u003d commandStart.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a String representation of the duke.tasks.Event object, displaying its type (duke.tasks.Event),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * description and the location associated with it."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a String representation of the duke.tasks.Event object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[E]\" + super.toString() + \" (from: \" + start.trim() + \" to \" + end.trim() + \")\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public boolean hasDate() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public LocalDateTime getStartDate() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public LocalDateTime getEndDate() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 1,
      "jwyf": 31,
      "-": 48
    }
  },
  {
    "path": "src/main/java/duke/tasks/RecurringTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class RecurringTask extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private String time \u003d \"\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    private String frequency;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private String oldDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for a duke.tasks.RecurringTask task, which consists of the description, time, date"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * and how often to repeat itself."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description refers to the description of the task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date refers to the date on which the task has to be performed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param time refers to the time at which the task has to be performed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param frequency refers to how often the task recurs. This task can only recur"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *                  either daily, weekly, monthly or yearly."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public RecurringTask(String description, String date, String time, String frequency) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a String representation of the duke.tasks.RecurringTask object, displaying its type"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * (duke.tasks.RecurringTask), description and the attributes associated with it."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a string representation of the duke.tasks.RecurringTask object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String msg \u003d  \"[R]\" + super.toString() + \" (\" + frequency + \" on: \" + date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if (!this.time.equals(\"\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            msg +\u003d \" at \" + this.time;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        msg +\u003d \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a String representation of the duke.tasks.RecurringTask object, displaying its type"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * (duke.tasks.RecurringTask), description and the old(previous date) attributes associated with it."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a string representation of the duke.tasks.RecurringTask object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String toOldString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String msg \u003d  \"[R][v]\" + super.toString().substring(3) + \" (\" + frequency + \" on: \" + this.oldDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if (!this.time.equals(\"\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            msg +\u003d \" at \" + this.time;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        msg +\u003d \")\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * When a RecurringTask is set as done, the next date for the task is generated"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * based on the pre-defined frequency and the task date auto-updates itself."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Since this is a recurring task, it can never be marked as done as once the task"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * is done for one date, the task for the next date automatically replaces the previous"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * one."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.oldDate \u003d this.date;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if (frequency.equals(\"daily\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            this.date \u003d getNextDayDate(this.date);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if (frequency.equals(\"weekly\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            String temp \u003d this.date;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                temp \u003d getNextDayDate(temp);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            this.date \u003d temp;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if (frequency.equals(\"monthly\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            String[] datesString \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            int day;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            int month;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            int year;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            day \u003d Integer.parseInt(datesString[0]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            month \u003d Integer.parseInt(datesString[1]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            year \u003d Integer.parseInt(datesString[2]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            month++; //move to next month"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if (month \u003e 12) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                month \u003d 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                year++;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            } else if (month \u003d\u003d 2 \u0026\u0026 day \u003d\u003d 29) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                //change day to 28 if not leap year"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                if (!isLeapYear(year)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                    day \u003d 28;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            this.date \u003d  day + \"/\" + month + \"/\" + year;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if (frequency.equals(\"yearly\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            String[] datesString \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            int day;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            int month;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            int year;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            day \u003d Integer.parseInt(datesString[0]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            month \u003d Integer.parseInt(datesString[1]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            year \u003d Integer.parseInt(datesString[2]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            year++;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if (day \u003d\u003d 29 \u0026\u0026 month \u003d\u003d 2) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                if (!isLeapYear(year)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    day \u003d 28;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            this.date \u003d day + \"/\" + month + \"/\" + year;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private static String getNextDayDate(String date) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String[] datesString \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        int day;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        int month;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        int year;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        day \u003d Integer.parseInt(datesString[0]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        month \u003d Integer.parseInt(datesString[1]);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        year \u003d Integer.parseInt(datesString[2]);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if (day \u003d\u003d 31 \u0026\u0026 month \u003d\u003d 12) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            //overflow to next year"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            day \u003d 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            month \u003d 1;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            year++;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if (month \u003d\u003d 2) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            //special case feb -\u003e check leap year"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if (isLeapYear(year)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                day++;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                if (day \u003e 29) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    day \u003d 1;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                    month++;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                day++;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                if (day \u003e 28) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                    day \u003d 1;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                    month++;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if (month \u003d\u003d 1 || month \u003d\u003d 3 || month \u003d\u003d 5 || month \u003d\u003d 7 || month \u003d\u003d 8 || month \u003d\u003d 10) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            //months with 31 days"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            day++;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if (day \u003e 31) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                day \u003d 1;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                month++;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if (month \u003d\u003d 2 || month \u003d\u003d 4 || month \u003d\u003d 6 || month \u003d\u003d 9 || month \u003d\u003d 11) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            day++;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if (day \u003e 30) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                day \u003d 1;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                month++;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return day + \"/\" + month + \"/\" + year;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private static boolean isLeapYear(int y) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if ((y % 4 \u003d\u003d 0 \u0026\u0026 y % 100 !\u003d 0) || y % 400 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Checks if a date is a valid calendar date."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d calendar day of the month"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param m calendar month of the year (1-12)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param y calendar year"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a boolean indicating whether the date input is valid or not"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public static boolean isDateVaid(int d, int m, int y) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if (d \u003c 1 || d \u003e 31 || m \u003c 1 || m \u003e 12 || y \u003c 0) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if (m \u003d\u003d 2) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if (isLeapYear(y)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                if (d \u003e 29) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                if (d \u003e 28) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if (m \u003d\u003d 4 || m \u003d\u003d 6 || m \u003d\u003d 9 || m \u003d\u003d 11) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if (d \u003e 30) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 41,
      "jwyf": 26,
      "-": 131
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * duke.tasks.Task class used in duke.Duke. Extended by duke.tasks.Event, duke.tasks.ToDo, and duke.tasks.Deadline."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the duke.tasks.Task object, which is not used due to the further categorization"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * of duke.tasks.Task objects into the inherited duke.tasks.ToDo, duke.tasks.Event and duke.tasks.Deadline objects"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * that extend the duke.tasks.ToDo Object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the icon of the task that represents whether the task is done or not."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * v represents the task being done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * x represents the task being not done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the status icon of the task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? \"v\" : \"x\"); // returns ticks (v) and crosses (x)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the description of the Task object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the description of the task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Return a String representation of the duke.tasks.Task, as displayed"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * on the command line / in todo_list.txt"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a String representation of the duke.tasks.Task object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                + this.getStatusIcon()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                + this.description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the task as done. Note that conversion back to an un-done state is perceived"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * to be unnecessary as it does not make sense for done tasks to be un-done."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 3,
      "-": 64
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A class inheriting from duke.tasks.Task used to represent tasks that has just a description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor used to create the duke.tasks.ToDo object, which contains only a description of the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a String representation of the duke.tasks.ToDo object, displaying its type (duke.tasks.ToDo),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and description."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a String representation of the duke.tasks.ToDo object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 3,
      "-": 29
    }
  },
  {
    "path": "src/test/java/duke/tasks/BetweenTaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class BetweenTaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void toString_testingToString_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        assertEquals(\"[B][x] complete your ippt (between: 19/05/2018 and 19/05/2019)\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                new BetweenTask(\"complete your ippt\", \"19/05/2018\", \"19/05/2019\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        .toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        assertEquals(\"[B][x] study for midterms (between: 27/09/2019 and 29/09/2019)\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                new BetweenTask(\"study for midterms\", \"27/09/2019\", \"29/09/2019\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        .toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        assertEquals(\"[B][x] study for cs2113T (between: 01/08/2019 and 27/11/2019)\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                new BetweenTask(\"study for cs2113T\", \"01/08/2019\", \"27/11/2019\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        .toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        assertEquals(\"[B][x] eat pizzaaaa (between: 19/05/2018 and 19/05/2019)\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                new BetweenTask(\"eat pizzaaaa\", \"19/05/2018\", \"19/05/2019\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        .toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 14,
      "-": 11
    }
  },
  {
    "path": "src/test/java/duke/tasks/DeadlineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(\"[D][x] Read book (by: whenever)\", new Deadline(\"Read book\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                \"whenever\").toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(\"[D][x] Celebrate My Birthday (by: 12/12/2019 11:59 PM)\", new Deadline(\"Celebrate My Birthday\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                \"12/12/2019 2359\").toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(\"[D][x] Celebrate My Birthday (by: 12/12/2019 12:20 PM)\", new Deadline(\"Celebrate My Birthday\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                \"12/12/2019 12:20 PM\").toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(\"[D][x] Read book (by: 12/09/2019 11:59 PM)\", new Deadline(\"Read book\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                \"12/09/2019\").toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 1,
      "jwyf": 8,
      "-": 12
    }
  },
  {
    "path": "src/test/java/duke/tasks/DoAfterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoAfterTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void toString_DoAfterTask_DoAfterString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(\"[A][x] Read book (after: Task 1)\", new DoAfter(\"Read book\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                1, 0).toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(\"[A][x] Celebrate My Birthday (after: Task 2)\", new DoAfter(\"Celebrate My Birthday\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                2, 1).toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 5,
      "-": 10
    }
  },
  {
    "path": "src/test/java/duke/tasks/RecurringTaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class RecurringTaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void toString_testingToString_success() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        assertEquals(\"[R][x] eatmacs (daily on: 19/12/2012 at evenings)\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                new RecurringTask(\"eatmacs\", \"19/12/2012\", \"evenings\", \"daily\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        .toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void isDateValid_invalidDate_false() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        assertEquals(false,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                RecurringTask.isDateVaid(99,99,1999));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 7,
      "-": 14
    }
  }
]
