[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    archiveBaseName \u003d \"Ducats\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    archiveVersion \u003d \"1.3\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    mainClassName \u003d \"ducats.Ducats\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "rishi12438": 1,
      "rohan-av": 3,
      "Samuel787": 1,
      "-": 46
    }
  },
  {
    "path": "src/main/java/ducats/Ducats.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.AddBarCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.AddOverlayCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.AsciiCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.CopyCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.DeleteBarCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ducats.commands.EditBarCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.GroupCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ducats.commands.InsertBarCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.NewCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.OpenCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.OverlayBarGroup;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.OverlayBarSong;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.OverlayGroupGroup;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ducats.commands.SwapBarCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.UndoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.ViewCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.UndoRedoStack;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class Ducats {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Chat bot cum task management application that can handle events, deadlines and normal to-do tasks,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * as well as basic exception handling."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private SongList songs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private UndoRedoStack undoRedoStack;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Metronome metronome;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Constructor for the duke.Duke object, which initializes the UI, duke.TaskList and duke.Storage in"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * order to carry out its functions."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Ducats() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        songs \u003d new SongList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        //storage \u003d new Storage(Paths.get(\"/home/rishi/Desktop/cs2113t/team/main/data/todo_list.txt\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String fileDelimiter \u003d System.getProperty(\"file.separator\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        storage \u003d new Storage(System.getProperty(\"user.dir\") + fileDelimiter + \"songlist.txt\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        metronome \u003d new Metronome();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            System.out.println(Ui.showSaveStatus(storage.initialize()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            storage.loadToList(songs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } catch (DucatsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            System.out.println(ui.showError(e));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            songs \u003d new SongList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        undoRedoStack \u003d new UndoRedoStack(songs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Runs the program, constantly asking for and responding to user input, finally terminating."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * upon the word \"Bye\"."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        System.out.println(ui.showWelcomeMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                Command c \u003d Parser.parse(ui,fullCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                //if the command uses the SongList"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                String output;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                if (c instanceof AddBarCommand"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        || c instanceof ViewCommand"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        || c instanceof NewCommand"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        || c instanceof DeleteCommand"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        || c instanceof DeleteBarCommand"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        || c instanceof InsertBarCommand"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        || c instanceof SwapBarCommand"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        || c instanceof EditBarCommand"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        || c instanceof HelpCommand"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        || c instanceof GroupCommand"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        || c instanceof CopyCommand"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        || c instanceof AddOverlayCommand"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        || c instanceof ListCommand"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        || c instanceof OverlayBarGroup"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        || c instanceof OverlayBarSong"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        || c instanceof OpenCommand"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        || c instanceof AsciiCommand"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        || c instanceof OverlayGroupGroup) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    output \u003d c.execute(songs, ui, storage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    if (!(c instanceof HelpCommand"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        || c instanceof ViewCommand"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        || c instanceof ListCommand)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        undoRedoStack.add(songs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                } else if (c instanceof UndoCommand || c instanceof RedoCommand) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    output \u003d c.execute(songs, ui, storage, undoRedoStack);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    songs \u003d undoRedoStack.getCurrentVersion();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    output \u003d c.execute(songs, ui, storage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                System.out.println(output);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                metronome.start(c.startMetronome());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            } catch (DucatsException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                System.out.println(ui.showError(e));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * duke.Main function for duke.Duke, which creates a new duke.Duke object and runs it."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param args Standard Java arguments for a main function, in this case, not used"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        new Ducats().run();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public SongList getSongs() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return this.songs;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 1,
      "rohan-av": 125,
      "jwyf": 5,
      "SalonetheGreat": 1
    }
  },
  {
    "path": "src/main/java/ducats/DucatsException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * Custom exception class for all Ducats-related exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class DucatsException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private String type \u003d \"other\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private static final String[] COMMAND_STRINGS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        {\"todo\",\"deadline\", \"event\", \"doafter\", \"new\", \"view\", \"addbar\", \"copy\", \"group\", \"overlay\"};"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Constructor for ducats.DukeException for default type."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param input input message that triggered the exception"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public DucatsException(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Constructor for ducats.DukeException for specific Tasks, in order to provide"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * type-specific error messages."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param input input message that triggered the exception"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param type the type of the ducats.tasks.Task that was attempted to be created which"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *             caused the exception (i.e. ducats.tasks.ToDo, ducats.tasks.Event, or ducats.tasks.Deadline)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public DucatsException(String input, String type) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns the message associated with the type of ducats.DukeException that has occurred."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the error message associated with the exception"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String message \u003d \"An unknown exception has occurred.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String word \u003d input.trim().equals(\"event\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                || input.trim().equals(\"overlay\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                || input.trim().equals(\"addbar\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                || input.trim().equals(\"insertbar\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                ? \"an \" : \"a \";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        if (hasEmptyDescription(input)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            message \u003d \"OOPS!!! The description of \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    + word"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    + input.trim()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    + \" command cannot be empty.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } else if (!type.equals(\"other\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"todo\": {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"event\": {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                if (!input.contains(\"/at\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    message \u003d \"OOPS!!! ducats.tasks.Event is missing a location.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"deadline\": {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                if (!input.contains(\"/by\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    message \u003d \"OOPS!!! ducats.tasks.Deadline is missing a deadline.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"doafter\": {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                if (!input.contains(\"/after\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    message \u003d \"OOPS!!! ducats.tasks.DoAfter is missing a task it is supposed to be done after.\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    message \u003d \"Please enter the task number of the task that the DoAfter should be after.\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"new\": {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"OOPS!!! ducats.components.Song cannot be created due to invalid input format.\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"view\": {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"OOPS!!! I don\u0027t know that song. Please be more specific in the song name.\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"addbar\": {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"OOPS!!! New bar cannot be added due to invalid input.\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"edit\": {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"OOPS!!! Bar cannot be edited due to invalid input.\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"insertbar\": {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"OOPS!!! New bar cannot be inserted due to invalid input.\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"swap\": {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"OOPS!!! Bars cannot be swapped due to invalid input.\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"io\": {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"OOPS!!! An IO exception has occurred.\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"no_index\": {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"The index does not exist!\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"empty\": {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"List is empty! Please enter a valid command.\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"conflict\": {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"There is a conflict between this event and another event!\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"index\": {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"Invalid index! Please try again.\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"between\": {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"Invalid input for a between task. \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        + \"Please follow this format: between \u003ctask_description\u003e /between \u003cstart\u003e and \u003cend\u003e\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"recur\": {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"Invalid input for a recurring task. Please follow this format:\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        + \" recur \u003cfrequency\u003e \u003cdescription\u003e /on \u003cdate\u003e /at \u003ctime\u003e\\n\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message +\u003d \"\u003cfrequency\u003e could only be one of: daily, weekly, monthly or yearly\\n\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message +\u003d \"\u003cdate\u003e has to follow the specific format of: dd/mm/yy\\n\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message +\u003d \"/at \u003ctime\u003e is optional.\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"group\": {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"OOPS!!! These groups cannot be grouped due to invalid input.\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"copy\": {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"OOPS!!! Invalid input for copy command.\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"create\": {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"OOPS!!! Invalid syntax.\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"data\": {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"OOPS!!! The data is corrupted.\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"AsciiCommand\": {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"OOPS!!! Your Ascii Command is not recognised.\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            default: {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            message \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return Ui.wrap(message);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        // wrap is called from Ui in order to standardize the formatting of the output"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a boolean value corresponding to whether the input string, when trimmed, is equal to just the command,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * hence indicating the lack of further description."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param message the input String"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a boolean indicating whether the message has an empty description"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private boolean hasEmptyDescription(String message) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        for (String commandString: COMMAND_STRINGS) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            if (message.trim().equals(commandString)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 187
    }
  },
  {
    "path": "src/main/java/ducats/DucatsGui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package ducats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class DucatsGui extends Application {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        Application.launch(args);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.stage \u003d stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        AnchorPane root \u003d FXMLLoader.load(getClass().getResource(\"/fxml/ducatswindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        stage.setTitle(\"Ducats v1.4\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        stage.setScene(new Scene(root, 900, 600));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        stage.setMinHeight(550);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        stage.setMinWidth(700);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        stage.setOnCloseRequest(e -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            e.consume();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            closeProgram();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private void closeProgram() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //Logic to execute before closing the program"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        System.out.println(\"Program about to close\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        stage.close();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 37
    }
  },
  {
    "path": "src/main/java/ducats/DucatsTimeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class DucatsTimeException extends DucatsException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public DucatsTimeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 8
    }
  },
  {
    "path": "src/main/java/ducats/Metronome.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class Metronome {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private static final String TIMER_COMPLETE \u003d \"Done!\\n\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private int duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private int tempo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private int[] timeSig;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private int completedBars;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private int noteNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Helper function to initialize the Metronome attributes from the given parameters."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param parameters the parameters that are to be assigned to the different attributes"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private void initializeParameters(int[] parameters) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        duration \u003d parameters[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        tempo \u003d parameters[1];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        timeSig \u003d new int[]{parameters[2], parameters[3]};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        completedBars \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        noteNumber \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Helper function to generate the output for each repeated task, enabling thorough information regarding the beat"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * through the generation of different output."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the String to be displayed indicating the position within the bar being gone through by the Metronome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private String generateOutput() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        if (completedBars \u003d\u003d duration) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            return \"Done!\\n\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            String result \u003d Integer.toString(noteNumber);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            if (noteNumber \u003d\u003d 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                result +\u003d \"#\"; // emphasis given to first note of every bar"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                result +\u003d \" \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            if (noteNumber \u003d\u003d timeSig[0]) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                completedBars++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            noteNumber \u003d (noteNumber \u003d\u003d timeSig[0]) ? 1 : noteNumber + 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Starts the metronome with the given parameters."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param parameters an integer array consisting of the different parameters the Metronome should be initialized"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *                   with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void start(int[] parameters) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        if (parameters[0] !\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            initializeParameters(parameters);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            Timer timer \u003d new Timer(\"Metronome\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            TimerTask repeatedTask \u003d new TimerTask() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                public void run() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    String output \u003d generateOutput();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    if (output.equals(TIMER_COMPLETE)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        cancel();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    System.out.print(\"\\b\\b\" + output);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            };"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            timer.scheduleAtFixedRate(repeatedTask, 1000, 60000 / tempo);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 77
    }
  },
  {
    "path": "src/main/java/ducats/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.AddBarCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.AddOverlayCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.AsciiCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.ByeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.CopyCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.DeleteBarCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ducats.commands.EditBarCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.GroupCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ducats.commands.InsertBarCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.MetronomeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.NewCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.OpenCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.OverlayBarGroup;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.OverlayBarSong;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.OverlayGroupGroup;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.RedoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ducats.commands.SwapBarCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.UndoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.ViewCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Jaccard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import ducats.components.WordGetter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * A class used to interpret the incoming messages and translate them into the appropriate duke.Commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Returns the duke.Commands.duke.Commands.Command object interpreted from the input message,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * and throws a duke.DukeException otherwise."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param message the input message to be parsed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the duke.Commands.duke.Commands.Command object interpreted from the input message"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @throws DucatsException in the case of parsing errors"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public static Command parse(Ui ui,String message) throws DucatsException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String [] commandList \u003d {\"bye\", \"list\", \"delete\", \"deletebar\",\"editbar\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                                    \"find\",\"done\", \"new\",\"help\",\"view\",\"addbar\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                                    \"overlay\",\"group\",\"overlay_bar_group\", \"metronome\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                                    \"overlay_group_group\", \"overlay_bar_song\", \"ascii\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                                    \"redo\", \"undo\", \"open\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                                    \"copy\", \"insertbar\", \"swapbar\"};"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        double maximumVal \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        //String commandName \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Jaccard similarityChecker \u003d new Jaccard();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        String [] messageSplit \u003d message.split(\" \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        WordGetter wordSimilarity \u003d new WordGetter();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        String commandName \u003d wordSimilarity.closestWord(messageSplit[0]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        if (!commandName.equals(messageSplit[0])) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            ui.autoCorrectMessage(commandName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        messageSplit[0] \u003d commandName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        message \u003d String.join(\" \", messageSplit);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        switch (commandName) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            if (message.length() \u003d\u003d 3) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "                return new ByeCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            if (message.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"open\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            if (message.length() \u003e\u003d 6) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                return new OpenCommand(message);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            if (message.length() \u003e\u003d 8) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "                return new DeleteCommand(message);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        case \"deletebar\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            if (message.length() \u003e\u003d 11) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                return new DeleteBarCommand(message);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        case \"insertbar\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            if (message.length() \u003e\u003d 11) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                return new InsertBarCommand(message);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        case \"swapbar\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            if (message.length() \u003e\u003d 9) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                return new SwapBarCommand(message);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        case \"editbar\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            if (message.length() \u003e\u003d 9) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                return new EditBarCommand(message);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        case \"new\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            if (message.length() \u003e\u003d 5) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "                return new NewCommand(message);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        case \"help\": {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return new HelpCommand(message);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            if (message.length() \u003e\u003d 6) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "                return new ViewCommand(message);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        case \"addbar\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            if (message.length() \u003e\u003d 7) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "                return new AddBarCommand(message);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        case \"overlay\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            if (message.length() \u003e\u003d 8) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "                return new AddOverlayCommand(message);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        case \"group\":"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            if (message.length() \u003e\u003d 7) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "                return new GroupCommand(message);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        case \"overlay_bar_group\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            if (message.length() \u003e\u003d 8) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                return new OverlayBarGroup(message);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        case \"overlay_group_group\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            if (message.length() \u003e\u003d 8) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                return new OverlayGroupGroup(message);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        case \"overlay_bar_song\":"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            if (message.length() \u003e\u003d 8) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                return new OverlayBarSong(message);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        case \"copy\":"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            if (message.length() \u003e\u003d 6) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "                return new CopyCommand(message);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        case \"ascii\":"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if (message.length() \u003e\u003d 7) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                return new AsciiCommand(message);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        case \"redo\":"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            if (message.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "                return new RedoCommand();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        case \"undo\":"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            if (message.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "                return new UndoCommand();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"metronome\":"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            if (message.length() \u003e\u003d 11) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                return new MetronomeCommand(message);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            return new AddBarCommand(message);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        throw new DucatsException(message);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 34,
      "rohan-av": 51,
      "Samuel787": 5,
      "jwyf": 28,
      "SalonetheGreat": 58
    }
  },
  {
    "path": "src/main/java/ducats/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Bar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Chord;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Pitch;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Song;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * A class to implement persistent storage of the task list using a .txt file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    protected File file;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Constructor for the duke.Storage class."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param filepath the String object representing the path to the file being used to store the task list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        file \u003d new File(filepath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    boolean initialize() throws DucatsException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            return file.createNewFile();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DucatsException(\"\",\"io\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } catch (SecurityException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DucatsException(\"security\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    // Ducats implementation starts here."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    // Storage structure for Ducats is as follows:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    // List of Songs, with each Song being represented in the following format:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    // s/NAME s/BAR1 s/BAR2 ..."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    // BAR is formatted as a two-dimensional array of Notes, with each nested array representing a Chord."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    // E.g."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    // \"Hello World! [[UAs;UBs],[UA;UB],[UAs;UB],[UA;UB],[UBs;R],[UB;R],[LFs;R],[LF;R]] [...] ...\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    // TODO: implement convertFromString"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    // @@author rohan-av"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private ArrayList\u003cString\u003e formatListToString(ArrayList\u003cSong\u003e list) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        for (Song song: list) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            result.add(song.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private void writeStringsToFile(ArrayList\u003cString\u003e songs) throws DucatsException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        FileWriter fileWriter;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            fileWriter \u003d new FileWriter(filepath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            for (String song: songs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                sb.append(song);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                sb.append(System.lineSeparator());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            fileWriter.write(sb.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DucatsException(\"\",\"io\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private ArrayList\u003cString\u003e readStringsFromFile() throws DucatsException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        // reads file and returns an ArrayList of lines"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        try (Scanner scanner \u003d new Scanner(file)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                String nextLine \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                if (nextLine.equals(\"\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    result.add(nextLine);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            System.out.println(\"que?\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DucatsException(\"\", \"io\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * A function that gets from a text file and loads into the song list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param songList - This is the list of songs by the user."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void loadToList(SongList songList) throws DucatsException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        // loads data into list"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d readStringsFromFile();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        for (String line: data) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            songList.add(convertSongFromString(line));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * A function that converts a string into a Song element."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param s - this is the string to be converted to a song."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    // twinkle [[UAs;UAs],[UA;UA],[UAs;UAs],[UA;UA],[UAs;UAs],[UA;UA],[UAs;UAs],[UA;UA]]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Song convertSongFromString(String s) throws DucatsException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String[] sections \u003d s.split(\" \");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        if (sections.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DucatsException(\"io\",\"\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String name \u003d sections[0];"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String key \u003d sections[1];"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        int tempo \u003d Integer.parseInt(sections[2]);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        Song song \u003d new Song(name, key, tempo);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        for (int i \u003d 3; i \u003c sections.length; i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            song.addBar(convertBarFromString(sections[i], i - 3));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return song;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Bar convertBarFromString(String s, int barIndex) throws DucatsException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String barData \u003d s.substring(1, s.length() - 1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String[] rawChords \u003d barData.split(\",\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ArrayList\u003cChord\u003e chords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        for (String rawChord: rawChords) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            chords.add(convertChordFromString(rawChord));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        Bar bar \u003d new Bar(barIndex, chords);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return bar;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Chord convertChordFromString(String s) throws DucatsException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String noteData \u003d s.substring(1, s.length() - 1);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String[] rawNotes \u003d noteData.split(\";\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ArrayList\u003cNote\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        for (String rawNote: rawNotes) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            notes.add(convertNoteFromString(rawNote));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        Chord chord \u003d new Chord(notes);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return chord;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Note convertNoteFromString(String s) throws DucatsException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String duration \u003d \"8\"; //duration for each chord"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        boolean isStart \u003d false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        if (s.length() \u003d\u003d 3) { //unit note is the start of the note"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            isStart \u003d true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        Pitch pitch;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        switch (s.length() \u003d\u003d 3 ? s.substring(0,2) : s) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"LC\":"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            pitch \u003d Pitch.LOWER_C;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"LD\":"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            pitch \u003d Pitch.LOWER_D;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"LE\":"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            pitch \u003d Pitch.LOWER_E;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"LF\":"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            pitch \u003d Pitch.LOWER_F;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"LG\":"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            pitch \u003d Pitch.LOWER_G;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"LA\":"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            pitch \u003d Pitch.LOWER_A;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"LB\":"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            pitch \u003d Pitch.LOWER_B;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"MC\":"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            pitch \u003d Pitch.MIDDLE_C;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"UD\":"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            pitch \u003d Pitch.UPPER_D;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"UE\":"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            pitch \u003d Pitch.UPPER_E;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"UF\":"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            pitch \u003d Pitch.UPPER_F;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"UG\":"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            pitch \u003d Pitch.UPPER_G;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"UA\":"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            pitch \u003d Pitch.UPPER_A;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"UB\":"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            pitch \u003d Pitch.UPPER_B;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"UC\":"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            pitch \u003d Pitch.UPPER_C;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"RT\":"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            pitch \u003d Pitch.REST;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DucatsException(\"data\",\"\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new Note(duration, pitch, isStart);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void updateFile(SongList songList) throws DucatsException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        // System.out.println(songList.getSongList().get(0).toString());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        writeStringsToFile(formatListToString(songList.getSongList()));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    // Ducats implementation ends here. (TODO: delete below when appropriate)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     * Returns an ArrayList of the String representations of all the duke.tasks.Task objects in the task list."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     * @param list the task list containing all the duke.tasks.Task objects"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     * @return an ArrayList of the String representations of the tasks in the task list"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //    private ArrayList\u003cString\u003e formatFile(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //        for (Task task : list) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            result.add(task.toString());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //        return result;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     * Writes the task list to the .txt file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     * @param tasks an ArrayList of the String representations of the tasks in the task list"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     * @throws DukeException in the case of input or output exceptions"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //    private void writeFile(ArrayList\u003cString\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //        try {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            Files.write(file, tasks, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //        } catch (IOException e) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            throw new DukeException(\"\",\"io\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     * Reads the .txt fil and returns an ArrayList of Strings that represent the tasks in the task"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     * list"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     * @return an ArrayList of Strings that represent the tasks in the task list"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     * @throws DukeException in the case of input or output exceptions"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //    private ArrayList\u003cString\u003e readFile() throws DukeException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //        // reads file and returns an ArrayList of lines"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //        try (BufferedReader br \u003d Files.newBufferedReader(file)) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            String line;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                result.add(line);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //        } catch (Exception e) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            throw new DukeException(\"\", \"io\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //        return result;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     * After reading the file, converts each String representation back into its corresponding"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     * duke.tasks.Task object and pushes it into the duke.TaskList."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     *"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     * @param taskList the duke.TaskList object used to store the task list"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     * @throws DukeException in the case of input or output exceptions"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //    void loadList(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //        // loads data into list"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //        ArrayList\u003cString\u003e data \u003d readFile();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //        for (String line: data) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            //System.out.println(line);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            convertString(taskList, line);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     * Interprets the String, translates it to the appropriate duke.tasks.Task object, and adds it"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     * to the duke.TaskList."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     *"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     * @param taskList the duke.TaskList object used to store the task list"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     * @param s the String representation to be converted"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     * @throws DukeException in the case of input or output exceptions"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //    private void convertString(TaskList taskList, String s) throws DukeException {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //        try {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            String type \u003d s.substring(1,2); // T, D, E or A"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            boolean isDone \u003d s.substring(4,5).equals(\"v\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            String description;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            String addendum;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            switch (type) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            case \"T\":"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                description \u003d s.substring(7);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                ToDo todo \u003d new ToDo(description);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                if (isDone) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                    todo.setDone();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                taskList.add(todo);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                break;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            case \"E\": {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                String[] sections \u003d s.substring(7).split(\"\\\\(from:\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                sections[1] \u003d sections[1].replace(\"to\",\"-\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                sections[1] \u003d sections[1].replace(\")\",\"\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                //System.out.println(sections[1]);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                //description \u003d sections[0].substring(0, sections[0].length() - 2);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                //addendum \u003d sections[1].substring(1, sections[1].length() - 1);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                //String[] to_from  \u003d addendum.split(\"to\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                Event event \u003d (Event)taskList.get_first_e(sections,1);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                if (isDone) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                    event.setDone();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                taskList.add(event);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                break;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            case \"D\": {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                String[] sections \u003d s.substring(7).split(\"by:\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                description \u003d sections[0].substring(0, sections[0].length() - 2);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                addendum \u003d sections[1].substring(1, sections[1].length() - 1);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                Deadline deadline \u003d new Deadline(description, addendum);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                if (isDone) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                    deadline.setDone();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                taskList.add(deadline);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                break;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            case \"A\": {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                String[] sections \u003d s.substring(7).split(\"after:\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                description \u003d sections[0].substring(0, sections[0].length() - 2);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                addendum \u003d sections[1].substring(6, sections[1].length() - 1);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                int previousTaskNumber \u003d Integer.parseInt(addendum);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                DoAfter doAfter \u003d new DoAfter(description, previousTaskNumber, taskList.getSize() + 1);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                DoAfterList.add(previousTaskNumber);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                if (isDone) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                    doAfter.setDone();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                taskList.add(doAfter);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                break;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            case \"B\": {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                String[] sections \u003d s.substring(7).split(\"between\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                description \u003d sections[0].substring(0, sections[0].length() - 2);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                String[] sections2 \u003d sections[1].split(\"and\");"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                String start \u003d sections2[0].substring(1, sections2[0].length() - 1).trim();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                String end \u003d sections2[1].substring(0, sections2[1].length() - 1).trim();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                BetweenTask betweenTask \u003d new BetweenTask(description, start, end);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                if (isDone) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                    betweenTask.setDone();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                taskList.add(betweenTask);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                break;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            case \"R\": {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                String[] sections \u003d s.substring(7).split(\"\\\\(\");"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                description \u003d sections[0];"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                String frequency \u003d sections[1].split(\" \")[0];"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                String[] dateInfo \u003d sections[1].split(\"on: \");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                String[] dateNewInfo \u003d dateInfo[1].split(\" \");"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                String date \u003d dateNewInfo[0];"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                String time;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                if (dateNewInfo.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                    time \u003d dateNewInfo[2].substring(0, dateNewInfo[2].length() - 1);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                } else {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                    time \u003d \"\";"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                //String date \u003d \"\";"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                //       String time \u003d \"\";"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                RecurringTask recurringTask \u003d new RecurringTask(description, date, time, frequency);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                taskList.add(recurringTask);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                break;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            default:"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //                throw new DukeException(\"\",\"io\");"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //        } catch (Exception e) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //            throw new DukeException(\"\",\"io\");"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     * Updates the .txt file with the latest task list found within the duke.Duke program."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     *"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     * @param taskList the duke.TaskList object used to store the task list"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     * @throws DukeException in the case of input or output exceptions"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //    public void updateFile(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //        writeFile(formatFile(taskList.getTaskList()));"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 1,
      "rohan-av": 416
    }
  },
  {
    "path": "src/main/java/ducats/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.CommandSyntaxMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Bar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Song;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * A class used to read the input duke.commands (for the command line implementation of duke.Duke) and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * return the messages to be displayed in duke.Duke as a response to the user\u0027s input messages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Reads the input message of the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the input message of the user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    String readCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a welcome message for duke.Duke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a welcome message for duke.Duke"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    String showWelcomeMessage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String[] introMessages \u003d {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            \"What magic will you be creating today?\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            \"Ready to make your magnum opus?\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            \"Looking good, maestro!\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            \"Let\u0027s go make music!\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            \"What masterpiece are we working on today?\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            \"Feeling creative, I see.\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String logo \u003d \"______            _______  _______ _________ _______     \\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \"(  __  \\\\ |\\\\     /|(  ____ \\\\(  ___  )\\\\__   __/(  ____ \\\\  \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \"| (  \\\\  )| )   ( || (    \\\\/| (   ) |   ) (   | (    \\\\/    \\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \"| |   ) || |   | || |      | (___) |   | |   | (_____        \\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \"| |   | || |   | || |      |  ___  |   | |   (_____  )       \\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \"| |   ) || |   | || |      | (   ) |   | |         ) |       \\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \"| (__/  )| (___) || (____/\\\\| )   ( |   | |   /\\\\____) |     \\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \"(______/ (_______)(_______/|/     \\\\|   )_(   \\\\_______) . \\n\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return wrap(\"Hello, this is\\n\" + logo + introMessages[(new Random()).nextInt(introMessages.length)]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a final message from duke.Duke in the case of termination."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a terminal message from duke.Duke."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public static String showByeMessage() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return wrap(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns the error message associated with the caught duke.DukeException."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param e the duke.DukeException that was caught"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the error message associated with the duke.DukeException"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    String showError(DucatsException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return e.getMessage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an appropriate message regarding whether the data file has been successfully indentified or, if absent,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * created."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param fileCreated a boolean corresponding to whether a new file was created"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the message to be displayed"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    static String showSaveStatus(boolean fileCreated) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        if (fileCreated) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            return \"Data file for created songs not found. New file created.\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            return \"Data loaded successfully!\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns the String but wrapped in between two horizontal lines for enhanced"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * reading and display on the command line interface."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param content the String to be wrapped with horizontal lines"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the wrapped String to be displayed"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    static String wrap(String content) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return (\"\\n_____________________________________________\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + content"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \"\\n_____________________________________________\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a String formatted for display that shows all the elements in the task list"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * due to the list command."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param list the list of Songs"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String formatList(ArrayList\u003cSong\u003e list) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            result.append(i + 1)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    .append(\". \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    .append(list.get(i).toString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            if (i !\u003d list.size() - 1) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                result.append(\"\\n\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            result.append(\"The list is empty!\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return wrap(result.toString());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a string providing the user with feedback regarding which Song has been opened for editing."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param songList the list of Songs stored in Ducats"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public static String formatOpen(SongList songList, int songIndex) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        if (songIndex !\u003d -1) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            result.append(\"The following song has been opened: \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            String songName \u003d songList.getSongIndex(songList.getActiveIndex()).getName();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            result.append(songName);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            return wrap(result.toString());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            return \"Song not found! Please ensure that you\u0027ve spelt it correctly.\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a String formatted for display that indicates that a song has been deleted by"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * the delete command."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param songList the song list after deletion"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param deletedSong the song that was deleted"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String formatDelete(SongList songList, Song deletedSong) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String word \u003d (songList.getSize() \u003d\u003d 1) ? \"song\" : \"songs\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String result \u003d \"Noted! I\u0027ve removed this song:\\n \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + deletedSong.getName()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \"Now you have \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + (songList.getSize())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + word"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \" in the SongList.\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return wrap(result);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a String formatted for display that indicates that a bar has been deleted by"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * the deletebar command."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param song the song after deletion"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param barIndex the index of the bar that was deleted"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String formatDeleteBar(Song song, int barIndex) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String word \u003d (song.getBars().size() \u003d\u003d 1) ? \"bar\" : \"bars\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String result \u003d \"Noted! I\u0027ve removed bar: \""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + (barIndex)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \"Now you have \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + (song.getBars().size())"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + word"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \" in the song.\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return wrap(result);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Returns a String formatted for display that the wrong command was type and telling them"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * the command was autocorrected."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param commandName this is the command name"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public String autoCorrectMessage(String commandName) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        String result \u003d \"The autocorrect believes that you have searched for \""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                + commandName"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                + \" if not please search help for the right command\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        return wrap(result);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a String formatted for display that indicates that a duke.components.Song object has been added"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * by the new command."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param list the song list"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param song the item that was added to the song list"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String formatNewSong(ArrayList\u003cSong\u003e list, Song song) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String word \u003d (list.size() \u003d\u003d 1) ? \"song\" : \"songs\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String result \u003d \"Got it. I\u0027ve added this song:\\n  \""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + song.getName()"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \"\\nNow you have \""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + list.size()"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + word"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \" in the list.\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return wrap(result);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a String formatted for display that shows all the elements in the command list"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * due to the help command."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @param helpMessage the helpMessage user inputs"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String formatHelp(String helpMessage) throws DucatsException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        return wrap(CommandSyntaxMessage.getMessage(helpMessage));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * Returns a String that contains all the commands with their command name and format."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @return the formatted command syntax"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    public String formatHelp() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        String output \u003d CommandSyntaxMessage.getMessage();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        return wrap(CommandSyntaxMessage.getMessage());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a String formatted for display that shows a song in the song list due to the view command."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param song the item that is to be displayed"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String formatView(Song song) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return song.showSongChart();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a String formatted for display that indicates that a duke.components.Bar object has been added"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * by the addbar command."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param list the song list"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param song the item that was modified"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String formatAddBar(ArrayList\u003cSong\u003e list, Bar bar, Song song) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String word \u003d (list.size() \u003d\u003d 1) ? \"bar\" : \"bars\";"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String result \u003d \"Got it. I\u0027ve added this bar:\\n  \""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + bar.toString()"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \"\\nto \""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + song.getName()"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \"\\nNow you have \""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + song.getBars().size()"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + word"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \" in the song.\";"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return wrap(result);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a String formatted for display that indicates that a duke.components.Bar object has been edited"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * by the edit command."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param oldBar the previous bar that was changed"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param newBar the new bar"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param song the item that was modified"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String formatEdit(Bar oldBar, Bar newBar, Song song) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String result \u003d \"Got it. I\u0027ve edited this bar:\\n  \""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + oldBar.toString()"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \"\\nNow you have \""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + newBar.toString()"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \"in the song \""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + song.getName()"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \".\";"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return wrap(result);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a String formatted for display that indicates that a duke.components.Bar object has been inserted"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * by the insert command."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param list the song list"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param song the item that was modified"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String formatInsertBar(ArrayList\u003cSong\u003e list, Bar bar, Song song) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String word \u003d (list.size() \u003d\u003d 1) ? \"bar\" : \"bars\";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String result \u003d \"Got it. I\u0027ve inserted this bar:\\n  \""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + bar.toString()"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \"\\nto \""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + song.getName()"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \"\\nNow you have \""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + song.getBars().size()"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + word"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \" in the song.\";"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return wrap(result);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a String formatted for display that indicates that two duke.components.Bar objects has been swapped"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * by the swap command."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param barOne the first bar to be swap"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param barTwo the second bar to be swapped with"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param song the item that was modified"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String formatSwap(Bar barOne, Bar barTwo, Song song) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String result \u003d \"Got it. I\u0027ve swap this bar:\\n  \""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + barOne.toString()"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \"\\n With this bar: \""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + barTwo.toString()"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \"in the song \""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + song.getName()"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \".\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return wrap(result);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Returns a String formatted for display that indicates that"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * a duke.components.AddOverlay object has been created"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * by the group command."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param list array of song list"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param index this is the index of the bar being copied"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param song the song that is being copied to"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public String formatAddOverlay(ArrayList\u003cSong\u003e list, int index,Song song) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        String result \u003d \"Got it. I\u0027ve added this overlay:\\n  \""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                + \"bar\" + new Integer(index).toString() + \"\\nto \""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                + song.getName();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        return wrap(result);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Returns a String formatted for display that indicates that"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * a duke.components.Group object has been created"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * by the group command."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param start starting bar number for the verse"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param end ending bar number for the verse"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param name name of the verse"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String formatGroupBar(int start, int end, String name) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String result \u003d \"Got it. Successfully grouped bars \""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                + start"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                + \" to \""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                + end"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                + \" as \""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                + name;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Returns a String formatted for display that indicates that"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * some bars or verse has been copied and pasted successfully to the"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * current track."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param verseName name of the verse copied and pasted"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param copyStartNum starting bar number for to be copied (inclusive)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param copyEndNum ending bar number to stop copying (exclusive)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param pasteStartNum bar number on the track where the copied content is meant to be pasted"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param mode the mode number specifies the type of copy invoked."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *             0: only the verse name is specified. If it is a valid verse name"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *             it will be added to the end of the current track."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *             1: Copies the bar from a starting index to an ending index and adds"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *             these bars to the end of the current track."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *             2: Pastes a verse at the specified starting index in the song"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *             3: Copies the bars between a starting index (inclusive) and ending index"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *             (exclusive) and inserted it into a specified index. If there are bars at this"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *             index, they will be pushed back by the number of bars copied to make space for"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *             the copied bars."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     */"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String formatCopy(String verseName,"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                             Integer copyStartNum,"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                             Integer copyEndNum,"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                             Integer pasteStartNum,"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                             int mode) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String result;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if (mode \u003d\u003d 0) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            result \u003d \"Got it. Successfully copied \" + verseName + \" to end of current track\";"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if (mode \u003d\u003d 1) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            result \u003d \"Got it. Successfully copied bars from \""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    + copyStartNum"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    + \" and \""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    + copyEndNum"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    + \" to the end of the track\";"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if (mode \u003d\u003d 2) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            result \u003d \"Got it. Successfully copied verse \""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    + verseName"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    + \" to \""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    + pasteStartNum;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if (mode \u003d\u003d 3) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            result \u003d \"Got it. Successfully copied bars from \""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    + copyStartNum"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    + \" to \""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    + copyEndNum"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    + \" and inserted them to \""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    + pasteStartNum;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            result \u003d \"Nothing is done\";"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    //@@author SalonetheGreat"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * Returns a message indicating that user cannot undo because it is the first version."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @return the formatted string to be displayed."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    public String formatUndo() {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        String output \u003d \"This is the first version.\\nYou cannot undo anymore.\";"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        return wrap(output);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    //@@author SalonetheGreat"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * Returns a string indicating that the undo command has been successfully executed."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @param currentVersionIndex current version number, which is used to identify how many times can the user undo"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @return a formatted string consisting of"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     *         1. undo successfully"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     *         2. number of undo times left"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    public String formatUndo(int currentVersionIndex) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        if (currentVersionIndex \u003d\u003d 0) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            output \u003d \"Undo successfully! You cannot undo anymore.\";"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        } else if (currentVersionIndex \u003d\u003d 1) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            output \u003d \"Undo successfully! You can undo for 1 more time.\";"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            output \u003d String.format(\"Undo successfully! You can undo for %d more times\", currentVersionIndex).toString();"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        return wrap(output);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    //@@author SalonetheGreat"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * Returns a message indicating that user cannot redo because it is the latest version."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @return the formatted string to be displayed."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    public String formatRedo() {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        String output \u003d \"This is the latest version.\\nYou cannot redo anymore.\\n\\n\";"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        return wrap(output);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    //@@author SalonetheGreat"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * Returns a string indicating that the redo command has been successfully executed."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @param numOfRedoLeft number of redo times left, which is used to identify how many times can the user redo"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @return a formatted string consisting of"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     *         1. redo successfully"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     *         2. number of redo times left"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    public String formatRedo(int numOfRedoLeft) {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        if (numOfRedoLeft \u003d\u003d 0) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            output \u003d \"Redo successfully! You cannot redo anymore.\";"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        } else if (numOfRedoLeft \u003d\u003d 1) {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            output \u003d \"Redo successfully! You can redo for 1 more time.\";"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            output \u003d String.format(\"Redo successfully! You can redo for %d more times.\", numOfRedoLeft).toString();"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        return wrap(output);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an output String that provides the user with feedback regarding the creation of a new Metronome."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param duration the duration of the metronome (in number of bars)"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param tempo the tempo of the metronome"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param timeSig the time signature of the metronome"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String formatMetronome(int duration, int tempo, int[] timeSig) {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        result.append(\"Metronome initialized with a duration of \")"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                .append(duration)"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                .append(\" bars, a tempo of \")"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                .append(tempo)"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                .append(\" and a \")"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                .append(timeSig[0])"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                .append(\"/\")"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                .append(timeSig[1])"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                .append(\" time signature.\");"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return wrap(result.toString());"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 34,
      "rohan-av": 178,
      "Samuel787": 71,
      "jwyf": 152,
      "SalonetheGreat": 71
    }
  },
  {
    "path": "src/main/java/ducats/commands/AddBarCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Bar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Song;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "//@@author jwyf"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": " * A class representing the command to add a new bar of notes at the end of the current song."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class AddBarCommand extends Command\u003cSongList\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private int songIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Constructor for the command to add a new bar to the current song."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public AddBarCommand(String message) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.songIndex \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Modifies a song in the song list by adding a new bar at the end of the song and"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * returns the messages intended to be displayed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param songList the duke.components.SongList object that contains the song list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param ui the Ui object responsible for the reading of user input and the display of"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *           the responses"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param storage the Storage object used to read and manipulate the .txt file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws DucatsException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) throws DucatsException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        int barNo;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (message.length() \u003c 7 || !message.substring(0, 7).equals(\"addbar \")) { //exception if not fully spelt"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DucatsException(message);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            songIndex \u003d songList.getActiveIndex();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Song activeSong \u003d songList.getSongIndex(songIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            barNo \u003d activeSong.getNumBars() + 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Bar newBar \u003d new Bar(barNo, message.substring(7));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            activeSong.addBar(newBar);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            storage.updateFile(songList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            ArrayList\u003cSong\u003e temp \u003d songList.getSongList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return ui.formatAddBar(temp, newBar, activeSong);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DucatsException(message, \"addbar\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer corresponding to the duration, tempo and time signature if the command starts a metronome."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Else, returns an array containing -1."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the integer array corresponding to the parameters of the Metronome class"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int[] startMetronome() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new int[]{-1, -1, -1, -1};"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 1,
      "rohan-av": 20,
      "jwyf": 63
    }
  },
  {
    "path": "src/main/java/ducats/commands/AddOverlayCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Bar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Chord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Song;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rishi12438"
        },
        "content": " * A class representing the command to add a new bar of notes to the current song."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rishi12438"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "public class AddOverlayCommand extends Command\u003cSongList\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    private int songIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public String message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Constructor for the command to add a new bar to the current song."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public AddOverlayCommand(String message) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Combines two chords."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param chordBeCopiedFrom the chord that is being copied from"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param chordCopiedTo the chord that is being copied to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public void combineChord(Chord chordBeCopiedFrom, Chord chordCopiedTo) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //ArrayList\u003cNote\u003enoteArrayCopyFrom  \u003d chordBeCopiedFrom.getNotes();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //Iterator\u003cNote\u003e iterator1 \u003d noteArrayCopyFrom.iterator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //while()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        chordCopiedTo.getNotes().addAll(chordBeCopiedFrom.getNotes());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Combines two bars."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param barToBeCopied the bar that is being copied from"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param barToCopyTo the bar that is being copied to"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public void combineBar(Bar barToBeCopied, Bar barToCopyTo) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //we need copy the chords from bar1 into bar 2"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        ArrayList\u003cChord\u003e chordBeCopiedFrom \u003d barToBeCopied.getChords();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        ArrayList\u003cChord\u003e chordCopiedTo \u003d barToCopyTo.getChords();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //System.out.println(\"here i after the chord from bar\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Iterator\u003cChord\u003e iterator1 \u003d chordBeCopiedFrom.iterator();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        while (iterator1.hasNext()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            Chord chordAdd \u003d iterator1.next();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            combineChord(chordAdd,chordCopiedTo.get(i));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            i +\u003d 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Modifies the song in the song list and returns the messages intended to be displayed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param songList the duke.components.SongList object that contains the song list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param ui the Ui object responsible for the reading of user input and the display of"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *           the responses"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param storage the Storage object used to read and manipulate the .txt file"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the string to be displayed in ducats.Ducats"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @throws DucatsException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) throws DucatsException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Note note1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Note note2;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Note note3;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Note note4;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        int barNo;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        if (message.length() \u003c 8 || !message.substring(0, 8).equals(\"overlay \")) { //exception if not fully spelt"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DucatsException(message);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            //the command consists of overlay 10 repeat"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            String[] sections \u003d message.substring(8).split(\" \");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            //this refers to the bar that needs to be added:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            int barIndexToAdd \u003d Integer.parseInt(sections[0]) - 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            songIndex \u003d songList.getActiveIndex();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            //System.out.println(barIndexToAdd);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            if (songList.getSize() \u003e songIndex) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                Song song \u003d songList.getSongIndex(songIndex);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //System.out.println(\"adjjdsa1213\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                ArrayList\u003cBar\u003e barList \u003d song.getBars();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                int barIndexToBeCopiedTo \u003d Integer.parseInt(sections[1]) - 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                ///System.out.print(\"hellqellwe\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //System.out.println(barIndexToBeCopiedTo);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                Bar overlayingBarToBeCopied \u003d barList.get(barIndexToAdd);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                Bar overlayingBar \u003d overlayingBarToBeCopied.copy(overlayingBarToBeCopied);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //Bar overlayingBar \u003d barList.get(barIndexToAdd);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //System.out.println(\"adjjdsa\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                ArrayList\u003cChord\u003e chordsToAdd \u003d overlayingBar.getChords();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //System.out.print(\"sections length \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //System.out.println(sections.length);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                if (sections.length \u003e 2 \u0026\u0026 sections[2].equals(\"repeat\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    Iterator\u003cBar\u003e iterator1 \u003d barList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    int i \u003d 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    while (iterator1.hasNext()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        Bar temp \u003d iterator1.next();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        if (i \u003e\u003d barIndexToBeCopiedTo) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                            combineBar(overlayingBar, temp);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        i +\u003d 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    //System.out.println(\"no repeat found\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    Bar temp \u003d barList.get(barIndexToBeCopiedTo);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    ArrayList\u003cChord\u003e tempChordList \u003d temp.getChords();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    //System.out.println(\"here i after the chord from bar\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    //Iterator\u003cChord\u003e iterator1 \u003d tempChordList.iterator();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    combineBar(overlayingBar,temp);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    //System.out.println(\"bar temp gotten\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                //add the bar to the song in the songlist"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                storage.updateFile(songList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                return ui.formatAddOverlay(songList.getSongList(), barIndexToAdd,song);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //System.out.println(\"no such index\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //System.out.println(songList.getSize());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                throw new DucatsException(message, \"no_index\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            //System.out.println(e);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DucatsException(message, \"no_index\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer corresponding to the duration, tempo and time signature if the command starts a metronome."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Else, returns an array containing -1."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the integer array corresponding to the parameters of the Metronome class"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int[] startMetronome() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new int[]{-1, -1, -1, -1};"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 133,
      "rohan-av": 31,
      "Samuel787": 1,
      "SalonetheGreat": 1
    }
  },
  {
    "path": "src/main/java/ducats/commands/AsciiCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Bar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Chord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Group;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Pitch;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Song;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.VerseList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class AsciiCommand extends Command\u003cSongList\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    //@@author Samuel787"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Song song;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Constructor for the command to print out a bar, group or song in ASCII."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public AsciiCommand(String message) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.message \u003d message.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Prints out a bar, group or song in ASCII to represent the song sheet for that component."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param songList the duke.TaskList or duke.components.SongList object that contains the task list in use"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param ui the Ui object responsible for the reading of user input and the display of"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *           the responses"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param storage the Storage object used to read and manipulate the .txt file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @return the string corresponding to the ASCII song sheet as requested by user"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @throws DucatsException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) throws DucatsException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if (message.length() \u003c 6 || !message.substring(0, 6).equals(\"ascii \")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DucatsException(message);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            message \u003d message.substring(6).trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            String command \u003d message.split(\" \", 2)[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if (command.equals(\"bar\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                int barNum \u003d Integer.parseInt(message.split(\" \", 2)[1].trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                //get the current song out"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                Song song \u003d new Song(\"Test song\", \"C-Major\", 120);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                //bar index for user is assumed to start from 1"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                if (barNum \u003e song.getNumBars() || barNum \u003c 1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    throw new DucatsException(message, \"AsciiCommand\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                Bar bar \u003d song.getBars().get(barNum - 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                result \u003d printBarAscii(bar);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            } else if (command.equals(\"group\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                String groupName \u003d message.split(\" \", 2)[1].trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                //Get the verseList from storage"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                VerseList verseList \u003d new VerseList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                Group group \u003d verseList.find(groupName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                if (group \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    throw new DucatsException(message, \"AsciiCommand\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    result \u003d printGroupAscii(group);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            } else if (command.equals(\"song\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                String songName \u003d message.split(\" \", 2)[1].trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                //Get the song from the storage"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                //Song song \u003d new Song(\"Test song\", \"C-Major\", 120);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                ArrayList\u003cSong\u003e songs \u003d songList.findSong(songName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                Song song;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                if (songs.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    song \u003d songs.get(0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    //song does not exist or query returned more than 1 result"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    throw new DucatsException(message, \"AsciiCommand\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                //if song exists"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                result \u003d printSongAscii(song);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                //wrong command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                throw new DucatsException(message, \"AsciiCommand\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DucatsException(message, \"AsciiCommand\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private static final String MUSIC_8 \u003d \"*\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private static final String MUSIC_6 \u003d \"$.\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private static final String MUSIC_4 \u003d \"$\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private static final String MUSIC_3 \u003d \"@.\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private static final String MUSIC_2 \u003d \"@\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private static final String MUSIC_1 \u003d \"!\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private static final String REST_8 \u003d \"#\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private static final String REST_6 \u003d \"%.\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private static final String REST_4 \u003d \"%\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private static final String REST_3 \u003d \"^.\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private static final String REST_2 \u003d \"^\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private static final String REST_1 \u003d \"\u0026\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private static final String CONT \u003d \"-\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Prints out the selected bar in ASCII format to represnt the song sheet."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param bar the bar that user wants to print in ASCII"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public static String printBarAscii(Bar bar) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        Song tempSong \u003d new Song(\"Test Song\", \"C-Major\", 120);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        tempSong.addBar(bar);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return printSongAscii(tempSong);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Prints out the selected verse in ASCII format to represent the song sheet."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param group the verse that user wants to print in ASCII"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public static String printGroupAscii(Group group) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        Song tempSong \u003d new Song(\"Test Song\", \"C-Major\", 120);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (int i \u003d 0; i \u003c group.size(); i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            tempSong.addBar(group.get(i));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return printSongAscii(tempSong);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Prints out the selected song in ASCII format to represent the song sheet."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param song the song that user wants to print in ASCII"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public static String printSongAscii(Song song) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e songAscii \u003d parseSongAscii(getSongAscii(song));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        StringBuilder stringResult \u003d new StringBuilder();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (int i \u003d 0; i \u003c 15; i++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            for (int j \u003d 0; j \u003c songAscii.get(i).size(); j++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                if (j \u003e 8 \u0026\u0026 (j - 1) % 8 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    if ((i \u003e 2 \u0026\u0026 i \u003c 12)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        //System.out.print(\"|\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        stringResult.append(\"|\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        //System.out.print(\" \");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        stringResult.append(\" \");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                //System.out.print(songAscii.get(i).get(j));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                stringResult.append(songAscii.get(i).get(j));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            //System.out.println();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            stringResult.append(\"\\n\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return stringResult.toString();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private static ArrayList\u003cArrayList\u003cString\u003e\u003e getSongAscii(Song song) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e songAscii \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (int i \u003d 0; i \u003c 15; i++) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            songAscii.add(i, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        songAscii.get(0).add(\"UC: \");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        songAscii.get(1).add(\"UB: \");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        songAscii.get(2).add(\"UA: \");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        songAscii.get(3).add(\"UG: \");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        songAscii.get(4).add(\"UF: \");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        songAscii.get(5).add(\"UE: \");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        songAscii.get(6).add(\"UD: \");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        songAscii.get(7).add(\"MC: \");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        songAscii.get(8).add(\"LB: \");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        songAscii.get(9).add(\"LA: \");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        songAscii.get(10).add(\"LG: \");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        songAscii.get(11).add(\"LF: \");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        songAscii.get(12).add(\"LE: \");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        songAscii.get(13).add(\"LD: \");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        songAscii.get(14).add(\"LC: \");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cBar\u003e bars \u003d song.getBars();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (Bar bar : bars) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ArrayList\u003cArrayList\u003cString\u003e\u003e barAscii \u003d getBarAscii(bar);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            for (int i \u003d 0; i \u003c 15; i++) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                for (int j \u003d 0; j \u003c barAscii.get(i).size(); j++) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    songAscii.get(i).add(barAscii.get(i).get(j));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return songAscii;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private static ArrayList\u003cArrayList\u003cString\u003e\u003e parseSongAscii(ArrayList\u003cArrayList\u003cString\u003e\u003e rawSongAscii) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e resultAscii \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (ArrayList\u003cString\u003e arr: rawSongAscii) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            resultAscii.add(new ArrayList\u003c\u003e(arr));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (int i \u003d 0; i \u003c 15; i++) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            int length \u003d rawSongAscii.get(i).size();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if (i \u003d\u003d 0 || i \u003d\u003d 12) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                for (int j \u003d 1; j \u003c length; j++) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    if (rawSongAscii.get(i).get(j).equals(\"@\")) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        int startPos \u003d j;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        int counter \u003d 1;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        j++;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        while (j \u003c length \u0026\u0026 rawSongAscii.get(i).get(j).equals(\"p\")) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(j, \" \");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            counter++;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            j++;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        String symbol \u003d getSymbol(false, counter);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        if (counter \u003d\u003d 3 || counter \u003d\u003d 6) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            String part1 \u003d Character.toString(symbol.charAt(0));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            String part2 \u003d Character.toString(symbol.charAt(1));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(startPos, part1);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(startPos + 1, part2);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(startPos, symbol);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        if (startPos !\u003d 1 \u0026\u0026 (startPos - 1) % 8 !\u003d 0) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i + 1).set(startPos - 1, \"-\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        resultAscii.get(i + 1).set(startPos, \"-\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        if (startPos !\u003d length - 1 \u0026\u0026 (startPos + 1) % 8 !\u003d 1) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i + 1).set(startPos + 1, \"-\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        j--;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            } else if (i \u003d\u003d 1 || i \u003d\u003d 13) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                for (int j \u003d 1; j \u003c length; j++) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    if (rawSongAscii.get(i).get(j).equals(\"@\")) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        int startPos \u003d j;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        int counter \u003d 1;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        j++;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        while (j \u003c length \u0026\u0026 rawSongAscii.get(i).get(j).equals(\"p\")) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            if (resultAscii.get(i).get(j).equals(\"p\")) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                                resultAscii.get(i).set(j, \" \");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            counter++;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            j++;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        String symbol \u003d getSymbol(false, counter);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        if (counter \u003d\u003d 3 || counter \u003d\u003d 6) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            String part1 \u003d Character.toString(symbol.charAt(0));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            String part2 \u003d Character.toString(symbol.charAt(1));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(startPos, part1);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(startPos + 1, part2);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(startPos, symbol);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        if (startPos % 8 !\u003d 1 \u0026\u0026 resultAscii.get(i).get(startPos - 1).equals(\" \")) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(startPos - 1, \"-\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        if (startPos !\u003d length - 1 \u0026\u0026 resultAscii.get(i).get(startPos + 1).equals(\" \")) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(startPos + 1, \"-\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        j--;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            } else if (i \u003d\u003d 7) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                for (int j \u003d 1; j \u003c length; j++) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    if (rawSongAscii.get(i).get(j).equals(\"@\")) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        int startPos \u003d j;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        int counter \u003d 1;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        j++;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        while (j \u003c length \u0026\u0026 rawSongAscii.get(i).get(j).equals(\"p\")) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(j, \"-\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            counter++;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            j++;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        String symbol \u003d getSymbol(false, counter);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        if (counter \u003d\u003d 3 || counter \u003d\u003d 6) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            String part1 \u003d Character.toString(symbol.charAt(0));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            String part2 \u003d Character.toString(symbol.charAt(1));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(startPos, part1);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(startPos + 1, part2);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(startPos, symbol);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        j--;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    } else if (rawSongAscii.get(i).get(j).equals(\"R\")) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        int startPos \u003d j;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        int counter \u003d 1;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        j++;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        while (j \u003c length \u0026\u0026 rawSongAscii.get(i).get(j).equals(\"X\")) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(j, \"-\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            counter++;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            j++;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        String symbol \u003d getSymbol(true, counter);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        if (counter \u003d\u003d 3 || counter \u003d\u003d 6) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            String part1 \u003d Character.toString(symbol.charAt(0));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            String part2 \u003d Character.toString(symbol.charAt(1));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(startPos, part1);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(startPos + 1, part2);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(startPos, symbol);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        j--;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            } else if (i \u003d\u003d 3 || i \u003d\u003d 5 || i \u003d\u003d 9 || i \u003d\u003d 11) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                for (int j \u003d 1; j \u003c length; j++) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    if (rawSongAscii.get(i).get(j).equals(\"@\")) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        int startPos \u003d j;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        int counter \u003d 1;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        j++;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        while (j \u003c length \u0026\u0026 rawSongAscii.get(i).get(j).equals(\"p\")) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(j, \"-\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            counter++;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            j++;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        String symbol \u003d getSymbol(false, counter);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        if (counter \u003d\u003d 3 || counter \u003d\u003d 6) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            String part1 \u003d Character.toString(symbol.charAt(0));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            String part2 \u003d Character.toString(symbol.charAt(1));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(startPos, part1);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(startPos + 1, part2);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(startPos, symbol);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        j--;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            } else { //i \u003d\u003d 2, 4, 6, 8, 10, 14"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                for (int j \u003d 1; j \u003c length; j++) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    if (rawSongAscii.get(i).get(j).equals(\"@\")) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        int startPos \u003d j;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        int counter \u003d 1;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        j++;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        while (j \u003c length \u0026\u0026 rawSongAscii.get(i).get(j).equals(\"p\")) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(j, \" \");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            counter++;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            j++;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        String symbol \u003d getSymbol(false, counter);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        if (counter \u003d\u003d 3 || counter \u003d\u003d 6) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            String part1 \u003d Character.toString(symbol.charAt(0));"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            String part2 \u003d Character.toString(symbol.charAt(1));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(startPos, part1);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(startPos + 1, part2);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            resultAscii.get(i).set(startPos, symbol);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        j--;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return resultAscii;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private static ArrayList\u003cArrayList\u003cString\u003e\u003e getBarAscii(Bar bar) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cChord\u003e chords \u003d bar.getChords();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //ArrayList\u003cString\u003e barAscii \u003d new ArrayList\u003c\u003e(15);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e barAscii \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (int i \u003d 0; i \u003c 15; i++) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            barAscii.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if (i \u003d\u003d 3 || i \u003d\u003d 5 || i \u003d\u003d 7 || i \u003d\u003d 9 || i \u003d\u003d 11) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                for (int j \u003d 0; j \u003c 8; j++) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    barAscii.get(i).add(j, CONT);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                for (int j \u003d 0; j \u003c 8; j++) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    barAscii.get(i).add(j, \" \");"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (int i \u003d 0; i \u003c chords.size(); i++) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ArrayList\u003cNote\u003e notes \u003d chords.get(i).getNotes();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            for (Note note : notes) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                Pitch pitch \u003d note.getPitch();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                if (note.isStart()) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    switch (pitch) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case UPPER_C:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(0).set(i, \"@\");"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case UPPER_B:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(1).set(i, \"@\");"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case UPPER_A:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(2).set(i, \"@\");"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case UPPER_G:"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(3).set(i, \"@\");"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case UPPER_F:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(4).set(i, \"@\");"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case UPPER_E:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(5).set(i, \"@\");"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case UPPER_D:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(6).set(i, \"@\");"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case MIDDLE_C:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(7).set(i, \"@\");"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case LOWER_B:"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(8).set(i, \"@\");"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case LOWER_A:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(9).set(i, \"@\");"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case LOWER_G:"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(10).set(i, \"@\");"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case LOWER_F:"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(11).set(i, \"@\");"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case LOWER_E:"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(12).set(i, \"@\");"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case LOWER_D:"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(13).set(i, \"@\");"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case LOWER_C:"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(14).set(i, \"@\");"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case REST:"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        for (int k \u003d 0; k \u003c 15; k++) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            if (k \u003d\u003d 7) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                                barAscii.get(7).set(i, \"R\");"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            } else if (k \u003d\u003d 3 || k \u003d\u003d 5 || k \u003d\u003d 9 || k \u003d\u003d 11) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                                barAscii.get(k).set(i, \"-\");"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                                barAscii.get(k).set(i, \" \");"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    switch (pitch) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case UPPER_C:"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(0).set(i, \"p\");"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case UPPER_B:"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(1).set(i, \"p\");"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case UPPER_A:"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(2).set(i, \"p\");"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case UPPER_G:"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(3).set(i, \"p\");"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case UPPER_F:"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(4).set(i, \"p\");"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case UPPER_E:"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(5).set(i, \"p\");"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case UPPER_D:"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(6).set(i, \"p\");"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case MIDDLE_C:"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(7).set(i, \"p\");"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case LOWER_B:"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(8).set(i, \"p\");"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case LOWER_A:"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(9).set(i, \"p\");"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case LOWER_G:"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(10).set(i, \"p\");"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case LOWER_F:"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(11).set(i, \"p\");"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case LOWER_E:"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(12).set(i, \"p\");"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case LOWER_D:"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(13).set(i, \"p\");"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case LOWER_C:"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        barAscii.get(14).set(i, \"p\");"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    case REST:"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        for (int k \u003d 0; k \u003c 15; k++) {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            if (k \u003d\u003d 7) {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                                barAscii.get(7).set(i, \"X\");"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            } else if (k \u003d\u003d 3 || k \u003d\u003d 5 || k \u003d\u003d 9 || k \u003d\u003d 11) {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                                barAscii.get(k).set(i, \"-\");"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                                barAscii.get(k).set(i, \" \");"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return barAscii;"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private static String getSymbol(boolean isRest, int duration) {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if (isRest) {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            switch (duration) {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                return REST_1;"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                return REST_2;"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                return REST_3;"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                return REST_4;"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case 6:"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                return REST_6;"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case 8:"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                return REST_8;"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                return \"\";"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            switch (duration) {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                return MUSIC_1;"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                return MUSIC_2;"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                return MUSIC_3;"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                return MUSIC_4;"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case 6:"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                return MUSIC_6;"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case 8:"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                return MUSIC_8;"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                return \"\";"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer corresponding to the duration, tempo and time signature if the command starts a metronome."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Else, returns an array containing -1."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the integer array corresponding to the parameters of the Metronome class"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int[] startMetronome() {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new int[]{-1, -1, -1, -1};"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 24,
      "Samuel787": 540
    }
  },
  {
    "path": "src/main/java/ducats/commands/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * A class representing the command to terminate and exit ducats.Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class ByeCommand extends Command\u003cSongList\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private boolean exit \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Executes the command and terminates ducats.Duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param songList the ducats.components.SongList object that contains the task list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param ui the Ui object that determines the displayed output of ducats.Duke"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param storage the storage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the string to be displayed in ducats.Duke"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        exit \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return Ui.showByeMessage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * ducats.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer corresponding to the duration, tempo and time signature if the command starts a metronome."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Else, returns an array containing -1."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the integer array corresponding to the parameters of the Metronome class"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int[] startMetronome() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new int[]{-1, -1, -1, -1};"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 52
    }
  },
  {
    "path": "src/main/java/ducats/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.UndoRedoStack;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * An abstract class used to represent a command interpreted from an input message. Extended by"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * \u003cul\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " *     \u003cli\u003eAddCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " *     \u003cli\u003eListCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " *     \u003cli\u003eDoneCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " *     \u003cli\u003eDeleteCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " *     \u003cli\u003eFindCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " *     \u003cli\u003eByeCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": " *     \u003cli\u003eNewCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": " *     \u003cli\u003eHelpCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": " *     \u003cli\u003eViewCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": " *     \u003cli\u003eAddBarCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * \u003c/ul\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public abstract class Command\u003cT\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    String message;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Executes the command by performing the necessary changes to the task list and the .txt"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * file used as persistent storage, and returns a formatted String to be displayed by the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * command line interface / GUI."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param object the ducats.TaskList or ducats.components.SongList object that contains the task list in use"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param ui the Ui object responsible for the reading of user input and the display of"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *           the responses"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param storage the Storage object used to read and manipulate the .txt file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @throws DucatsException in the case of either parsing or IO errors"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public abstract String execute(T object, Ui ui, Storage storage) throws DucatsException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String execute(SongList songs, Ui ui, Storage storage, UndoRedoStack undoRedoStack) throws DucatsException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * ducats.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer corresponding to the duration, tempo and time signature if the command starts a metronome."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Else, returns an array containing -1."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the integer array corresponding to the parameters of the Metronome class"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public abstract int[] startMetronome();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 54,
      "jwyf": 5,
      "SalonetheGreat": 3
    }
  },
  {
    "path": "src/main/java/ducats/commands/CommandSyntaxMessage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "//@@author SalonetheGreat"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": " * CommandSyntaxMessage is a class that cannot be instantiated."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": " * To add a new command format, just create a \u003ccode\u003eString\u003c/code\u003e which indicates the command format,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": " * and add the command name and format into nameToSyntax HashMap."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "public abstract class CommandSyntaxMessage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private static String listSyntax \u003d \"list\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private static String newSyntax \u003d \"new s/SONG_NAME [key:s/KEY](C) [time:n/TIME_SIG](4/4) [tempo:n/TEMPO](120)\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private static String openSyntax \u003d \"open s/SONG_NAME\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private static String viewSyntax \u003d \"view [n/BAR_NO](last bar - 1)\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private static String addSyntax \u003d \"add s/NOTE\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private static String addbarSyntax \u003d \"addbar s/NOTES [bar:n/BAR_NO_TO_ADD_AFTER](last bar)\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private static String asciiSyntax \u003d \"ascii song song_name\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    // TODO: add overlay syntax"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private static String overlaySyntax \u003d \"To be implemented in version 2.0\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private static String copySyntax \u003d \"copy start_num end_num\\nFormat: copy start_num end_num insert_num\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private static String groupSyntax \u003d \"group start_num end_num verse_name\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private static String list_groupSyntax \u003d \"list_group\\nFormat: list_group -starting_substring\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private static String playSyntax \u003d \"play [n/STARTING_BAR_NO n/ENDING_BAR_NO]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            + \"Format: play s/SONG_NAME  (when no song has been opened)\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private static String metronomeSyntax \u003d \"metronome n/DURATION_IN_NO_OF_BARS n/TEMP0 s/TIME_SIG\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    // TODO: add close, clear, delete, exit syntax"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private static String closeSyntax \u003d \"To be implemented in version 2.0\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private static String clearSyntax \u003d \"To be implemented in version 2.0\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private static String deleteSyntax \u003d \"To be implemented in version 2.0\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private static String exitSyntax \u003d \"To be implemented in version 2.0\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private static String startHelpMessage \u003d \"Here are the commands in Ducats.\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private static String endInstructionMessage \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            \"Alternatively, you can use help [command] to see format for specific command.\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private static Map\u003cString, String\u003e nameToSyntax \u003d new HashMap\u003cString, String\u003e() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            put(\"list\", listSyntax);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            put(\"new\", newSyntax);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            put(\"open\", openSyntax);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            put(\"view\", viewSyntax);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            put(\"add\", addSyntax);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            put(\"addbar\", addbarSyntax);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            put(\"overlay\", overlaySyntax);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            put(\"copy\", copySyntax);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            put(\"group\", groupSyntax);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            put(\"ascii\", asciiSyntax);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            put(\"list_group\", list_groupSyntax);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            put(\"play\", playSyntax);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            put(\"metronome\", metronomeSyntax);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            put(\"close\", closeSyntax);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            put(\"clear\", clearSyntax);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            put(\"delete\", deleteSyntax);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            put(\"exit\", exitSyntax);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    };"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * The function is to get ALL the commands including their name and format in a single String."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @return a string with all the formats"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    public static String getMessage() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        output.append(startHelpMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        for (Map.Entry\u003cString, String\u003e entry : nameToSyntax.entrySet()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            output.append((++i) + \".\" + entry.getKey() + \"\\nFormat: \" + entry.getValue() + \"\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        output.append(endInstructionMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * The getMessage is to get the command and format of a specific command."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @param helpMessage the command to show"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @return a string with name and format of the the input command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @throws DucatsException when you cannot find the command, throw other DukeException"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    public static String getMessage(String helpMessage) throws DucatsException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        if (nameToSyntax.containsKey(helpMessage)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            output.append(helpMessage + \"\\nFormat: \" + nameToSyntax.get(helpMessage));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            return output.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            throw new DucatsException(\"\", \"Other\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 2,
      "SalonetheGreat": 90
    }
  },
  {
    "path": "src/main/java/ducats/commands/CopyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Bar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Group;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Song;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " * A class representing the command to copy bars or verses and paste them within the same track."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class CopyCommand extends Command\u003cSongList\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    //@@author Samuel787"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Song song; //current working song"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private SongList songList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Constructor for the command to copy and paste bars or verse."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param message the input message that resulted in the creation of the ducats.Commands.Command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public CopyCommand(String message) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.message \u003d message.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Copy bars between a certain range and paste it between a certain range"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * in song creator."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param songList the ducats.TaskList or ducats.components.SongList object that contains the task list in use"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param ui       the Ui object responsible for the reading of user input and the display of"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *                 the responses"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param storage  the Storage object used to read and manipulate the .txt file"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @return the string to be displayed in ducats.Duke"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @throws DucatsException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) throws DucatsException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //copy 2 4 6"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //copy 2 4"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //copy \u003cversename\u003e 6"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //copy \u003cversename\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.songList \u003d songList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if (message.length() \u003c 5 || !message.substring(0, 4).equals(\"copy\") || songList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            //exception if not fully spelt"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DucatsException(message);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        song \u003d songList.getSongIndex(songList.getActiveIndex());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            message \u003d message.substring(5).trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            String[] sections \u003d message.split(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if (sections.length \u003c 1 || sections.length \u003e 3) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                throw new DucatsException(message, \"copy\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            //trimmer"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            for (int i \u003d 0; i \u003c sections.length; i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                sections[i] \u003d sections[i].trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if (sections.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                //copy the verse to the end of the song list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                String verseName \u003d sections[0];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                copyVerseToEnd(verseName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                return ui.formatCopy(verseName, null, null, null, 0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            } else if (sections.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    //copy the bars between the starting num and ending num to the end of the song"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    int startNum \u003d Integer.parseInt(sections[0]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    int endNum \u003d Integer.parseInt(sections[1]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    copyBarsToEnd(startNum, endNum);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    return ui.formatCopy(null, startNum, endNum, null, 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    //copy the verse and insert it between the numbers stated"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    String verseName \u003d sections[0].trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    int startNum \u003d Integer.parseInt(sections[1]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    insertVerse(verseName, startNum);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    return ui.formatCopy(verseName, null, null, startNum, 2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            } else if (sections.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                //copy the bars between the a range into a new range"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                int copyStartNum \u003d Integer.parseInt(sections[0]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                int copyEndNum \u003d Integer.parseInt(sections[1]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                int pasteStartNum \u003d Integer.parseInt(sections[2]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                insertCopiedBars(copyStartNum, copyEndNum, pasteStartNum);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                return ui.formatCopy(null, copyStartNum, copyEndNum, pasteStartNum, 3);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                throw new DucatsException(message, \"copy\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DucatsException(message, \"copy\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * ducats.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Inserts a verse to the end of the current song."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Usage: copy verse_name"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param name name of the verse to be added to the end of the current song"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @throws DucatsException if the verse doesn\u0027t exist"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void copyVerseToEnd(String name) throws DucatsException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cGroup\u003e groupList \u003d song.getGroups();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        Group copyGroup \u003d null;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (Group group : groupList) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if (group.getName().equals(name)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                copyGroup \u003d group;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if (copyGroup \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DucatsException(\"\", \"copy\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (int i \u003d 0; i \u003c copyGroup.size(); i++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            song.addBar(copyGroup.get(i));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //add the bar to the song in the songlist"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        storage.updateFile(songList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Inserts a verse into a particular index of the song."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * For the user, the index of the song starts from 1."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param name name of the verse to be inserted into the song"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param i    index of the song into which the verse is to be inserted"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @throws DucatsException if verse doesn\u0027t exist or if the index to insert is out of range"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void insertVerse(String name, int i) throws DucatsException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if (i \u003c 1 || i \u003e song.getNumBars()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DucatsException(\"\", \"copy\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cGroup\u003e groupList \u003d song.getGroups();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        Group copyGroup \u003d null;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (Group group : groupList) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if (group.getName().equals(name)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                copyGroup \u003d group;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if (copyGroup \u003d\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DucatsException(\"\", \"copy\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cBar\u003e songBars \u003d song.getBars();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cBar\u003e newSongBars \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (int j \u003d 0; j \u003c i - 1; j++) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            newSongBars.add(songBars.get(j));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cBar\u003e tempBars \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (int j \u003d i - 1; j \u003c songBars.size(); j++) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            tempBars.add(songBars.get(j));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (int j \u003d 0; j \u003c copyGroup.size(); j++) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            newSongBars.add(copyGroup.get(j));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (int j \u003d 0; j \u003c tempBars.size(); j++) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            newSongBars.add(tempBars.get(j));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        song.updateBars(newSongBars);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //add the bar to the song in the songlist"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        storage.updateFile(songList);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Copies some bars in the user defined range to the end of the current song."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param copyStart index of the song to start copying from. Index for the user starts from 1"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param copyEnd   index of the song to end copying. Index for the user starts at 1."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @throws DucatsException if the index to start copying from is more than the index to end"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *                       copying from or if the index specified is out of range of the song."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void copyBarsToEnd(int copyStart, int copyEnd) throws DucatsException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        int songNumBars \u003d song.getNumBars();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if (copyStart \u003c 1 || copyEnd \u003c 1"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                || copyStart \u003e songNumBars || copyStart \u003e songNumBars"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                || copyEnd \u003c copyStart) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DucatsException(\"\", \"copy\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cBar\u003e copyBars \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cBar\u003e songBars \u003d song.getBars();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (int i \u003d copyStart - 1; i \u003c copyEnd; i++) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            copyBars.add(songBars.get(i));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (int i \u003d 0; i \u003c copyBars.size(); i++) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            song.addBar(copyBars.get(i));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        storage.updateFile(songList);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Copies some bars in the user defined range and inserts the copied bars into a user defined index."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * The bars following that index will be pushed forward to make space for the copied bars."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param copyStart  index of the song to start copying from. Index for the user starts from 1"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param copyEnd    index of the song to end copying. Index for the user starts at 1"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param pasteStart index of the song at which to paste the copied bars. Bars folowing this point will be"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *                   pushed forward to make space for the copied bars."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @throws DucatsException if the index to start copying from is more than the index to end copying from or"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *                       if the index specified is out of range of the song or if starting index to paste is out of"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *                       range of the current song"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void insertCopiedBars(int copyStart, int copyEnd, int pasteStart) throws DucatsException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        int songNumBars \u003d song.getNumBars();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if (copyStart \u003c 1 || copyEnd \u003c 1 || pasteStart \u003c 1"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                || copyStart \u003e songNumBars || pasteStart \u003e songNumBars"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                || copyEnd \u003c copyStart) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DucatsException(\"\", \"copy\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cBar\u003e copyBars \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cBar\u003e songBars \u003d song.getBars();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cBar\u003e tempBars \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cBar\u003e newSongBars \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (int i \u003d copyStart - 1; i \u003c copyEnd; i++) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            copyBars.add(songBars.get(i));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (int i \u003d pasteStart - 1; i \u003c songBars.size(); i++) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            tempBars.add(songBars.get(i));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (int i \u003d 0; i \u003c pasteStart - 1; i++) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            newSongBars.add(songBars.get(i));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (int i \u003d 0; i \u003c copyBars.size(); i++) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            newSongBars.add(copyBars.get(i));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (int i \u003d 0; i \u003c tempBars.size(); i++) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            newSongBars.add(tempBars.get(i));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        song.updateBars(newSongBars);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        storage.updateFile(songList);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer corresponding to the duration, tempo and time signature if the command starts a metronome."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Else, returns an array containing -1."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the integer array corresponding to the parameters of the Metronome class"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int[] startMetronome() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new int[]{-1, -1, -1, -1};"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 20,
      "Samuel787": 252,
      "SalonetheGreat": 1
    }
  },
  {
    "path": "src/main/java/ducats/commands/CopyObject.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rishi12438"
        },
        "content": " * An abstract class used to copy any object. Extended by"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rishi12438"
        },
        "content": " * \u003cul\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rishi12438"
        },
        "content": " *     \u003cli\u003eBar\u003c/li\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rishi12438"
        },
        "content": " * \u003c/ul\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rishi12438"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "public abstract class CopyObject\u003cT\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Modifies the song list and returns the messages intended to be displayed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param object the object that must be copied with type T."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public abstract T copy(T object) throws DucatsException, IOException,ClassNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 18,
      "rohan-av": 3
    }
  },
  {
    "path": "src/main/java/ducats/commands/DeleteBarCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Song;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "//@@author jwyf"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": " * A class that represents the command to delete an bar from a song."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class DeleteBarCommand extends Command\u003cSongList\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Constructor for the duke.Commands.Command created to delete a bar from a song"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws DucatsException if an exception occurs in the parsing of the message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public DeleteBarCommand(String message) throws DucatsException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Modifies a song in the song list by deleting an existing bar and"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * returns the messages intended to be displayed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param songList the duke.SongList object that contains the song list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param ui the Ui object that determines the displayed output of duke.Duke"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param storage the storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws DucatsException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) throws DucatsException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (songList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DucatsException(\"\", \"empty\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        int barIndex \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        int songIndex \u003d songList.getActiveIndex();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        Song activeSong \u003d songList.getSongIndex(songIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            barIndex \u003d Integer.parseInt(message.substring(14));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DucatsException(\"\",\"other\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (barIndex \u003e songList.getSongIndex(songList.getActiveIndex()).getBars().size() || barIndex \u003c 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DucatsException(\"\", \"index\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            activeSong.getBars().remove(barIndex - 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                storage.updateFile(songList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                throw new DucatsException(\"\",\"io\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return ui.formatDeleteBar(activeSong, barIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer corresponding to the duration, tempo and time signature if the command starts a metronome."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Else, returns an array containing -1."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the integer array corresponding to the parameters of the Metronome class"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int[] startMetronome() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new int[]{-1, -1, -1, -1};"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 18,
      "jwyf": 66
    }
  },
  {
    "path": "src/main/java/ducats/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Song;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "//@@author jwyf"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": " * A class that represents the command to delete a song from the song list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class DeleteCommand extends Command\u003cSongList\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Constructor for the ducats.Commands.Command created to delete a song from the ducats.SongList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param message the input message that resulted in the creation of the ducats.Commands.Command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws DucatsException if an exception occurs in the parsing of the message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public DeleteCommand(String message) throws DucatsException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Deletes an existing song in the song list and"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * returns the messages intended to be displayed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param songList the ducats.SongList object that contains the song list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param ui the Ui object that determines the displayed output of ducats.Duke"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param storage the storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the string to be displayed in ducats.Duke"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws DucatsException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) throws DucatsException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (songList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DucatsException(\"\", \"empty\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        int songIndex \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            songIndex \u003d Integer.parseInt(message.substring(12));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            songIndex \u003d songList.findSongIndex(message.substring(7)) + 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DucatsException(\"\",\"other\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (songIndex \u003e songList.getSize() || songIndex \u003c 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DucatsException(\"\", \"index\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Song deletedSong \u003d songList.getSongIndex(songIndex - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            songList.remove(songIndex - 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                storage.updateFile(songList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                throw new DucatsException(\"\",\"io\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return ui.formatDelete(songList, deletedSong);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * ducats.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer corresponding to the duration, tempo and time signature if the command starts a metronome."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Else, returns an array containing -1."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the integer array corresponding to the parameters of the Metronome class"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int[] startMetronome() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new int[]{-1, -1, -1, -1};"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 20,
      "jwyf": 64
    }
  },
  {
    "path": "src/main/java/ducats/commands/EditBarCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Bar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Song;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "//@@author jwyf"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": " * A class representing the command to edit a bar of notes in the current song."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class EditBarCommand extends Command\u003cSongList\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private int songIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Constructor for the command to edit a bar in the current song."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public EditBarCommand(String message) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.songIndex \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Modifies a song in the song list by editing an existing bar and"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * returns the messages intended to be displayed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param songList the duke.components.SongList object that contains the song list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param ui the Ui object responsible for the reading of user input and the display of"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *           the responses"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param storage the Storage object used to read and manipulate the .txt file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws DucatsException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) throws DucatsException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        int barNo;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            songIndex \u003d songList.getActiveIndex();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Song song \u003d songList.getSongIndex(songIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            String[] sections \u003d message.substring(8).split(\" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            barNo \u003d Integer.parseInt(sections[0].substring(4));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            int notesIndex \u003d message.indexOf(sections[1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Bar newBar \u003d new Bar(barNo, message.substring(notesIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            song.getBars().add(barNo - 1, newBar);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Bar oldBar \u003d song.getBars().get(barNo);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            song.getBars().remove(barNo);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            storage.updateFile(songList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            ArrayList\u003cSong\u003e temp \u003d songList.getSongList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return ui.formatEdit(oldBar, newBar, song);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DucatsException(message, \"edit\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer corresponding to the duration, tempo and time signature if the command starts a metronome."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Else, returns an array containing -1."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the integer array corresponding to the parameters of the Metronome class"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int[] startMetronome() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new int[]{-1, -1, -1, -1};"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 19,
      "jwyf": 66
    }
  },
  {
    "path": "src/main/java/ducats/commands/GroupCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Bar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Group;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Song;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " * A class representing the command to"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " * group bars together as a verse."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class GroupCommand extends Command\u003cSongList\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    //@@author Samuel787"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Constructor for the command to group bars together as a verse."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public GroupCommand(String message) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.message \u003d message.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public GroupCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Saves the range of bars as a verse with the specified name and returns the messages intended to be displayed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param songList the duke.TaskList or duke.components.SongList object that contains the task list in use"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param ui       the Ui object responsible for the reading of user input and the display of"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *                 the responses"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param storage  the Storage object used to read and manipulate the .txt file"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @throws DucatsException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) throws DucatsException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if (message.length() \u003c 6 || !message.substring(0, 6).equals(\"group \")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            //exception if not fully spelt"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DucatsException(message);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            message \u003d message.substring(6).trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            int startNo;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            int endNo;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            String name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            String[] sections \u003d message.split(\" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            startNo \u003d Integer.parseInt(sections[0]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            endNo \u003d Integer.parseInt(sections[1]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            name \u003d sections[2];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if (songList.getSize() \u003e 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                Group group \u003d createGroup(songList.getSongIndex(0), name, startNo, endNo);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                songList.getSongIndex(songList.getActiveIndex()).getGroups().add(group);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                throw new DucatsException(message, \"group\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            //code to add this group into the storage (verse list)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            return ui.formatGroupBar(startNo, endNo, name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DucatsException(message, \"group\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Group createGroup(Song song, String name, int start, int end) throws DucatsException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //maybe can begin off by seeing if the said group already exists"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //check that the bounds are valid"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if (start \u003c 1 || end \u003e song.getNumBars()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DucatsException(\"\", \"group\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cBar\u003e myBars \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cBar\u003e songBars \u003d song.getBars();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (int i \u003d start - 1; i \u003c end; i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            myBars.add(songBars.get(i));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return new Group(name, myBars);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer corresponding to the duration, tempo and time signature if the command starts a metronome."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Else, returns an array containing -1."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the integer array corresponding to the parameters of the Metronome class"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int[] startMetronome() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new int[]{-1, -1, -1, -1};"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 20,
      "Samuel787": 92
    }
  },
  {
    "path": "src/main/java/ducats/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "//@@author SalonetheGreat"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": " * A class representing the command to display help: the command list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "public class HelpCommand extends Command\u003cSongList\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * Constructor for the command to display help."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    public HelpCommand(String message) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * Displays the command list in use; returns the help messages intended to be displayed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @param songList the duke.components.SongList object that contains the song list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @param ui the Ui object responsible for the reading of user input and the display of"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     *           the responses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @param storage the Storage object used to read and manipulate the .txt file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @throws DucatsException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) throws DucatsException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        if (message.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            return ui.formatHelp();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        String helpMessage \u003d message.substring(4).trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        return ui.formatHelp(helpMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer corresponding to the duration, tempo and time signature if the command starts a metronome."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Else, returns an array containing -1."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the integer array corresponding to the parameters of the Metronome class"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int[] startMetronome() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new int[]{-1, -1, -1, -1};"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 17,
      "jwyf": 2,
      "SalonetheGreat": 43
    }
  },
  {
    "path": "src/main/java/ducats/commands/InsertBarCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ducats.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ducats.components.Bar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ducats.components.Song;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "//@@author jwyf"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": " * A class representing the command to insert a new bar of notes between existing bars in the current song."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class InsertBarCommand extends Command\u003cSongList\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private int songIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Constructor for the command to insert a new bar to the current song."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public InsertBarCommand(String message) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.songIndex \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Modifies a song in the song list by inserting a new bar between existing bars and"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * returns the messages intended to be displayed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param songList the duke.components.SongList object that contains the song list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param ui the Ui object responsible for the reading of user input and the display of"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *           the responses"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param storage the Storage object used to read and manipulate the .txt file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws DucatsException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) throws DucatsException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        int barNo;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (message.length() \u003c 10 || !message.substring(0, 10).equals(\"insertbar \")) { //exception if not fully spelt"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DucatsException(message);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            songIndex \u003d songList.getActiveIndex();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Song activeSong \u003d songList.getSongIndex(songIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            String[] sections \u003d message.substring(10).split(\" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            barNo \u003d Integer.parseInt(sections[0].substring(4));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            int notesIndex \u003d message.indexOf(sections[1]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Bar newBar \u003d new Bar(barNo, message.substring(notesIndex));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            activeSong.getBars().add(barNo - 1, newBar);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            storage.updateFile(songList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            ArrayList\u003cSong\u003e temp \u003d songList.getSongList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return ui.formatInsertBar(temp, newBar, activeSong);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DucatsException(message, \"insertbar\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer corresponding to the duration, tempo and time signature if the command starts a metronome."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Else, returns an array containing -1."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the integer array corresponding to the parameters of the Metronome class"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int[] startMetronome() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new int[]{-1, -1, -1, -1};"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 12,
      "jwyf": 73
    }
  },
  {
    "path": "src/main/java/ducats/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class ListCommand extends Command\u003cSongList\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Modifies the task list in use and returns the messages intended to be displayed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param songList the duke.components.SongList object that contains the song list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param ui the Ui object that determines the displayed output of duke.Duke"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param storage the storage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return ui.formatList(songList.getSongList());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer corresponding to the duration, tempo and time signature if the command starts a metronome."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Else, returns an array containing -1."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the integer array corresponding to the parameters of the Metronome class"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int[] startMetronome() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new int[]{-1, -1, -1, -1};"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 44
    }
  },
  {
    "path": "src/main/java/ducats/commands/MetronomeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Ducats;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class MetronomeCommand extends Command\u003cSongList\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private int duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private int tempo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private int[] timeSig;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public MetronomeCommand(String message) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Executes the command, which consists of setting the command attributes (to be later passed into the Metronome"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * class as its parameters) and retrieving the appropriate output string from the UI class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param songList the list of Songs in Ducats"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param ui the Ui object responsible for the reading of user input and the display of"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *           the responses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param storage the Storage object used to read and manipulate the .txt file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @throws DucatsException in the case of input errors on the side of the user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) throws DucatsException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            String[] sections \u003d message.substring(10).split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            duration \u003d Integer.parseInt(sections[0]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            tempo \u003d Integer.parseInt(sections[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            timeSig \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                new int[]{Integer.parseInt(sections[2].substring(0, 1)), Integer.parseInt(sections[2].substring(2))};"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            return ui.formatMetronome(duration, tempo, timeSig);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DucatsException(\"\", \"create\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * ducats.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer corresponding to the duration, tempo and time signature if the command starts a metronome."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Else, returns an array containing -1."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the integer array corresponding to the parameters of the Metronome class"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int[] startMetronome() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new int[]{duration, tempo, timeSig[0], timeSig[1]};"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 68
    }
  },
  {
    "path": "src/main/java/ducats/commands/NewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Song;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "//@@author jwyf"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": " * A class representing the command to add a new song to the song list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class NewCommand extends Command\u003cSongList\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Constructor for the command to add a task to the task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param message the input message that resulted in the creation of the ducats.Commands.Command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public NewCommand(String message) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Create a new song and add it as the last entry of the song list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * and returns the messages intended to be displayed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param songList the ducats.components.SongList object that contains the song list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param ui the Ui object responsible for the reading of user input and the display of"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *           the responses"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param storage the Storage object used to read and manipulate the .txt file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the string to be displayed in ducats.Duke"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws DucatsException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) throws DucatsException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String songName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String key;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String timeSignature;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        int tempo;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (message.length() \u003c 4 || !message.substring(0, 4).equals(\"new \")) { //exception if not fully spelt"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DucatsException(message);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        Song song;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            String[] sections \u003d message.substring(4).split(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            songName \u003d sections[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            key \u003d sections[1];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            timeSignature \u003d sections[2];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            tempo \u003d Integer.parseInt(sections[3]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            song \u003d new Song(songName, key, tempo);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            songList.add(song);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            storage.updateFile(songList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return ui.formatNewSong(songList.getSongList(), song);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DucatsException(message, \"new\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * ducats.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer corresponding to the duration, tempo and time signature if the command starts a metronome."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Else, returns an array containing -1."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the integer array corresponding to the parameters of the Metronome class"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int[] startMetronome() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new int[]{-1, -1, -1, -1};"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 18,
      "jwyf": 65
    }
  },
  {
    "path": "src/main/java/ducats/commands/OpenCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "//@@author rohan-av"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class OpenCommand extends Command\u003cSongList\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public OpenCommand(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Opens a specified song for editing based on the input message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param songList the the ducats.components.SongList object that contains the song list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param ui the Ui object responsible for the reading of user input and the display of"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *           the responses"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param storage the Storage object used to read and manipulate the .txt file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the string to be displayed in the GUI of Ducats"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @throws DucatsException exception in the case of a wrong index provided by the user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) throws DucatsException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            String songName \u003d message.substring(5);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            int songIndex \u003d songList.findSongIndex(songName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            if (songIndex !\u003d -1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                songList.setActiveIndex(songList.findSongIndex(songName));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            return Ui.formatOpen(songList, songIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DucatsException(\"\",\"index\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * ducats.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer corresponding to the duration, tempo and time signature if the command starts a metronome."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Else, returns an array containing -1."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the integer array corresponding to the parameters of the Metronome class"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int[] startMetronome() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new int[]{-1, -1, -1, -1};"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 62
    }
  },
  {
    "path": "src/main/java/ducats/commands/OverlayBarGroup.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Bar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Song;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Chord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rishi12438"
        },
        "content": " * A class that splits an object to the bars and then returns an arraylist of the bars to the function."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rishi12438"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "public class OverlayBarGroup  extends Command\u003cSongList\u003e  {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public String message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    private int songIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Constructor for the command to add a new bar to the current song."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public OverlayBarGroup(String message) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Combines two chords."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param chordBeCopiedFrom the chord that is being copied from"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param chordCopiedTo the chord that is being copied to"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public void combineChord(Chord chordBeCopiedFrom, Chord chordCopiedTo) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //ArrayList\u003cNote\u003enoteArrayCopyFrom  \u003d chordBeCopiedFrom.getNotes();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //Iterator\u003cNote\u003e iterator1 \u003d noteArrayCopyFrom.iterator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //while()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        chordCopiedTo.getNotes().addAll(chordBeCopiedFrom.getNotes());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Combines two bars."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param barToBeCopied the bar that is being copied from"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param barToCopyTo the bar that is being copied to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public void combineBar(Bar barToBeCopied, Bar barToCopyTo) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //we need copy the chords from bar1 into bar 2"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        ArrayList\u003cChord\u003e chordBeCopiedFrom \u003d barToBeCopied.getChords();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        ArrayList\u003cChord\u003e chordCopiedTo \u003d barToCopyTo.getChords();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //System.out.println(\"here i after the chord from bar\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Iterator\u003cChord\u003e iterator1 \u003d chordBeCopiedFrom.iterator();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        while (iterator1.hasNext()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            Chord chordAdd \u003d iterator1.next();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            combineChord(chordAdd,chordCopiedTo.get(i));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            i +\u003d 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Modifies the song in the song list and returns the messages intended to be displayed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param songList the duke.components.SongList object that contains the song list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param ui the Ui object responsible for the reading of user input and the display of"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *           the responses"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param storage the Storage object used to read and manipulate the .txt file"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @throws DucatsException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) throws DucatsException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Note note1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Note note2;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Note note3;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Note note4;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        int barNo;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        if (message.length() \u003c 17 || !message.substring(0, 17).equals(\"overlay_bar_group\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            //exception if not fully spelt"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DucatsException(message);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            //the command consists of overlay 10 repeat"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            //overlay_bar_group 1 2 will coppy the bar 1 into group 2"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            String[] sections \u003d message.substring(18).split(\" \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            int barIndexToAdd \u003d Integer.parseInt(sections[0]) - 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            songIndex \u003d songList.getActiveIndex();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            //System.out.println(barIndexToAdd);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            if (songList.getSize() \u003e songIndex) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                Song song \u003d songList.getSongIndex(songIndex);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //System.out.println(\"adjjdsa1213\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                ArrayList\u003cBar\u003e barList \u003d song.getBars();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                ArrayList\u003cGroup\u003e groupList \u003d song.getGroups();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                int groupIndexToBeCopiedTo \u003d Integer.parseInt(sections[1]) - 1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                ///System.out.print(\"hellqellwe\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //System.out.println(barIndexToBeCopiedTo);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                Bar overlayingBarToBeCopied \u003d barList.get(barIndexToAdd);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                Bar overlayingBar \u003d overlayingBarToBeCopied.copy(overlayingBarToBeCopied);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //Bar overlayingBar \u003d barList.get(barIndexToAdd);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //System.out.println(\"adjjdsa\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                if (sections.length \u003e 3 \u0026\u0026 sections[2].equals(\"repeat\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    Iterator\u003cGroup\u003e iterator1 \u003d groupList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    int i \u003d 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    while (iterator1.hasNext()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        Group temp \u003d iterator1.next();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        if (i \u003e\u003d groupIndexToBeCopiedTo) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                            Splitter splitItem \u003d new Splitter(\"group split\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                            ArrayList\u003cBar\u003e barListCopiedTo \u003d splitItem.splitObject(temp);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                            Iterator\u003cBar\u003e iteratorGroup \u003d barListCopiedTo.iterator();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                            while (iteratorGroup.hasNext()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                                Bar barCopiedTo \u003d iteratorGroup.next();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                                combineBar(overlayingBar, barCopiedTo);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        i +\u003d 1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    //System.out.println(\"no repeat found\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    Group groupToBeCopied \u003d groupList.get(groupIndexToBeCopiedTo);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    Splitter splitItem \u003d new Splitter(\"group split\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    ArrayList\u003cBar\u003e barListCopiedTo \u003d splitItem.splitObject(groupToBeCopied);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    Iterator\u003cBar\u003e iteratorGroup \u003d barListCopiedTo.iterator();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    while (iteratorGroup.hasNext()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        Bar temp \u003d iteratorGroup.next();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        combineBar(overlayingBar, temp);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    //System.out.println(\"bar temp gotten\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //add the bar to the song in the songlist"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                storage.updateFile(songList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                return ui.formatAddOverlay(songList.getSongList(), barIndexToAdd,song);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //System.out.println(\"no such index\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //System.out.println(songList.getSize());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                throw new DucatsException(message, \"no_index\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            //System.out.println(e);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DucatsException(message, \"no_index\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer corresponding to the duration, tempo and time signature if the command starts a metronome."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Else, returns an array containing -1."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the integer array corresponding to the parameters of the Metronome class"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int[] startMetronome() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new int[]{-1, -1, -1, -1};"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 146,
      "rohan-av": 30
    }
  },
  {
    "path": "src/main/java/ducats/commands/OverlayBarSong.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Bar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Song;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Chord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rishi12438"
        },
        "content": " * A class that splits an object to the bars and then returns an arraylist of the bars to the function."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rishi12438"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "public class OverlayBarSong  extends Command\u003cSongList\u003e  {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public String message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    private int songIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Constructor for the command to add a new bar to the current song."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param message the input message that resulted in the creation of the ducats.Commands.Command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public OverlayBarSong(String message) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Combines two chords."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param chordBeCopiedFrom the chord that is being copied from"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param chordCopiedTo the chord that is being copied to"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public void combineChord(Chord chordBeCopiedFrom, Chord chordCopiedTo) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //ArrayList\u003cNote\u003enoteArrayCopyFrom  \u003d chordBeCopiedFrom.getNotes();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //Iterator\u003cNote\u003e iterator1 \u003d noteArrayCopyFrom.iterator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //while()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        chordCopiedTo.getNotes().addAll(chordBeCopiedFrom.getNotes());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Combines two bars."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param barToBeCopied the bar that is being copied from"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param barToCopyTo the bar that is being copied to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public void combineBar(Bar barToBeCopied, Bar barToCopyTo) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //we need copy the chords from bar1 into bar 2"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        ArrayList\u003cChord\u003e chordBeCopiedFrom \u003d barToBeCopied.getChords();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        ArrayList\u003cChord\u003e chordCopiedTo \u003d barToCopyTo.getChords();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //System.out.println(\"here i after the chord from bar\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Iterator\u003cChord\u003e iterator1 \u003d chordBeCopiedFrom.iterator();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        while (iterator1.hasNext()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            Chord chordAdd \u003d iterator1.next();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            combineChord(chordAdd,chordCopiedTo.get(i));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            i +\u003d 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Modifies the song in the song list and returns the messages intended to be displayed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param songList the ducats.components.SongList object that contains the song list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param ui the Ui object responsible for the reading of user input and the display of"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *           the responses"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param storage the Storage object used to read and manipulate the .txt file"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the string to be displayed in ducats.Duke"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @throws DucatsException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) throws DucatsException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Note note1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Note note2;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Note note3;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Note note4;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        int barNo;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        if (message.length() \u003c 17 || !message.substring(0, 16).equals(\"overlay_bar_song\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            //exception if not fully spelt"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DucatsException(message);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            //the command consists of overlay_bar_song 1 2 1 1 refers to overlay song 1 bar 2 onto song 1 bar 1"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            //the command consists of overlay_bar_song 1 2 1 1 refers to overlay song 1 bar 2 onto song 1 bar 1"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            String[] sections \u003d message.substring(17).split(\" \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            int songIndexToAddFrom \u003d Integer.parseInt(sections[0]) - 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            int barIndexToAddFrom \u003d Integer.parseInt(sections[1]) - 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            int songIndexToAddTo \u003d Integer.parseInt(sections[2]) - 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            int barIndexToAddTo \u003d Integer.parseInt(sections[3]) - 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            //System.out.println(barIndexToAdd);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            if (songList.getSize() \u003e songIndexToAddFrom \u0026\u0026 songList.getSize() \u003e songIndexToAddTo) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                Song songAddFrom \u003d songList.getSongIndex(songIndexToAddFrom);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //System.out.println(\"adjjdsa1213\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                Song songAddTo \u003d  songList.getSongIndex(songIndexToAddTo);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                ArrayList\u003cBar\u003e barListAddFrom \u003d songAddFrom.getBars();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                ArrayList\u003cBar\u003e barListAddTo \u003d songAddTo.getBars();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                Bar overlayingBarToBeCopied \u003d barListAddFrom.get(barIndexToAddFrom);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                Bar overlayingBar \u003d overlayingBarToBeCopied.copy(overlayingBarToBeCopied);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                if (sections.length \u003e 5 \u0026\u0026 sections[4].equals(\"repeat\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    Iterator\u003cBar\u003e iterator1 \u003d barListAddTo.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    int i \u003d 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    while (iterator1.hasNext()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        Bar temp \u003d iterator1.next();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        if (i \u003e\u003d barIndexToAddTo) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                            combineBar(overlayingBar, temp);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        i +\u003d 1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    //System.out.println(\"no repeat found\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    Bar barToBeCopiedTo \u003d barListAddTo.get(barIndexToAddTo);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    combineBar(overlayingBar, barToBeCopiedTo);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    //System.out.println(\"bar temp gotten\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //add the bar to the song in the songlist"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                storage.updateFile(songList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                return ui.formatAddOverlay(songList.getSongList(), barIndexToAddFrom,songAddTo);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //System.out.println(\"no such index\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //System.out.println(songList.getSize());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                throw new DucatsException(message, \"no_index\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            //System.out.println(e);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DucatsException(message, \"no_index\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * ducats.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer corresponding to the duration, tempo and time signature if the command starts a metronome."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Else, returns an array containing -1."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the integer array corresponding to the parameters of the Metronome class"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int[] startMetronome() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new int[]{-1, -1, -1, -1};"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 128,
      "rohan-av": 32
    }
  },
  {
    "path": "src/main/java/ducats/commands/OverlayGroupGroup.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Bar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Song;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Chord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rishi12438"
        },
        "content": " * A class that splits an object to the bars and then returns an arraylist of the bars to the function."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rishi12438"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "public class OverlayGroupGroup  extends Command\u003cSongList\u003e  {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public String message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    private int songIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Constructor for the command to add a new bar to the current song."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public OverlayGroupGroup(String message) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Combines two chords."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param chordBeCopiedFrom the chord that is being copied from"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param chordCopiedTo the chord that is being copied to"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public void combineChord(Chord chordBeCopiedFrom, Chord chordCopiedTo) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //ArrayList\u003cNote\u003enoteArrayCopyFrom  \u003d chordBeCopiedFrom.getNotes();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //Iterator\u003cNote\u003e iterator1 \u003d noteArrayCopyFrom.iterator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //while()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        chordCopiedTo.getNotes().addAll(chordBeCopiedFrom.getNotes());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Combines two bars."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param barToBeCopied the bar that is being copied from"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param barToCopyTo the bar that is being copied to"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public void combineBar(Bar barToBeCopied, Bar barToCopyTo) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //we need copy the chords from bar1 into bar 2"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        ArrayList\u003cChord\u003e chordBeCopiedFrom \u003d barToBeCopied.getChords();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        ArrayList\u003cChord\u003e chordCopiedTo \u003d barToCopyTo.getChords();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //System.out.println(\"here i after the chord from bar\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Iterator\u003cChord\u003e iterator1 \u003d chordBeCopiedFrom.iterator();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        while (iterator1.hasNext()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            Chord chordAdd \u003d iterator1.next();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            combineChord(chordAdd,chordCopiedTo.get(i));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            i +\u003d 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Combines two Groups."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param groupToBeCopied the group that is being copied from"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param groupToCopyTo the group that is being copied to"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public void combineGroup(Group groupToBeCopied, Group groupToCopyTo) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        ArrayList\u003cBar\u003e barBeCopiedFrom \u003d groupToBeCopied.getBars();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        ArrayList\u003cBar\u003e barCopiedTo \u003d groupToCopyTo.getBars();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Iterator\u003cBar\u003e iterator1 \u003d barBeCopiedFrom.iterator();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        while (iterator1.hasNext()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            Bar barAdd \u003d iterator1.next();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            combineBar(barAdd,barCopiedTo.get(i));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            i +\u003d 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Modifies the song in the song list and returns the messages intended to be displayed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param songList the duke.components.SongList object that contains the song list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param ui the Ui object responsible for the reading of user input and the display of"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *           the responses"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param storage the Storage object used to read and manipulate the .txt file"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @throws DucatsException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) throws DucatsException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Note note1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Note note2;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Note note3;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Note note4;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        int barNo;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        if (message.length() \u003c 17 || !message.substring(0, 19).equals(\"overlay_group_group\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            //exception if not fully spelt"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DucatsException(message);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            //the command consists of overlay 10 repeat"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            //the command consists of overlay_group_group 1 2 1 1 refers to overlay song 1 group 2 onto song 1 group 1"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            String[] sections \u003d message.substring(20).split(\" \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            int songIndexToAddFrom \u003d Integer.parseInt(sections[0]) - 1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            int groupIndexToAddFrom \u003d Integer.parseInt(sections[1]) - 1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            int songIndexToAddTo \u003d Integer.parseInt(sections[2]) - 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            int groupIndexToAddTo \u003d Integer.parseInt(sections[3]) - 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            //System.out.println(barIndexToAdd);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            if (songList.getSize() \u003e songIndexToAddFrom \u0026\u0026 songList.getSize() \u003e songIndexToAddTo) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                Song songAddFrom \u003d songList.getSongIndex(songIndexToAddFrom);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //System.out.println(\"adjjdsa1213\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                Song songAddTo \u003d  songList.getSongIndex(songIndexToAddTo);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                ArrayList\u003cGroup\u003e groupListAddFrom \u003d songAddFrom.getGroups();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                ArrayList\u003cGroup\u003e groupListAddTo \u003d songAddTo.getGroups();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                Group overlayingGroupToBeCopied \u003d groupListAddFrom.get(groupIndexToAddFrom);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                Group overlayingGroup \u003d overlayingGroupToBeCopied.copy(overlayingGroupToBeCopied);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //Bar overlayingBar \u003d barList.get(barIndexToAdd);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //System.out.println(\"adjjdsa\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                if (sections.length \u003e 4 \u0026\u0026 sections[4].equals(\"repeat\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    Iterator\u003cGroup\u003e iterator1 \u003d groupListAddTo.iterator();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    int i \u003d 0;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    while (iterator1.hasNext()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        Group temp \u003d iterator1.next();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        if (i \u003e\u003d groupIndexToAddTo) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                            combineGroup(overlayingGroup,temp);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                        i +\u003d 1;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    //System.out.println(\"no repeat found\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    Group groupToBeCopiedTo \u003d groupListAddTo.get(groupIndexToAddTo);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    combineGroup(overlayingGroup,groupToBeCopiedTo);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //add the bar to the song in the songlist"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                storage.updateFile(songList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                return ui.formatAddOverlay(songList.getSongList(), groupIndexToAddTo,songAddTo);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //System.out.println(\"no such index\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //System.out.println(songList.getSize());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                throw new DucatsException(message, \"no_index\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            //System.out.println(e);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DucatsException(message, \"no_index\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer corresponding to the duration, tempo and time signature if the command starts a metronome."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Else, returns an array containing -1."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the integer array corresponding to the parameters of the Metronome class"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int[] startMetronome() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new int[]{-1, -1, -1, -1};"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 150,
      "rohan-av": 29
    }
  },
  {
    "path": "src/main/java/ducats/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.UndoRedoStack;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "public class RedoCommand extends Command\u003cSongList\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String execute(SongList object, Ui ui, Storage storage) throws DucatsException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String execute(SongList songs, Ui ui, Storage storage, UndoRedoStack undoRedoStack) throws DucatsException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        if (!undoRedoStack.canRedo()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            return ui.formatRedo();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        // can redo"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        undoRedoStack.redo();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        storage.updateFile(undoRedoStack.getCurrentVersion());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        return ui.formatRedo(undoRedoStack.numOfRedoLeft());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer corresponding to the duration, tempo and time signature if the command starts a metronome."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Else, returns an array containing -1."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the integer array corresponding to the parameters of the Metronome class"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int[] startMetronome() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new int[]{-1, -1, -1, -1};"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 21,
      "SalonetheGreat": 23
    }
  },
  {
    "path": "src/main/java/ducats/commands/Splitter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Bar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Group;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Song;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Chord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rishi12438"
        },
        "content": " * A class that splits an object to the bars and then returns an arraylist of the bars to the function."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rishi12438"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "public class Splitter  {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public String message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Constructor for the command to add a new bar to the current song."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public Splitter(String message) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Combines two chords."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param chordBeCopiedFrom the chord that is being copied from"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param chordCopiedTo the chord that is being copied to"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public void combineChord(Chord chordBeCopiedFrom, Chord chordCopiedTo) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //ArrayList\u003cNote\u003enoteArrayCopyFrom  \u003d chordBeCopiedFrom.getNotes();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //Iterator\u003cNote\u003e iterator1 \u003d noteArrayCopyFrom.iterator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //while()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        chordCopiedTo.getNotes().addAll(chordBeCopiedFrom.getNotes());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Splits a song object into an array list of bars."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param object the duke.components.Song is a Song object that needs to be split."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @return the the arraylist of bars"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public ArrayList\u003cBar\u003e splitObject(Song object) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        return object.getBars();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Splits a Group object into an array list of bars."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param object the duke.components.Grouo is a Group object that needs to be split."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @return the the arraylist of bars"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public ArrayList\u003cBar\u003e splitObject(Group object) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        return object.getBars();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 64,
      "rohan-av": 5
    }
  },
  {
    "path": "src/main/java/ducats/commands/SwapBarCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "//@@author jwyf"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ducats.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ducats.components.Bar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ducats.components.Song;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": " * A class representing the command to swap two bars of notes in the current song."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class SwapBarCommand extends Command\u003cSongList\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private int songIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Constructor for the command to swap two bars in the current song."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public SwapBarCommand(String message) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.songIndex \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Modifies a song in the song list by swapping two existing bars and"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * returns the messages intended to be displayed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param songList the duke.components.SongList object that contains the song list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param ui the Ui object responsible for the reading of user input and the display of"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *           the responses"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param storage the Storage object used to read and manipulate the .txt file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws DucatsException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) throws DucatsException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        int barNo1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        int barNo2;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            songIndex \u003d songList.getActiveIndex();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Song song \u003d songList.getSongIndex(songIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            String[] sections \u003d message.substring(8).split(\" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            barNo1 \u003d Integer.parseInt(sections[0].substring(4));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            barNo2 \u003d Integer.parseInt(sections[1].substring(4));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Bar tempBar1 \u003d song.getBars().get(barNo1 - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Bar tempBar2 \u003d song.getBars().get(barNo2 - 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            song.getBars().set(barNo1 - 1, tempBar2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            song.getBars().set(barNo2 - 1, tempBar1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            storage.updateFile(songList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            ArrayList\u003cSong\u003e temp \u003d songList.getSongList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return ui.formatSwap(tempBar1, tempBar2, song);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DucatsException(message, \"swap\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer corresponding to the duration, tempo and time signature if the command starts a metronome."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Else, returns an array containing -1."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the integer array corresponding to the parameters of the Metronome class"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int[] startMetronome() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new int[]{-1, -1, -1, -1};"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 12,
      "jwyf": 75
    }
  },
  {
    "path": "src/main/java/ducats/commands/Tutorial.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": " * Favourite short cuts."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " *  Alt + enter"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " *  sout tab"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " *  Alt + insert"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " *  Ctrl+k -\u003e commit"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " *  Ctrl +k + shift -\u003e push"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " *  Ctrl + n -\u003e *+\"name of whatever u want\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " *  Shift + shift"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " *  Ctrl + click -\u003e go to method definition"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " *  Refactor -\u003e abstract methods out, remove magic numbers/strings"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class Tutorial {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private String rishi;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void rishiF() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        System.out.println(\"woahh!\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 1,
      "Samuel787": 23,
      "jwyf": 1
    }
  },
  {
    "path": "src/main/java/ducats/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.UndoRedoStack;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "public class UndoCommand extends Command\u003cSongList\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String execute(SongList object, Ui ui, Storage storage) throws DucatsException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String execute(SongList songs, Ui ui, Storage storage, UndoRedoStack undoRedoStack) throws DucatsException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        if (!undoRedoStack.canUndo()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            // cannot undo"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            return ui.formatUndo();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        // Can undo"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        undoRedoStack.undo();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        storage.updateFile(undoRedoStack.getCurrentVersion());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        return ui.formatUndo(undoRedoStack.getCurrentVersionIndex());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer corresponding to the duration, tempo and time signature if the command starts a metronome."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Else, returns an array containing -1."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the integer array corresponding to the parameters of the Metronome class"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int[] startMetronome() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new int[]{-1, -1, -1, -1};"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 21,
      "SalonetheGreat": 24
    }
  },
  {
    "path": "src/main/java/ducats/commands/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Song;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "//@@author jwyf"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": " * A class representing the command to view a song from the song list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class ViewCommand extends Command\u003cSongList\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Constructor for the command to view a song from the song list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param message the input message that resulted in the creation of the ducats.Commands.Command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public ViewCommand(String message) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Access the song list and returns the song intended to be displayed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param songList the ducats.components.SongList object that contains the song list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param ui the Ui object responsible for the reading of user input and the display of"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *           the responses"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param storage the Storage object used to read and manipulate the .txt file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the string to be displayed in ducats.Duke"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws DucatsException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String execute(SongList songList, Ui ui, Storage storage) throws DucatsException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String songName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (message.length() \u003c 5 || !message.substring(0, 5).equals(\"view \")) { //exception if not fully spelt"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DucatsException(message);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        songName \u003d message.substring(5).trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        ArrayList\u003cSong\u003e findList \u003d songList.findSong(songName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (findList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DucatsException(message, \"view\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return ui.formatView(findList.get(0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * ducats.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer corresponding to the duration, tempo and time signature if the command starts a metronome."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Else, returns an array containing -1."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the integer array corresponding to the parameters of the Metronome class"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int[] startMetronome() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new int[]{-1, -1, -1, -1};"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 18,
      "jwyf": 54
    }
  },
  {
    "path": "src/main/java/ducats/components/Bar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.commands.CopyObject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "public class Bar extends CopyObject\u003cBar\u003e implements Serializable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private ArrayList\u003cChord\u003e chords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private ArrayList\u003cString\u003e barChart;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    static final int EIGHTH_NOTES_PER_BAR \u003d 8;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Constructor takes in a String representing a list of notes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param id the ID of the Bar in the Song"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param notes the String representing the list of notes that compose a bar"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Bar(int id, String notes) throws DucatsException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.chords \u003d compileNotesToChords(convertStringToNotes(notes));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        checkLength(chords, EIGHTH_NOTES_PER_BAR);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.barChart \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        updateBarChart();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Alternate constructor for the Bar instance in the case that the Chord data is present."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param id the ID of the Bar in the Song"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param chords an ArrayList of Chord objects that compose the Bar"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Bar(int id, ArrayList\u003cChord\u003e chords) throws DucatsException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.chords \u003d chords;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        checkLength(this.chords, EIGHTH_NOTES_PER_BAR);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.barChart \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        updateBarChart();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * the method that allows this item to be copied."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param object the object to be copied, which in this case is bar."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Bar copy(Bar object) throws DucatsException, IOException,ClassNotFoundException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ObjectOutputStream out \u003d new ObjectOutputStream(bos);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        out.writeObject(object);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        // And then deserializing it from memory using ByteArrayOutputStream instead of FileInputStream,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        // Deserialization process will create a new object with the same state as in the serialized object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ByteArrayInputStream bis \u003d new ByteArrayInputStream(bos.toByteArray());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ObjectInputStream in \u003d new ObjectInputStream(bis);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return (Bar) in.readObject();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an ArrayList of Note objects from the input String of the constructor."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param notes the input String representing the list of notes that compose a bar"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return an ArrayList of Note objects corresponding to the above notes"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    static ArrayList\u003cNote\u003e convertStringToNotes(String notes) throws DucatsException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ArrayList\u003cNote\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String[] notesArray \u003d notes.split(\" \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        for (String note: notesArray) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            result.add(new Note(note));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Compiles an ArrayList of Note objects together to create an ArrayList of Chord"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * objects that compose the Bar."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param noteList an ArrayList of Note objects, which can be of different durations"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return an ArrayList of Chord objects with the specified duration of an 1/8th note"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    static ArrayList\u003cChord\u003e compileNotesToChords(ArrayList\u003cNote\u003e noteList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ArrayList\u003cChord\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        for (Note note: noteList) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            for (int i \u003d 0; i \u003c note.getRelativeUnitDuration(); i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                Chord newChord \u003d new Chord();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                Note note1 \u003d note.getUnitNote();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                if (i !\u003d 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    note1.setStart(false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                newChord.addToChord(note1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                result.add(newChord);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public ArrayList\u003cChord\u003e getChords() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return chords;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void setId(int id) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public ArrayList\u003cString\u003e getBarChart() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return barChart;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private void updateBarChart() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        for (Chord chord: chords) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            barChart.add(chord.getChordString());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a String representation of the Bar to be used in persistent storage."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a storage-friendly String representation"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        result.append(\"[\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        for (Chord chord: chords) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            result.append(chord.toString()).append(\",\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        result.setLength(result.length() - 1); // removes the last comma"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        result.append(\"]\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Checks the length of the Bar and whether it matches the correct length as specified by the time signature"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * (modification of time signature to be introduced in v2)."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param chords the ArrayList of Chord objects that make up the Bar"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param eighthNotesPerBar the number of eighth notes that should be in the bar"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @throws DucatsException an exception indicating the incorrect adding of a Bar due to invalid format"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public static void checkLength(ArrayList\u003cChord\u003e chords, int eighthNotesPerBar) throws DucatsException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        if (chords.size() !\u003d eighthNotesPerBar) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DucatsException(\"addbar\", \"\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 10,
      "rohan-av": 136,
      "jwyf": 15
    }
  },
  {
    "path": "src/main/java/ducats/components/Chord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "public class Chord implements Serializable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private ArrayList\u003cNote\u003e notes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private String chordString;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * A Chord has the set relative duration of 1/8, and is comprised of all the Note objects that are to be played"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * in that specific duration of time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param notes the ArrayList of Note objects to be played in the relative duration of the chord (1/8)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Chord(ArrayList\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        for (Note note: notes) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            updateChordString(note);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Chord() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.chordString \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public ArrayList\u003cNote\u003e getNotes() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return notes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String getChordString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return chordString;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void addToChord(Note note) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        notes.add(note);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        updateChordString(note);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private void updateChordString(Note note) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (note.isStart()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            this.chordString +\u003d (note.getPitch() + \" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            this.chordString +\u003d (\"- \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a String representation for the Chord to be used in persistent storage."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a storage-friendly String representation"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        result.append(\"[\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            result.append(notes.get(i).toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            if (i !\u003d notes.size() - 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                result.append(\";\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        result.append(\"]\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 2,
      "rohan-av": 59,
      "jwyf": 14
    }
  },
  {
    "path": "src/main/java/ducats/components/Group.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "public class Group implements Serializable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private ArrayList\u003cBar\u003e bars;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Group(String name, ArrayList\u003cBar\u003e bars) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.bars \u003d bars;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * the method that allows this item to be copied."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param object the object to be copied, which in this case is group."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Group copy(Group object) throws DucatsException, IOException,ClassNotFoundException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ObjectOutputStream out \u003d new ObjectOutputStream(bos);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        out.writeObject(object);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        // And then deserializing it from memory using ByteArrayOutputStream instead of FileInputStream,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        // Deserialization process will create a new object with the same state as in the serialized object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ByteArrayInputStream bis \u003d new ByteArrayInputStream(bos.toByteArray());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ObjectInputStream in \u003d new ObjectInputStream(bis);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return (Group) in.readObject();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public ArrayList\u003cBar\u003e getBars() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return bars;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return bars.size();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Bar get(int i) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return bars.get(i);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 9,
      "rohan-av": 51
    }
  },
  {
    "path": "src/main/java/ducats/components/Jaccard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "package ducats.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "public class Jaccard implements Serializable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public Jaccard() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * A function that returns the number of common elements between the two list, i.e. union"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param list1 - list1 is the first list of the alphabets."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param list2 - list2 is the second list of the alphabets."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public int union(List\u003cString\u003e list1, List\u003cString\u003e list2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        HashMap\u003cString, Integer\u003e mapLetterList1 \u003d new HashMap\u003cString, Integer\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        for (String temp: list1) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            if (mapLetterList1.containsKey(list1)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                mapLetterList1.put(temp,mapLetterList1.get(temp) + 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                mapLetterList1.put(temp,1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        int numCommon \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        for (String temp: list2) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            if (mapLetterList1.containsKey(temp)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                if (mapLetterList1.get(temp) \u003e 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    numCommon +\u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    mapLetterList1.put(temp,mapLetterList1.get(temp) - 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        return numCommon;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * A function that returns the similarity between 2 words."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param word1 - word1 is the first word to compare."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param word2 - word2 is the second word to compare."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public double similarity(String word1, String word2) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        String [] word1Arr \u003d word1.split(\"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        String [] word1Arr1 \u003d word1.split(\"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        String [] word2Arr \u003d word2.split(\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        List\u003cString\u003e word1List1 \u003d new ArrayList(Arrays.asList(word1Arr1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        List\u003cString\u003e word1List \u003d new ArrayList(Arrays.asList(word1Arr));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        List\u003cString\u003e word2List \u003d new ArrayList(Arrays.asList(word2Arr));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        int intersection \u003d union(word1List,word2List);;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        word1List1.addAll(word2List);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        int union \u003d word1List1.size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        return intersection / (double)union;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 61
    }
  },
  {
    "path": "src/main/java/ducats/components/Note.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "public class Note implements Serializable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Pitch pitch;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private String duration; // 1, 2*, 2, 4*, 4, 8"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private boolean isStart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Constructor for the Note object, taking in a String representation of the note."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param description A String representation of the Note object to be created of the form [DURATION]_[PITCH]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *                    E.g. 4_UA represents an A note from the upper octave with the duration of a 1/4 note."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Note(String description) throws DucatsException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String[] characteristics \u003d description.split(\"_\", 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.duration \u003d characteristics[0];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.isStart \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        switch (characteristics[1]) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"LC\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.LOWER_C;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"LD\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.LOWER_D;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"LE\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.LOWER_E;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"LF\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.LOWER_F;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"LG\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.LOWER_G;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"LA\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.LOWER_A;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"LB\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.LOWER_B;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"MC\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.MIDDLE_C;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"UD\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.UPPER_D;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"UE\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.UPPER_E;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"UF\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.UPPER_F;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"UG\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.UPPER_G;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"UA\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.UPPER_A;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"UB\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.UPPER_B;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"UC\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.UPPER_C;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"RT\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.pitch \u003d Pitch.REST;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DucatsException(\"create\",\"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Constructor for the Note object, taking in a String and Pitch representation of the note."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param duration A String representation of the duration of the Note object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *                  E.g. 4 represents a note with the duration of a 1/4 note."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param pitch A Pitch enum representation of the pitch of the Note object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *              E.g. UA represents an A note from the upper octave."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Note(String duration, Pitch pitch, boolean isStart) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.pitch \u003d pitch;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.isStart \u003d isStart;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void setStart(boolean val) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.isStart \u003d val;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public boolean isStart() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return isStart;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Pitch getPitch() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return pitch;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String getDuration() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Note getUnitNote() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new Note(\"8\", this.pitch, true);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns the relative duration of the note in the form of a float. Asterisks (*) increase the relative duration"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * by 50%, just like the dotted notes in sheet music (notes that are followed by a ·)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the relative duration of the note in the form of a float."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public float getNumericalDuration() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        float result \u003d (float) (1.0 / Character.getNumericValue(this.duration.charAt(0)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        if (this.duration.length() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            result *\u003d 1.5;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an integer that is equivalent its duration relative to an 1/8 note."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return an integer representing how many times of an 1/8 note the duration is"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int getRelativeUnitDuration() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        switch (this.duration) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"1\": return 8;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"2*\": return 6;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"2\": return 4;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"4*\": return 3;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"4\": return 2;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"8\": return 1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        default: return -1;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a String representation of the Note to be used for persistent storage."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a storage-friendly String representation"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String pitchString \u003d pitch.name();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String result \u003d pitchString.substring(0,1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        //System.out.print(pitchString.length());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        result +\u003d pitchString.substring(pitchString.length() - 1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        if (isStart()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            result +\u003d \"s\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 4,
      "rohan-av": 152
    }
  },
  {
    "path": "src/main/java/ducats/components/Pitch.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "//@@author rohan-av"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public enum Pitch {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    LOWER_C,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    LOWER_D,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    LOWER_E,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    LOWER_F,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    LOWER_G,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    LOWER_A,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    LOWER_B,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    MIDDLE_C,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    UPPER_D,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    UPPER_E,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    UPPER_F,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    UPPER_G,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    UPPER_A,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    UPPER_B,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    UPPER_C,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    REST"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 22
    }
  },
  {
    "path": "src/main/java/ducats/components/Song.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "public class Song implements Serializable {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private String key; // default key: C Major (implemented in NewCommand)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private int tempo; // default tempo: 120 (implemented in NewCommand)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private ArrayList\u003cBar\u003e bars;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private ArrayList\u003cGroup\u003e groups;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private ArrayList\u003cString\u003e songChart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Constructor for Song object, taking in a name, key and tempo."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param name the name of the Song"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param key the key the Song is to be composed in"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param tempo the tempo at which the Song is to be played"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Song(String name, String key, int tempo) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.key \u003d key;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.tempo \u003d tempo;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.bars \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.groups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.songChart \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String getKey() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return key;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int getTempo() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return tempo;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public ArrayList\u003cBar\u003e getBars() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return bars;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public ArrayList\u003cGroup\u003e getGroups() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return groups;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Creates a grouping of Bar objects to be easily copied and inserted for repetitions"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * in music."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param name the name of the Group (e.g. Verse, Chorus, Pre-Chorus)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param startingId ID of the Bar to start copying from"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param endingId ID of the Bar to end the copying"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void createGroup(String name, int startingId, int endingId) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        ArrayList\u003cBar\u003e groupedBars \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        for (int i \u003d startingId; i \u003c\u003d endingId; i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            groupedBars.add(bars.get(i - 1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        groups.add(new Group(name, groupedBars));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void addBar(Bar bar) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        bars.add(bar);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        updateSongChart(bar);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public int getNumBars() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return bars.size();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Updates the Song with the new list of Bar objects."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param newBars the list of new Bar objects for the Song"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void updateBars(ArrayList\u003cBar\u003e newBars) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.bars \u003d newBars;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        for (Bar bar: newBars) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            updateSongChart(bar);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Updates the SongChart, the string representation of the Song."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param bar the new Bar to be added to the Song"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private void updateSongChart(Bar bar) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        songChart.addAll(bar.getBarChart());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a String representation of the Song for the user to view."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return a String representation of the Song to be viewed by the user"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String showSongChart() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        StringBuilder formattedChart1 \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        for (String chordString: songChart) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            formattedChart1.append(chordString).append(\" \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //System.out.println(formattedChart1.toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //System.out.println(this.getBars().get(0).getChords().get(0).getNotes().get(0).getPitch());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //return formattedChart1.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        ArrayList\u003cBar\u003e barList  \u003d this.getBars();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Iterator\u003cBar\u003e iterator1 \u003d barList.iterator();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        StringBuilder formattedChart \u003d new StringBuilder();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //System.out.println(bars.get(0).getChords().get(0).getNotes().get(0).getPitch());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        while (iterator1.hasNext()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            Bar barToAnalyse \u003d iterator1.next();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            ArrayList\u003cChord\u003e chordToAnalyse  \u003d  barToAnalyse.getChords();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            Iterator\u003cChord\u003e iterator \u003d chordToAnalyse.iterator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            //System.out.println(chordToAnalyse.size());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            int j \u003d 0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            while (iterator.hasNext() \u0026\u0026 j \u003c chordToAnalyse.size() / 2) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                formattedChart.append(\"{\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                Chord tempChordToAnalyse \u003d iterator.next();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                ArrayList\u003cNote\u003e notesAnalyse  \u003d  tempChordToAnalyse.getNotes();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                //System.out.print(notesAnalyse.size());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                Iterator\u003cNote\u003e iterator2 \u003d notesAnalyse.iterator();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                while (iterator2.hasNext()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    Note tempNote \u003d iterator2.next();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    formattedChart.append(tempNote.getPitch());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    formattedChart.append(\" \");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                formattedChart.append(\"}\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                j +\u003d 1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            formattedChart.append(\"|\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            i +\u003d 1;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return formattedChart.toString();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a String representation of the Song to be used for persistent storage."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a storage-friendly String representation"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        result.append(name)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                .append(\" \")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                .append(key)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                .append(\" \")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                .append(tempo)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                .append(\" \");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        for (Bar bar: bars) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            result.append(bar.toString()).append(\" \");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 41,
      "rohan-av": 72,
      "Samuel787": 7,
      "jwyf": 46
    }
  },
  {
    "path": "src/main/java/ducats/components/SongList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "//@@author jwyf"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": " * Class used to store the song list and perform necessary manipulations to the song list such as"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": " * adding songs, removing songs and finding songs based on keywords, as well as obtaining the size"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": " * of the song list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class SongList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private ArrayList\u003cSong\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private int activeIndex \u003d 0; // default song to be edited is the first one"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Removes an element from the song list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param index the index of the ducats.components.Song in the song list that is to be removed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Adds an element to the song list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param newSong the ducats.components.Song object to be added to the song list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void add(Song newSong) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        list.add(newSong);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns the index in the song list of the song that is currently being edited."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the index of the active song in the song list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int getActiveIndex() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return activeIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Sets the active index of the song to be edited."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param idx the index of the song that is to be edited"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void setActiveIndex(int idx) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        activeIndex \u003d idx;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    //@@author jwyf"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns the ducats.components.Song object at the specified index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param index the index of the ducats.components.Song object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the ducats.components.Song object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public Song getSongIndex(int index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns the current size of the song list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the current size of the task list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns the task list for ducats.Duke, which is implemented as an ArrayList of ducats.components.Song objects."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the song list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public ArrayList\u003cSong\u003e getSongList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns a subset of the song list (implemented as an ArrayList of ducats.components.Song objects) that contains"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * the query specified in the argument."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param query the search query to be obtained from the input command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the ArrayList of ducats.components.Song objects whose description contained the query"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public ArrayList\u003cSong\u003e findSong(String query) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        ArrayList\u003cSong\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        for (Song song: list) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            if (song.getName().contains(query)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                result.add(song);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Returns an integer corresponding to the index of the first Song object in the SongList whose name matches the"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * given query."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param query the name of the Song to be searched for"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return the index corresponding to the song, -1 otherwise"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public int findSongIndex(String query) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        int result \u003d -1;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        for (Song song: list) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            if (song.getName().contains(query)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                result \u003d list.indexOf(song);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Removes from this list all of its elements that are contained in the ArrayList."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param removeList the specified collection; its elements are removed from the list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void removeAll(ArrayList\u003cSong\u003e removeList) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        list.removeAll(removeList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 21,
      "jwyf": 105
    }
  },
  {
    "path": "src/main/java/ducats/components/UndoRedoStack.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "//@@author SalonetheGreat"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "public class UndoRedoStack {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private Stack\u003cSongList\u003e undoRedoStack;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private int currentVersionIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * constructor for UndoRedoStack."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @param songs the song list which is going to be the first version of the undo-redo(UR) stack"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    public UndoRedoStack(SongList songs) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        undoRedoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        undoRedoStack.push(songs);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        currentVersionIndex \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * Returns the current version of the UR stack."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @return a song list which is the current version of the UR stack"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    public SongList getCurrentVersion() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        return undoRedoStack.get(currentVersionIndex);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * Add a new version of song list into the UR stack, and move the current index to the new song list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @param songList the song list to be added into the stack as the new version"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    public void add(SongList songList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        for (int latestVersionIndex \u003d undoRedoStack.size() - 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "             latestVersionIndex \u003e currentVersionIndex; latestVersionIndex--) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "            undoRedoStack.pop();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        push(songList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * Returns the index indicating the current version."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @return a integer indicating the current version of UR stack"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    public int getCurrentVersionIndex() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        return currentVersionIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * Push a new song list to the top of the stack, and update the version of UR stack."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @param songList the song list to be put"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    private void push(SongList songList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        undoRedoStack.push(songList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        currentVersionIndex++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * Returns whether the UR stack can be undone or not."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     *      current version is not the first version, can undo,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     *      otherwise, cannot undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @return a boolean number indicating canUndo or not"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        return currentVersionIndex \u003e 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * Move the index to the previous version."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        currentVersionIndex--;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * Returns whether the UR stack can be redone or not."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     *      current version is not the latest version, can redo,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     *      otherwise, cannot redo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @return a boolean number indicating canRedo or not"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        return currentVersionIndex \u003c undoRedoStack.size() - 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * Move the index to the next version."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        currentVersionIndex++;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * Count the number of redo times left."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     * @return a integer of number of redo times left"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    public int numOfRedoLeft() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "        return undoRedoStack.size() - currentVersionIndex - 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SalonetheGreat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 1,
      "SalonetheGreat": 97
    }
  },
  {
    "path": "src/main/java/ducats/components/VerseList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class VerseList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    //@@author Samuel787"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private ArrayList\u003cGroup\u003e verseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Adds a verse to the verselist."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param group refers to the verse to be added to the verse list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void add(Group group) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.verseList.add(group);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Finds a verse in the verselist based on the name input by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param name name of the verse"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @return returns the group corresponding to the name entered by the user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public Group find(String name) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        int size \u003d verseList.size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if (verseList.get(i).getName().equals(name)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                return verseList.get(i);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 1,
      "Samuel787": 32
    }
  },
  {
    "path": "src/main/java/ducats/components/WordGetter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "package ducats.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "public class WordGetter implements Serializable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public WordGetter() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * A function that returns the number of common elements between the two list, i.e. union"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param stringToCheck - This is the string to get the closest word."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public String closestWord(String stringToCheck) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String [] commandList \u003d {\"bye\", \"list\", \"delete\", \"deletebar\",\"editbar\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            \"find\",\"done\", \"new\",\"help\",\"view\",\"addbar\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            \"overlay\",\"group\",\"overlay_bar_group\", \"metronome\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            \"overlay_group_group\", \"overlay_bar_song\", \"ascii\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            \"redo\", \"undo\", \"open\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            \"copy\", \"insertbar\", \"swapbar\",\"yes\",\"no\",\"play\"};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        double maximumVal \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        String commandName \u003d \"sasaff\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Jaccard similarityChecker \u003d new Jaccard();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        for (String temp: commandList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            double similarityValue \u003d similarityChecker.similarity(temp,stringToCheck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            if (maximumVal \u003c similarityValue \u0026\u0026 similarityValue \u003e\u003d .35) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                maximumVal \u003d similarityValue;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                commandName \u003d temp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        return commandName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 31,
      "rohan-av": 3,
      "jwyf": 1
    }
  },
  {
    "path": "src/main/java/ducats/uicomponents/CommandLine.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package ducats.uicomponents;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class CommandLine extends TextField {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public CommandLine() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Customised JavaFX TextField to implement persistent hinting or prompting when textfield is empty."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param text the default text to appear on the text field"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param prompt the prompt message to appear on the textfield"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public CommandLine(String text, String prompt) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        super(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        setPromptText(prompt);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        getStyleClass().add(\"style/persistent-prompt.css\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        refreshPromptVisibility();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        textProperty().addListener(observable -\u003e refreshPromptVisibility());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private void refreshPromptVisibility() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        final String text \u003d getText();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if (isEmptyString(text)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            getStyleClass().remove(\"no-prompt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            getStyleClass().add(\"persistent-prompt\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if (!getStyleClass().contains(\"no-prompt\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                getStyleClass().add(\"no-prompt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                getStyleClass().remove(\"persistent-prompt\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private boolean isEmptyString(String text) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return text \u003d\u003d null || text.isEmpty();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 40
    }
  },
  {
    "path": "src/main/java/ducats/uicomponents/DucatsWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package ducats.uicomponents;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import ducats.Ducats;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import ducats.components.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import ducats.components.Chord;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import ducats.components.Bar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import ducats.components.Group;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import ducats.components.Song;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class DucatsWindow {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    //@@author Samuel787"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private TextField commandLine;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private VBox songDisplay;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private VBox groupDisplay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Label bottomStrip;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private HBox songPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    //CONSTANTS"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private String noSongs \u003d \"You have no songs in your song list.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Ducats ducats \u003d new Ducats();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * This method gets called when DucatsGui FXML Loader loads the Scene."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if (ducats.getSongs().getSize() \u003e 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            listSongs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            listGroups(ducats.getSongs().getSongIndex(0));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            displaySong(ducats.getSongs().getSongIndex(0));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            displayBottomMessage(\"Current Song: \" + ducats.getSongs().getSongIndex(0).getName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            displayBottomMessage(noSongs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private void listSongs() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        SongList songs \u003d ducats.getSongs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cSong\u003e mySongs \u003d songs.getSongList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (Song s : mySongs) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            songDisplay.getChildren().add(new Label(s.getName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private void listGroups(Song currentSong) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cGroup\u003e groups \u003d currentSong.getGroups();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (Group g : groups) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            groupDisplay.getChildren().add(new Label(g.getName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Displays messages at the bottom of the window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * Can be used to display exceptions as well."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * @param msg message to display to the user"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private void displayBottomMessage(String msg) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        bottomStrip.setText(msg);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void getUserCommand() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        System.out.println(commandLine.getText());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        commandLine.clear();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private void displaySong(Song song) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cBar\u003e bars \u003d song.getBars();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (Bar b : bars) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ArrayList\u003cChord\u003e chords \u003d b.getChords();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            for (Chord c : chords) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                displayChord(c);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    // TODO: 29/10/2019 method to display chord as GUI"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private void displayChord(Chord chord) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        VBox chordBox \u003d new VBox();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        chordBox.setSpacing(4);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cButton\u003e panes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        Background backgroundInactive \u003d new Background(new BackgroundFill(Color.GREY,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                CornerRadii.EMPTY, Insets.EMPTY));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (int i \u003d 0; i \u003c 15; i++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            Button pane \u003d new Button();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            pane.setPrefHeight(20);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            pane.setPrefWidth(20);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            pane.setBackground(backgroundInactive);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            panes.add(pane);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //TODO: set the respective notes"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        Background backgroundActive \u003d new Background(new BackgroundFill(Color.TURQUOISE,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                CornerRadii.EMPTY, Insets.EMPTY));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cNote\u003e notes \u003d chord.getNotes();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (Note n : notes) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            switch (n.getPitch()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case UPPER_C:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                panes.get(0).setBackground(backgroundActive);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case UPPER_B:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                panes.get(1).setBackground(backgroundActive);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case UPPER_A:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                panes.get(2).setBackground(backgroundActive);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case UPPER_G:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                panes.get(3).setBackground(backgroundActive);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case UPPER_F:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                panes.get(4).setBackground(backgroundActive);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case UPPER_E:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                panes.get(5).setBackground(backgroundActive);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case UPPER_D:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                panes.get(6).setBackground(backgroundActive);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case MIDDLE_C:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                panes.get(7).setBackground(backgroundActive);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case LOWER_B:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                panes.get(8).setBackground(backgroundActive);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case LOWER_A:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                panes.get(9).setBackground(backgroundActive);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case LOWER_G:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                panes.get(10).setBackground(backgroundActive);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case LOWER_F:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                panes.get(11).setBackground(backgroundActive);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case LOWER_E:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                panes.get(12).setBackground(backgroundActive);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case LOWER_D:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                panes.get(13).setBackground(backgroundActive);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            case LOWER_C:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                panes.get(14).setBackground(backgroundActive);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for (Button p : panes) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            chordBox.getChildren().add(p);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        songPanel.getChildren().add(chordBox);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 186
    }
  },
  {
    "path": "src/main/java/duke/components/Jaccard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "package duke.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "public class Jaccard implements Serializable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public Jaccard() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * A function that returns the number of common elements between the two list, i.e. union"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param list1 - list1 is the first list of the alphabets."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param list2 - list2 is the second list of the alphabets."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public int  union(List\u003cString\u003e list1, List\u003cString\u003e list2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        HashMap\u003cString, Integer\u003e mapLetterList1 \u003d new HashMap\u003cString, Integer\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        for (String temp: list1) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            if (mapLetterList1.containsKey(list1)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                mapLetterList1.put(temp,mapLetterList1.get(temp) + 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                mapLetterList1.put(temp,1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        int numCommon \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        for (String temp: list2) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            if (mapLetterList1.containsKey(temp)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                if (mapLetterList1.get(temp) \u003e 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    numCommon +\u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                    mapLetterList1.put(temp,mapLetterList1.get(temp) - 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        return numCommon;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * A function that returns the similarity between 2 words."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param word1 - word1 is the first word to compare."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     * @param word2 - word2 is the second word to compare."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public double similarity(String word1, String word2) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        String [] word1Arr \u003d word1.split(\"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        String [] word1Arr1 \u003d word1.split(\"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        String [] word2Arr \u003d word2.split(\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        List\u003cString\u003e word1List1 \u003d new ArrayList(Arrays.asList(word1Arr1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        List\u003cString\u003e word1List \u003d new ArrayList(Arrays.asList(word1Arr));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        List\u003cString\u003e word2List \u003d new ArrayList(Arrays.asList(word2Arr));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        int intersection \u003d union(word1List,word2List);;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        word1List1.addAll(word2List);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        int union \u003d word1List1.size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        return intersection / (double)union;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 61
    }
  },
  {
    "path": "src/main/resources/fxml/ducatswindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "\u003cAnchorPane minHeight\u003d\"700.0\" minWidth\u003d\"900.0\" prefHeight\u003d\"500.0\" prefWidth\u003d\"800.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"ducats.uicomponents.DucatsWindow\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    \u003cAnchorPane layoutX\u003d\"-2.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "      \u003cBorderPane prefHeight\u003d\"500.0\" prefWidth\u003d\"800.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "         \u003ctop\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            \u003cTextField fx:id\u003d\"commandLine\" onAction\u003d\"#getUserCommand\" prefHeight\u003d\"36.0\" prefWidth\u003d\"772.0\" promptText\u003d\"Enter your command...\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "               \u003cBorderPane.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                  \u003cInsets bottom\u003d\"14.0\" left\u003d\"14.0\" right\u003d\"14.0\" top\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "               \u003c/BorderPane.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            \u003c/TextField\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "         \u003c/top\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "         \u003cleft\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            \u003cVBox BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                  \u003cTitledPane fx:id\u003d\"groupsPane\" animated\u003d\"false\" collapsible\u003d\"false\" minHeight\u003d\"189.0\" prefWidth\u003d\"187.0\" text\u003d\"Groups\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        \u003cInsets bottom\u003d\"14.0\" left\u003d\"14.0\" right\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        \u003cScrollPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                           \u003ccontent\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                              \u003cVBox fx:id\u003d\"groupDisplay\" prefHeight\u003d\"164.0\" prefWidth\u003d\"183.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                           \u003c/content\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                     \u003c/content\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                  \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                  \u003cTitledPane animated\u003d\"false\" collapsible\u003d\"false\" minHeight\u003d\"189.0\" prefWidth\u003d\"187.0\" text\u003d\"Songs\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        \u003cInsets bottom\u003d\"14.0\" left\u003d\"14.0\" right\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        \u003cScrollPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                           \u003ccontent\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                              \u003cVBox fx:id\u003d\"songDisplay\" prefHeight\u003d\"164.0\" prefWidth\u003d\"183.0\" spacing\u003d\"2.0\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                                 \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                                    \u003cInsets left\u003d\"4.0\" right\u003d\"4.0\" top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                                 \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                           \u003c/content\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                     \u003c/content\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                  \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "         \u003c/left\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "         \u003cbottom\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            \u003cAnchorPane style\u003d\"-fx-background-color: #DDD;\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                  \u003cLabel fx:id\u003d\"bottomStrip\" prefHeight\u003d\"24.0\" text\u003d\"UI Development Stage\" BorderPane.alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                     \u003cBorderPane.margin\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                     \u003c/BorderPane.margin\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        \u003cInsets left\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "         \u003c/bottom\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "         \u003ccenter\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            \u003cScrollPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "               \u003cBorderPane.margin\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                  \u003cInsets bottom\u003d\"14.0\" right\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "               \u003c/BorderPane.margin\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "               \u003ccontent\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                  \u003cHBox fx:id\u003d\"songPanel\" nodeOrientation\u003d\"LEFT_TO_RIGHT\" prefHeight\u003d\"400.0\" spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "               \u003c/content\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "         \u003c/center\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "      \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 83
    }
  },
  {
    "path": "src/main/resources/style/ducats.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ".root{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    -fx-background-color: #2a2a2a;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "#commandLine{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    -fx-font-size: 16;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    -fx-text-fill: #fff;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    -fx-background-color: #232323;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 9
    }
  },
  {
    "path": "src/main/resources/style/persistent-prompt.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ".persistent-prompt:focused {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    -fx-prompt-text-fill: derive(-fx-control-inner-background,-30%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ".no-prompt {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    -fx-prompt-text-fill: transparent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 6
    }
  },
  {
    "path": "src/main/resources/view/DucatsMainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "\u003cBorderPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"500.0\" prefWidth\u003d\"800.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 7
    }
  },
  {
    "path": "src/test/java/ducats/UiTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Song;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    static String wrap(String content) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return (\"\\n_____________________________________________\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + content"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \"\\n_____________________________________________\\n\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testByeMessage() { // dummy test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(wrap(\"Bye. Hope to see you again soon!\"), Ui.showByeMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /* Todo: test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testFormatList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ArrayList\u003cSong\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(new ToDo(\"hello\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            result.append(i + 1)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    .append(\". \")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    .append(list.get(i).toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            if (i !\u003d list.size() - 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                result.append(\"\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            result.append(\"The list is empty!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Ui.wrap(result.toString()), wrap(\"1. [T][x] hello\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 7,
      "-": 36
    }
  },
  {
    "path": "src/test/java/ducats/commands/AsciiCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Bar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Group;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.components.Song;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class AsciiCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    //@@author Samuel787"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void testPrintBarAscii_validBars_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //test case 1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            Bar bar1 \u003d new Bar(5, \"4_LE 4_LD 4_LC 4_MC\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            String result \u003d \"UC:         \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UB:         \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UA:         \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UG: --------\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UF:         \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UE: --------\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UD:         \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"MC: ------@-\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LB:         \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LA: --------\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LG:         \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LF: --------\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LE: @       \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LD: --@-    \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LC:     @   \\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            assertEquals(result, AsciiCommand.printBarAscii(bar1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (DucatsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //test case 2"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            String result \u003d \"UC:         \\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UB:         \\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UA:         \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UG: --------\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UF:         \\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UE: $-------\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UD:         \\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"MC: ----@-^-\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LB:         \\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LA: --------\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LG:         \\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LF: --------\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LE:         \\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LD:         \\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LC:         \\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            Bar bar2 \u003d new Bar(20, \"2_UE 4_MC 4_RT\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            assertEquals(result, AsciiCommand.printBarAscii(bar2));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (DucatsException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //test case 3"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            String result \u003d \"UC:         \\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UB:  -!-    \\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UA:         \\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UG: --------\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UF:      !  \\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UE: ---!----\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UD:         \\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"MC: -!--\u0026---\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LB:       ! \\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LA: !-------\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LG:         \\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LF: --------\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LE:        !\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LD:       --\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LC:         \\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            Bar bar3 \u003d new Bar(0, \"8_LA 8_MC 8_UB 8_UE 8_RT 8_UF 8_LB 8_LE\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            assertEquals(result, AsciiCommand.printBarAscii(bar3));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (DucatsException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void testPrintGroupAscii_validGroups_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //test case 1"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ArrayList\u003cBar\u003e barsGroup1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            barsGroup1.add(new Bar(0, \"4_LE 4_LD 4_LC 4_MC\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            barsGroup1.add(new Bar(1, \"2_UE 4_MC 4_RT\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            barsGroup1.add(new Bar(2, \"8_LA 8_MC 8_UB 8_UE 8_RT 8_UF 8_LB 8_LE\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            Group testGroup1 \u003d new Group(\"testGroup1\", barsGroup1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            String result \u003d \"UC:                           \\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UB:                    -!-    \\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UA:                           \\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UG: --------|--------|--------\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UF:         |        |     !  \\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UE: --------|$-------|---!----\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UD:         |        |        \\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"MC: ------@-|----@-^-|-!--\u0026---\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LB:         |        |      ! \\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LA: --------|--------|!-------\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LG:         |        |        \\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LF: --------|--------|--------\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LE: @                        !\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LD: --@-                    --\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LC:     @                     \\n\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            assertEquals(result, AsciiCommand.printGroupAscii(testGroup1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (DucatsException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //test case 2"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ArrayList\u003cBar\u003e barsGroup2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            barsGroup2.add(new Bar(0, \"4_MC 4_RT 4_MC 4_RT\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            barsGroup2.add(new Bar(0, \"4_UC 4_UA 4_UG 4_UF\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            barsGroup2.add(new Bar(0, \"4_UF 4_UG 4_UA 4_UC\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            barsGroup2.add(new Bar(0, \"4_LC 4_LD 4_LE 4_LF\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            barsGroup2.add(new Bar(0, \"4_LG 4_LA 4_MC 4_UD\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            barsGroup2.add(new Bar(0, \"4_LB 4_RT 4_LB 4_RT\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            barsGroup2.add(new Bar(0, \"4_LF 4_LD 4_UA 4_UA\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            Group testGroup2 \u003d new Group(\"testGroup2\", barsGroup2);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            String result \u003d \"UC:          @              @                                     \\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UB:          --            ---                                    \\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UA:            @          @                                   @ @ \\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UG: --------|----@---|--@-----|--------|--------|--------|--------\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UF:         |      @ |@       |        |        |        |        \\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UE: --------|--------|--------|--------|--------|--------|--------\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UD:         |        |        |        |      @ |        |        \\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"MC: @-^-@-^-|--------|--------|--------|----@---|--^---^-|--------\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LB:         |        |        |        |        |@   @   |        \\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LA: --------|--------|--------|--------|--@-----|--------|--------\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LG:         |        |        |        |@       |        |        \\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LF: --------|--------|--------|------@-|--------|--------|@-------\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LE:                                @                              \\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LD:                             -@---                      -@-    \\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LC:                            @                                  \\n\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            assertEquals(result, AsciiCommand.printGroupAscii(testGroup2));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (DucatsException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //test case 3"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ArrayList\u003cBar\u003e barsGroup3 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            barsGroup3.add(new Bar(0, \"4_MC 4_RT 4_MC 4_RT\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            barsGroup3.add(new Bar(1, \"4*_UC 4*_UC 4_UC\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            barsGroup3.add(new Bar(2, \"2_RT 4*_RT 8_UB\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            Group testGroup3 \u003d new Group(\"testGroup3\", barsGroup3);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            String result \u003d \"UC:          @. @. @          \\n\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UB:          --------       -!\\n\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UA:                           \\n\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UG: --------|--------|--------\\n\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UF:         |        |        \\n\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UE: --------|--------|--------\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UD:         |        |        \\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"MC: @-^-@-^-|--------|%---^.--\\n\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LB:         |        |        \\n\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LA: --------|--------|--------\\n\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LG:         |        |        \\n\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LF: --------|--------|--------\\n\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LE:                           \\n\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LD:                           \\n\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LC:                           \\n\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            assertEquals(result, AsciiCommand.printGroupAscii(testGroup3));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (DucatsException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void testPrintSongAscii_validGroups_success() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //test case 1"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            Song song \u003d new Song(\"Winnie the Pooh\", \"C-Major\", 120);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            song.addBar(new Bar(0, \"4_MC 4_RT 4_MC 4_RT\"));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            song.addBar(new Bar(1, \"4*_UC 4*_UC 4_UC\"));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            song.addBar(new Bar(2, \"2_RT 4*_RT 8_UB\"));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            song.addBar(new Bar(0, \"4_MC 4_RT 4_MC 4_RT\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            song.addBar(new Bar(0, \"4_UC 4_UA 4_UG 4_UF\"));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            song.addBar(new Bar(0, \"4_UF 4_UG 4_UA 4_UC\"));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            song.addBar(new Bar(0, \"4_LC 4_LD 4_LE 4_LF\"));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            song.addBar(new Bar(0, \"4_LG 4_LA 4_MC 4_UD\"));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            song.addBar(new Bar(0, \"4_LB 4_RT 4_LB 4_RT\"));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            song.addBar(new Bar(0, \"4_LF 4_LD 4_UA 4_UA\"));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            String result \u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    \"UC:          @. @. @                    @              @                                     \\n\""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UB:          --------       -! -        --            ---                                    \\n\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UA:                                       @          @                                   @ @ \\n\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UG: --------|--------|--------|--------|----@---|--@-----|--------|--------|--------|--------\\n\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UF:         |        |        |        |      @ |@       |        |        |        |        \\n\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UE: --------|--------|--------|--------|--------|--------|--------|--------|--------|--------\\n\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"UD:         |        |        |        |        |        |        |      @ |        |        \\n\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"MC: @-^-@-^-|--------|%---^.--|@-^-@-^-|--------|--------|--------|----@---|--^---^-|--------\\n\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LB:         |        |        |        |        |        |        |        |@   @   |        \\n\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LA: --------|--------|--------|--------|--------|--------|--------|--@-----|--------|--------\\n\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LG:         |        |        |        |        |        |        |@       |        |        \\n\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LF: --------|--------|--------|--------|--------|--------|------@-|--------|--------|@-------\\n\""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LE:                                                           @                              \\n\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LD:                                                        -@---                      -@-    \\n\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                   + \"LC:                                                       @                                  \\n\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            assertEquals(result, AsciiCommand.printSongAscii(song));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (DucatsException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 5,
      "Samuel787": 208
    }
  },
  {
    "path": "src/test/java/ducats/commands/CopyCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class CopyCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 4
    }
  },
  {
    "path": "src/test/java/ducats/commands/GroupCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package ducats.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class GroupCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 5
    }
  },
  {
    "path": "src/test/java/ducats/components/BarTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class BarTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private static ArrayList\u003cChord\u003e chords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    static void populateChords() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        Chord chord1 \u003d new Chord();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        chord1.addToChord(new Note(\"8\", Pitch.UPPER_A, true));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        chords.add(chord1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        Chord chord2 \u003d new Chord();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        chord2.addToChord(new Note(\"8\", Pitch.UPPER_A, false));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        chords.add(chord2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        chords.add(chord2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        chords.add(chord2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        Chord chord3 \u003d new Chord();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        chord3.addToChord(new Note(\"8\", Pitch.MIDDLE_C, true));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        chords.add(chord3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        Chord chord4 \u003d new Chord();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        chord4.addToChord(new Note(\"8\", Pitch.MIDDLE_C, false));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        chords.add(chord4);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        chords.add(chord4);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        chords.add(chord4);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    void testToString() throws DucatsException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        assertEquals(\"[[UAs],[UA],[UA],[UA],[MCs],[MC],[MC],[MC]]\", new Bar(0, \"2_UA 2_MC\").toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        assertEquals(\"[[UAs],[UA],[UA],[UA],[MCs],[MC],[MC],[MC]]\", new Bar(0, chords).toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    void testCompileNotesToChords() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ArrayList\u003cNote\u003e noteList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        noteList.add(new Note(\"2\", Pitch.UPPER_A, true));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        noteList.add(new Note(\"2\", Pitch.MIDDLE_C, true));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        assertEquals(chords.toString(), Bar.compileNotesToChords(noteList).toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    void testConvertStringToNotes() throws DucatsException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ArrayList\u003cNote\u003e noteList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        noteList.add(new Note(\"2\", Pitch.UPPER_A, true));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        noteList.add(new Note(\"2\", Pitch.MIDDLE_C, true));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        assertEquals(noteList.toString(), Bar.convertStringToNotes(\"2_UA 2_MC\").toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    void testCheckLength() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            ArrayList\u003cChord\u003e incompleteBar \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            Chord chord5 \u003d new Chord();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            chord5.addToChord(new Note(\"8\", Pitch.MIDDLE_C, true));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            incompleteBar.add(chord5);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            Bar.checkLength(incompleteBar, Bar.EIGHTH_NOTES_PER_BAR);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            assertEquals(e.getMessage(), new DucatsException(\"addbar\", \"\").getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //todo: test code for updateBarChart, copy"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 73
    }
  },
  {
    "path": "src/test/java/ducats/components/ChordTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class ChordTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author rohan-av"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ArrayList\u003cNote\u003e noteList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        noteList.add(new Note(\"8\", Pitch.UPPER_A, true));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        noteList.add(new Note(\"8\", Pitch.MIDDLE_C, false));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        Chord chord \u003d new Chord(noteList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        assertEquals(\"[UAs;MC]\", chord.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //todo: addToChord, updateChordString"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 24
    }
  },
  {
    "path": "src/test/java/ducats/components/NoteTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class NoteTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    void testToString() throws DucatsException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        assertEquals(\"UAs\", new Note(\"4_UA\").toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        assertEquals(\"RTs\", new Note(\"4*_RT\").toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        assertEquals(\"MC\", new Note(\"2\", Pitch.MIDDLE_C, false).toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 16
    }
  },
  {
    "path": "src/test/java/ducats/components/SongTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package ducats.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import ducats.DucatsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class SongTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    static Song song;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    static void createTestSong() throws DucatsException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        song \u003d new Song(\"testing\",\"C\",120);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        Bar bar \u003d new Bar(0, \"2_UA 4_RT 4_LC\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        song.addBar(bar);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    void testToString() throws DucatsException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        assertEquals(\"testing C 120 [[UAs],[UA],[UA],[UA],[RTs],[RT],[LCs],[LC]] \",song.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    //todo: showSongChart"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 26
    }
  },
  {
    "path": "src/test/main/java/ducats/components/JaccardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "package main.java.ducats.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import junit.framework.TestCase;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import ducats.components.WordGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "public class JaccardTest extends TestCase {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    private int x \u003d 1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    private int y \u003d 1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public void testAddition() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        int z \u003d x + y;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        WordGetter tester \u003d new ducats.components.WordGetter();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        assertEquals(\"help\", tester.closestWord(\"helo\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 15
    }
  },
  {
    "path": "src/test/main/java/ducats/components/OverlayGroupGroupTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "package main.java.ducats.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import ducats.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import ducats.commands.AddBarCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import ducats.commands.NewCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import ducats.components.SongList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import junit.framework.TestCase;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import ducats.commands.OverlayGroupGroup;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import ducats.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "import ducats.components.Song;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "public class OverlayGroupGroupTest extends TestCase {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    public void testGroupGroup() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //ducats.Storage storage \u003d new ducats.Storage(Paths.get"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        // (\"/home/rishi/Desktop/cs2113t/team/main/data/todo_list\" +\".txt\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        String fileDelimiter \u003d System.getProperty(\"file.separator\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        ducats.Storage storage \u003d new ducats.Storage (System.getProperty(\"user.dir\") + fileDelimiter + \"songlist.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //ducats.Storage storage \u003d new ducats.Storage(Paths.get(\"data\", \"songlist.txt\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        SongList songs \u003d new SongList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        String testSong \u003d \"twinkle aminor 123 [[UAs],[UA],[UAs],[UA],[UAs],[UA],[UAs],[UA]] [[UEs;UAs],[UE;UA],[UEs;\" +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"UAs],[UE;UA],[UEs;UAs],[UE;UA],[UEs;UAs],[UE;UA]] [[MCs;UEs],[MC;UE],[MCs;UEs],[MC;UE],[MCs;UEs],[MC;UE],[MCs;UEs],[MC;UE]]\" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \" [[UAs],[UA],[UAs],[UA],[UAs],[UA],[UAs],[UA]] [[UEs],[UE],[UEs],[UE],[UEs],[UE],[UEs],[UE]]\" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \" [[UAs],[UA],[UAs],[UA],[UAs],[UA],[UAs],[UA]] [[UEs],[UE],[UEs],[UE],[UEs],[UE],[UEs],[UE]]\" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \" [[MCs],[MC],[MCs],[MC],[MCs],[MC],[MCs],[MC]] [[UAs],[UA],[UAs],[UA],[UAs],[UA],[UAs],[UA]]\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \" [[UEs],[UE],[UEs],[UE],[UEs],[UE],[UEs],[UE]] [[MCs],[MC],[MCs],[MC],[MCs],[MC],[MCs],[MC]]\" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \" [[MCs],[MC],[MCs],[MC],[MCs],[MC],[MCs],[MC]] [[UAs],[UA],[UAs],[UA],[UAs],[UA],[UAs],[UA]]\" +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \" [[UEs],[UE],[UEs],[UE],[UEs],[UE],[UEs],[UE]] [[UAs],[UA],[UAs],[UA],[UAs],[UA],[UAs],[UA]]\" +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \" [[UEs],[UE],[UEs],[UE],[UEs],[UE],[UEs],[UE]] [[MCs],[MC],[MCs],[MC],[MCs],[MC],[MCs],[MC]]\" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \" [[UAs],[UA],[UAs],[UA],[UAs],[UA],[UAs],[UA]] [[UEs],[UE],[UEs],[UE],[UEs],[UE],[UEs],[UE]]\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \" [[UAs],[UA],[UAs],[UA],[UAs],[UA],[UAs],[UA]] [[UEs],[UE],[UEs],[UE],[UEs],[UE],[UEs],[UE]]\" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \" [[UAs],[UA],[UAs],[UA],[UAs],[UA],[UAs],[UA]] [[UEs],[UE],[UEs],[UE],[UEs],[UE],[UEs],[UE]]\" +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \" [[UAs],[UA],[UAs],[UA],[UAs],[UA],[UAs],[UA]] \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            songs.add(storage.convertSongFromString(testSong));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            System.out.println(testSong);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            songs \u003d new SongList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        String input \u003d \"{UPPER_A }{UPPER_A }{UPPER_A }{UPPER_A }|\" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_E UPPER_A }{UPPER_E UPPER_A }{UPPER_E UPPER_A }{UPPER_E UPPER_A }|\" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{MIDDLE_C UPPER_E }{MIDDLE_C UPPER_E }{MIDDLE_C UPPER_E }{MIDDLE_C UPPER_E }|\" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_A }{UPPER_A }{UPPER_A }{UPPER_A }|\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_E }{UPPER_E }{UPPER_E }{UPPER_E }|\" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_A }{UPPER_A }{UPPER_A }{UPPER_A }|\" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_E }{UPPER_E }{UPPER_E }{UPPER_E }|\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{MIDDLE_C }{MIDDLE_C }{MIDDLE_C }{MIDDLE_C }|\" +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_A }{UPPER_A }{UPPER_A }{UPPER_A }|\" +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_E }{UPPER_E }{UPPER_E }{UPPER_E }|\" +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{MIDDLE_C }{MIDDLE_C }{MIDDLE_C }{MIDDLE_C }|\" +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{MIDDLE_C }{MIDDLE_C }{MIDDLE_C }{MIDDLE_C }|\" +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_A }{UPPER_A }{UPPER_A }{UPPER_A }|\" +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_E }{UPPER_E }{UPPER_E }{UPPER_E }|\" +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_A }{UPPER_A }{UPPER_A }{UPPER_A }|\" +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_E }{UPPER_E }{UPPER_E }{UPPER_E }|\" +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{MIDDLE_C }{MIDDLE_C }{MIDDLE_C }{MIDDLE_C }|\" +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_A }{UPPER_A }{UPPER_A }{UPPER_A }|\" +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_E }{UPPER_E }{UPPER_E }{UPPER_E }|\" +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_A }{UPPER_A }{UPPER_A }{UPPER_A }|\" +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_E }{UPPER_E }{UPPER_E }{UPPER_E }|\" +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_A }{UPPER_A }{UPPER_A }{UPPER_A }|\" +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_E }{UPPER_E }{UPPER_E }{UPPER_E }|\" +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_A }{UPPER_A }{UPPER_A }{UPPER_A }|\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        String expected \u003d \"{UPPER_A UPPER_E UPPER_A }{UPPER_A UPPER_E UPPER_A }{UPPER_A UPPER_E UPPER_A }{UPPER_A UPPER_E UPPER_A }|\" +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_E UPPER_A MIDDLE_C UPPER_E }{UPPER_E UPPER_A MIDDLE_C UPPER_E }{UPPER_E UPPER_A MIDDLE_C UPPER_E }{UPPER_E UPPER_A MIDDLE_C UPPER_E }|\" +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{MIDDLE_C UPPER_E UPPER_A }{MIDDLE_C UPPER_E UPPER_A }{MIDDLE_C UPPER_E UPPER_A }{MIDDLE_C UPPER_E UPPER_A }|\" +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_A }{UPPER_A }{UPPER_A }{UPPER_A }|{UPPER_E }{UPPER_E }{UPPER_E }{UPPER_E }|\" +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_A }{UPPER_A }{UPPER_A }{UPPER_A }|{UPPER_E }{UPPER_E }{UPPER_E }{UPPER_E }|\" +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{MIDDLE_C }{MIDDLE_C }{MIDDLE_C }{MIDDLE_C }|{UPPER_A }{UPPER_A }{UPPER_A }{UPPER_A }|\" +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_E }{UPPER_E }{UPPER_E }{UPPER_E }|{MIDDLE_C }{MIDDLE_C }{MIDDLE_C }{MIDDLE_C }|\" +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{MIDDLE_C }{MIDDLE_C }{MIDDLE_C }{MIDDLE_C }|{UPPER_A }{UPPER_A }{UPPER_A }{UPPER_A }|\" +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_E }{UPPER_E }{UPPER_E }{UPPER_E }|{UPPER_A }{UPPER_A }{UPPER_A }{UPPER_A }|\" +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_E }{UPPER_E }{UPPER_E }{UPPER_E }|{MIDDLE_C }{MIDDLE_C }{MIDDLE_C }{MIDDLE_C }|\" +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_A }{UPPER_A }{UPPER_A }{UPPER_A }|{UPPER_E }{UPPER_E }{UPPER_E }{UPPER_E }|\" +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_A }{UPPER_A }{UPPER_A }{UPPER_A }|{UPPER_E }{UPPER_E }{UPPER_E }{UPPER_E }|\" +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_A }{UPPER_A }{UPPER_A }{UPPER_A }|{UPPER_E }{UPPER_E }{UPPER_E }{UPPER_E }|\" +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "                \"{UPPER_A }{UPPER_A }{UPPER_A }{UPPER_A }|\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rishi12438"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        ducats.commands.GroupCommand grouper \u003d new ducats.commands.GroupCommand(\"group 1 3 twinkle\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        ducats.commands.GroupCommand grouper1 \u003d new ducats.commands.GroupCommand(\"group 2 4 twinkle\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            grouper.execute(songs,ui,storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            grouper1.execute(songs,ui,storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        catch (Exception e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            System.out.print(e);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        OverlayGroupGroup tester \u003d new OverlayGroupGroup(\"overlay_group_group 1 2 1 1\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            tester.execute(songs,ui,storage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        catch( Exception e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        //ducats.components.SongList songList \u003d new SongList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        ArrayList\u003cducats.components.Song\u003e findList \u003d songs.findSong(\"twinkle\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "        assertEquals(expected,findList.get(0).showSongChart());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rishi12438"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rishi12438": 105
    }
  }
]
