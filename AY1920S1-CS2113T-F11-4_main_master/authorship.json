[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    mainClassName \u003d \"mistermusik.Main\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    archiveBaseName \u003d \"MisterMusik\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yenpeichih": 1,
      "Ryan-Wong-Ren-Wei": 1,
      "-": 39
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "rootProject.name \u003d \u0027duke\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "include \u0027mistermusik\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Ryan-Wong-Ren-Wei": 2,
      "-": 1
    }
  },
  {
    "path": "src/main/java/mistermusik/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package mistermusik;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import mistermusik.commons.events.formatting.EventDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.logic.EventList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.instruments.InstrumentList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.logic.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.ui.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.ui.UI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static UI ui \u003d new UI();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static EventList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    private static InstrumentList instruments \u003d new InstrumentList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private static EventDate calendarStartDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public static boolean allowCalendarFrequentPrint;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Main component. Runs the application."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        ui.welcome();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        String userInput \u003d parser.readUserInput().toLowerCase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        while (!userInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (userInput.equals(\"calendar on\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                allowCalendarFrequentPrint \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } else if (userInput.equals(\"calendar off\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                allowCalendarFrequentPrint \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            Command currCommand \u003d parser.parseInput(userInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            currCommand.execute(tasks, ui, storage, instruments, calendarStartDate, allowCalendarFrequentPrint);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            userInput \u003d parser.readUserInput();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        UI.printGoodbyeMsg();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Instantiates all necessary classes to run duke program."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static void setup() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        storage \u003d new Storage(new File(\"data/mistermusik.txt\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        tasks \u003d new EventList(storage.readFromFile(ui));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        calendarStartDate \u003d new EventDate(new Date());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        allowCalendarFrequentPrint \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 1,
      "Dng132FEI": 1,
      "yenpeichih": 2,
      "ZhangYihanNus": 9,
      "Ryan-Wong-Ren-Wei": 44,
      "-": 1
    }
  },
  {
    "path": "src/main/java/mistermusik/commons/Checklist.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "//@@author ZhangYihanNus"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "package mistermusik.commons;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public class Checklist {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private ArrayList\u003cString\u003e checklist;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Creates a new checklist."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * (Usually checklists starts from nothing, so no original input required"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Checklist() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.checklist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Adding a new item into the checklist."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param newItem String of new item."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void addItem(String newItem) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.checklist.add(newItem);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Deleting a specific item."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param itemIndex Index of the item to be removed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void deleteItem(int itemIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.checklist.remove(itemIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Editing an item."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param itemIndex Index of the item."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param newItem   New item content."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void editItem(int itemIndex, String newItem) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.checklist.set(itemIndex, newItem);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public ArrayList\u003cString\u003e getChecklist() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        return checklist;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYihanNus": 49
    }
  },
  {
    "path": "src/main/java/mistermusik/commons/Contact.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//@@author YuanJiayi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "package mistermusik.commons;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "public class Contact {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private String phoneNo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Creates a new contact."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param name    name to be stored"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param email   email to be stored"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param phoneNo phone number to be stored"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public Contact(String name, String email, String phoneNo) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.phoneNo \u003d phoneNo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public String getPhoneNo() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        return phoneNo;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void setEmail(String email) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void setPhoneNo(String phoneNo) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.phoneNo \u003d phoneNo;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 46
    }
  },
  {
    "path": "src/main/java/mistermusik/commons/Goal.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "//@@author yenpeichih"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "package mistermusik.commons;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "public class Goal {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * The string for the goal."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    private String goalDescription;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * The boolean for the achieved status of the goal."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    private boolean isAchieved;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Creates a Goal instance with the goal input by user and a boolean to check if goal is achieved."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public Goal(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        goalDescription \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        isAchieved \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Returns the string for the goal."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public String getGoal() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        return goalDescription;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Sets whether the goal has been achieved."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void setAchieved() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        isAchieved \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Returns the boolean for the achieved status of the goal."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public boolean getBooleanStatus() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        return isAchieved;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Gets whether the goal is achieved."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        if (isAchieved) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            return \"Yes\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            return \"No\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yenpeichih": 56
    }
  },
  {
    "path": "src/main/java/mistermusik/commons/Instruments/Instrument.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "package mistermusik.commons.instruments;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.formatting.EventDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "public class Instrument {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    private String instrumentName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    private ArrayList\u003cServiceInfo\u003e serviceInfoList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * Creates an Instrument instance with the input name."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * @param name Name of instrument"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public Instrument(String name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        this.instrumentName \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        serviceInfoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        return instrumentName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Adds service information."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public int addService(EventDate date, String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        ServiceInfo newServiceInfo \u003d new ServiceInfo(date, description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        serviceInfoList.add(newServiceInfo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        return serviceInfoList.size();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Gets service information."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public String getServiceInfos() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        String res \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        int j;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        for (int i \u003d 0; i \u003c serviceInfoList.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            j \u003d i + 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            res +\u003d j + \". \" + serviceInfoList.get(i).getServiceInfo() + \"\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public String getIndexAndService(int index) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        return index + \". \" + serviceInfoList.get(index - 1).getServiceInfo();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 11,
      "Dng132FEI": 41,
      "Ryan-Wong-Ren-Wei": 1
    }
  },
  {
    "path": "src/main/java/mistermusik/commons/Instruments/InstrumentList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "package mistermusik.commons.instruments;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.formatting.EventDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import mistermusik.commons.instruments.Instrument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "public class InstrumentList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    private ArrayList\u003cInstrument\u003e instrumentList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * Creates a Goal instance with the goal input by user and a boolean to check if goal is achieved."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public InstrumentList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        instrumentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Returns the instruments."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public String getInstruments() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        String res \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        int j;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        for (int i \u003d 0; i \u003c instrumentList.size(); i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            j \u003d i + 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            res +\u003d j + \". \" + instrumentList.get(i).getName() + \"\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Adds an instrument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param name The name of the instrument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @return The size of the instrument list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public int addInstrument(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        Instrument newInstrument \u003d new Instrument(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        instrumentList.add(newInstrument);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        return instrumentList.size();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Gets the info of service list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param index The index of instrument."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @return The info."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public String getInstrumentServiceInfo(int index) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        int indexInList \u003d index - 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        return instrumentList.get(indexInList).getServiceInfos();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Adds a service."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param index       The instrument index."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param date        The date."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param description The description."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @return The service."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public int service(int index, EventDate date, String description) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        int indexInList \u003d index - 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        return instrumentList.get(indexInList).addService(date, description);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Gets instrument."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param index Tje instrument index."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @return The instrument."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public String getIndexAndInstrument(int index) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        return index + \". \" + instrumentList.get(index - 1).getName();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Gets service."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param instrumentIndex Index of the instrument."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param serviceIndex    Index of the service."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @return The service."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public String getIndexAndService(int instrumentIndex, int serviceIndex) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        return instrumentList.get(instrumentIndex - 1).getIndexAndService(serviceIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 6,
      "Dng132FEI": 44,
      "ZhangYihanNus": 37,
      "Ryan-Wong-Ren-Wei": 1
    }
  },
  {
    "path": "src/main/java/mistermusik/commons/Instruments/ServiceInfo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "package mistermusik.commons.instruments;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.formatting.EventDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "public class ServiceInfo {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * date of the servicing."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    private EventDate serviceDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * brief description of the servicing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    private String serviceDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Creates a Goal instance with the goal input by user and a boolean to check if goal is achieved."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public ServiceInfo(EventDate date, String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        this.serviceDate \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        this.serviceDescription \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Returns the details of the servicing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * @return the details of the servicing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public String getServiceInfo() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        return serviceDescription + \" on \" + serviceDate.getFormattedDateString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 6,
      "Dng132FEI": 27,
      "Ryan-Wong-Ren-Wei": 1
    }
  },
  {
    "path": "src/main/java/mistermusik/commons/budgeting/Budgeting.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//@@author Ryan-Wong-Ren-Wei"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package mistermusik.commons.budgeting;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.Concert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.formatting.EventDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class Budgeting {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Map that stores all information regarding monthly budgeting for concerts"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * String is the month followed by year \"MM-yyyy\" representing the month that we analyze budget"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * MonthlyBudget is the class corresponding to the month being analyzed, stores all details"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * for budget analysis including the corresponding Concert objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private HashMap\u003cString, MonthlyBudget\u003e monthlyCosts;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private int budget; //current user defined budget"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Constructor for budgeting system. Sets budget and creates new map of monthly costs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param eventList List of Event objects containing all events currently in the list, to be used"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *                  in monthly budget/cost calculation"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Budgeting(ArrayList\u003cEvent\u003e eventList, int budget) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        createMap(eventList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Remove costs from list when deleting a Concert object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param concert Concert object to be deleted."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void removeMonthlyCost(Concert concert) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String monthAndYear \u003d getMonthAndYear(concert.getStartDate());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        MonthlyBudget currMonthlyBudget \u003d monthlyCosts.get(monthAndYear);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        currMonthlyBudget.removeConcert(concert);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (currMonthlyBudget.getListOfConcerts().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            monthlyCosts.remove(monthAndYear);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Updates the monthly concert costs when a new Concert object is added to EventList."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param concert Concert object to be added."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void updateMonthlyCost(Concert concert) throws CostExceedsBudgetException, NumberFormatException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String monthAndYear \u003d getMonthAndYear(concert.getStartDate());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        MonthlyBudget currMonthlyBudget \u003d monthlyCosts.get(monthAndYear);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (currMonthlyBudget \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            currMonthlyBudget \u003d new MonthlyBudget(concert.getStartDate());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            currMonthlyBudget.addConcert(concert, this.budget);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            monthlyCosts.put(monthAndYear, currMonthlyBudget);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            currMonthlyBudget.addConcert(concert, this.budget);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Sets monthly budget."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param budget New monthly budget"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void setBudget(int budget) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (budget \u003c 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            throw new NumberFormatException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates a map where key is the month(MM-yyyy format) and value is the MonthlyBudget object for that month."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param eventList list of all events in the current list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @return created map."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private void createMap(ArrayList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (eventList.isEmpty() || !hasConcerts(eventList)) { //if empty list, initialize map and return"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            monthlyCosts \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        monthlyCosts \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        EventDate monthlyDate \u003d null; //stores a date of a day in the month we are currently checking for"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        ArrayList\u003cEvent\u003e listOfConcerts \u003d new ArrayList\u003cEvent\u003e(); //to store the concerts in a given month"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String monthAndYear \u003d \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        for (Event currEvent : eventList) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (currEvent.getType() !\u003d \u0027C\u0027) { //if not concert type event, skip iteration"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (!isSameMonth(currEvent.getStartDate(), monthlyDate)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                if (!listOfConcerts.isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    this.monthlyCosts.put(monthAndYear, new MonthlyBudget(listOfConcerts));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                monthlyDate \u003d currEvent.getStartDate();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                monthAndYear \u003d getMonthAndYear(monthlyDate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                listOfConcerts.clear();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            listOfConcerts.add(currEvent);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.monthlyCosts.put(monthAndYear, new MonthlyBudget(listOfConcerts));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Checks list of events for concerts."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private boolean hasConcerts(ArrayList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        for (Event event : eventList) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (event.getType() \u003d\u003d \u0027C\u0027) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Checks whether two EventDate objects have the same month."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private boolean isSameMonth(EventDate eventDateA, EventDate eventDateB) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            cal.setTime(eventDateA.getEventJavaDate());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            int monthA \u003d cal.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            int yearA \u003d cal.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            cal.setTime(eventDateB.getEventJavaDate());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            int monthB \u003d cal.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            int yearB \u003d cal.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return (monthA \u003d\u003d monthB) \u0026\u0026 (yearA \u003d\u003d yearB);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Retrieves the month and year in a string \"mm-YYYY\" from an EvenDate object."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private String getMonthAndYear(EventDate date) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String monthAndYear \u003d date.getUserInputDateString();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        monthAndYear \u003d monthAndYear.substring(3, 10); //get MM-yyyy from dd-MM-yyyy HHmm"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return monthAndYear;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Gets total concert costs for a month."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param monthAndYear String containing month and year \"mm-YYYY\" to retrieve costs from"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public int getCostForMonth(String monthAndYear) throws NullPointerException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return monthlyCosts.get(monthAndYear).getTotalCost();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Gets current monthly budget."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public int getBudget() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return this.budget;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ryan-Wong-Ren-Wei": 180
    }
  },
  {
    "path": "src/main/java/mistermusik/commons/budgeting/CostExceedsBudgetException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package mistermusik.commons.budgeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.Concert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class CostExceedsBudgetException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private Concert concert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private int budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Constructs new CostExceedsBudgetException."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param concert Concert object that caused costs to exceed budget"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param budget  Current budget"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public CostExceedsBudgetException(Concert concert, int budget) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.concert \u003d concert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Returns corresponding concert object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Concert getConcert() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return concert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Returns current monthly budget."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public int getBudget() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return budget;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ryan-Wong-Ren-Wei": 33
    }
  },
  {
    "path": "src/main/java/mistermusik/commons/budgeting/MonthlyBudget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//@@author Ryan-Wong-Ren-Wei"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package mistermusik.commons.budgeting;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.Concert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.formatting.EventDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class MonthlyBudget {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private ArrayList\u003cConcert\u003e listOfConcerts; //list storing all concerts happening in the month"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private int totalCost; //total cost of concerts in month"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private EventDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Constructor for monthly budget class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param listOfConcerts Contains the list of Concert objects in the current month"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public MonthlyBudget(ArrayList\u003cEvent\u003e listOfConcerts) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.listOfConcerts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        setDateToFirstOfMonth(listOfConcerts.get(0).getStartDate()); //set EventDate date to first day of month"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        storeConcerts(listOfConcerts); //convert events to Concert objects, and store in list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Constructs an empty MonthlyBudget object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param date corresponding date"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public MonthlyBudget(EventDate date) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.totalCost \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        setDateToFirstOfMonth(date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        listOfConcerts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * stores all concerts in the listOfConcerts, and updates concert costs accordingly."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param concertsInMonth list of concerts to be added"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private void storeConcerts(ArrayList\u003cEvent\u003e concertsInMonth) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.totalCost \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        for (Event currEvent : concertsInMonth) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            Concert tempConcert \u003d (Concert) currEvent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            this.listOfConcerts.add(tempConcert);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            this.totalCost +\u003d tempConcert.getCost();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Attempts to add a new concert to the listOfConcerts, updates monthly budget. Throws exception"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * if this cannot be done due to cost exceeding budget."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param concert Concert object to be added"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param budget  Current budget"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @throws CostExceedsBudgetException Exception thrown if operation is a failure"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void addConcert(Concert concert, int budget) throws CostExceedsBudgetException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int newCost \u003d this.totalCost + concert.getCost();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (newCost \u003e budget) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            throw new CostExceedsBudgetException(concert, budget);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            this.totalCost \u003d newCost;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.listOfConcerts.add(concert);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Updates EventDate date to correct value."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param date EventDate of first event in the list of concerts for the current month"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private void setDateToFirstOfMonth(EventDate date) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String dateString \u003d date.getUserInputDateString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        dateString \u003d \"01\" + dateString.substring(2, 10);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.date \u003d new EventDate(dateString);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Returns list of concerts for this MonthlyBudget."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public ArrayList\u003cConcert\u003e getListOfConcerts() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return this.listOfConcerts;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Removes a concert from the list. Updates cost accordingly."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param concert Concert object to be removed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void removeConcert(Concert concert) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        for (Concert currConcert : listOfConcerts) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (currConcert.getStartDate().getUserInputDateString().equals("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    concert.getStartDate().getUserInputDateString())) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                listOfConcerts.remove(currConcert);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.totalCost -\u003d concert.getCost();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Returns total cost of concerts in current MonthlyBudget object."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public int getTotalCost() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return this.totalCost;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ryan-Wong-Ren-Wei": 110
    }
  },
  {
    "path": "src/main/java/mistermusik/commons/events/eventtypes/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package mistermusik.commons.events.eventtypes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.formatting.EventDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.Checklist;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.Contact;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.Goal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " * Parent class of all event types."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public abstract class Event implements Comparable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * event description."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * state of event (only applicable to ToDo)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * event start date object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    protected EventDate startEventDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * event end date object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    protected EventDate endEventDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * character signifying event type."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private char eventType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * list of goals."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private ArrayList\u003cGoal\u003e goalsList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * list of contacts."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private ArrayList\u003cContact\u003e contactList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * list of items to complete before event."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private Checklist checklist;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates event with one date input (e.g todo)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param description event description"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param isDone      boolean representing state of event completion"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param dateAndTime string representing date of event"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Event(String description, boolean isDone, String dateAndTime) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.startEventDate \u003d new EventDate(dateAndTime);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.endEventDate \u003d null; //no end date, set to null"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.eventType \u003d \u0027T\u0027; //event with no end date can only be ToDo"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        this.goalsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.contactList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.checklist \u003d new Checklist();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates event with two date input."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param description      event description"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param isDone           boolean representing state of event completion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param startDateAndTime string representing start date of event"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param endDateAndTime   string representing end date of event"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Event(String description, boolean isDone, String startDateAndTime, String endDateAndTime, char eventType) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.startEventDate \u003d new EventDate(startDateAndTime);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.endEventDate \u003d new EventDate(endDateAndTime);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.eventType \u003d eventType;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        this.goalsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.contactList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.checklist \u003d new Checklist();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Edit event with new description and two date input."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param newDescription new event description"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void editEvent(String newDescription) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.description \u003d newDescription;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Converts event type task to string format for printing."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @return Formatted string representing the event, whether or not it is completed and its date."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (getType() \u003d\u003d \u0027T\u0027) { //if todo, then only one date entry"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            return \"[\" + getDoneSymbol() + \"][T] \" + getDescription()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    + \" BY: \" + this.getStartDate().getFormattedDateString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else { //multiple date entries"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return \"[\" + getDoneSymbol() + \"][\" + getType() + \"] \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    + getDescription() + \" START: \" + startEventDate.getFormattedDateString()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    + \" END: \" + endEventDate.getFormattedDateString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Returns corresponding string containing information to be written to txt file for storage."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public String toStringForFile() { //string that is to be saved to file."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (getEndDate() \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return getDoneSymbol() + getType() + \"/\" + getDescription() + \"/\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    + getStartDate().getUserInputDateString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return getDoneSymbol() + getType() + \"/\" + getDescription() + \"/\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                + getStartDate().getUserInputDateString() + \"/\" + getEndDate().getUserInputDateString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Returns character signifying event type."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public char getType() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return eventType;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Gets the event start date."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public EventDate getStartDate() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return startEventDate;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Gets the event end date."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public EventDate getEndDate() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return endEventDate;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Gets the event description (name)."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Gets string symbol \"V\" if done, \"X\" if not done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public String getDoneSymbol() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        return (isDone) ? \"V\" : \"X\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Marks an event as done by setting the isDone boolean to true."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void setIsDoneToTrue() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    //@@author YuanJiayi"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Changes the event start date \u0026 time."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param newStartDate new EventDate object to replace current EventDate."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void rescheduleStartDate(EventDate newStartDate) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.startEventDate \u003d newStartDate;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Changes the event end date \u0026 time."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param newEndDate new EventDate object to replace current EventDate."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void rescheduleEndDate(EventDate newEndDate) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.endEventDate \u003d newEndDate;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    //@@author yenpeichih"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Adds a new goal to the list of goals for the event."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * @param goalInput Goal object to be added."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void addGoal(Goal goalInput) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        goalsList.add(goalInput);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Removes a goal from the list of goals."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * @param goalID Index of goal to be removed."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void removeGoal(int goalID) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        goalsList.remove(goalID);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Retrieves list of goals."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * @return ArrayList containing goals retrieved."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public ArrayList\u003cGoal\u003e getGoalList() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        return goalsList;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Retrieves specific goal object."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * @param goalID Index of goal object to be retrieved."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public Goal getGoalObject(int goalID) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        return goalsList.get(goalID);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Edits a specific goal."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * @param goalInput Input to replace old goal details."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * @param index     Index of goal to be edited."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void editGoalList(Goal goalInput, int index) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        goalsList.set(index, goalInput);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Sets a goal as achieved."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * @param goalID Index of goal in list."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void updateGoalAchieved(int goalID) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        goalsList.get(goalID).setAchieved();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    //@@author YuanJiayi"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Adds a contact to the list of contacts."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param contactInput Contact object to be added to list."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void addContact(Contact contactInput) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        contactList.add(contactInput);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Removes a Contact object from the list."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param contactIndex Index for Contact to be removed."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void removeContact(int contactIndex) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        contactList.remove(contactIndex);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Retrieves list of contacts for the event."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public ArrayList\u003cContact\u003e getContactList() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        return contactList;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Edits an existing Contact."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param contactIndex Index of Contact object in list to be edited."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param editType     Character signifying what is to be edited(N for new contact,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     *                     E for email, P for phone number)."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param newContact   Information required for editing, in form of string."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void editContact(int contactIndex, char editType, String newContact) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        if (editType \u003d\u003d \u0027N\u0027) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            contactList.get(contactIndex).setName(newContact);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        } else if (editType \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            contactList.get(contactIndex).setEmail(newContact);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        } else if (editType \u003d\u003d \u0027P\u0027) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            contactList.get(contactIndex).setPhoneNo(newContact);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    //@@author ZhangYihanNus"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Adds a new checklist for an event."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void addChecklist(String newChecklist) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.checklist.addItem(newChecklist);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Retrieves checklist for current event."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @return ArrayList of Strings containing checklist information."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public ArrayList\u003cString\u003e getChecklist() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        return this.checklist.getChecklist();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Edits an item in the checklist."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param checklistIndex Index of item to be edited."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param newChecklist   String containing information required for edition."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void editChecklist(int checklistIndex, String newChecklist) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.checklist.editItem(checklistIndex, newChecklist);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Deletes an item from the checklist."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param checklistIndex Index of item to be deleted."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void deleteChecklist(int checklistIndex) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.checklist.deleteItem(checklistIndex);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Compares two Event objects based on date, used to sort the list of Events."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public int compareTo(Event currEvent) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (this.startEventDate.getEventJavaDate().compareTo(currEvent.startEventDate.getEventJavaDate()) \u003e 0) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 70,
      "Dng132FEI": 5,
      "yenpeichih": 61,
      "ZhangYihanNus": 75,
      "Ryan-Wong-Ren-Wei": 131
    }
  },
  {
    "path": "src/main/java/mistermusik/commons/events/eventtypes/eventsubclasses/Assessment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package mistermusik.commons.events.eventtypes.eventsubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public abstract class Assessment extends Event {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates assessment event with isDone boolean for reading from files."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventType type of event denoted by character"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Assessment(String description, boolean isDone, String startDateAndTime,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                      String endDateAndTime, char eventType) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, isDone, startDateAndTime, endDateAndTime, eventType);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates assessment without isDone boolean for user input (assumes event entered is incomplete)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventType type of event denoted by character"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Assessment(String description, String startDateAndTime, String endDateAndTime, char eventType) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, false, startDateAndTime, endDateAndTime, eventType);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYihanNus": 16,
      "Ryan-Wong-Ren-Wei": 8
    }
  },
  {
    "path": "src/main/java/mistermusik/commons/events/eventtypes/eventsubclasses/Concert.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package mistermusik.commons.events.eventtypes.eventsubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " * Class that represents a concert type event."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public class Concert extends Event {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private int cost;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Creates new concert class with boolean to read from file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Concert(String description, boolean isDone, String startDateAndTime, String endDateAndTime, int cost) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, isDone, startDateAndTime, endDateAndTime, \u0027C\u0027);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Creates new concert class without boolean to read from user input (assumes incomplete)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Concert(String description, String startDateAndTime, String endDateAndTime, int cost) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, false, startDateAndTime, endDateAndTime, \u0027C\u0027);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Retrieves the concert cost."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public int getCost() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return this.cost;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Returns string containing info to be stored in txt file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public String toStringForFile() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        return getDoneSymbol() + getType() + \"/\" + getDescription() + \"/\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + getStartDate().getUserInputDateString() + \"/\" + getEndDate().getUserInputDateString() + \"/\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + this.cost;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Returns String containing info to be printed for user interaction."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        return \"[\" + getDoneSymbol() + \"][\" + getType() + \"] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + getDescription() + \" START: \" + startEventDate.getFormattedDateString()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \" END: \" + endEventDate.getFormattedDateString() + \" COST: \" + this.cost;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 8,
      "ZhangYihanNus": 13,
      "Ryan-Wong-Ren-Wei": 32
    }
  },
  {
    "path": "src/main/java/mistermusik/commons/events/eventtypes/eventsubclasses/RecurrentEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package mistermusik.commons.events.eventtypes.eventsubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " * Abstract class that represents event types that can be created as recurring events."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public abstract class RecurrentEvent extends Event {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates recurrent event with isDone boolean for reading from files."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param eventType type of event denoted by character"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public RecurrentEvent(String description, boolean isDone, String startDateAndTime,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                          String endDateAndTime, char eventType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        super(description, isDone, startDateAndTime, endDateAndTime, eventType);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates recurrent event without isDone boolean for user input (assumes task entered is incomplete)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param eventType type of event denoted by character"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public RecurrentEvent(String description, String startDateAndTime, String endDateAndTime, char eventType) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        super(description, false, startDateAndTime, endDateAndTime, eventType);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yenpeichih": 1,
      "ZhangYihanNus": 1,
      "Ryan-Wong-Ren-Wei": 25
    }
  },
  {
    "path": "src/main/java/mistermusik/commons/events/eventtypes/eventsubclasses/ToDo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package mistermusik.commons.events.eventtypes.eventsubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " * Class that represents a ToDo type event."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public class ToDo extends Event {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Creates ToDo with description and done boolean for reading from file."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public ToDo(String description, boolean isDone, String dateAndTime) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, isDone, dateAndTime);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates ToDo without boolean, assumed incomplete read from user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public ToDo(String description, String dateAndTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, false, dateAndTime);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Returns String containing information for user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return \"[\" + getDoneSymbol() + \"][T] \" + getDescription() + \" BY: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                + this.getStartDate().getFormattedDateString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYihanNus": 16,
      "Ryan-Wong-Ren-Wei": 15
    }
  },
  {
    "path": "src/main/java/mistermusik/commons/events/eventtypes/eventsubclasses/assessmentsubclasses/Exam.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package mistermusik.commons.events.eventtypes.eventsubclasses.assessmentsubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.Assessment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " * Exam type Event class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public class Exam extends Assessment {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates exam event with isDone boolean for reading from files."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Exam(String description, boolean isDone, String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, isDone, startDateAndTime, endDateAndTime, \u0027E\u0027);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates exam without isDone boolean for user input (assumes event entered is incomplete)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Exam(String description, String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, false, startDateAndTime, endDateAndTime, \u0027E\u0027);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYihanNus": 15,
      "Ryan-Wong-Ren-Wei": 7
    }
  },
  {
    "path": "src/main/java/mistermusik/commons/events/eventtypes/eventsubclasses/assessmentsubclasses/Recital.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package mistermusik.commons.events.eventtypes.eventsubclasses.assessmentsubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.Assessment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " * Recital type Event class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public class Recital extends Assessment {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates recital event with isDone boolean for reading from files."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Recital(String description, boolean isDone, String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, isDone, startDateAndTime, endDateAndTime, \u0027R\u0027);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates recital without isDone boolean for user input (assumes event entered is incomplete)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Recital(String description, String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, false, startDateAndTime, endDateAndTime, \u0027R\u0027);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYihanNus": 15,
      "Ryan-Wong-Ren-Wei": 7
    }
  },
  {
    "path": "src/main/java/mistermusik/commons/events/eventtypes/eventsubclasses/recurringeventsubclasses/Lesson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package mistermusik.commons.events.eventtypes.eventsubclasses.recurringeventsubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.RecurrentEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " * Lesson type Event class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public class Lesson extends RecurrentEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * creates new lesson class with boolean to read from file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Lesson(String description, boolean isDone, String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, isDone, startDateAndTime, endDateAndTime, \u0027L\u0027);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * creates new lesson class with boolean to read from user input (assume incomplete)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Lesson(String description, String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        super(description, false, startDateAndTime, endDateAndTime, \u0027L\u0027);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYihanNus": 16,
      "Ryan-Wong-Ren-Wei": 9
    }
  },
  {
    "path": "src/main/java/mistermusik/commons/events/eventtypes/eventsubclasses/recurringeventsubclasses/Practice.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package mistermusik.commons.events.eventtypes.eventsubclasses.recurringeventsubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.RecurrentEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " * Practice type Event class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public class Practice extends RecurrentEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * creates new practice class with boolean to read from file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Practice(String description, boolean isDone, String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, isDone, startDateAndTime, endDateAndTime, \u0027P\u0027);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * creates new practice class without boolean to read from user input (assume incomplete)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Practice(String description,String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, false, startDateAndTime, endDateAndTime, \u0027P\u0027);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYihanNus": 15,
      "Ryan-Wong-Ren-Wei": 8
    }
  },
  {
    "path": "src/main/java/mistermusik/commons/events/formatting/DateStringValidator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//@@author Ryan-Wong-Ren-Wei"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package mistermusik.commons.events.formatting;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " * Interface that handles the validation of user input date strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public interface DateStringValidator {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Checks if a string is valid entry for dd-MM-yyyy format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    static boolean isValidDateForToDo(String dateString) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        format.setLenient(false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            format.parse(dateString);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (ParseException | NullPointerException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Checks if a string is valid entry for dd-MM-yyyy HHmm format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    static boolean isValidDateForEvent(String dateString) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        format.setLenient(false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            format.parse(dateString);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (ParseException | NullPointerException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ryan-Wong-Ren-Wei": 40
    }
  },
  {
    "path": "src/main/java/mistermusik/commons/events/formatting/EventDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package mistermusik.commons.events.formatting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " * Model_Class.DateObj object stores the input date and time as a java object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class EventDate {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private String userInputDateString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private Date javaDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private String formattedDateString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static final int STRING_TO_DATE \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static final int DATE_TO_STRING \u003d 2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Creates a custom \"date object\" for string to date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public EventDate(String userInputDateString) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        this.userInputDateString \u003d userInputDateString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        formatDate(STRING_TO_DATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Creates a custom \"date object\" for date to string (used for recurring events)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public EventDate(Date dateClass) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.javaDate \u003d dateClass;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        formatDate(DATE_TO_STRING);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Takes in an identifier and performs the corresponding actions."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param identifier identify the date information is string to date or date to string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    private void formatDate(int identifier) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (identifier \u003d\u003d STRING_TO_DATE) { //convert user input to java date and store both."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                SimpleDateFormat formatter \u003d new SimpleDateFormat(\"EEE, dd MMM yyyy, HH:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                this.javaDate \u003d dateFormat.parse(userInputDateString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                this.formattedDateString \u003d formatter.format(javaDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                this.userInputDateString \u003d dateFormat.format(javaDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"EEE, dd MMM yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    this.javaDate \u003d dateFormat.parse(userInputDateString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    this.formattedDateString \u003d formatter.format(javaDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    this.userInputDateString \u003d dateFormat.format(javaDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                } catch (ParseException pe2) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    this.formattedDateString \u003d userInputDateString;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else if (identifier \u003d\u003d DATE_TO_STRING) { //convert date object to input string format and store both."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"EEE, dd MMM yyyy, HH:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            this.formattedDateString \u003d formatter.format(javaDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            formatter \u003d new SimpleDateFormat(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            this.userInputDateString \u003d formatter.format(javaDate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public String getUserInputDateString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        return userInputDateString;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public String getFormattedDateString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        return this.formattedDateString;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Gets the Event java Date object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public Date getEventJavaDate() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return this.javaDate;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Compares this dateObj with another input dateObj."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * If this \u003d\u003d other, return 0."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * If this \u003c other, return -1."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * If this \u003e other, return 1."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * If the two EventDates cannot be compared as either one of them stores the date as a string, return 2."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * @param other the input dateObj used for the comparison"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * @return Output the result of the comparison according to the algorithm stated above."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public int compare(EventDate other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (javaDate \u003d\u003d null || other.getEventJavaDate() \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            return 2;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            Date otherDate \u003d other.getEventJavaDate();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (javaDate.compareTo(otherDate) \u003e 0) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } else if (javaDate.compareTo(otherDate) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } else if (javaDate.compareTo(otherDate) \u003c 0) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        return 2;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * Adds n days to the javaDate object."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * @param noOfDays numbers of days to add"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void addDaysAndSetMidnight(int noOfDays) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Calendar dateToSet \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        dateToSet.setTime(this.javaDate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        //sets calender class date to midnight."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        dateToSet.add(Calendar.DATE, noOfDays);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        dateToSet.set(Calendar.HOUR_OF_DAY, 23);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        dateToSet.set(Calendar.MINUTE, 59);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        dateToSet.set(Calendar.SECOND, 59);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        this.javaDate \u003d dateToSet.getTime();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.userInputDateString \u003d formatter.format(javaDate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        formatter \u003d new SimpleDateFormat(\"EEE, dd MMM yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.formattedDateString \u003d formatter.format(javaDate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 5,
      "Dng132FEI": 26,
      "yenpeichih": 48,
      "ZhangYihanNus": 1,
      "Ryan-Wong-Ren-Wei": 57
    }
  },
  {
    "path": "src/main/java/mistermusik/commons/events/formatting/Predicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "//@@author Dng132FEI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "package mistermusik.commons.events.formatting;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": " * Model_Class.Predicate checks if an input satisfies a"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": " * certain predicate."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class Predicate\u003cT\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * compare_func codes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static final int EQUAL \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static final int GREATER_THAN \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static final int SMALLER_THAN \u003d 2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * compare_type codes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static final int JAVA_DATE \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static final int STRING \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * The item used as the reference to check if the predicate is true."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private T reference;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * The function used for the following comparison: reference (compare_func) input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private int compareFunc;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * The type of variable that is used as the reference."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private int variableType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates a new Model_Class.Predicate Object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param ref  the reference used to check if the predicate is true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param comp the comparator function used in the following comparison: reference (comp) input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Predicate(T ref, int comp) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        switch (comp) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case EQUAL:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            this.compareFunc \u003d EQUAL;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case GREATER_THAN:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            this.compareFunc \u003d GREATER_THAN;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case SMALLER_THAN:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            this.compareFunc \u003d SMALLER_THAN;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.reference \u003d ref;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (this.reference instanceof EventDate) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            this.variableType \u003d JAVA_DATE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else if (this.reference instanceof String) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            this.variableType \u003d STRING;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Compares the input date against the reference to check if the predicate is true."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    protected boolean compare_dates(T input) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        EventDate x \u003d (EventDate) reference;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        EventDate y \u003d (EventDate) input;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        switch (this.compareFunc) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case EQUAL:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return x.compare(y) \u003d\u003d 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case GREATER_THAN:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return x.compare(y) \u003d\u003d 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case SMALLER_THAN:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return x.compare(y) \u003d\u003d -1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Compares the input string against the reference to check if the predicate is true."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    protected boolean compare_str(T input) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String x \u003d (String) reference;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String y \u003d (String) input;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        switch (this.compareFunc) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case EQUAL:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return x.compareTo(y) \u003d\u003d 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case GREATER_THAN:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return x.compareTo(y) \u003e 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case SMALLER_THAN:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return x.compareTo(y) \u003c 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Checks if the input satisfies the predicate. This function"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * will direct to the correct protected comparator functions"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * based on the type of the reference."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public boolean check(T item) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        switch (this.variableType) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case JAVA_DATE:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return compare_dates(item);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case STRING:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return compare_str(item);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 23,
      "Dng132FEI": 11,
      "Ryan-Wong-Ren-Wei": 90
    }
  },
  {
    "path": "src/main/java/mistermusik/logic/ClashException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package mistermusik.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " * Exception that is thrown when a schedule clash is detected upon attempt to add new event."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " * Contains a reference to the clashing event to be shown to user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class ClashException extends Exception {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private Event clashEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    ClashException(Event clashEvent) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.clashEvent \u003d clashEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Event getClashEvent() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return clashEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ryan-Wong-Ren-Wei": 19
    }
  },
  {
    "path": "src/main/java/mistermusik/logic/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package mistermusik.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.Contact;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.Goal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.instruments.InstrumentList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.budgeting.CostExceedsBudgetException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.Concert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.assessmentsubclasses.Exam;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.assessmentsubclasses.Recital;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.recurringeventsubclasses.Lesson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.recurringeventsubclasses.Practice;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.formatting.DateStringValidator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.formatting.EventDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.storage.Storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.ui.CalendarView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.ui.UI;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " * Represents a command that is passed via user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " * Multiple types of commands are possible, executed using switch case method."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * The String representing the type of command e.g add/delete event"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * The String representing the continuation of the command, if it exists."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Contains further specific instructions about the command passed e.g which event to add or delete"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private String continuation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static final int NO_PERIOD \u003d -1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Creates a new command with the command type and specific instructions."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param command      The Model_Class.Command type"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param continuation The Model_Class.Command specific instructions"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Command(String command, String continuation) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.continuation \u003d continuation;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates a new command where only command param is passed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Specific instructions not necessary for these types of commands."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param command The Model_Class.Command type"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Command(String command) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.continuation \u003d \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Executes the command stored."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param events  Class containing the list of events and all relevant methods."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param ui      Class containing all relevant user interface instructions."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param storage Class containing access to the storage file and related instructions."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void execute(EventList events, UI ui, Storage storage, InstrumentList instruments,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        EventDate calendarStartDate, boolean allowCalendarFrequentPrint) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        boolean changesMade \u003d true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            findHelp(ui);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            listEvents(events, ui);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            changesMade \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        case \"reminder\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            remindEvents(events, ui);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            changesMade \u003d false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            markEventAsDone(events, ui);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            deleteEvent(events, ui);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            searchEvents(events, ui);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            changesMade \u003d false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            addNewTodo(events, ui);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case \"lesson\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            addNewEvent(events, ui, \u0027L\u0027);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case \"concert\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            addNewEvent(events, ui, \u0027C\u0027);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case \"practice\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            addNewEvent(events, ui, \u0027P\u0027);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case \"exam\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            addNewEvent(events, ui, \u0027E\u0027);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case \"recital\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            addNewEvent(events, ui, \u0027R\u0027);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            viewEvents(events, ui);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            changesMade \u003d false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        case \"check\":"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            checkFreeDays(events, ui);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            changesMade \u003d false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        case \"reschedule\":"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            rescheduleEvent(events, ui);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        case \"edit\":"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            editEvent(events, ui);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        case \"calendar\":"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            printCalendar(events, ui, calendarStartDate);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case \"budget\":"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            showOrSetBudget(events, ui);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        case \"goal\":"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            manageGoals(events, ui);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        case \"contact\":"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            manageContacts(events, ui);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        case \"checklist\":"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            manageChecklist(events, ui);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        case \"instrument\":"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            manageInstruments(instruments, ui);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            ui.printInvalidCommand();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            changesMade \u003d false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        if (changesMade) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            events.sortList();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            storage.saveToFile(events, ui);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        if ((!command.equals(\"calendar\")) \u0026\u0026 allowCalendarFrequentPrint) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            CalendarView calendarView \u003d null;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            EventDate today \u003d new EventDate(calendarStartDate.getEventJavaDate());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            calendarView \u003d new CalendarView(events, today);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            calendarView.setCalendarInfo();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            ui.printCalendar(calendarView.getStringForOutput());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    //@@author YuanJiayi"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * check help command for printing the correct commands."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private void findHelp(UI ui) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            ui.printHelpList();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            switch (continuation) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"calendar\":"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                ui.printCalendarHelp();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"lesson\":"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"practice\":"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"concert\":"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"exam\":"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"recital\":"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                ui.printEventHelp();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"goal\":"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                ui.printGoalHelp();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"contact\":"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                ui.printContactHelp();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"checklist\":"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                ui.printChecklistHelp();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"instruments\":"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                ui.printInstrumentsHelp();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"reschedule\":"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"edit\":"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"change\":"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                ui.printChangeHelp();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                ui.printHelpList();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    //@@author ZhangYihanNus"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Add, view, edit or delete checklist items for an event."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param events The event list"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param ui     UI"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private void manageChecklist(EventList events, UI ui) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            ui.printChecklistCommandInvalid();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                String[] splitChecklist \u003d continuation.split(\"/\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                String[] checklistCommand \u003d splitChecklist[0].split(\" \");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                int eventIndex \u003d Integer.parseInt(checklistCommand[1]) - 1;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                if (checklistCommand.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    int checklistIndex \u003d Integer.parseInt(checklistCommand[2]);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    switch (checklistCommand[0]) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    case \"delete\":"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        events.getEvent(eventIndex).deleteChecklist(checklistIndex - 1);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        ui.checklistDeleted(eventIndex);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    case \"edit\":"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        events.getEvent(eventIndex).editChecklist(checklistIndex - 1, splitChecklist[1]);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        ui.checklistEdited(splitChecklist[1], eventIndex);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    switch (checklistCommand[0]) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    case \"add\":"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        events.getEvent(eventIndex).addChecklist(splitChecklist[1]);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        System.out.println(splitChecklist[1] + \"___\" + eventIndex);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        ui.checklistAdded(splitChecklist[1], eventIndex);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    case \"view\":"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        //print goals list"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        ArrayList\u003cString\u003e thisChecklist \u003d events.getEvent(eventIndex).getChecklist();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        ui.printEventChecklist(thisChecklist, eventIndex, events.getEvent(eventIndex));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            } catch (IndexOutOfBoundsException ne) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                ui.printNoSuchEvent();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            } catch (NumberFormatException numE) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                ui.printNotAnInteger();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private void printCalendar(EventList events, UI ui, EventDate calendarStartDate) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        CalendarView calendarView \u003d null;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            EventDate today \u003d new EventDate(calendarStartDate.getEventJavaDate());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            calendarView \u003d new CalendarView(events, today);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            calendarView.setCalendarInfo();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            ui.printCalendar(calendarView.getStringForOutput());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        } else if (continuation.equals(\"next\")) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            calendarStartDate.addDaysAndSetMidnight(7);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            calendarView \u003d new CalendarView(events, calendarStartDate);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            calendarView.setCalendarInfo();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            ui.printCalendar(calendarView.getStringForOutput());"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        } else if (continuation.equals(\"last\")) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            calendarStartDate.addDaysAndSetMidnight(-7);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            calendarView \u003d new CalendarView(events, calendarStartDate);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            calendarView.setCalendarInfo();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            ui.printCalendar(calendarView.getStringForOutput());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        } else if (continuation.equals(\"on\")) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(\"Allowing printing calendar after every command!\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        } else if (continuation.equals(\"off\")) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(\"Not allowing printing calendar after every command!\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            ui.printInvalidCalendarCommand();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Command to edit an event in the list."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private void editEvent(EventList events, UI ui) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            ui.printEventDescriptionEmpty();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String[] splitInfo \u003d continuation.split(\"/\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            int eventIndex \u003d Integer.parseInt(splitInfo[0]) - 1;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String newDescription \u003d splitInfo[1];"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            events.editEvent(eventIndex, newDescription);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            ui.printEditedEvent(eventIndex + 1, events.getEvent(eventIndex));"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    //@@author Ryan-Wong-Ren-Wei"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Sends cost information to UI class to be printed for a specific month, or sets a new"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * monthly stipulated budget, based on user input."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private void showOrSetBudget(EventList events, UI ui) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.printBudgetCommandInvalid();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else if (continuation.length() \u003e 4 \u0026\u0026 continuation.substring(0, 3).equals(\"set\")) { //set new budget"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                int newBudget \u003d Integer.parseInt(continuation.substring(4));"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                events.getBudgeting().setBudget(newBudget);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                UI.printBudgetSet(newBudget);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } catch (NumberFormatException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                ui.printNotAnInteger();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else { //show budget for given month"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            String monthAndYear \u003d continuation;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                int cost \u003d events.getBudgeting().getCostForMonth(monthAndYear);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                UI.printCostForMonth(monthAndYear, cost);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                UI.printNoConcertsForThatMonth();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private void searchEvents(EventList events, UI ui) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.printEventDescriptionEmpty();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String searchKeyWords \u003d continuation;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String foundEvent \u003d \"\";"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            int viewIndex \u003d 1;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            for (Event viewEvent : events.getEventArrayList()) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                if (viewEvent.toString().contains(searchKeyWords)) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    foundEvent +\u003d viewIndex + \". \" + viewEvent.toString() + \"\\n\";"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                viewIndex++;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            boolean isEventsFound \u003d !foundEvent.isEmpty();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            ui.printFoundEvents(foundEvent, isEventsFound);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    //@@author ZhangYihanNus"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Finds the next 3 free days in the schedule and passes them to UI class to be printed."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private void checkFreeDays(EventList events, UI ui) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        EventDate dayToCheckIfFreeObject \u003d new EventDate(new Date());"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        dayToCheckIfFreeObject.addDaysAndSetMidnight(0);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        Queue\u003cString\u003e daysFree \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        int nextDays \u003d 1;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        while (daysFree.size() \u003c\u003d 3) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            boolean isFree \u003d true;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            for (Event viewEvent : events.getEventArrayList()) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                if (viewEvent.getStartDate().getFormattedDateString().substring(0, 16)"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        .equals(dayToCheckIfFreeObject.getFormattedDateString())) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    isFree \u003d false;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            if (isFree) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                daysFree.add(dayToCheckIfFreeObject.getFormattedDateString());"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            dayToCheckIfFreeObject.addDaysAndSetMidnight(1);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            nextDays++;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        ui.printFreeDays(daysFree);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    //@@author yenpeichih"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Searches list for events found in a singular date, passes to UI for printing."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    private void viewEvents(EventList events, UI ui) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        boolean isEventsFound;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            ui.printViewCommandInvalid();"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            String dateToView \u003d continuation;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            ArrayList\u003cString\u003e eventsOnASpecificDate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            EventDate findDate \u003d new EventDate(dateToView);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            for (int i \u003d 0; i \u003c events.getEventArrayList().size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                Event viewEvent \u003d events.getEvent(i);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                String eventStringWithIndex \u003d \"\";"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                if (viewEvent.toString().contains(findDate.getFormattedDateString())) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    eventStringWithIndex +\u003d i + 1 + \". \" + viewEvent.toString();"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    eventsOnASpecificDate.add(eventStringWithIndex);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            if (eventsOnASpecificDate.isEmpty()) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                isEventsFound \u003d false;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                isEventsFound \u003d true;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            ui.printEventsOnASpecificDate(eventsOnASpecificDate, isEventsFound);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    //@@author Ryan-Wong-Ren-Wei"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private void addNewEvent(EventList events, UI ui, char eventType) {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.printEventDescriptionEmpty();"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                EntryForEvent entryForEvent \u003d new EntryForEvent().invoke(); //separate all info into relevant details"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                Event newEvent \u003d newEvent(eventType, entryForEvent); //instantiate new event"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                assert newEvent !\u003d null;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                Calendar currentDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                if (entryForEvent.getPeriod() \u003d\u003d NO_PERIOD) { //non-recurring"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    events.addEvent(newEvent);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    ui.printEventAdded(newEvent, events.getNumEvents());"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    if (newEvent.getStartDate().getEventJavaDate().compareTo(currentDate.getTime()) \u003c 0) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        ui.printEnteredEventOver();"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                } else { //recurring event"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    if (entryForEvent.getPeriod() \u003e 0) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        events.addRecurringEvent(newEvent, entryForEvent.getPeriod());"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        ui.printRecurringEventAdded(newEvent, events.getNumEvents(), entryForEvent.getPeriod());"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        if (newEvent.getStartDate().getEventJavaDate().compareTo(currentDate.getTime()) \u003c 0) {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                            ui.printEnteredEventOver();"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        throw new PeriodRangeException();"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } catch (ClashException e) { //clash found"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                ui.printScheduleClash(e.getClashEvent());"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } catch (CostExceedsBudgetException e) { //budget exceeded in attempt to add concert"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                ui.printCostExceedsBudgetMsg(e.getConcert(), e.getBudget());"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } catch (StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    | ParseException | NumberFormatException e) { //error interpreting info(wrong user input)"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                ui.printNewEntryFormatWrong();"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } catch (EndBeforeStartException e) { //start time is after end time"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                ui.printEventEndsBeforeStart();"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } catch (PeriodRangeException e) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                ui.printPeriodNotPositive();"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Instantiates a new event (excludes to-do) based on details passed as parameter."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param entryForEvent contains all necessary info for creating new event"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @return instantiated event"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private Event newEvent(char eventType, EntryForEvent entryForEvent) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event newEvent \u003d null;"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        switch (eventType) {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case \u0027L\u0027:"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            newEvent \u003d new Lesson(entryForEvent.getDescription(), false, entryForEvent.getStartDate(),"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    entryForEvent.getEndDate());"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case \u0027C\u0027:"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            newEvent \u003d new Concert(entryForEvent.getDescription(), false, entryForEvent.getStartDate(),"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    entryForEvent.getEndDate(), entryForEvent.getCost());"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case \u0027P\u0027:"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            newEvent \u003d new Practice(entryForEvent.getDescription(), false, entryForEvent.getStartDate(),"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    entryForEvent.getEndDate());"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case \u0027E\u0027:"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            newEvent \u003d new Exam(entryForEvent.getDescription(), false, entryForEvent.getStartDate(),"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    entryForEvent.getEndDate());"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        case \u0027R\u0027:"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            newEvent \u003d new Recital(entryForEvent.getDescription(), false, entryForEvent.getStartDate(),"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    entryForEvent.getEndDate());"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return newEvent;"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Adds a new to-do to the list of events in EventList object."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private void addNewTodo(EventList events, UI ui) {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.printEventDescriptionEmpty();"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            EntryForToDo entryForToDo \u003d new EntryForToDo().invoke(); //separate all info into relevant details"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            Event newToDo \u003d new ToDo(entryForToDo.getDescription(), entryForToDo.getDate());"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            events.addNewTodo(newToDo);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.printEventAdded(newToDo, events.getNumEvents());"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            Calendar currentDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            if (newToDo.getStartDate().getEventJavaDate().compareTo(currentDate.getTime()) \u003c 0) {"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                ui.printEnteredEventOver();"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            }"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException | ParseException e) {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.printNewEntryFormatWrong();"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private void deleteEvent(EventList events, UI ui) {"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            int eventNo \u003d Integer.parseInt(continuation);"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            Event currEvent \u003d events.getEvent(eventNo - 1);"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            events.deleteEvent(eventNo - 1);"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.eventDeleted(currEvent);"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (IndexOutOfBoundsException outOfBoundsE) {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.printNoSuchEvent();"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (NumberFormatException notInteger) {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.printNotAnInteger();"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private void markEventAsDone(EventList events, UI ui) {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            int eventNo \u003d Integer.parseInt(continuation);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (events.getEvent(eventNo - 1) instanceof ToDo) {"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                events.getEvent(eventNo - 1).setIsDoneToTrue();"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                ui.eventDone(events.getEvent(eventNo - 1));"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                ui.printNoSuchEvent();"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (IndexOutOfBoundsException outOfBoundsE) {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.printNoSuchEvent();"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (NumberFormatException notInteger) {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.printNotAnInteger();"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    //@@author YuanJiayi"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Reschedules the date and time of an existing event."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param events The event list."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private void rescheduleEvent(EventList events, UI ui) {"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Event newEvent;"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        EventDate copyOfStartDate;"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        EventDate copyOfEndDate;"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            String[] rescheduleDetail \u003d continuation.split(\" \"); //split details by space (dd-MM-yyyy HHmm HHmm)"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            int eventIndex \u003d Integer.parseInt(rescheduleDetail[0]) - 1;"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            if (events.getEvent(eventIndex).getType() \u003d\u003d \u0027T\u0027) { //reschedule does not work for Todo type"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            newEvent \u003d events.getEvent(eventIndex); //event to be used as a replacement."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            copyOfStartDate \u003d new EventDate(newEvent.getStartDate().getUserInputDateString());"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            copyOfEndDate \u003d new EventDate(newEvent.getEndDate().getUserInputDateString());"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            EventDate newStartDate \u003d new EventDate(rescheduleDetail[1] + \" \" + rescheduleDetail[2]);"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            EventDate newEndDate \u003d new EventDate(rescheduleDetail[1] + \" \" + rescheduleDetail[3]);"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            events.deleteEvent(eventIndex); //delete event from list before continuing"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            newEvent.rescheduleStartDate(newStartDate); //reschedule start date \u0026 time"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            newEvent.rescheduleEndDate(newEndDate); //reschedule end date \u0026 time"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException | UnsupportedOperationException e) {"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            ui.printRescheduleInvalidCommand();"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            events.addEvent(newEvent);"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            ui.printEventRescheduled(newEvent);"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        } catch (ClashException clashE) {"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            ui.printScheduleClash(clashE.getClashEvent());"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            newEvent.rescheduleStartDate(copyOfStartDate);"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            newEvent.rescheduleEndDate(copyOfEndDate);"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            events.undoDeletionOfEvent(newEvent);"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        } catch (CostExceedsBudgetException e) {"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            ui.printCostExceedsBudgetMsg(e.getConcert(), e.getBudget());"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            newEvent.rescheduleStartDate(copyOfStartDate);"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            newEvent.rescheduleEndDate(copyOfEndDate);"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            events.undoDeletionOfEvent(newEvent);"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            ui.printEventEndsBeforeStart();"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            newEvent.rescheduleStartDate(copyOfStartDate);"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            newEvent.rescheduleEndDate(copyOfEndDate);"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            events.undoDeletionOfEvent(newEvent);"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    //@@author yenpeichih"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Manages the goals of an existing event."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     *"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * @param events The event list."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    private void manageGoals(EventList events, UI ui) {"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            ui.printGoalCommandInvalid();"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            String[] splitGoal \u003d continuation.split(\"/\");"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            String[] goalCommand \u003d splitGoal[0].split(\" \");"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            int eventIndex \u003d Integer.parseInt(goalCommand[1]) - 1;"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            if (goalCommand.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                int goalIndex \u003d Integer.parseInt(goalCommand[2]);"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                switch (goalCommand[0]) {"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                case \"delete\":"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    if (!events.getEvent(eventIndex).getGoalList().isEmpty()) {"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                            String deletedGoal \u003d events.getEvent(eventIndex).getGoalObject(goalIndex - 1).getGoal();"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                            events.getEvent(eventIndex).removeGoal(goalIndex - 1);"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                            ui.printGoalDeleted(deletedGoal);"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                            ui.printNoSuchGoal();"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        ui.printNoSuchGoal();"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                case \"edit\":"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    if (!events.getEvent(eventIndex).getGoalList().isEmpty()) {"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                            Goal newGoal \u003d new Goal(splitGoal[1]);"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                            events.getEvent(eventIndex).editGoalList(newGoal, goalIndex - 1);"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                            ui.printGoalUpdated(events, eventIndex, goalIndex - 1);"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                            ui.printNoSuchGoal();"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        ui.printNoSuchGoal();"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                case \"achieved\":"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    if (!events.getEvent(eventIndex).getGoalList().isEmpty()) {"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                            if (events.getEvent(eventIndex).getGoalObject(goalIndex - 1).getBooleanStatus()) {"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                                ui.printGoalAlreadyAchieved();"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                                events.getEvent(eventIndex).updateGoalAchieved(goalIndex - 1);"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                                ui.printGoalSetAsAchieved(events.getEvent(eventIndex).getGoalObject(goalIndex - 1));"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                            ui.printNoSuchGoal();"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        ui.printNoSuchGoal();"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    ui.printGoalCommandInvalid();"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                }"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                switch (goalCommand[0]) {"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                case \"add\":"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    Goal newGoal \u003d new Goal(splitGoal[1]);"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    events.getEvent(eventIndex).addGoal(newGoal);"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    ui.printGoalAdded(newGoal.getGoal());"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                case \"view\":"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    ui.printEventGoals(events.getEvent(eventIndex));"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    ui.printGoalCommandInvalid();"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                }"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            }"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        } catch (IndexOutOfBoundsException ne) {"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            ui.printNoSuchEvent();"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        } catch (NumberFormatException numE) {"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            ui.printNotAnInteger();"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    //@@author YuanJiayi"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Manage the contacts of an existing event."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param events The event list."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private void manageContacts(EventList events, UI ui) {"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            ui.printContactCommandInvalid();"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            String[] splitContact \u003d continuation.split(\"/\");"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            String[] contactCommand \u003d splitContact[0].split(\" \");"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            if (!(contactCommand[0].equals(\"add\") || contactCommand[0].equals(\"delete\")"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    || contactCommand[0].equals(\"view\") || contactCommand[0].equals(\"edit\"))) {"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            int eventIndex \u003d Integer.parseInt(contactCommand[1]) - 1;"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            if (contactCommand.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                switch (contactCommand[0]) {"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                case \"add\":"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    String[] contactDetails \u003d splitContact[1].split(\",\");"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    if (contactDetails.length !\u003d 3) {"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    Contact newContact \u003d new Contact(contactDetails[0], contactDetails[1], contactDetails[2]);"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    events.getEvent(eventIndex).addContact(newContact);"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    ui.printContactAdded();"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                case \"view\":"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    if (events.getEvent(eventIndex).getContactList().isEmpty()) {"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        ui.printNoContactInEvent();"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        ui.printEventContacts(events.getEvent(eventIndex));"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                switch (contactCommand[0]) {"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                case \"delete\":"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        int contactIndex \u003d Integer.parseInt(contactCommand[2]) - 1;"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        events.getEvent(eventIndex).removeContact(contactIndex);"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        ui.printContactDeleted();"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        ui.printNoSuchContact();"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                case \"edit\":"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    if (!continuation.contains(\"/\")) {"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    char editType;"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    switch (contactCommand[3]) {"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    case \"name\":"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        editType \u003d \u0027N\u0027;"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    case \"email\":"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        editType \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    case \"phone\":"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        editType \u003d \u0027P\u0027;"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        int contactIndex \u003d Integer.parseInt(contactCommand[2]) - 1;"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        events.getEvent(eventIndex).editContact(contactIndex, editType, splitContact[1]);"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        ui.printContactEdited(events.getEvent(eventIndex).getContactList().get(contactIndex));"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        ui.printNoSuchContact();"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            ui.printNoSuchEvent();"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        } catch (NumberFormatException en) {"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            ui.printNotAnInteger();"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        } catch (UnsupportedOperationException e) {"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            ui.printContactCommandInvalid();"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    //@@author Dng132FEI"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * Method to manage instruments."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public void manageInstruments(InstrumentList instruments, UI ui) {"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                ui.printNoSuchEvent();"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            }"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            String[] splitInstrument \u003d continuation.split(\"/\");"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            String[] instrumentCommand \u003d continuation.split(\" \");"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            int instrumentIndex;"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            String instrumentIndexAndName;"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            switch (instrumentCommand[0]) {"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            case \"add\":"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                instrumentIndex \u003d instruments.addInstrument(splitInstrument[1]);"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                instrumentIndexAndName \u003d instruments.getIndexAndInstrument(instrumentIndex);"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                ui.instrumentAdded(instrumentIndexAndName);"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            case \"service\":"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                instrumentIndex \u003d Integer.parseInt(instrumentCommand[1]);"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                EventDate inputDate \u003d new EventDate(splitInstrument[2]);"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                int serviceIndex \u003d instruments.service(instrumentIndex, inputDate, splitInstrument[1]);"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                instrumentIndexAndName \u003d instruments.getIndexAndInstrument(instrumentIndex);"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                String serviceIndexAndName \u003d instruments.getIndexAndService(instrumentIndex, serviceIndex);"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                ui.serviceAdded(serviceIndexAndName, instrumentIndexAndName);"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            case \"view\":"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                switch (instrumentCommand[1]) {"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                case \"instruments\":"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                    String listOfInstruments \u003d instruments.getInstruments();"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                    ui.printInstruments(listOfInstruments);"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                case \"services\":"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                    instrumentIndex \u003d Integer.parseInt(instrumentCommand[2]);"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                    String listOfServices \u003d instruments.getInstrumentServiceInfo(instrumentIndex);"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                    instrumentIndexAndName \u003d instruments.getIndexAndInstrument(instrumentIndex);"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                    ui.printServices(listOfServices, instrumentIndexAndName);"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                }"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            }"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            ui.printNoSuchEvent();"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    //@@author Dng132FEI"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    private void remindEvents(EventList events, UI ui) {"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            ui.printReminderDays(events, 3);"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        String[] instrumentCommand \u003d continuation.split(\" \");"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        if (instrumentCommand.length \u003e 1) {"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            ui.printInvalidCommand();"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            int days \u003d Integer.parseInt(instrumentCommand[0]);"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            ui.printReminderDays(events, days);"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            ui.printInvalidCommand();"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    private void listEvents(EventList events, UI ui) {"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        UI.printListOfEvents(events);"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    //@@author Ryan-Wong-Ren-Wei"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Contains all info concerning a new entry an event."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private class EntryForEvent {"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        private String startDate;"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        private String endDate;"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        private int cost; //only for concert events"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        private int period; //recurring period. -1(NON_RECURRING) if non-recurring."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        public String getDescription() {"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return description;"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String getStartDate() {"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return startDate;"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String getEndDate() {"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return endDate;"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int getPeriod() {"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return period;"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int getCost() {"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return cost;"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        static final int NON_RECURRING \u003d -1;"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "         * contains all info regarding an entry for a non-recurring event."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "         *"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "         * @return organized entryForEvent object containing information required for a new event."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        private EntryForEvent invoke() throws NumberFormatException, ParseException {"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            int nonRecurring \u003d -1;"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            String[] splitEvent \u003d continuation.split(\"/\");"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            description \u003d splitEvent[0];"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            String date \u003d splitEvent[1];"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            String[] splitDate \u003d date.split(\" \");"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (splitDate.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                startDate \u003d splitDate[0] + \" \" + splitDate[1];"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                endDate \u003d splitDate[0] + \" \" + splitDate[2];"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (!DateStringValidator.isValidDateForEvent(startDate)"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    || !DateStringValidator.isValidDateForEvent(endDate)) {"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                throw new ParseException(\"Invalid date for Event\", 0);"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (splitEvent.length \u003d\u003d 2) { //cant find period extension of command, event is non-recurring"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                period \u003d nonRecurring;"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                if (command.equals(\"concert\")) {"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    cost \u003d Integer.parseInt(splitEvent[2]);"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    period \u003d nonRecurring;"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    period \u003d Integer.parseInt(splitEvent[2]);"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Contains all info concerning a new entry for a To-Do."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private class EntryForToDo {"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        private String date;"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        public String getDescription() {"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return description;"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        public String getDate() {"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "         * contains all info regarding an entry for a To-Do."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "         *"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "         * @return organized entryForEvent information"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        public EntryForToDo invoke() throws ParseException {"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            String[] splitEvent \u003d continuation.split(\"/\");"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            description \u003d splitEvent[0];"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            date \u003d splitEvent[1];"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (DateStringValidator.isValidDateForToDo(date)) {"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                return this;"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                throw new ParseException(\"Date is invalid\", 0);"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 220,
      "Dng132FEI": 83,
      "yenpeichih": 144,
      "ZhangYihanNus": 186,
      "Ryan-Wong-Ren-Wei": 372,
      "-": 2
    }
  },
  {
    "path": "src/main/java/mistermusik/logic/EndBeforeStartException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package mistermusik.logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " * Exception thrown when an instantiated event ends before it starts."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class EndBeforeStartException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    EndBeforeStartException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 4,
      "Ryan-Wong-Ren-Wei": 7,
      "-": 1
    }
  },
  {
    "path": "src/main/java/mistermusik/logic/EventList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package mistermusik.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import mistermusik.commons.Goal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import mistermusik.commons.budgeting.Budgeting;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import mistermusik.commons.budgeting.CostExceedsBudgetException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.Concert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.assessmentsubclasses.Exam;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.assessmentsubclasses.Recital;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.recurringeventsubclasses.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.recurringeventsubclasses.Practice;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.formatting.EventDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.formatting.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": " * Allows for access to the list of events currently stored, and editing that list of events."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " * Does NOT contain any methods for reading/writing to savefile."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class EventList {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * list of Model_Class.Event objects currently stored."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private ArrayList\u003cEvent\u003e eventArrayList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * compareFunc codes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static final int GREATER_THAN \u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static final int SMALLER_THAN \u003d 2;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Class that handles all budgeting for concerts."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private Budgeting budgeting;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Index to manage which events are over."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public int currentDateIndex \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Calendar class to get the current system date."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private Calendar currentDateCalendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Date class to be used to compare event dates with current date."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private Date currentDate \u003d currentDateCalendar.getTime();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Flag to check if there are unachieved goals for past events."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public boolean gotPastUnachieved \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Characters signifying event types."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static final char TODO \u003d \u0027T\u0027;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static final char CONCERT \u003d \u0027C\u0027;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static final char LESSON \u003d \u0027L\u0027;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static final char PRACTICE \u003d \u0027P\u0027;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static final char EXAM \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static final char RECITAL \u003d \u0027R\u0027;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    //@author Ryan-Wong-Ren-Wei"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates new Model_Class.EventList object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param inputList list of strings containing all information extracted from save file"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public EventList(ArrayList\u003cString\u003e inputList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        eventArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        for (String currLine : inputList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            boolean isDone \u003d currLine.substring(0, 1).equals(\"V\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            char eventType \u003d currLine.charAt(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            String[] splitString \u003d currLine.split(\"/\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (eventType \u003d\u003d TODO) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                String description \u003d splitString[1];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                String date \u003d splitString[2];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                eventArrayList.add(new ToDo(description, isDone, date));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } else { //for all other events"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                String description \u003d splitString[1];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                String startDateAndTime \u003d splitString[2];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                String endDateAndTime \u003d splitString[3];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                switch (eventType) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                case CONCERT:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    eventArrayList.add(new Concert(description, isDone, startDateAndTime, endDateAndTime,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                            Integer.parseInt(splitString[4])));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                case LESSON:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    eventArrayList.add(new Lesson(description, isDone, startDateAndTime, endDateAndTime));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                case PRACTICE:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    eventArrayList.add(new Practice(description, isDone, startDateAndTime, endDateAndTime));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                case EXAM:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    eventArrayList.add(new Exam(description, isDone, startDateAndTime, endDateAndTime));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                case RECITAL:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    eventArrayList.add(new Recital(description, isDone, startDateAndTime, endDateAndTime));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        budgeting \u003d new Budgeting(eventArrayList, 50);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Edit an event\u0027s description, start time and end time in the list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventIndex     Index of the event to be edited."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param newDescription The new description."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void editEvent(int eventIndex, String newDescription) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        Event tempEvent \u003d this.eventArrayList.get(eventIndex);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        tempEvent.editEvent(newDescription);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.eventArrayList.set(eventIndex, tempEvent);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Checks for a clash, then adds a new event if possible."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param event Model_Class.Event object to be added"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void addEvent(Event event) throws EndBeforeStartException, ClashException, CostExceedsBudgetException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (event.getStartDate().getEventJavaDate().compareTo(event.getEndDate().getEventJavaDate()) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            throw new EndBeforeStartException();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event clashEvent \u003d getClashEvent(event); //check the list for a schedule clash"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        if (clashEvent \u003d\u003d null) { //null means no clash was found"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (event.getType() \u003d\u003d \u0027C\u0027) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                this.budgeting.updateMonthlyCost((Concert) event);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            this.eventArrayList.add(event);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else { //if clash is found, notify user via terminal."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            throw new ClashException(clashEvent);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void addNewTodo(Event event) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.eventArrayList.add(event);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    //@@author YuanJiayi"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private static final int ONE_SEMESTER_DAYS \u003d 16 * 7;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Adds recurring events to the list."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param event  Event to be added as recursion."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param period Period of the recursion."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void addRecurringEvent(Event event, int period) throws ClashException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Calendar calendarStartDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Calendar calendarEndDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        calendarStartDate.setTime(event.getStartDate().getEventJavaDate());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        calendarEndDate.setTime(event.getEndDate().getEventJavaDate());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        ArrayList\u003cEvent\u003e tempEventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Event newEvent \u003d null;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        int oneSemesterDays \u003d 16 * 7;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        for (int addEventCount \u003d 0; addEventCount * period \u003c\u003d oneSemesterDays; addEventCount++) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            EventDate toFormatCalendarStartDate \u003d new EventDate(calendarStartDate.getTime());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            EventDate toFormatCalendarEndDate \u003d new EventDate(calendarEndDate.getTime());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            if (event.getType() \u003d\u003d \u0027L\u0027) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                newEvent \u003d new Lesson(event.getDescription(), toFormatCalendarStartDate.getUserInputDateString(),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        toFormatCalendarEndDate.getUserInputDateString());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            } else if (event.getType() \u003d\u003d \u0027P\u0027) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                newEvent \u003d new Practice(event.getDescription(), toFormatCalendarStartDate.getUserInputDateString(),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        toFormatCalendarEndDate.getUserInputDateString());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            assert newEvent !\u003d null;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            if (getClashEvent(newEvent) \u003d\u003d null) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                tempEventList.add(newEvent);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                throw new ClashException(newEvent);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            calendarStartDate.add(Calendar.DATE, period);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            calendarEndDate.add(Calendar.DATE, period);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.eventArrayList.addAll(tempEventList);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    //@@author Ryan-Wong-Ren-Wei"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Checks the list of events for any clashes with the newly added event. If"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * there is a clash, return a reference to the event, if not, return null."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param checkingEvent newly added event"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @return event that causes a clash, null if no clash found"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private Event getClashEvent(Event checkingEvent) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        //split new event date string into date and time."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String[] newEventStartDateTime \u003d checkingEvent.getStartDate().getUserInputDateString().split(\" \");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String[] newEventEndDateTime \u003d checkingEvent.getEndDate().getUserInputDateString().split(\" \");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String newEventDate \u003d newEventStartDateTime[0]; //assign date"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int newEventStartTime \u003d Integer.parseInt(newEventStartDateTime[1]); //assign time"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int newEventEndTime \u003d Integer.parseInt(newEventEndDateTime[1]);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        for (Event currEvent : eventArrayList) { //scan list for clashes"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (currEvent.getType() \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                continue; //skip scan if todo class"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            String[] currEventStartDateTime \u003d currEvent.getStartDate().getUserInputDateString().split(\" \");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            String[] currEventEndDateTime \u003d currEvent.getEndDate().getUserInputDateString().split(\" \");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (newEventDate.equals(currEventStartDateTime[0]) \u0026\u0026 //check for same date"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    checkForTimeClash(newEventStartTime, newEventEndTime, currEventStartDateTime[1],"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                            currEventEndDateTime[1])) { //check for time clash"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                return currEvent; //clash found"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return null; //no clash found"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Checks for a clash in time assuming two events have the same date."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private boolean checkForTimeClash(int newEventStartTime, int newEventEndTime, String s, String s1) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int currEventStartTime \u003d Integer.parseInt(s); //assign time"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int currEventEndTime \u003d Integer.parseInt(s1);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (newEventStartTime \u003e currEventStartTime) { //new event starts after current event starts"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return currEventEndTime \u003e newEventStartTime; //check if new event starts before current event ends"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else if (newEventStartTime \u003c currEventStartTime) { //new event starts before current event starts"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return newEventEndTime \u003e currEventStartTime; //check if new event ends after current event starts"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else { //new event starts at the same time as current event"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * sorts the list of events/tasks according to date, in increasing order."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void sortList() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Collections.sort(eventArrayList);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Deletes a event from the list."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventNo Index of event to be deleted"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void deleteEvent(int eventNo) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (this.eventArrayList.get(eventNo).getType() \u003d\u003d \u0027C\u0027) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            budgeting.removeMonthlyCost((Concert) this.eventArrayList.get(eventNo));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.eventArrayList.remove(eventNo);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Gets list of Model_Class.Event objects stored"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @return Array of EventLists containing all events."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public ArrayList\u003cEvent\u003e getEventArrayList() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        return this.eventArrayList;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Gets number of events stored."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @return number of events stored"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public int getNumEvents() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        return eventArrayList.size();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Gets a specific event using indexing."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param index Index of event to be extracted"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @return Model_Class.Event object of specified event"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Event getEvent(int index) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        return eventArrayList.get(index);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Gets the entire list of events stored in String format."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @return String containing all events, separated by a newline."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public String listOfEvents_String() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        findNextEventAndSetBoolean(currentDate);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String allEvents \u003d \"\";"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        for (int i \u003d currentDateIndex; i \u003c eventArrayList.size(); ++i) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            if (eventArrayList.get(i) \u003d\u003d null) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            int j \u003d i + 1;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            allEvents +\u003d j + \". \" + this.getEvent(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        return allEvents;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Retrieves String containing the filtered list of events, each separated by a newline."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    private String filteredListTwoPredicates(Predicate\u003cObject\u003e predicate1, Predicate\u003cObject\u003e predicate2) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        String filteredEvents \u003d \"\";"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        int j;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        for (int i \u003d 0; i \u003c eventArrayList.size(); ++i) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            if (eventArrayList.get(i) \u003d\u003d null) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            } else if (!predicate1.check(eventArrayList.get(i).getStartDate())"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    || !predicate2.check(eventArrayList.get(i).getStartDate())) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            j \u003d i + 1;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            filteredEvents +\u003d j + \". \" + this.getEvent(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        return filteredEvents;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Retrieves String containing events found in the next `days` days."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public String getReminder(int days) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        Date systemDateAndTime \u003d new Date();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        EventDate lowerLimit \u003d new EventDate(systemDateAndTime);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        EventDate upperLimit \u003d new EventDate(systemDateAndTime);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        lowerLimit.addDaysAndSetMidnight(-1);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        upperLimit.addDaysAndSetMidnight(days);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        String reminderDeadline \u003d upperLimit.getEventJavaDate().toString();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        Predicate\u003cObject\u003e lowerPredicate \u003d new Predicate\u003c\u003e(lowerLimit, SMALLER_THAN);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        Predicate\u003cObject\u003e upperPredicate \u003d new Predicate\u003c\u003e(upperLimit, GREATER_THAN);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        return \"The time now is \" + systemDateAndTime + \".\\n\""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"Here is a list of events you need to complete in the next \" + days + \" day(s) (by \""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + reminderDeadline + \"):\\n\" + filteredListTwoPredicates(lowerPredicate, upperPredicate);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Used to reinstate deleted event in case of failure to reschedule."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void undoDeletionOfEvent(Event event) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (event.getType() \u003d\u003d \u0027C\u0027) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                this.budgeting.updateMonthlyCost((Concert) event);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (CostExceedsBudgetException e) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            //ignore exception, will never happen"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventArrayList.add(event);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Budgeting getBudgeting() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return budgeting;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    //@@author yenpeichih"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Compares the dates of each event with current date."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void findNextEventAndSetBoolean(Date currentDate) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        gotPastUnachieved \u003d false;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        for (int i \u003d 0; i \u003c eventArrayList.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            if (this.getEvent(i).getStartDate().getEventJavaDate().compareTo(currentDate) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                currentDateIndex \u003d i + 1;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        if (currentDateIndex \u003e 0) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            for (int i \u003d 0; i \u003c currentDateIndex; i +\u003d 1) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                Event eventToCheck \u003d this.getEvent(i);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                for (int j \u003d 0; j \u003c eventToCheck.getGoalList().size(); j +\u003d 1) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    if (!eventToCheck.getGoalObject(j).getBooleanStatus()) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        gotPastUnachieved \u003d true;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Retrieves string containing all past events with goals not yet achieved."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public String getPastEventsWithUnachievedGoals() {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        String overUnachievedGoalsList \u003d \"\\n\" + \"Below lists all the unachieved goal for past events. \""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"Please be reminded to add them to the future events.\" + \"\\n\";"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        if (gotPastUnachieved) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            for (int j \u003d 0; j \u003c currentDateIndex; j +\u003d 1) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                Event eventToCheck \u003d this.getEvent(j);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                for (int k \u003d 0; k \u003c eventToCheck.getGoalList().size(); k +\u003d 1) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    if (!eventToCheck.getGoalObject(k).getBooleanStatus()) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        Goal unachievedGoal \u003d eventToCheck.getGoalObject(k);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        int eventListNum \u003d j + 1;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        int goalListNum \u003d k + 1;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        overUnachievedGoalsList +\u003d \"Event \" + eventListNum + \": \" + eventToCheck.toString() + \" ---\""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                                + \" Goal \" + goalListNum + \": \" + unachievedGoal.getGoal() + \"\\n\";"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            return overUnachievedGoalsList;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            overUnachievedGoalsList +\u003d \"You do not have any unachieved goals for past events! Yay!\" + \"\\n\";"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        return overUnachievedGoalsList;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 63,
      "Dng132FEI": 16,
      "yenpeichih": 84,
      "ZhangYihanNus": 41,
      "Ryan-Wong-Ren-Wei": 231,
      "-": 3
    }
  },
  {
    "path": "src/main/java/mistermusik/logic/PeriodRangeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//@@author YuanJiayi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "package mistermusik.logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "public class PeriodRangeException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    PeriodRangeException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 8
    }
  },
  {
    "path": "src/main/java/mistermusik/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package mistermusik.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.logic.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " * Class containing file path and scanner, allowing for reading from and writing to the storage file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " * Allows for creation of new storage file if necessary."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private Scanner scanFile;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates new Model_Class.Storage object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param file The storage file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Storage(File file) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        File folder \u003d new File(\"data\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (!folder.exists()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            BufferedReader fileReader;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            InputStream inputStream \u003d Storage.class.getResourceAsStream(\"/data.txt\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            InputStreamReader reader \u003d new InputStreamReader(inputStream);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            fileReader \u003d new BufferedReader(reader);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            folder.mkdir();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            String strAllLines \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            String strCurrLine;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                while ((strCurrLine \u003d fileReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    strAllLines +\u003d strCurrLine + \"\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                FileWriter writer \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                writer.write(strAllLines);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                writer.close();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                System.out.println(\"An unexpected error has occured while loading data. Pls re-download\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        + \"the jar file and try again.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                System.exit(-1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    //@@author Ryan-Wong-Ren-Wei"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Reads all necessary information from the txt file when the program is loaded."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param ui user interface"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @return Array of strings containing all information from the read file"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public ArrayList\u003cString\u003e readFromFile(UI ui) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(ui.getLineSeparation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            this.scanFile \u003d new Scanner(file);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            System.out.println(\"Event list loaded!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (FileNotFoundException fileNotFound) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            System.out.println(\"No mistermusik.Main file found!\\nCreating new file...\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } catch (IOException exceptionInputOutput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                System.out.println(\"Failed! Please re-download the jar file and try again.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            System.out.println(\"New file created!\\nAssigning...\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(ui.getLineSeparation());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        ArrayList\u003cString\u003e readFromFile \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String fileContent;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (this.scanFile !\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            while (this.scanFile.hasNextLine()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                fileContent \u003d this.scanFile.nextLine();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return readFromFile;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Saves current information to the storage file."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param events EventList where information is extracted to be saved"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param ui     User interface"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void saveToFile(EventList events, UI ui) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String toWriteToFile \u003d \"\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        for (Event currEvent : events.getEventArrayList()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            toWriteToFile +\u003d currEvent.toStringForFile() + \"\\n\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            FileWriter writer \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            writer.write(toWriteToFile);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (IOException exceptionInputOutput) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.printErrorWritingToFile();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Ryan-Wong-Ren-Wei": 123
    }
  },
  {
    "path": "src/main/java/mistermusik/ui/CalendarView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "//@@author ZhangYihanNus"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "package mistermusik.ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import mistermusik.commons.events.eventtypes.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import mistermusik.commons.events.formatting.EventDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import mistermusik.logic.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public class CalendarView {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private List\u003cQueue\u003cEvent\u003e\u003e eventsOfTheWeek \u003d new ArrayList\u003c\u003e(7);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private ArrayList\u003cString\u003e daysToDisplay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public ArrayList\u003cString\u003e datesToDisplay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private String stringForOutput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    static final int MONDAY \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    static final int TUESDAY \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    static final int WEDNESDAY \u003d 2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    static final int THURSDAY \u003d 3;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    static final int FRIDAY \u003d 4;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    static final int SATURDAY \u003d 6;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    static final int SUNDAY \u003d 7;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Initiating of CalendarView."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventList The event list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param startDate The start date of calendar."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public CalendarView(EventList eventList, EventDate startDate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        ArrayList\u003cEvent\u003e eventArrayList \u003d eventList.getEventArrayList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            eventsOfTheWeek.add(new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        setDaysAndDatesList(startDate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        getEventsOfTheWeek(eventArrayList, startDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public String getStringForOutput() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        return stringForOutput;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Find all the events in the coming 7 days."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventArrayList List of all events."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param startDay       The current day."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private void getEventsOfTheWeek(ArrayList\u003cEvent\u003e eventArrayList, EventDate startDay) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        EventDate yesterday \u003d new EventDate(startDay.getEventJavaDate());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        yesterday.addDaysAndSetMidnight(-1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        EventDate endOfWeek \u003d new EventDate(startDay.getEventJavaDate());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        endOfWeek.addDaysAndSetMidnight(6);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        EventDate thisDay \u003d new EventDate(startDay.getEventJavaDate());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        thisDay.addDaysAndSetMidnight(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        int currentlyChecking \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (Event thisEvent : eventArrayList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            //if this event is within the next 6 days"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            if ((thisEvent.getStartDate().compare(endOfWeek) \u003c\u003d 0)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    \u0026\u0026 (thisEvent.getStartDate().compare(yesterday) \u003e 0)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                while ((thisEvent.getStartDate().compare(thisDay) \u003e 0) \u0026\u0026 (currentlyChecking \u003c 7)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    currentlyChecking++;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    thisDay.addDaysAndSetMidnight(1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                if (currentlyChecking \u003c 7) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    eventsOfTheWeek.get(currentlyChecking).offer(thisEvent);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            } else if (thisEvent.getStartDate().compare(yesterday) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Sets the two ArrayLists containing days and dates info for the coming 7 days."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param startDate The current day."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private void setDaysAndDatesList(EventDate startDate) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String currDay \u003d startDate.getEventJavaDate().toString().split(\" \")[0];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String[] weekdays \u003d new String[]{\"    \u003cMonday\u003e    \", \"   \u003cTuesday\u003e    \", \"   \u003cWednesday\u003e  \","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            \"   \u003cThursday\u003e   \", \"    \u003cFriday\u003e    \", \"   \u003cSaturday\u003e   \", \"    \u003cSunday\u003e    \"};"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        int startDay \u003d 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        switch (currDay) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        case \"Mon\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            startDay \u003d MONDAY;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        case \"Tue\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            startDay \u003d TUESDAY;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        case \"Wed\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            startDay \u003d WEDNESDAY;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        case \"Thu\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            startDay \u003d THURSDAY;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        case \"Fri\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            startDay \u003d FRIDAY;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        case \"Sat\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            startDay \u003d SATURDAY;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        case \"Sun\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            startDay \u003d SUNDAY;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            this.daysToDisplay.add(weekdays[(startDay + i) % 7]);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        EventDate tempDay \u003d new EventDate(startDate.getEventJavaDate());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String thisDate \u003d tempDay.getUserInputDateString().split(\" \")[0];"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            this.datesToDisplay.add(\"   \" + thisDate + \"   \");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            tempDay.addDaysAndSetMidnight(1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Put all information of a calendar table into the string \"stringForOutput\" to prepare for printing."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void setCalendarInfo() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String calendarInfo \u003d \"\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        int maxNumOfEvent \u003d 0;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (Queue\u003cEvent\u003e thisQue : eventsOfTheWeek) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            if (thisQue.size() \u003e maxNumOfEvent) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                maxNumOfEvent \u003d thisQue.size();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        // head of table"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        calendarInfo +\u003d \"__________________________________________________________\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"______________________________________________________________\\n\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"|                                                  Events of the\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \" week                                                  |\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"__________________________________________________________________\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"______________________________________________________\\n\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        // row of days"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            calendarInfo +\u003d \"|\" + this.daysToDisplay.get(i);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        calendarInfo +\u003d \"|\\n\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        // row of dates"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            calendarInfo +\u003d \"|\" + this.datesToDisplay.get(i);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        calendarInfo +\u003d \"|\\n\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"_________________________________________________________________\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"_______________________________________________________\\n\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        // rows of events"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int idxOfEventRow \u003d 0; idxOfEventRow \u003c maxNumOfEvent; idxOfEventRow++) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String[][] eventsLine;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            eventsLine \u003d getEventsOfOneRow(idxOfEventRow);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            for (int row \u003d 0; row \u003c 3; row++) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                for (int day \u003d 0; day \u003c 7; day++) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    calendarInfo +\u003d \"|\" + eventsLine[row][day];"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                calendarInfo +\u003d \"|\\n\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        calendarInfo +\u003d \"|                |                |                |       \""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"         |                |                |                |\\n\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"__________________________________________________________________\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"______________________________________________________\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.stringForOutput \u003d calendarInfo;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Provides the events info in one (3) row, of 7 days."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * If there is no event in a day, keep empty."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param idxOfEventRow the current row of calendar where we wish to get events\u0027 info"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @return the String info of this row of events"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private String[][] getEventsOfOneRow(int idxOfEventRow) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String[][] eventsLine \u003d new String[3][7];"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String emptySection \u003d \"                \";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int day \u003d 0; day \u003c 7; day++) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String thisTime \u003d emptySection;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String thisDescription \u003d emptySection;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String thisDashes \u003d emptySection;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            if (!eventsOfTheWeek.get(day).isEmpty()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                Event tempEvent \u003d eventsOfTheWeek.get(day).poll();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                //time"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                String thisStartTime;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                String thisEndTime;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                assert tempEvent !\u003d null;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                if (!(tempEvent.getStartDate() \u003d\u003d null)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        \u0026\u0026 (tempEvent.getStartDate().getFormattedDateString().split(\", \").length \u003e 2)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    thisStartTime \u003d tempEvent.getStartDate().getFormattedDateString().split(\", \")[2];"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    thisTime \u003d \"* \" + thisStartTime;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    if (!(tempEvent.getEndDate() \u003d\u003d null)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                            \u0026\u0026 (tempEvent.getEndDate().getFormattedDateString().split(\", \").length \u003e 2)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        thisEndTime \u003d tempEvent.getEndDate().getFormattedDateString().split(\", \")[2];"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        thisTime +\u003d \" ~ \" + thisEndTime + \" \";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                } else if (tempEvent.getType() \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    thisTime \u003d \"* TODO          \";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                //description"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                String tempDescription \u003d tempEvent.getDescription();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                if (tempDescription.length() \u003e 13) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    thisDescription \u003d tempDescription.substring(0, 13) + \"...\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    String spaces \u003d \"\";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    for (int i \u003d 0; i \u003c (16 - tempDescription.length()); i++) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        spaces +\u003d \" \";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    thisDescription \u003d tempDescription + spaces;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                //dashes"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                thisDashes \u003d \"----------------\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            eventsLine[0][day] \u003d thisTime;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            eventsLine[1][day] \u003d thisDescription;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            eventsLine[2][day] \u003d thisDashes;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        return eventsLine;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYihanNus": 243
    }
  },
  {
    "path": "src/main/java/mistermusik/ui/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package mistermusik.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.logic.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains method to parse the user input and interpret it for Model_Class.Command class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private Scanner inputScanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates new Model_Class.Parser object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public String readUserInput() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return inputScanner.nextLine();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input to extract command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput String containing user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Model_Class.Command object after parsing input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseInput(String userInput) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String continuation;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (userInput.contains(\" \")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            int indexOfSpace \u003d userInput.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            command \u003d userInput.substring(0, indexOfSpace);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            continuation \u003d userInput.substring(indexOfSpace + 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Command(command, continuation);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Command(userInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ryan-Wong-Ren-Wei": 11,
      "-": 31
    }
  },
  {
    "path": "src/main/java/mistermusik/ui/UI.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package mistermusik.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.Contact;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.Goal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.Concert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.logic.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "//@@author yenpeichih"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": " * User interface: contains all methods pertaining to user interaction."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    private static String lineSeparation \u003d \"____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Prints welcome message and instructions for use."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void welcome() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        String logo \u003d \" ___    ___   __________    __________   __________   __________   _________\" + \"\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"|   \\\\  /   | |___    ___|  /  ________| |___    ___| |   _______| |   ____  \\\\\" + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"| |\\\\ \\\\/ /| |     |  |     /  /              |  |     |  |         |  |    \\\\  \\\\\" + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"| | \\\\  / | |     |  |     \\\\  \\\\_______       |  |     |  |____     |  |____/  /\" + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"| |  \\\\/  | |     |  |      \\\\_______  \\\\      |  |     |   ____|    |   ___   /\" + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"| |      | |     |  |              \\\\  \\\\     |  |     |  |         |  |   \\\\  \\\\\" + \"\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"| |      | |  ___|  |___   ________/  /     |  |     |  |_______  |  |    |  |\" + \"\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"|_|      |_| |__________| |__________/      |__|     |__________| |__|    |__|\" + \"\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \" ___    ___   __      __    __________   __________   __      __ \" + \"\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"|   \\\\  /   | |  |    |  |  /  ________| |___    ___| |  |    /  /\" + \"\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"| |\\\\ \\\\/ /| | |  |    |  | /  /              |  |     |  |   /  /\" + \"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"| | \\\\  / | | |  |    |  | \\\\  \\\\_______       |  |     |  |__/  /\" + \"\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"| |  \\\\/  | | |  |    |  |  \\\\_______  \\\\      |  |     |   __  |\" + \"\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"| |      | | |  |    |  |          \\\\  \\\\     |  |     |  |  \\\\  \\\\\" + \"\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"| |      | | |  |____|  |  ________/  /  ___|  |___  |  |   \\\\  \\\\\" + \"\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"|_|      |_| |__________| |__________/  |__________| |__|    \\\\__\\\\\" + \"\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(lineSeparation + \"Hello! I\u0027m MisterMusik!\\nWhat can I do for you?\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        printHelpList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(\"Please enter the command: \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    //@@author YuanJiayi"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Prints the help list contains different command format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printHelpList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Notice: Words in \u003c\u003e are the parameters to be supplied by the user;\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"        Items in [] are optional;\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"        Items with | in between them indicate the user can choose to use either of them\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"-----Basic Commands-----\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"1.  \\\"help\\\"                     -- Print out all the commands you can input.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"2.  \\\"list\\\"                     -- Print out all the events in the list.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"3.  \\\"reminder [number of days]\\\"\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"-- Display the list of events over the next given number (default 3) days.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"4.  \\\"check\\\"                    -- Print the next 3 free days.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"5.  \\\"find \u003ckeyword\u003e\\\"           -- Search for a specific event using keywords.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"6.  \\\"view dd-MM-yyyy\\\"          -- Print the event list for a particular date.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"7.  \\\"budget MM-yyyy\\\"           -- View monthly cost of concerts\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"8.  \\\"budget set \u003cnew budget\u003e\\\"  -- Set new monthly budget\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"9.  \\\"bye\\\"                      -- Exit the program.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"-----More Commands-----\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"1.  \\\"help calendar\\\"   -- To see commands about calendar.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"2.  \\\"help event\\\"      -- To see commands about how to add or delete event.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"3.  \\\"help goal\\\"       -- To see commands about goal management of an event.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"4.  \\\"help contact\\\"    -- To see commands about contact management of an event.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"5.  \\\"help checklist\\\"  -- To see commands about checklist management of an event.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"6.  \\\"help instruments\\\"-- To see commands about instruments management\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"7.  \\\"help change\\\"     -- To see commands about changing basic information of an event.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Prints the list of commands relative to calendar."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printCalendarHelp() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"1.  \\\"calendar\\\"      -- Print the calendar for the current week.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"2.  \\\"calendar last\\\" -- Print the calendar for the last week.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"3.  \\\"calendar next\\\" -- Print the calendar for the next week.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"4.  \\\"calendar on\\\"   -- Allow printing the calendar after every command.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"5.  \\\"calendar off\\\"  -- Disable printing the calendar after every command.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Prints the list of commands relative to adding or deleting events."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printEventHelp() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"1.  \\\"todo \u003cdescription\u003e /dd-MM-yyyy [HHmm]\\\"                                  \\n\\t-- \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"Add a todo task to the list.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"2.  \\\"exam|recital|lesson|practice \u003cdescription\u003e /dd-MM-yyyy HHmm HHmm\\\"       \\n\\t-- \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"Add an event to the list.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"3.  \\\"concert \u003cdescription\u003e /dd-MM-yyyy HHmm HHmm [/\u003ccost of concert\u003e]\\\"       \\n\\t-- \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"Add a concert to the list.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"4.  \\\"practice|lesson \u003cdescription\u003e /dd-MM-yyyy HHmm HHmm /\u003cperiod(in days)\u003e\\\" \\n\\t-- \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"Add recurring events with the first event date to the list.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"5.  \\\"delete \u003cevent index\u003e\\\"                                                   \\n\\t-- \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"Delete the specific event.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Prints the list of commands relative to goal management."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printGoalHelp() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"1.  \\\"goal add \u003cevent index\u003e /\u003cgoal\u003e\\\"                   \\n\\t-- \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"Add a goal to a specific event.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"2.  \\\"goal delete \u003cevent index\u003e \u003cgoal\u003e\\\"                 \\n\\t-- Delete a specified goal.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"3.  \\\"goal edit \u003cevent index\u003e \u003cgoal index\u003e /\u003cnew goal\u003e\\\" \\n\\t-- Edit an existing goal.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"4.  \\\"goal achieved \u003cevent index\u003e \u003cgoal index\u003e\\\"         \\n\\t-- Set the goal as achieved.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"5.  \\\"goal view \u003cevent index\u003e\\\"                          \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"\\n\\t-- Display the goals list of a specified event with their status.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Prints the list of commands relative to contact management."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printContactHelp() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"1.  \\\"contact add \u003cevent index\u003e /\u003cname\u003e, [\u003cemail\u003e], [\u003cphone number\u003e]\\\"        \\n\\t-- \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"Add a contact to a specific event.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"2.  \\\"contact delete \u003cevent index\u003e \u003ccontact index\u003e\\\"                          \\n\\t-- \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"Delete a specified contact.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"3.  \\\"contact edit \u003cevent index\u003e \u003ccontact index\u003e \u003cedit type\u003e /\u003cnew contact\u003e\\\" \\n\\t-- \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"Edit an existing contact, the edit type should be one of \\\"name\\\", \\\"email\\\", and \\\"phone\\\".\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"4.  \\\"contact view \u003cevent index\u003e\\\"                                            \\n\\t-- \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"Display the contact list of a specified event with their status.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Prints the list of commands relative to checklist management."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printChecklistHelp() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"1.  \\\"checklist add \u003cevent index\u003e /\u003cchecklist\u003e\\\"                        \\n\\t-- \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"Add a checklist to a specific event.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"2.  \\\"checklist delete \u003cevent index\u003e \u003cchecklist index\u003e\\\"                \\n\\t-- \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"Delete a specified checklist.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"3.  \\\"checklist edit \u003cevent index\u003e \u003cchecklist index\u003e /\u003cnew checklist\u003e\\\" \\n\\t-- \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"Edit an existing checklist.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"4.  \\\"checklist view \u003cevent index\u003e\\\"                                    \\n\\t-- \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"Display the checklist list of a specified event with their status.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Prints the list of commands relative to changing information or status of events."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printChangeHelp() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"1.  \\\"done \u003cevent index\u003e\\\"                            \\n\\t-- \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"Mark a Todo task as completed. Do not work for non-Todo event.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"2.  \\\"reschedule \u003cevent index\u003e dd-MM-yyyy HHmm HHmm\\\" \\n\\t-- \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"Reschedule the date and time of an event.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"3.  \\\"edit \u003cevent index\u003e /\u003cdescription\u003e\\\"             \\n\\t-- \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"Edit the description of an event.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Prints the list of commands relative to instrument management."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printInstrumentsHelp() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"1.  \\\"instruments add /\u003cinstrument name\u003e\\\"                      \\n\\t-- \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"Add an instrument.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"2.  \\\"instruments service \u003cinstrument index\u003e /\u003cdetails\u003e/\u003cdate\u003e\\\"\\n\\t-- \""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"Add an instrument into service list.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"3.  \\\"instruments view services \u003cservice index\u003e\\\"               \\n\\t-- \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"View past servicing information of the specified instrument.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"4.  \\\"instruments view instruments\\\"                            \\n\\t-- \""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"View list of instruments.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Prints when the period of recurring events is not a positive integer."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printPeriodNotPositive() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Please ensure that the period is a positive integer.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Prints when the contact is added successfully."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printContactAdded() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Ok, the contact has been added to the event.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Prints when the contact is deleted successfully."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printContactDeleted() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Ok, the contact has been deleted from the event.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Prints all of the contacts under a specified event."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param viewEventContact The event whose contacts is printed"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printEventContacts(Event viewEventContact) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Here is the list of contacts for the following event \" + viewEventContact.toString());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        int contactNo \u003d 1;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        for (Contact currContact : viewEventContact.getContactList()) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            System.out.println(contactNo + \". Name: \" + currContact.getName() + \" Email: \" + currContact.getEmail()"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    + \" Phone Number: \" + currContact.getPhoneNo());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            contactNo++;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Prints when the contact is edited successfully."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param newContact The contact after edited"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printContactEdited(Contact newContact) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"The contact has been edited to: Name: \" + newContact.getName() + \" Email: \""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + newContact.getEmail() + \" Phone Number: \" + newContact.getPhoneNo());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Prints when the event has no contact."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printNoContactInEvent() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Do not have any contact in this event.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Prints when the contact list does not have the contact asked to be edited or deleted."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printNoSuchContact() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Sorry, there is no such contact in the list.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Prints when the reschedule command invalid."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printRescheduleInvalidCommand() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Please enter command in the following format:\\n\""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"reschedule \u003ctaskIndex\u003e dd-MM-yyyy HHmm HHmm\\n\""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"Reschedule does not work for Todo. Please use on other types of event.\\n\""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \"Please ensure that the taskIndex is a valid integer as well!\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Prints message when reschedule an event successfully."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param event event after rescheduled"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printEventRescheduled(Event event) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Rescheduled event to \" + event.toString() + \" successfully!\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Prints when contact command is invalid."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printContactCommandInvalid() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"The format of contact management command is wrong.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Please enter \\\"help contact\\\" to see the right commands.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Prints message when recurring events are added to the list successfully."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printRecurringEventAdded(Event eventAdded, int numEvents, int period) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(lineSeparation + \"Got it. I\u0027ve added these recurring events:\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"[\" + eventAdded.getDoneSymbol() + \"][\" + eventAdded.getType() + \"] \""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + eventAdded.getDescription() + \" START: \" + eventAdded.getStartDate().getFormattedDateString()"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + \" END: \" + eventAdded.getEndDate().getFormattedDateString() + \" (every \" + period + \" days)\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Now you have \" + numEvents + \" events in the list.\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Obtains the current date and prints the events to be completed within a time period specified"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * by the input int days."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param events the EventList used in the Duke function."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param days   number of days to check for events."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printReminderDays(EventList events, int days) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(events.getReminder(days));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Prints a message when an invalid command is entered."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printInvalidCommand() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Sorry! I don\u0027t know what that means.\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints entire list of events stored."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param events Model_Class.EventList object containing all stored classes and pertaining methods."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public static void printListOfEvents(EventList events) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.print(events.listOfEvents_String());"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.print(events.getPastEventsWithUnachievedGoals());"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints goodbye message."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public static void printGoodbyeMsg() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation + \"Bye. Hope to see you again soon!\\n\" + lineSeparation);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Returns line of underscores to separate different Model_Class.UI outputs."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public String getLineSeparation() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return lineSeparation;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints message when a event is successfully added."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventAdded event in question"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param numEvents  total number of events"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printEventAdded(Event eventAdded, int numEvents) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(lineSeparation + \"Got it. I\u0027ve added this event:\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(\"[\" + eventAdded.getDoneSymbol() + \"][\" + eventAdded.getType() + \"] \""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    + eventAdded.getDescription() + \" START: \" + eventAdded.getStartDate().getFormattedDateString()"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    + \" END: \" + eventAdded.getEndDate().getFormattedDateString());"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(\"Now you have \" + numEvents + \" events in the list.\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(\"[\" + eventAdded.getDoneSymbol() + \"][\" + eventAdded.getType() + \"] \""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    + eventAdded.getDescription() + \" BY: \" + eventAdded.getStartDate().getFormattedDateString());"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            System.out.println(\"Now you have \" + numEvents + \" events in the list.\");"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints message when a event is marked as completed."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param event event in question"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void eventDone(Event event) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this event as done:\");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(event.toString());"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints message when a event is deleted successfully."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param event event in question to be deleted"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void eventDeleted(Event event) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this event:\");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(event.toString());"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints message containing events found when a search is performed."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints error message if no events are found."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param allFoundEvents string containing all the events found, separated by newline character"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param found          boolean signifying whether or not any events were found"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void printFoundEvents(String allFoundEvents, boolean found) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (found) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(\"Here are the matching events in your list:\");"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.print(allFoundEvents);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(\"No such events were found! Please try again.\");"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints message if command does not contain valid input for related event."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printNoSuchEvent() {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"There is no such event! Please try again.\");"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints message if no event description is found when adding a new event to the list."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printEventDescriptionEmpty() {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"The description of your event cannot be empty!\");"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints when checklist command is invalid."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printChecklistCommandInvalid() {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"The format of checklist command is wrong.\");"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Please enter \\\"help checklist\\\" to see the right format.\");"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints when budget command is invalid."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printBudgetCommandInvalid() {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Please enter \\\"budget MM-yyyy\\\" to view monthly cost of concerts.\");"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Please enter \\\"budget set \u003cnew budget\u003e\\\" to change the stipulated monthly budget\");"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints when view command is invalid."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printViewCommandInvalid() {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"The format of view command is wrong.\");"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Please enter \\\"view dd-MM-yyyy\\\" to view the events of a particular date.\");"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints when goal command is invalid."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printGoalCommandInvalid() {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"The format of goal management command is wrong.\");"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Please enter \\\"help goal\\\" to see the right commands.\");"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Prints error message when user enters timing for an event that ends before it starts."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printEventEndsBeforeStart() {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"The event you added ends before it starts! Please try again.\");"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints message when expected number from input is not an integer."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printNotAnInteger() {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"That is not a valid integer! Please check the value you entered!\");"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints message when input format is wrong for addition of new event type event."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printNewEntryFormatWrong() {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"Please enter the date in the format \u0027dd-MM-yyyy HHmm HHmm\u0027 for Event\""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \" or \u0027dd-MM-yyyy\u0027 for ToDo.\\n\""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"For Event entry, first time entered is start time, second time entered is end time.\");"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Please also ensure that the date you entered is valid.\");"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints when the command relative to calender is invalid."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printInvalidCalendarCommand() {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"The format of calendar command is wrong.\");"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Please enter \\\"help calendar\\\" to see right format.\");"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints when entered event is clashing with an existing event."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param event The existed event that is clashing with."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printScheduleClash(Event event) {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"That event clashes with another in the schedule! \""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"Please resolve the conflict and try again!\");"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Clashes with: \" + event.toString());"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints next 3 days that are free."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param freeDays queue of free days of type DateObj"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void printFreeDays(Queue\u003cString\u003e freeDays) {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Here are the next 3 free days!\");"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d freeDays.size(); i++) {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            System.out.println(freeDays.poll());"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Prints error message if Storage class fails to write to txt file."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printErrorWritingToFile() {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Error writing to file! Details not saved!\");"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints message to show success of edit command."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventIndex  The index of the edited event."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventEdited The event after edit."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void printEditedEvent(int eventIndex, Event eventEdited) {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(lineSeparation + \"Got it. Successfully edited event\" + eventIndex + \":\");"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(\"[\" + eventEdited.getDoneSymbol() + \"][\" + eventEdited.getType() + \"] \""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    + eventEdited.getDescription() + \" START: \" + eventEdited.getStartDate().getFormattedDateString()"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    + \" END: \" + eventEdited.getEndDate().getFormattedDateString());"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(\"[\" + eventEdited.getDoneSymbol() + \"][\" + eventEdited.getType() + \"] \""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    + eventEdited.getDescription() + \" BY: \" + eventEdited.getStartDate().getFormattedDateString());"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints the calendar table."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param calendarInfo The string containing all the info for the calendar."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void printCalendar(String calendarInfo) {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"Here is the current calendar of the 7 days!\");"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(calendarInfo);"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"\\nEnter a command:\");"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints when entered cost exceeds budget."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param concert The entered concert."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param budget  The cost of this concert."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void printCostExceedsBudgetMsg(Concert concert, int budget) {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"The following concert you wanted to add causes you to \""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"exceed the stipulated budget for that month!\");"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(concert.toString());"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String date \u003d concert.getStartDate().getFormattedDateString().substring(8, 16);"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"exceeds budget of $\" + budget + \" for the month of \" + date);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Operation has been cancelled.\");"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints the cost for the month."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param monthAndYear The month that is going to be shown."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param cost         The cost of this month."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public static void printCostForMonth(String monthAndYear, int cost) {"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Your total concert costs for \" + monthAndYear + \" is:\");"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"$\" + cost);"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Prints error message signifying that there are no concerts in the month"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * that the user requested to view costs for."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public static void printNoConcertsForThatMonth() {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"There are no concerts for that month!\");"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Please ensure your date is in the format MM-yyyy\");"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints when an item in the checklist is deleted."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventIndex The index of the event whose checklist has been edited."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void checklistDeleted(int eventIndex) {"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"Ok, checklist of event \" + eventIndex + 1 + \" has been deleted.\");"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints when the checklist of an event is edited."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param newChecklistItem The new item to be put into checklist."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventIndex       The index of the event whose checklist has been edited."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void checklistEdited(String newChecklistItem, int eventIndex) {"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"Ok, checklist of event \" + eventIndex + 1 + \" has been edited to:\");"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(newChecklistItem);"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints when the checklist of an event is added an item."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param newChecklistItem The new item to be put into checklist."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventIndex       The index of the event whose checklist has been edited."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void checklistAdded(String newChecklistItem, int eventIndex) {"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"Ok, the following item has been added to checklist of event \" + eventIndex + 1 + \":\");"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(newChecklistItem);"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints the checklist of an event."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param thisChecklist The checklist of that event."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventIndex    The index of this event."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventAdded    The event."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void printEventChecklist(ArrayList\u003cString\u003e thisChecklist, int eventIndex, Event eventAdded) {"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"Here is the checklist for the following event: \");"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"[\" + eventAdded.getDoneSymbol() + \"][\" + eventAdded.getType() + \"] \""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + eventAdded.getDescription());"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"Checklist: \");"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        int checklistIndex \u003d 1;"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (String checklistItem : thisChecklist) {"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(checklistIndex + \". \" + checklistItem);"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            checklistIndex +\u003d 1;"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints when an instrument is added."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param instrumentIndexAndName The instrument index and name."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void instrumentAdded(String instrumentIndexAndName) {"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        System.out.println(\"Ok, the following instrument has been added: \");"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        System.out.println(instrumentIndexAndName);"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints when an instrument service is added."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param serviceIndexAndName    Service name and index."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param instrumentIndexAndName Instrument index and name."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void serviceAdded(String serviceIndexAndName, String instrumentIndexAndName) {"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        System.out.println(\"Ok, the following service: \");"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        System.out.println(serviceIndexAndName);"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        System.out.println(\"has been added for the following instrument: \");"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        System.out.println(instrumentIndexAndName);"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints the instrument list."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param instruments The instruments."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void printInstruments(String instruments) {"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        System.out.println(\"Here are the list of instruments stored in the system: \");"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        System.out.println(instruments);"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints the instrument services."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param services               The services."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param instrumentIndexAndName The instrument index and name."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void printServices(String services, String instrumentIndexAndName) {"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        System.out.println(\"Here are the list of services: \");"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        System.out.println(services);"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        System.out.println(\"Done before for the following instrument: \");"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        System.out.println(instrumentIndexAndName);"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints when budget is set."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param newBudget The amount set as budget."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public static void printBudgetSet(int newBudget) {"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Success! Your new monthly budget is $\" + newBudget);"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints the goals of an event."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param viewEventGoal The event."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    //@@author yenpeichih"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Prints goals for a specific event."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void printEventGoals(Event viewEventGoal) {"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(\"Here is the list of goals for the following event: \" + viewEventGoal.toString());"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        if (!viewEventGoal.getGoalList().isEmpty()) {"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            int goalIndex \u003d 1;"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            for (Goal goalObject : viewEventGoal.getGoalList()) {"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                System.out.println(goalIndex + \". \" + goalObject.getGoal() + \" - \""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        + \"Achieved: \" + goalObject.getStatus());"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                goalIndex +\u003d 1;"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            }"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            System.out.println(\"You currently have no goals for this event.\");"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Prints when goal added."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     *"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * @param goal The goal."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void printGoalAdded(String goal) {"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(\"Ok, the following goal has been added to the event.\");"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(goal);"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Prints when goal deleted."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     *"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * @param deletedGoal The goal info."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void printGoalDeleted(String deletedGoal) {"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(\"Ok, the following goal has been deleted from the event.\");"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(deletedGoal);"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Prints when a goal updated."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     *"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * @param events  The events list."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * @param eventID The event ID."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * @param goalID  The goal ID."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void printGoalUpdated(EventList events, int eventID, int goalID) {"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(\"Ok, the goal has been updated to: \");"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(events.getEvent(eventID).getGoalObject(goalID).getGoal());"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Prints when a goal set as achieved."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     *"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * @param goal The goal."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void printGoalSetAsAchieved(Goal goal) {"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(\"Ok, the goal has been set as achieved. Congratulations for achieving the goal!\");"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(goal.getGoal() + \" - \" + goal.getStatus());"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Prints when trying to set as achieved but achieved already."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void printGoalAlreadyAchieved() {"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(\"Your goal for that event has already been achieved!\");"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Prints when no such goal."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void printNoSuchGoal() {"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(\"Sorry, the specified goal does not exist!\");"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Prints when entered event is already over."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void printEnteredEventOver() {"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(\"Reminder: the event you have added has a start date\""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \" that is already over and hence won\u0027t be displayed in the list. You may still view it by\""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \" using the view schedules command.\");"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Prints when viewing events of a specific date."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     *"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * @param foundEvents The events found."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * @param isFound     Whether the event is found."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void printEventsOnASpecificDate(ArrayList\u003cString\u003e foundEvents, boolean isFound) {"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        if (isFound) {"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            System.out.println(\"Here are the events you currently have on that date: \");"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            for (String viewEvent : foundEvents) {"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                System.out.println(viewEvent);"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            }"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            System.out.println(\"You currently have no events on that date.\");"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            System.out.println(lineSeparation);"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 336,
      "Dng132FEI": 28,
      "yenpeichih": 163,
      "ZhangYihanNus": 188,
      "Ryan-Wong-Ren-Wei": 161
    }
  },
  {
    "path": "src/test/java/BudgetTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//@@author Ryan-Wong-Ren-Wei"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.budgeting.Budgeting;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.budgeting.CostExceedsBudgetException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.Concert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.logic.ClashException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.logic.EndBeforeStartException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.logic.EventList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class BudgetTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void testBudget() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        ArrayList\u003cString\u003e readFromFile \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String fileContent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"XT/fawpeifwe/02-12-2019\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"XP/apiejfpwiefw/03-12-2019 1500/03-12-2019 1800\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"XC/halloween/04-12-2019 1600/04-12-2019 1930/5\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        EventList eventListTest \u003d new EventList(readFromFile);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            eventListTest.addEvent(new Concert(\"good concert\", \"05-12-2019 1500\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    \"05-12-2019 1600\",44));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (CostExceedsBudgetException | EndBeforeStartException | ClashException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertThrows(CostExceedsBudgetException.class, () -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            eventListTest.addEvent(new Concert(\"good concert\", \"06-12-2019 1500\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    \"06-12-2019 1600\",2));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void testSetBudget() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Budgeting testBudgeting \u003d new Budgeting(new ArrayList\u003cEvent\u003e(), 5);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertEquals(5, testBudgeting.getBudget());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertThrows(CostExceedsBudgetException.class, () -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            testBudgeting.updateMonthlyCost(new Concert(\"test1\", \"2-12-2019 1500\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    \"2-12-2019 1600\", 6));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        testBudgeting.setBudget(75);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertEquals(75, testBudgeting.getBudget());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            testBudgeting.updateMonthlyCost(new Concert(\"test1\", \"2-12-2019 1500\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    \"2-12-2019 1600\", 5));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (CostExceedsBudgetException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            testBudgeting.updateMonthlyCost(new Concert(\"test2\", \"2-12-2019 1500\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    \"2-12-2019 1600\", 5));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (CostExceedsBudgetException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            testBudgeting.updateMonthlyCost(new Concert(\"test3\", \"2-12-2019 1500\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    \"2-12-2019 1600\", 5));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (CostExceedsBudgetException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertThrows(CostExceedsBudgetException.class, () -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            testBudgeting.updateMonthlyCost(new Concert(\"test4\", \"2-12-2019 1500\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    \"2-12-2019 1600\", 61));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        });"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ryan-Wong-Ren-Wei": 82
    }
  },
  {
    "path": "src/test/java/ContactTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.Contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.budgeting.CostExceedsBudgetException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.events.eventtypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.assessmentsubclasses.Exam;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.assessmentsubclasses.Recital;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.recurringeventsubclasses.Lesson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.recurringeventsubclasses.Practice;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.logic.ClashException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.logic.EndBeforeStartException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.logic.EventList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//@@author YuanJiayi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "public class ContactTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void addContactTest() throws CostExceedsBudgetException, EndBeforeStartException, ClashException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        ArrayList\u003cString\u003e testListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        EventList testList \u003d new EventList(testListString);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Event eventTest \u003d new Practice(\"eventTest\", \"12-12-2019 1200\", \"12-12-2019 1300\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        testList.addEvent(eventTest);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        //test if contact is added"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Contact normalContact \u003d new Contact(\"name 1\", \"email 1\", \"phone 1\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        testList.getEvent(0).addContact(normalContact);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertTrue(eventTest.getContactList().contains(normalContact));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        //test empty email"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Contact emptyEmailContact \u003d new Contact(\"name 2\", \"\", \"phone 2\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        testList.getEvent(0).addContact(emptyEmailContact);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertTrue(eventTest.getContactList().contains(emptyEmailContact));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        //test empty phone"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Contact emptyPhoneContact \u003d new Contact(\"name 3\", \"email 3\", \"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        testList.getEvent(0).addContact(emptyPhoneContact);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertTrue(eventTest.getContactList().contains(emptyPhoneContact));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void removeContactTest() throws CostExceedsBudgetException, EndBeforeStartException, ClashException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        ArrayList\u003cString\u003e testListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        EventList testList \u003d new EventList(testListString);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Event eventTest \u003d new Lesson(\"eventTest\", \"12-12-2019 1200\", \"12-12-2019 1300\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        testList.addEvent(eventTest);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Contact normalContact \u003d new Contact(\"name 1\", \"email 1\", \"phone 1\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        testList.getEvent(0).addContact(normalContact);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        //test if contact is removed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        testList.getEvent(0).removeContact(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertFalse(eventTest.getContactList().contains(normalContact));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        //test remove a contact not in the list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            testList.getEvent(0).removeContact(1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void getContactTest() throws CostExceedsBudgetException, EndBeforeStartException, ClashException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        ArrayList\u003cString\u003e testListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        EventList testList \u003d new EventList(testListString);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Event eventTest \u003d new Exam(\"eventTest\", \"12-12-2019 1200\", \"12-12-2019 1300\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        testList.addEvent(eventTest);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Contact contact1 \u003d new Contact(\"name 1\", \"email 1\", \"phone 1\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Contact contact2 \u003d new Contact(\"name 2\", \"\", \"phone 2\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        testList.getEvent(0).addContact(contact1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        testList.getEvent(0).addContact(contact2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertEquals(\"name 1\", testList.getEvent(0).getContactList().get(0).getName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertEquals(\"name 2\", testList.getEvent(0).getContactList().get(1).getName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertEquals(\"email 1\", testList.getEvent(0).getContactList().get(0).getEmail());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertEquals(\"\", testList.getEvent(0).getContactList().get(1).getEmail());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertEquals(\"phone 1\", testList.getEvent(0).getContactList().get(0).getPhoneNo());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertEquals(\"phone 2\", testList.getEvent(0).getContactList().get(1).getPhoneNo());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void editContactTest() throws CostExceedsBudgetException, EndBeforeStartException, ClashException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        ArrayList\u003cString\u003e testListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        EventList testList \u003d new EventList(testListString);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Event eventTest \u003d new Recital(\"eventTest\", \"12-12-2019 1200\", \"12-12-2019 1300\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        testList.addEvent(eventTest);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Contact contact1 \u003d new Contact(\"name 1\", \"email 1\", \"phone 1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        boolean addContactSucceed \u003d false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            testList.getEvent(0).addContact(contact1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            addContactSucceed \u003d true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            System.out.println(\"1\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertTrue(addContactSucceed);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        int contactIndex \u003d 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        //test if name edited"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        String newName \u003d \"name a\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        testList.getEvent(0).editContact(contactIndex, \u0027N\u0027, newName);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertEquals(newName, testList.getEvent(0).getContactList().get(contactIndex).getName());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        newName \u003d \"name\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        eventTest.getContactList().get(contactIndex).setName(newName);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertEquals(newName, eventTest.getContactList().get(contactIndex).getName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        //test if email edited"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        String newEmail \u003d \"email a\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        testList.getEvent(0).editContact(contactIndex, \u0027E\u0027, newEmail);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertEquals(newEmail, testList.getEvent(0).getContactList().get(contactIndex).getEmail());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        newEmail \u003d \"email\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        eventTest.getContactList().get(contactIndex).setEmail(newEmail);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertEquals(newEmail, eventTest.getContactList().get(contactIndex).getEmail());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        //test if phone number is edited"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        String newPhone \u003d \"phone a\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        testList.getEvent(0).editContact(contactIndex, \u0027P\u0027, newPhone);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertEquals(newPhone, testList.getEvent(0).getContactList().get(contactIndex).getPhoneNo());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        newPhone \u003d \"phone\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        eventTest.getContactList().get(contactIndex).setPhoneNo(newPhone);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertEquals(newPhone, eventTest.getContactList().get(contactIndex).getPhoneNo());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        //test wrong contact index"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        String newContact \u003d \"wrong contact index\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            testList.getEvent(0).editContact(23, \u0027E\u0027, newContact);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 123,
      "ZhangYihanNus": 4
    }
  },
  {
    "path": "src/test/java/DateValidatorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//@@author Ryan-Wong-Ren-Wei"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.formatting.DateStringValidator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class DateValidatorTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void dateValidatorTestEvent() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String correctString1 \u003d \"14-12-2019 1500\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String correctString2 \u003d \"12-05-4938 1800\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String correctString3 \u003d \"5-5-2000 0800\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertTrue(DateStringValidator.isValidDateForEvent(correctString1));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertTrue(DateStringValidator.isValidDateForEvent(correctString2));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertTrue(DateStringValidator.isValidDateForEvent(correctString3));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String wrongString1 \u003d \"5-5-5-5-3513\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String wrongString2 \u003d \"5-5-3 3301\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String wrongString3 \u003d \"21-12-1900 6000 7000\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertFalse(DateStringValidator.isValidDateForEvent(wrongString1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertFalse(DateStringValidator.isValidDateForEvent(wrongString2));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertFalse(DateStringValidator.isValidDateForEvent(wrongString3));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String wrongString4 \u003d \"alkjawfwe\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String wrongString5 \u003d \"21-12-2019 15awawer\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertFalse(DateStringValidator.isValidDateForEvent(wrongString4));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertFalse(DateStringValidator.isValidDateForEvent(wrongString5));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void dateValidatorTestToDo() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String correctString1 \u003d \"14-12-2019\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String correctString2 \u003d \"12-05-4938\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String correctString3 \u003d \"5-5-2000\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertTrue(DateStringValidator.isValidDateForToDo(correctString1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertTrue(DateStringValidator.isValidDateForToDo(correctString2));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertTrue(DateStringValidator.isValidDateForToDo(correctString3));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String wrongString1 \u003d \"5-5--3931-5-3513\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String wrongString2 \u003d \"5-5dsafs-3 3301\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String wrongString3 \u003d \"21-12 6000 7000\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertFalse(DateStringValidator.isValidDateForToDo(wrongString1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertFalse(DateStringValidator.isValidDateForToDo(wrongString2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertFalse(DateStringValidator.isValidDateForToDo(wrongString3));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String wrongString4 \u003d \"alkjawfwe\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String wrongString5 \u003d \"50-50-50\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertFalse(DateStringValidator.isValidDateForToDo(wrongString4));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertFalse(DateStringValidator.isValidDateForToDo(wrongString5));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ryan-Wong-Ren-Wei": 51
    }
  },
  {
    "path": "src/test/java/InstrumentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "//@@author Dng132FEI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "import mistermusik.commons.instruments.InstrumentList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "import mistermusik.commons.events.eventtypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "import mistermusik.commons.events.formatting.EventDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "import mistermusik.logic.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "public class InstrumentTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public void addInstrumentTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        InstrumentList instrumentListTest \u003d new InstrumentList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        int index \u003d instrumentListTest.addInstrument(\"double bass\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        String instrumentIndexAndName \u003d instrumentListTest.getIndexAndInstrument(index);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        assertEquals(\"1. double bass\", instrumentIndexAndName);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        int indexTwo \u003d instrumentListTest.addInstrument(\"flute\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        String instrumentIndexAndNameTwo \u003d instrumentListTest.getIndexAndInstrument(indexTwo);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        assertEquals(\"2. flute\", instrumentIndexAndNameTwo);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public void viewInstrumentsTest() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        InstrumentList instrumentListTest \u003d new InstrumentList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        int index \u003d instrumentListTest.addInstrument(\"double bass\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        String instrumentIndexAndName \u003d instrumentListTest.getIndexAndInstrument(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        int indexTwo \u003d instrumentListTest.addInstrument(\"flute\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        String instrumentIndexAndNameTwo \u003d instrumentListTest.getIndexAndInstrument(indexTwo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        String viewResult \u003d instrumentListTest.getInstruments();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        assertEquals(\"1. double bass\\n2. flute\\n\", viewResult);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public void serviceTest() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        InstrumentList instrumentListTest \u003d new InstrumentList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        int instrumentIndex \u003d instrumentListTest.addInstrument(\"double bass\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        EventDate inputDate \u003d new EventDate(\"26-11-2017 1032\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        int serviceIndex \u003d instrumentListTest.service(instrumentIndex, inputDate, \"varnished body\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        String instrumentIndexAndName \u003d instrumentListTest.getIndexAndInstrument(instrumentIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        String serviceIndexAndName \u003d instrumentListTest.getIndexAndService(instrumentIndex, serviceIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        assertEquals(\"1. double bass\", instrumentIndexAndName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        assertEquals(\"1. varnished body  on Sun, 26 Nov 2017, 10:32\", serviceIndexAndName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        EventDate inputDateTwo \u003d new EventDate(\"26-11-2018 1032\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        int serviceIndexTwo \u003d instrumentListTest.service(instrumentIndex, inputDate, \"rehaired bow\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        String instrumentIndexAndNameTwo \u003d instrumentListTest.getIndexAndInstrument(instrumentIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        String serviceIndexAndNameTwo \u003d instrumentListTest.getIndexAndService(instrumentIndex, serviceIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        assertEquals(\"1. double bass\", instrumentIndexAndName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        assertEquals(\"2. rehaired bow  on Mon, 26 Nov 2017, 10:32\", serviceIndexAndName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public void viewServicesTest() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        InstrumentList instrumentListTest \u003d new InstrumentList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        int instrumentIndex \u003d instrumentListTest.addInstrument(\"double bass\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        EventDate inputDate \u003d new EventDate(\"26-11-2017 1032\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        int serviceIndex \u003d instrumentListTest.service(instrumentIndex, inputDate, \"varnished body\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        String instrumentIndexAndName \u003d instrumentListTest.getIndexAndInstrument(instrumentIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        String serviceIndexAndName \u003d instrumentListTest.getIndexAndService(instrumentIndex, serviceIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        EventDate inputDateTwo \u003d new EventDate(\"26-11-2018 1032\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        int serviceIndexTwo \u003d instrumentListTest.service(instrumentIndex, inputDate, \"rehaired bow\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        String serviceIndexAndNameTwo \u003d instrumentListTest.getIndexAndService(instrumentIndex, serviceIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        String viewServiceResult \u003d instrumentListTest.getInstrumentServiceInfo(instrumentIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        assertEquals(\"1. varnished body  on Sun, 26 Nov 2017, 10:32\\n2. rehaired bow  on \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                + \"Mon, 26 Nov 2017, 10:32\\n\", viewServiceResult);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dng132FEI": 68
    }
  },
  {
    "path": "src/test/java/ListSortingAndClashDetectionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//@@author Ryan-Wong-Ren-Wei"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.budgeting.CostExceedsBudgetException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.Concert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.recurringeventsubclasses.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.recurringeventsubclasses.Practice;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.logic.ClashException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.logic.EndBeforeStartException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.logic.EventList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class ListSortingAndClashDetectionTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * This method tests that the clash handler works when singular events are added to the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void clashTest() throws CostExceedsBudgetException, EndBeforeStartException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        ArrayList\u003cString\u003e readFromFile \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String fileContent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"XT/fawpeifwe/02-12-2019\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"XP/apiejfpwiefw/03-12-2019 1500/03-12-2019 1800\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"XC/halloween/04-12-2019 1600/04-12-2019 1930/13\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        EventList eventListTest \u003d new EventList(readFromFile);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event testEvent \u003d new Practice(\"Horn practice\", \"3-12-2019 1400\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"3-12-2019 1600\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            eventListTest.addEvent(testEvent);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (ClashException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            assertEquals(eventListTest.getEvent(1), e.getClashEvent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        testEvent \u003d new Lesson(\"Some lesson\", \"3-12-2019 1700\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"3-12-2019 1900\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            eventListTest.addEvent(testEvent);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (ClashException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            assertEquals(eventListTest.getEvent(1), e.getClashEvent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        testEvent \u003d new Concert(\"Some other concert\", \"4-12-2019 1500\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"4-12-2019 1600\", 0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            eventListTest.addEvent(testEvent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (ClashException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        testEvent \u003d new Concert(\"Some other concert\", \"4-12-2019 1500\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"4-12-2019 1601\", 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            eventListTest.addEvent(testEvent);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (ClashException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            assertEquals(eventListTest.getEvent(2), e.getClashEvent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * This methods tests that the schedule clash handler triggers when recurring events"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * are added to the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void clashTestRecurring() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        ArrayList\u003cString\u003e readFromFile \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String fileContent;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"XT/fawpeifwe/02-12-2019\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"XP/apiejfpwiefw/03-12-2019 1500/03-12-2019 1800\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"XC/halloween/04-12-2019 1600/04-12-2019 1930/3\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        EventList eventListTest \u003d new EventList(readFromFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event testEvent1 \u003d new Practice(\"Horn practice\", \"28-11-2019 1400\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"28-11-2019 1600\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertThrows(ClashException.class, () -\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            eventListTest.addRecurringEvent(testEvent1, 5);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        });"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event testEvent2 \u003d new Lesson(\"Theory lesson\", \"28-11-2019 1400\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"28-11-2019 1600\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            eventListTest.addRecurringEvent(testEvent2, 10);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (ClashException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * This method tests the automatic sorting function that should trigger whenever new events are added"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * to the list. Events are expected to be sorted in increasing order by date."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void testSorting() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        ArrayList\u003cString\u003e readFromFile \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String fileContent;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"XT/fawpeifwe/02-12-2019\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"XP/apiejfpwiefw/03-12-2019 1500/03-12-2019 1800\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"XC/halloween/04-12-2019 1600/04-12-2019 1930/5\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        EventList eventListTest \u003d new EventList(readFromFile);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        boolean succeeded \u003d true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event testEvent1 \u003d new Practice(\"Horn practice\", \"05-12-2019 1400\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"05-12-2019 1600\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event testEvent2 \u003d new Lesson(\"Full Orchestra rehearsal\", \"03-12-2019 1400\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"03-12-2019 1500\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event testEvent3 \u003d new ToDo(\"Complete theory homework CS2113\", \"01-12-2019\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListTest.addEvent(testEvent1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListTest.addEvent(testEvent2);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListTest.addNewTodo(testEvent3);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListTest.sortList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        ArrayList\u003cEvent\u003e sortedEventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        sortedEventList.add(new ToDo(\"Complete theory homework CS2113\", \"01-12-2019\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        sortedEventList.add(new ToDo(\"fawpeifwe\", \"02-12-2019\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        sortedEventList.add(new Lesson(\"Full Orchestra rehearsal\", \"03-12-2019 1400\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"03-12-2019 1500\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        sortedEventList.add(new Practice(\"apiejfpwiefw\", \"03-12-2019 1500\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"03-12-2019 1800\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        sortedEventList.add(new Concert(\"halloween\", \"04-12-2019 1600\","
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"04-12-2019 1930\", 5));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        sortedEventList.add(new Practice(\"Horn practice\", \"05-12-2019 1400\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"05-12-2019 1600\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        for (Event currEvent : eventListTest.getEventArrayList()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            assertEquals(currEvent.toString(), sortedEventList.get(i).toString());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ++i;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ryan-Wong-Ren-Wei": 152
    }
  },
  {
    "path": "src/test/java/MainTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.Goal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.budgeting.CostExceedsBudgetException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.assessmentsubclasses.Recital;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.recurringeventsubclasses.Lesson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.recurringeventsubclasses.Practice;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.commons.events.formatting.EventDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.logic.ClashException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.logic.EndBeforeStartException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import mistermusik.logic.EventList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import mistermusik.ui.CalendarView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public class MainTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    //@@author yenpeichih"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void goalsListAddTest() throws CostExceedsBudgetException, EndBeforeStartException, ClashException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        ArrayList\u003cString\u003e testListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        EventList testList \u003d new EventList(testListString);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event practiceTest1 \u003d new Practice(\"band rehearsal\", \"12-12-2019 1800\", \"12-12-2019 2100\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addEvent(practiceTest1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Goal practiceGoal1 \u003d new Goal(\"Finish Flight of the Bumblebee\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.getEvent(0).addGoal(practiceGoal1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        int goalIndex \u003d 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        String testOutput \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        for (Goal goalObject : practiceTest1.getGoalList()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            testOutput +\u003d goalIndex + \". \" + goalObject.getGoal() + \" - \" + \"Achieved: \" + goalObject.getStatus();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            goalIndex +\u003d 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        boolean isGoalFound \u003d !testOutput.isEmpty();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        assertTrue(isGoalFound);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void goalsListEditTest() throws CostExceedsBudgetException, EndBeforeStartException, ClashException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        ArrayList\u003cString\u003e testListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        EventList testList \u003d new EventList(testListString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event lessonTest1 \u003d new Lesson(\"theory lesson 1\", \"19-12-2019 1800\", \"19-12-2019 2100\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addEvent(lessonTest1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Goal lessonGoal1 \u003d new Goal(\"Finish Flight of the Bumblebee\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.getEvent(0).addGoal(lessonGoal1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Goal lessonGoal2 \u003d new Goal(\"Finish Symphony No.9\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.getEvent(0).editGoalList(lessonGoal2, 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        boolean isUpdated \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        if (testList.getEvent(0).getGoalList().get(0).getGoal().equals(\"Finish Symphony No.9\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            isUpdated \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        assertTrue(isUpdated);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void goalsListDeleteTest() throws CostExceedsBudgetException, EndBeforeStartException, ClashException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        ArrayList\u003cString\u003e testListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        EventList testList \u003d new EventList(testListString);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event lessonTest1 \u003d new Lesson(\"theory lesson 1\", \"19-12-2019 1800\", \"19-12-2019 2100\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addEvent(lessonTest1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Goal lessonGoal1 \u003d new Goal(\"Finish Flight of the Bumblebee\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.getEvent(0).addGoal(lessonGoal1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.getEvent(0).removeGoal(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        boolean isDeleted \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        if (testList.getEvent(0).getGoalList().isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            isDeleted \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        assertTrue(isDeleted);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void goalsListAchievedTest() throws CostExceedsBudgetException, EndBeforeStartException, ClashException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        ArrayList\u003cString\u003e testListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        EventList testList \u003d new EventList(testListString);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event lessonTest1 \u003d new Lesson(\"theory lesson 1\", \"19-12-2019 1800\", \"19-12-2019 2100\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addEvent(lessonTest1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Goal lessonGoal1 \u003d new Goal(\"Finish Flight of the Bumblebee\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.getEvent(0).addGoal(lessonGoal1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.getEvent(0).getGoalObject(0).setAchieved();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        assertEquals(\"Yes\", testList.getEvent(0).getGoalObject(0).getStatus());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        assertNotEquals(\"No\", testList.getEvent(0).getGoalObject(0).getStatus());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void goalsListViewTest() throws CostExceedsBudgetException, EndBeforeStartException, ClashException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        ArrayList\u003cString\u003e testListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        EventList testList \u003d new EventList(testListString);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event lessonTest1 \u003d new Lesson(\"theory lesson 1\", \"19-12-2019 1800\", \"19-12-2019 2100\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addEvent(lessonTest1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Goal lessonGoal1 \u003d new Goal(\"Finish Flight of the Bumblebee\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.getEvent(0).addGoal(lessonGoal1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        String testPrint \u003d testList.getEvent(0).getGoalObject(0).getGoal();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        assertEquals(\"Finish Flight of the Bumblebee\", testPrint);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void pastEventIndexTest() throws CostExceedsBudgetException, EndBeforeStartException, ClashException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        EventDate currentDate1 \u003d new EventDate(\"7-11-2019 1300\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        ArrayList\u003cString\u003e testListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        EventList testList \u003d new EventList(testListString);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event practiceTest1 \u003d new Practice(\"full band rehearsal\", \"12-12-2019 1800\", \"12-12-2019 2100\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addEvent(practiceTest1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event practiceTest2 \u003d new Practice(\"individual practice\", \"3-11-2019 1800\", \"3-11-2019 1900\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addEvent(practiceTest2);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event practiceTest3 \u003d new Practice(\"sectionals practice\", \"4-11-2019 1400\", \"4-11-2019 1600\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addEvent(practiceTest3);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event practiceTest4 \u003d new Practice(\"full band sound check\", \"19-11-2019 1600\", \"19-11-2019 1900\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addEvent(practiceTest4);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.findNextEventAndSetBoolean(currentDate1.getEventJavaDate());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        assertEquals(3, testList.currentDateIndex);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void pastEventUnachievedGoalsListTest()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            throws CostExceedsBudgetException, EndBeforeStartException, ClashException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        ArrayList\u003cString\u003e testListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        EventList testList \u003d new EventList(testListString);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event practiceTest1 \u003d new Practice(\"full band rehearsal\", \"12-12-2019 1800\", \"12-12-2019 2100\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addEvent(practiceTest1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event practiceTest2 \u003d new Practice(\"individual practice\", \"3-11-2019 1800\", \"3-11-2019 1900\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addEvent(practiceTest2);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event practiceTest3 \u003d new Practice(\"sectionals practice\", \"4-11-2019 1400\", \"4-11-2019 1600\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addEvent(practiceTest3);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Goal pastGoal1 \u003d new Goal(\"finish chapter 2\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.getEvent(0).addGoal(pastGoal1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Goal pastGoal2 \u003d new Goal(\"finish chapter 6\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.getEvent(1).addGoal(pastGoal2);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Goal futureGoal1 \u003d new Goal(\"finish chapter 9\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.getEvent(2).addGoal(futureGoal1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        EventDate currentDate1 \u003d new EventDate(\"7-11-2019 1300\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.findNextEventAndSetBoolean(currentDate1.getEventJavaDate());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        assertTrue(testList.gotPastUnachieved);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        assertNotEquals(\"You do not have any unachieved goals for past events! Yay!\" + \"\\n\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                testList.getPastEventsWithUnachievedGoals());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void noPastUnachievedGoalsTest() throws CostExceedsBudgetException, EndBeforeStartException, ClashException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        ArrayList\u003cString\u003e testListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        EventList testList \u003d new EventList(testListString);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event practiceTest1 \u003d new Practice(\"full band rehearsal\", \"12-12-2019 1800\", \"12-12-2019 2100\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addEvent(practiceTest1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event practiceTest2 \u003d new Practice(\"individual practice\", \"3-11-2019 1800\", \"3-11-2019 1900\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addEvent(practiceTest2);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event practiceTest3 \u003d new Practice(\"sectionals practice\", \"4-11-2019 1400\", \"4-11-2019 1600\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addEvent(practiceTest3);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Goal pastGoal1 \u003d new Goal(\"finish chapter 2\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.getEvent(0).addGoal(pastGoal1);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Goal pastGoal2 \u003d new Goal(\"finish chapter 6\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.getEvent(1).addGoal(pastGoal2);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Goal futureGoal1 \u003d new Goal(\"finish chapter 9\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.getEvent(2).addGoal(futureGoal1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        EventDate currentDate1 \u003d new EventDate(\"1-11-2019 1300\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.findNextEventAndSetBoolean(currentDate1.getEventJavaDate());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        assertFalse(testList.gotPastUnachieved);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        assertEquals(\"\\n\" + \"Below lists all the unachieved goal for past events. \""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"Please be reminded to add them to the future events.\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"\\n\" + \"You do not have any unachieved goals for past events! Yay!\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"\\n\", testList.getPastEventsWithUnachievedGoals());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void viewScheduleTest() throws CostExceedsBudgetException, EndBeforeStartException, ClashException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        boolean isEventsFound;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        ArrayList\u003cString\u003e testListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        EventList testList \u003d new EventList(testListString);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event toDoTest \u003d new ToDo(\"cheese\", \"19-09-2019\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addNewTodo(toDoTest);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event practiceTest1 \u003d new Practice(\"individual practice\", \"19-09-2019 1900\", \"19-09-2019 2000\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addEvent(practiceTest1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event practiceTest2 \u003d new Practice(\"sectional practice\", \"19-09-2019 2100\", \"19-09-2019 2200\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addEvent(practiceTest2);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event practiceTest3 \u003d new Practice(\"full band rehearsal\", \"19-09-2020 1000\", \"19-09-2020 1100\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addEvent(practiceTest3);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event eventTest \u003d new Recital(\"band recital\", \"20-09-2019 2100\", \"20-09-2019 2200\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addEvent(eventTest);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        String dateToView \u003d \"19-09-2019\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        ArrayList\u003cString\u003e eventsOnASpecificDate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        EventDate findDate \u003d new EventDate(dateToView);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        for (int i \u003d 0; i \u003c testList.getEventArrayList().size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            Event viewEvent \u003d testList.getEvent(i);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            String eventStringWithIndex \u003d \"\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            if (viewEvent.toString().contains(findDate.getFormattedDateString())) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                eventStringWithIndex +\u003d i + 1 + \". \" + viewEvent.toString();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                eventsOnASpecificDate.add(eventStringWithIndex);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        if (eventsOnASpecificDate.isEmpty()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            isEventsFound \u003d false;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            isEventsFound \u003d true;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        assertEquals(true, isEventsFound);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    //@@author ZhangYihanNus"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void checkFreeDaysTest() throws CostExceedsBudgetException, EndBeforeStartException, ClashException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        ArrayList\u003cString\u003e readFromFile \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String fileContent;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        fileContent \u003d \"XT/fawpeifwe/15-11-2019\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        fileContent \u003d \"XP/apiejfpwiefw/07-11-2019 1500/03-12-2019 1800\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        fileContent \u003d \"XC/halloween/08-11-2019 1600/04-12-2019 1930/5\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        fileContent \u003d \"XP/apiejfpwiefw/09-11-2019 1500/03-12-2019 1800\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        fileContent \u003d \"XP/apiejfpwiefw/10-11-2019 1500/03-12-2019 1800\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        fileContent \u003d \"XP/apiejfpwiefw/11-11-2019 1500/03-12-2019 1800\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        fileContent \u003d \"XP/apiejfpwiefw/12-11-2019 1500/03-12-2019 1800\";"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        fileContent \u003d \"XP/apiejfpwiefw/13-11-2019 1500/03-12-2019 1800\";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        fileContent \u003d \"XP/apiejfpwiefw/14-11-2019 1500/03-12-2019 1800\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        EventList eventListTest \u003d new EventList(readFromFile);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        EventDate dayToCheckIfFreeObject \u003d new EventDate(new Date());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        dayToCheckIfFreeObject.addDaysAndSetMidnight(0);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        Queue\u003cString\u003e daysFree \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        int nextDays \u003d 1;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        while (daysFree.size() \u003c\u003d 3) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            boolean isFree \u003d true;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            for (Event viewEvent : eventListTest.getEventArrayList()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                if (viewEvent.getStartDate().getFormattedDateString()"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        .substring(0, 16).equals(dayToCheckIfFreeObject.getFormattedDateString())) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    isFree \u003d false;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            if (isFree) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                daysFree.add(dayToCheckIfFreeObject.getFormattedDateString());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            dayToCheckIfFreeObject.addDaysAndSetMidnight(1);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            nextDays++;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        boolean checkFreeFlag \u003d true;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        EventDate eventDateCompare \u003d new EventDate(new Date());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        eventDateCompare.addDaysAndSetMidnight(0);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        if (!daysFree.poll().equals(\"Sat, 16 Nov 2019\")) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            checkFreeFlag \u003d false;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        if (!daysFree.poll().equals(\"Sun, 17 Nov 2019\")) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            checkFreeFlag \u003d false;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        if (!daysFree.poll().equals(\"Mon, 18 Nov 2019\")) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            checkFreeFlag \u003d false;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        assertEquals(true, checkFreeFlag);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void checklistAddTest() throws CostExceedsBudgetException, EndBeforeStartException, ClashException {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        ArrayList\u003cString\u003e testListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        EventList testList \u003d new EventList(testListString);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        Event practiceTest1 \u003d new Practice(\"rehearsal No1\", \"10-12-2019 1800\", \"10-12-2019 2100\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        testList.addEvent(practiceTest1);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        testList.getEvent(0).addChecklist(\"Bring glasses\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        testList.getEvent(0).addChecklist(\"Edit DG\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        int checklistItemIndex \u003d 1;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String testOutput \u003d \"\";"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (String checklistItem : practiceTest1.getChecklist()) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            testOutput +\u003d checklistItemIndex + \". \" + checklistItem;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            checklistItemIndex +\u003d 1;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        boolean isChecklistFound \u003d !testOutput.isEmpty();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        assertTrue(isChecklistFound);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void checklistEditTest() throws CostExceedsBudgetException, EndBeforeStartException, ClashException {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        ArrayList\u003cString\u003e testListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        EventList testList \u003d new EventList(testListString);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        Event lessonTest1 \u003d new Lesson(\"CG2271\", \"10-12-2019 1800\", \"10-12-2019 2100\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        testList.addEvent(lessonTest1);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String itemString1 \u003d \"bring glasses\";"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        testList.getEvent(0).addChecklist(itemString1);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String itemString2 \u003d \"bring a pair of glasses\";"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        testList.getEvent(0).editChecklist(0, itemString2);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        boolean isUpdated \u003d false;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        if (testList.getEvent(0).getChecklist().get(0).equals(itemString2)) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            isUpdated \u003d true;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        assertTrue(isUpdated);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void checklistDeleteTest() throws CostExceedsBudgetException, EndBeforeStartException, ClashException {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        ArrayList\u003cString\u003e testListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        EventList testList \u003d new EventList(testListString);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        Event lessonTest1 \u003d new Lesson(\"CG2271\", \"10-12-2019 1800\", \"10-12-2019 2100\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        testList.addEvent(lessonTest1);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String itemString \u003d \"bring glasses\";"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        testList.getEvent(0).addChecklist(itemString);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        testList.getEvent(0).deleteChecklist(0);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        boolean isDeleted \u003d false;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        if (testList.getEvent(0).getChecklist().isEmpty()) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            isDeleted \u003d true;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        assertTrue(isDeleted);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void checklistViewTest() throws CostExceedsBudgetException, EndBeforeStartException, ClashException {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        ArrayList\u003cString\u003e testListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        EventList testList \u003d new EventList(testListString);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        Event lessonTest1 \u003d new Lesson(\"CG2271\", \"10-12-2019 1800\", \"10-12-2019 2100\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        testList.addEvent(lessonTest1);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String itemString \u003d \"bring glasses\";"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        testList.getEvent(0).addChecklist(itemString);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String testChecklistItem \u003d testList.getEvent(0).getChecklist().get(0);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        assertEquals(itemString, testChecklistItem);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void calendarTest()  throws CostExceedsBudgetException, EndBeforeStartException, ClashException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        ArrayList\u003cString\u003e testListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        EventList testList \u003d new EventList(testListString);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        Event lessonTest1 \u003d new Lesson(\"CG2271\", \"12-11-2019 1800\", \"12-11-2019 2100\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        testList.addEvent(lessonTest1);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        Date testDate \u003d new GregorianCalendar(2019, Calendar.NOVEMBER, 7).getTime();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        CalendarView calendarTest \u003d new CalendarView(testList, new EventDate(testDate));"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        calendarTest.setCalendarInfo();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String calendarCompare \u003d \"____________________________________________\""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"____________________________________________________________________________\\n\""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"|                                                  Events of\""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \" the week                                                  |\\n\""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"____________________________________________________________\""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"|   \u003cThursday\u003e   |    \u003cFriday\u003e    |   \u003cSaturday\u003e   |    \u003cSunday\u003e \""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"   |    \u003cMonday\u003e    |   \u003cTuesday\u003e    |   \u003cWednesday\u003e  |\\n\""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"|   07-11-2019   |   08-11-2019   |   09-11-2019   |   10-11-2019 \""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"  |   11-11-2019   |   12-11-2019   |   13-11-2019   |\\n\""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"________________________________________________________________\""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"________________________________________________________\\n\""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"|                |                |                |            \""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"    |                |* 18:00 ~ 21:00 |                |\\n\""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"|                |                |                |             \""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"   |                |CG2271          |                |\\n\""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"|                |                |                |            \""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"    |                |----------------|                |\\n\""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"|                |                |                |             \""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"   |                |                |                |\\n\""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"_________________________________________________________________\""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                + \"_______________________________________________________\";"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        assertEquals(calendarCompare, calendarTest.getStringForOutput());"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 4,
      "yenpeichih": 177,
      "ZhangYihanNus": 176,
      "Ryan-Wong-Ren-Wei": 12
    }
  },
  {
    "path": "src/test/java/RecurringEventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//@@author YuanJiayi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.events.eventtypes.Event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.recurringeventsubclasses.Lesson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.events.eventtypes.eventsubclasses.recurringeventsubclasses.Practice;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.logic.ClashException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.logic.EventList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "public class RecurringEventTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void addRecurringEventTest() throws ClashException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        ArrayList\u003cString\u003e testListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        EventList testList \u003d new EventList(testListString);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        // test practice type"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Event practiceTest \u003d new Practice(\"practice 1\", \"06-11-2019 1200\", \"06-11-2019 1400\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        testList.addRecurringEvent(practiceTest, 60);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertEquals(2, testList.getNumEvents());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        // test lesson type"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Event lessonTest \u003d new Lesson(\"lesson 1\", \"13-08-2019 1000\", \"13-08-2019 1200\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        testList.addRecurringEvent(lessonTest, 35);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertEquals(6, testList.getNumEvents());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        // test the period larger than one semester"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Event largePeriodTest \u003d new Practice(\"practice 2\", \"23-09-2019 0900\", \"23-09-2019 1000\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        testList.addRecurringEvent(largePeriodTest, 113);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertEquals(7, testList.getNumEvents());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        // test the period exactly one semester (112 days)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Event exactOneSemesterPeriodTest \u003d new Lesson(\"lesson 2\", \"07-10-2019 0800\", \"07-10-2019 0900\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        testList.addRecurringEvent(exactOneSemesterPeriodTest, 112);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertEquals(9, testList.getNumEvents());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        // test the period just shorter than 112 days"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Event smallPeriodTest \u003d new Practice(\"practice 3\", \"14-12-2019 1800\", \"14-12-2019 1900\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        testList.addRecurringEvent(smallPeriodTest, 111);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertEquals(11, testList.getNumEvents());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        // test recurring lesson with \"isDone\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Event notDoneLessonTest \u003d new Lesson(\"lesson\", false,\"01-01-2020 2200\", \"01-01-2020 2300\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        testList.addRecurringEvent(notDoneLessonTest, 120);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertEquals(12, testList.getNumEvents());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        // test clash"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Event clashTest \u003d new Lesson(\"lesson 3\", \"14-12-2019 1800\", \"14-12-2019 1900\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            testList.addRecurringEvent(clashTest, 100);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        } catch (ClashException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            assertEquals(e.getClashEvent().toString(), clashTest.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 57
    }
  },
  {
    "path": "src/test/java/RescheduleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//@@author YuanJiayi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.events.eventtypes.Event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.commons.events.formatting.EventDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import mistermusik.logic.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "public class RescheduleTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void rescheduleStartDateTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        ArrayList\u003cString\u003e readFromFile \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        String fileContent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        fileContent \u003d \"XP/practice 1 /03-12-2019 1500/03-12-2019 1800\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        EventList eventListTest \u003d new EventList(readFromFile);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        // test reschedule start date and time of an event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Event practiceTest \u003d eventListTest.getEvent(0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        EventDate newPracticeStartDate \u003d new EventDate(\"09-11-2019 0000\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        practiceTest.rescheduleStartDate(newPracticeStartDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertEquals(newPracticeStartDate, practiceTest.getStartDate());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void rescheduleEndDateTest() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        ArrayList\u003cString\u003e readFromFile \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        String fileContent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        fileContent \u003d \"XP/practice 1 /03-12-2019 1500/03-12-2019 1800\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        EventList eventListTest \u003d new EventList(readFromFile);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Event practiceTest \u003d eventListTest.getEvent(0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        // test reschedule end date and time of an event"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        EventDate newPracticeEndDate \u003d new EventDate(\"09-11-2019 0100\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        practiceTest.rescheduleEndDate(newPracticeEndDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        assertEquals(newPracticeEndDate, practiceTest.getEndDate());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 39
    }
  }
]
