[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    archiveBaseName \u003d \"MisterMusik\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yenpeichih": 1,
      "-": 40
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.Storage.EventList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "import Events.Storage.Instruments.InstrumentList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Events.Storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import UserElements.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import UserElements.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import UserElements.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static UI ui \u003d new UI();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static EventList tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    private static InstrumentList instruments \u003d new InstrumentList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * main Duke method"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        ui.welcome();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        String userInput \u003d parser.readUserInput().toLowerCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!userInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Command currCommand \u003d parser.parseInput(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            currCommand.execute(tasks, ui, storage, instruments);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            userInput \u003d parser.readUserInput();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.bye();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * instantiates all necessary classes to run duke program"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static void setup() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        storage \u003d new Storage(new File(\"data/Duke.txt\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        tasks \u003d new EventList(storage.readFromFile(ui));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dng132FEI": 3,
      "yenpeichih": 2,
      "Ryan-Wong-Ren-Wei": 18,
      "-": 21
    }
  },
  {
    "path": "src/main/java/Events/EventTypes/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Events.EventTypes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.Formatting.EventDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import Events.Storage.Checklist;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import Events.Storage.Contact;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import Events.Storage.Goal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Model_Class.Event object inherits Model_Class.Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Is a type of task available for use."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public abstract class Event implements Comparable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"Event\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private EventDate startEventDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private EventDate endEventDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private char eventType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    protected ArrayList\u003cGoal\u003e goalsList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    protected ArrayList\u003cContact\u003e contactList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private Checklist checklist;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates event with one date input (e.g todo)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param description event description"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param isDone      boolean representing state of event completion"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param dateAndTime string representing date of event"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Event(String description, boolean isDone, String dateAndTime) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.startEventDate \u003d new EventDate(dateAndTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.endEventDate \u003d null; //no end date, set to null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.eventType \u003d \u0027T\u0027; //event with no end date can only be ToDo"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        this.goalsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.contactList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.checklist \u003d new Checklist();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Creates event with two date input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param description      event description"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param isDone           boolean representing state of event completion"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param startDateAndTime string representing start date of event"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param endDateAndTime   string representing end date of event"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Event(String description, boolean isDone, String startDateAndTime, String endDateAndTime, char eventType) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.startEventDate \u003d new EventDate(startDateAndTime);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.endEventDate \u003d new EventDate(endDateAndTime);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.eventType \u003d eventType;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        this.goalsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.contactList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.checklist \u003d new Checklist();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Edit event with new description and two date input"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param newDescription new event description"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void editEvent(String newDescription) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.description \u003d newDescription;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//        logger.log(Level.INFO, \"The description of the event is edited\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts event type task to string format for printing."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Formatted string representing the event, whether or not it is completed and its date."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (getType() \u003d\u003d \u0027T\u0027) { //if todo, then only one date entry"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            return \"[\" + getDoneSymbol() + \"][T] \" + getDescription()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    + \" BY: \" + this.getStartDate().getFormattedDateString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else { //multiple date entries"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return \"[\" + getDoneSymbol() + \"][\" + getType() + \"] \" +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    getDescription() + \" START: \" + startEventDate.getFormattedDateString() +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    \" END: \" + endEventDate.getFormattedDateString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public String toStringForFile() { //string that is to be saved to file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (getEndDate() \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return getDoneSymbol() + getType() + \"/\" + getDescription() + \"/\" +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    getStartDate().getUserInputDateString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return getDoneSymbol() + getType() + \"/\" + getDescription() + \"/\" +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                getStartDate().getUserInputDateString() + \"/\" + getEndDate().getUserInputDateString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public char getType() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return eventType;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public EventDate getStartDate() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return startEventDate;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public EventDate getEndDate() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return endEventDate;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public String getDoneSymbol() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        return (isDone) ? \"V\" : \"X\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//        logger.log(Level.INFO, \"The event is marked as done\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void rescheduleStartDate(EventDate newStartDate) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.startEventDate \u003d newStartDate;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//        logger.log(Level.INFO, \"The startEventDate of the event is rescheduled\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void rescheduleEndDate(EventDate newEndDate) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.endEventDate \u003d newEndDate;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//        logger.log(Level.INFO, \"The endEventDate of the event is rescheduled\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void addGoal(Goal goalInput) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        goalsList.add(goalInput);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//        logger.log(Level.INFO, \"The new goal is added to the list\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void removeGoal(int goalID) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        goalsList.remove(goalID);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//        logger.log(Level.INFO, \"The goal is removed from the list\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public ArrayList\u003cGoal\u003e getGoalList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        return goalsList;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void editGoalList(Goal goalInput, int index) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        goalsList.set(index, goalInput);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void updateGoalAchieved(int goalID) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        goalsList.get(goalID).setAchieved();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    //@@author YuanJiayi"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void addContact(Contact contactInput) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        contactList.add(contactInput);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//        logger.log(Level.INFO, \"A new contact is added to the list\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void removeContact(int contactIndex) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        contactList.remove(contactIndex);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//        logger.log(Level.INFO, \"The contact is removed from the list\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public ArrayList\u003cContact\u003e getContactList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        return contactList;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void editContact(int contactIndex, char editType, String newContact) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        if (editType \u003d\u003d \u0027N\u0027) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            contactList.get(contactIndex).setName(newContact);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        else if (editType \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            contactList.get(contactIndex).setEmail(newContact);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        else if (editType \u003d\u003d \u0027P\u0027) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            contactList.get(contactIndex).setPhoneNo(newContact);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    //@@author ZhangYihanNus"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void addChecklist(String newChecklist) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.checklist.addItem(newChecklist);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "//        logger.log(Level.INFO, \"The new checklist is added to the list\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public ArrayList\u003cString\u003e getChecklist() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        return this.checklist.getChecklist();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void editChecklist(int checklistIndex, String newChecklist) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.checklist.editItem(checklistIndex, newChecklist);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "//        logger.log(Level.INFO, \"The checklist is edited\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void deleteChecklist(int checklistIndex) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.checklist.deleteItem(checklistIndex);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "//        logger.log(Level.INFO, \"The checklist is removed form the list\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public int compareTo(Event currEvent) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (this.startEventDate.getEventJavaDate().compareTo(currEvent.startEventDate.getEventJavaDate()) \u003e 0) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 50,
      "Dng132FEI": 5,
      "yenpeichih": 26,
      "ZhangYihanNus": 47,
      "Ryan-Wong-Ren-Wei": 55,
      "-": 33
    }
  },
  {
    "path": "src/main/java/Events/EventTypes/EventSubclasses/Assessment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package Events.EventTypes.EventSubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public abstract class Assessment extends Event {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Creates assessment event with isDone boolean for reading from files"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventType type of event denoted by character"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Assessment(String description, boolean isDone, String startDateAndTime, String endDateAndTime, char eventType) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, isDone, startDateAndTime, endDateAndTime, eventType);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Creates assessment without isDone boolean for user input (assumes event entered is incomplete)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventType type of event denoted by character"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Assessment(String description, String startDateAndTime, String endDateAndTime, char eventType) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, false, startDateAndTime, endDateAndTime, eventType);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYihanNus": 20,
      "Ryan-Wong-Ren-Wei": 3
    }
  },
  {
    "path": "src/main/java/Events/EventTypes/EventSubclasses/AssessmentSubclasses/Exam.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "package Events.EventTypes.EventSubclasses.AssessmentSubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import Events.EventTypes.EventSubclasses.Assessment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public class Exam extends Assessment {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Creates exam event with isDone boolean for reading from files"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Exam(String description, boolean isDone, String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, isDone, startDateAndTime, endDateAndTime, \u0027E\u0027);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Creates exam without isDone boolean for user input (assumes event entered is incomplete)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Exam(String description, String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, false, startDateAndTime, endDateAndTime, \u0027E\u0027);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYihanNus": 19
    }
  },
  {
    "path": "src/main/java/Events/EventTypes/EventSubclasses/AssessmentSubclasses/Recital.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "package Events.EventTypes.EventSubclasses.AssessmentSubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import Events.EventTypes.EventSubclasses.Assessment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public class Recital extends Assessment {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Creates recital event with isDone boolean for reading from files"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Recital(String description, boolean isDone, String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, isDone, startDateAndTime, endDateAndTime, \u0027R\u0027);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Creates recital without isDone boolean for user input (assumes event entered is incomplete)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Recital(String description, String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, false, startDateAndTime, endDateAndTime, \u0027R\u0027);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYihanNus": 19
    }
  },
  {
    "path": "src/main/java/Events/EventTypes/EventSubclasses/Concert.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package Events.EventTypes.EventSubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public class Concert extends Event {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private int cost;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * creates new lesson class with boolean to read from file"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Concert(String description, boolean isDone, String startDateAndTime, String endDateAndTime, int cost) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, isDone, startDateAndTime, endDateAndTime, \u0027C\u0027);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * creates new lesson class without boolean to read from user input (assumes incomplete)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Concert(String description, String startDateAndTime, String endDateAndTime, int cost) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, false, startDateAndTime, endDateAndTime, \u0027C\u0027);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public int getCost(){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return this.cost;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public String toStringForFile() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return getDoneSymbol() + getType() + \"/\" + getDescription() + \"/\" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                getStartDate().getUserInputDateString() + \"/\" + getEndDate().getUserInputDateString() + \"/\" +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                this.cost;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYihanNus": 16,
      "Ryan-Wong-Ren-Wei": 17
    }
  },
  {
    "path": "src/main/java/Events/EventTypes/EventSubclasses/RecurrentEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package Events.EventTypes.EventSubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public abstract class RecurrentEvent extends Event {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates recurrent event with isDone boolean for reading from files"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param eventType type of event denoted by character"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public RecurrentEvent(String description, boolean isDone, String startDateAndTime, String endDateAndTime, char eventType) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        super(description, isDone, startDateAndTime, endDateAndTime, eventType);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates recurrent event without isDone boolean for user input (assumes task entered is incomplete)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param eventType type of event denoted by character"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public RecurrentEvent(String description, String startDateAndTime, String endDateAndTime, char eventType) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        super(description, false, startDateAndTime, endDateAndTime, eventType);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yenpeichih": 1,
      "ZhangYihanNus": 2,
      "Ryan-Wong-Ren-Wei": 22
    }
  },
  {
    "path": "src/main/java/Events/EventTypes/EventSubclasses/RecurringEventSubclasses/Lesson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "package Events.EventTypes.EventSubclasses.RecurringEventSubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.EventTypes.EventSubclasses.RecurrentEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public class Lesson extends RecurrentEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * creates new lesson class with boolean to read from file"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Lesson(String description, boolean isDone, String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, isDone, startDateAndTime, endDateAndTime, \u0027L\u0027);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * creates new lesson class with boolean to read from user input (assume incomplete)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Lesson(String description, String startDateAndTime, String EndDateAndTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, false, startDateAndTime, EndDateAndTime, \u0027L\u0027);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yenpeichih": 2,
      "ZhangYihanNus": 22
    }
  },
  {
    "path": "src/main/java/Events/EventTypes/EventSubclasses/RecurringEventSubclasses/Practice.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package Events.EventTypes.EventSubclasses.RecurringEventSubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.EventSubclasses.RecurrentEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public class Practice extends RecurrentEvent {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * creates new practice class with boolean to read from file"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Practice(String description, boolean isDone, String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, isDone, startDateAndTime, endDateAndTime, \u0027P\u0027);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * creates new practice class without boolean to read from user input (assume incomplete)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Practice(String description,String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, false, startDateAndTime, endDateAndTime, \u0027P\u0027);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yenpeichih": 1,
      "ZhangYihanNus": 16,
      "Ryan-Wong-Ren-Wei": 3
    }
  },
  {
    "path": "src/main/java/Events/EventTypes/EventSubclasses/ToDo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "package Events.EventTypes.EventSubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public class ToDo extends Event {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Creates ToDo with description and done boolean for reading from file."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public ToDo(String description, boolean isDone, String dateAndTime) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, isDone, dateAndTime);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Creates ToDo without boolean, assumed incomplete read from user input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public ToDo(String description, String dateAndTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, false, dateAndTime);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        return \"[\" + getDoneSymbol() + \"][T] \" + getDescription() + \" BY: \" + this.getStartDate().getFormattedDateString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yenpeichih": 2,
      "ZhangYihanNus": 18,
      "Ryan-Wong-Ren-Wei": 4
    }
  },
  {
    "path": "src/main/java/Events/Formatting/CalendarView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "//@@author ZhangYihanNus"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "package Events.Formatting;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import Events.Storage.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public class CalendarView {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private List\u003cQueue\u003cEvent\u003e\u003e eventsOfTheWeek \u003d new ArrayList\u003c\u003e(7);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private ArrayList\u003cString\u003e daysToDisplay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public ArrayList\u003cString\u003e datesToDisplay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private String stringForOutput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    static final int MONDAY \u003d 0, TUESDAY \u003d 1, WEDNESDAY \u003d 2, THURSDAY \u003d 3, FRIDAY \u003d 4, SATURDAY \u003d 6, SUNDAY \u003d 7;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public CalendarView(EventList eventList, EventDate startDate) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        ArrayList\u003cEvent\u003e eventArrayList \u003d eventList.getEventArrayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            eventsOfTheWeek.add(new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        setDaysAndDatesList(startDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        getEventsOfTheWeek(eventArrayList, startDate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public String getStringForOutput() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        return stringForOutput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Find all the events in the coming 7 days."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventArrayList List of all events."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param startDay          The current day."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private void getEventsOfTheWeek(ArrayList\u003cEvent\u003e eventArrayList, EventDate startDay) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        EventDate yesterday \u003d new EventDate(startDay.getEventJavaDate());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        yesterday.addDaysAndSetMidnight(-1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        EventDate endOfWeek \u003d new EventDate(startDay.getEventJavaDate());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        endOfWeek.addDaysAndSetMidnight(6);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        EventDate thisDay \u003d new EventDate(startDay.getEventJavaDate());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        int thisDayNum \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        thisDay.addDaysAndSetMidnight(thisDayNum);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (Event thisEvent : eventArrayList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            //if this event is within the next 6 days"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            if ((thisEvent.getStartDate().compare(endOfWeek) \u003c\u003d 0) \u0026\u0026 (thisEvent.getStartDate().compare(yesterday) \u003e 0)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                while ((thisEvent.getStartDate().compare(thisDay) \u003e 0) \u0026\u0026 (thisDayNum \u003c 7)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    thisDayNum++;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    thisDay.addDaysAndSetMidnight(1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                if (thisDayNum \u003c 7) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    eventsOfTheWeek.get(thisDayNum).offer(thisEvent);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Sets the two ArrayLists containing days and dates info for the coming 7 days."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param startDate The current day."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private void setDaysAndDatesList(EventDate startDate) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String currDay \u003d startDate.getEventJavaDate().toString().split(\" \")[0];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String[] weekdays \u003d new String[] {\"    \u003cMonday\u003e    \", \"   \u003cTuesday\u003e    \", \"   \u003cWednesday\u003e  \","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                \"   \u003cThursday\u003e   \", \"    \u003cFriday\u003e    \", \"   \u003cSaturday\u003e   \", \"    \u003cSunday\u003e    \"};"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        int startDay \u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        switch (currDay) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            case \"Mon\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                startDay \u003d MONDAY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            case \"Tue\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                startDay \u003d TUESDAY;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            case \"Wed\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                startDay \u003d WEDNESDAY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            case \"Thu\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                startDay \u003d THURSDAY;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            case \"Fri\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                startDay \u003d FRIDAY;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            case \"Sat\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                startDay \u003d SATURDAY;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            case \"Sun\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                startDay \u003d SUNDAY;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            this.daysToDisplay.add(weekdays[(startDay + i) % 7]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        EventDate tempDay \u003d new EventDate(startDate.getEventJavaDate());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String thisDate \u003d tempDay.getUserInputDateString().split(\" \")[0];"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            this.datesToDisplay.add(\"   \" + thisDate + \"   \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            tempDay.addDaysAndSetMidnight(1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void setCalendarInfo() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String calendarInfo \u003d \"\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        int maxNumOfEvent \u003d 0;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (Queue\u003cEvent\u003e thisQue : eventsOfTheWeek) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            if (thisQue.size() \u003e maxNumOfEvent) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                maxNumOfEvent \u003d thisQue.size();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        // head of table"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        calendarInfo +\u003d \"________________________________________________________________________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                \"|                                                  Events of the week                                                  |\\n\" +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                \"________________________________________________________________________________________________________________________\\n\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        // row of days"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            calendarInfo +\u003d \"|\" + this.daysToDisplay.get(i);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        calendarInfo +\u003d \"|\\n\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        // row of dates"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            calendarInfo +\u003d \"|\" + this.datesToDisplay.get(i);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        calendarInfo +\u003d \"|\\n\" +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                \"________________________________________________________________________________________________________________________\\n\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        // rows of events"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int idxOfEventRow \u003d 0; idxOfEventRow \u003c maxNumOfEvent; idxOfEventRow++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String[][] eventsLine;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            eventsLine \u003d getEventsOfOneRow(idxOfEventRow);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            for (int row \u003d 0; row \u003c 3; row++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                for (int day \u003d 0; day \u003c 7; day++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    calendarInfo +\u003d \"|\" + eventsLine[row][day];"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                calendarInfo +\u003d \"|\\n\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        calendarInfo +\u003d \"|                |                |                |                |                |                |                |\\n\" +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                \"________________________________________________________________________________________________________________________\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.stringForOutput \u003d calendarInfo;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Provides the events info in one (3) row, of 7 days."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * If there is no event in a day, keep empty."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param idxOfEventRow the current row of calendar where we wish to get events\u0027 info"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @return the String info of this row of events"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private String[][] getEventsOfOneRow(int idxOfEventRow) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String[][] eventsLine \u003d new String[3][7];"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String emptySection \u003d \"                \";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int day \u003d 0; day \u003c 7; day++) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String thisTime \u003d emptySection;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String thisDescription \u003d emptySection;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String thisDashes \u003d emptySection;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            if (!eventsOfTheWeek.get(day).isEmpty()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                Event tempEvent \u003d eventsOfTheWeek.get(day).poll();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                //time"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                String thisStartTime, thisEndTime;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                assert tempEvent !\u003d null;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                if (!(tempEvent.getStartDate() \u003d\u003d null) \u0026\u0026"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        (tempEvent.getStartDate().getFormattedDateString().split(\", \").length \u003e 2)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    thisStartTime \u003d tempEvent.getStartDate().getFormattedDateString().split(\", \")[2];"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    thisTime \u003d \"* \" + thisStartTime;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    if (!(tempEvent.getEndDate() \u003d\u003d null) \u0026\u0026"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                            (tempEvent.getEndDate().getFormattedDateString().split(\", \").length \u003e 2)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        thisEndTime \u003d tempEvent.getEndDate().getFormattedDateString().split(\", \")[2];"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        thisTime +\u003d \" ~ \" + thisEndTime + \" \";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                } else if (tempEvent.getType() \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    thisTime \u003d \"* TODO          \";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                //description"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                String tempDescription \u003d tempEvent.getDescription();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                if (tempDescription.length() \u003e 13) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    thisDescription \u003d tempDescription.substring(0, 13) + \"...\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    String spaces \u003d \"\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    for (int i \u003d 0; i \u003c (16 - tempDescription.length()); i++) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        spaces +\u003d \" \";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    thisDescription \u003d tempDescription + spaces;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                //dashes"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                thisDashes \u003d \"----------------\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            eventsLine[0][day] \u003d thisTime;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            eventsLine[1][day] \u003d thisDescription;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            eventsLine[2][day] \u003d thisDashes;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        return eventsLine;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYihanNus": 213
    }
  },
  {
    "path": "src/main/java/Events/Formatting/DateStringValidator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//@@author Ryan-Wong-Ren-Wei"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package Events.Formatting;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public interface DateStringValidator {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    static boolean isValidDateForToDo(String dateString) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        format.setLenient(false);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            format.parse(dateString);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    static boolean isValidDateForEvent(String dateString) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        format.setLenient(false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            format.parse(dateString);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ryan-Wong-Ren-Wei": 30
    }
  },
  {
    "path": "src/main/java/Events/Formatting/EventDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "package Events.Formatting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " * Model_Class.DateObj object stores the input date and time as a java object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class EventDate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"EventDate\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    protected String userInputDateString;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    protected Date javaDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    protected String formattedDateString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    protected int STRING_TO_DATE \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    protected int DATE_TO_STRING \u003d 2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Creates a custom \"date object\" for string to date."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public EventDate(String userInputDateString) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        this.userInputDateString \u003d userInputDateString;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        formatDate(STRING_TO_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Creates a custom \"date object\" for date to string (used for recurring events)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public EventDate(Date dateClass) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.javaDate \u003d dateClass;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        formatDate(DATE_TO_STRING);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Takes in an identifier and performs the corresponding actions."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param identifier identify the date information is string to date or date to string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    private void formatDate(int identifier) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (identifier \u003d\u003d STRING_TO_DATE) { //convert user input to java date and store both."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                SimpleDateFormat formatter \u003d new SimpleDateFormat(\"EEE, dd MMM yyyy, HH:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                this.javaDate \u003d dateFormat.parse(userInputDateString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                this.formattedDateString \u003d formatter.format(javaDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                this.userInputDateString \u003d dateFormat.format(javaDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"EEE, dd MMM yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    this.javaDate \u003d dateFormat.parse(userInputDateString);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    this.formattedDateString \u003d formatter.format(javaDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    this.userInputDateString \u003d dateFormat.format(javaDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                } catch (ParseException pe2) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    this.formattedDateString \u003d userInputDateString;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.INFO, \"Format the eventDate from String type to Date type\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else if (identifier \u003d\u003d DATE_TO_STRING) { //convert date object to input string format and store both."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"EEE, dd MMM yyyy, HH:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            this.formattedDateString \u003d formatter.format(javaDate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            formatter \u003d new SimpleDateFormat(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            this.userInputDateString \u003d formatter.format(javaDate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.INFO, \"Format the eventDate from Date type to String type\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Gets the current java Date object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public Date getCurrentJavaDate() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        javaDate \u003d new Date();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return javaDate;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public String getUserInputDateString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        return userInputDateString;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public String getFormattedDateString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        return this.formattedDateString;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Gets the Event java Date object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public Date getEventJavaDate() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return this.javaDate;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * Compares this dateObj with another input dateObj"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * If this \u003d\u003d other, return 0."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * If this \u003c other, return -1."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * If this \u003e other, return 1."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * If the two EventDates cannot be compared as either one of them stores the date as a string, return 2."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * @param other the input dateObj used for the comparison"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * @return Output the result of the comparison according to the algorithm stated above."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public int compare(EventDate other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (javaDate \u003d\u003d null || other.getEventJavaDate() \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            return 2;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            Date otherDate \u003d other.getEventJavaDate();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (javaDate.compareTo(otherDate) \u003e 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } else if (javaDate.compareTo(otherDate) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } else if (javaDate.compareTo(otherDate) \u003c 0) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        return 2;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * Adds n days to the javaDate object."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * @param noOfDays numbers of days to add"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void addDaysAndSetMidnight(int noOfDays) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        c.setTime(this.javaDate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        //sets calender class date to midnight."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        c.add(Calendar.DATE, noOfDays);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        c.set(Calendar.HOUR_OF_DAY, 23);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        c.set(Calendar.MINUTE, 59);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        c.set(Calendar.SECOND, 59);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.javaDate \u003d c.getTime();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.userInputDateString \u003d formatter.format(javaDate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        formatter \u003d new SimpleDateFormat(\"EEE, dd MMM yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.formattedDateString \u003d formatter.format(javaDate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 10,
      "Dng132FEI": 30,
      "yenpeichih": 51,
      "ZhangYihanNus": 2,
      "Ryan-Wong-Ren-Wei": 56
    }
  },
  {
    "path": "src/main/java/Events/Formatting/Predicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Events.Formatting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Model_Class.Predicate checks if an input satisfies a"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * certain predicate."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Predicate\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * compare_func codes"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    static final int EQUAL \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    static final int GREATER_THAN \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    static final int SMALLER_THAN \u003d 2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * compare_type codes"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    static final int JAVA_DATE \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    static final int STRING \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The item used as the reference to check if the predicate is true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private T reference;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * The function used for the following comparison: reference (compare_func) input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private int compare_func;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * The type of variable that is used as the reference"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private int variable_type;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates a new Model_Class.Predicate Object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param ref  the reference used to check if the predicate is true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param comp the comparator function used in the following comparison: reference (comp) input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Predicate(T ref, int comp) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        switch (comp) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case EQUAL:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                this.compare_func \u003d EQUAL;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case GREATER_THAN:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                this.compare_func \u003d GREATER_THAN;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case SMALLER_THAN:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                this.compare_func \u003d SMALLER_THAN;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.reference \u003d ref;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (this.reference instanceof EventDate) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            this.variable_type \u003d JAVA_DATE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else if (this.reference instanceof String) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            this.variable_type \u003d STRING;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Compares the input date against the reference to check if the predicate is true."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    protected boolean compare_dates(T input) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        EventDate x \u003d (EventDate) reference;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        EventDate y \u003d (EventDate) input;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        switch (this.compare_func) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case EQUAL:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                return x.compare(y) \u003d\u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case GREATER_THAN:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                return x.compare(y) \u003d\u003d 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case SMALLER_THAN:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                return x.compare(y) \u003d\u003d -1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Compares the input string against the reference to check if the predicate is true."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    protected boolean compare_str(T input) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String x \u003d (String) reference;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String y \u003d (String) input;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        switch (this.compare_func) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case EQUAL:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                return x.compareTo(y) \u003d\u003d 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case GREATER_THAN:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                return x.compareTo(y) \u003e 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case SMALLER_THAN:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                return x.compareTo(y) \u003c 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Checks if the input satisfies the predicate. This function"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * will direct to the correct protected comparator functions"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * based on the type of the reference."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public boolean check(T item) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        switch (this.variable_type) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case JAVA_DATE:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                return compare_dates(item);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case STRING:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                return compare_str(item);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ryan-Wong-Ren-Wei": 101,
      "-": 12
    }
  },
  {
    "path": "src/main/java/Events/Storage/Checklist.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "package Events.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public class Checklist {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private ArrayList\u003cString\u003e checklist;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Creates a new checklist."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * (Usually checklists starts from nothing, so no original input required"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Checklist() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.checklist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Adding a new item into the checklist."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param newItem String of new item."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void addItem(String newItem) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.checklist.add(newItem);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Deleting a specific item."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param itemIndex Index of the item to be removed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void deleteItem(int itemIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.checklist.remove(itemIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Editing an item."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param itemIndex Index of the item."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param newItem New item content."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void editItem(int itemIndex, String newItem) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.checklist.set(itemIndex, newItem);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public ArrayList\u003cString\u003e getChecklist() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        return checklist;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYihanNus": 47
    }
  },
  {
    "path": "src/main/java/Events/Storage/ClashException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package Events.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class ClashException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private Event clashEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    ClashException(Event clashEvent) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.clashEvent \u003d clashEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Event getClashEvent() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return clashEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ryan-Wong-Ren-Wei": 15
    }
  },
  {
    "path": "src/main/java/Events/Storage/Contact.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//@@author YuanJiayi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "package Events.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "public class Contact {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"Contact\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private String phoneNo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public Contact(String name, String email, String phoneNo) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.phoneNo \u003d phoneNo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public String getPhoneNo() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        return phoneNo;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//        logger.log(Level.INFO, \"The name of the contact is edited\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void setEmail(String email) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//        logger.log(Level.INFO, \"The email address of the contact is edited\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void setPhoneNo(String phoneNo) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.phoneNo \u003d phoneNo;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//        logger.log(Level.INFO, \"The phone number of the contact is edited\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 44
    }
  },
  {
    "path": "src/main/java/Events/Storage/EndBeforeStartException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package Events.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class EndBeforeStartException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    EndBeforeStartException(){}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ryan-Wong-Ren-Wei": 5,
      "-": 1
    }
  },
  {
    "path": "src/main/java/Events/Storage/EventList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package Events.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.EventSubclasses.AssessmentSubclasses.Exam;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.EventSubclasses.AssessmentSubclasses.Recital;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.EventTypes.EventSubclasses.Concert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.EventTypes.EventSubclasses.RecurringEventSubclasses.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.EventTypes.EventSubclasses.RecurringEventSubclasses.Practice;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.EventTypes.EventSubclasses.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.Formatting.EventDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.Formatting.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import UserElements.ConcertBudgeting.Budgeting;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import UserElements.ConcertBudgeting.CostExceedsBudgetException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": " * Allows for access to the list of events currently stored, and editing that list of events."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " * Does NOT contain any methods for reading/writing to savefile."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class EventList {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"EventList\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * list of Model_Class.Event objects currently stored."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private ArrayList\u003cEvent\u003e eventArrayList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * Comparator function codes"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    private static final int GREATER_THAN \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Filter type codes"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    private static final int DATE \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    private static final int TYPE \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Class that handles all budgeting for concerts."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private Budgeting budgeting;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates new Model_Class.EventList object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param inputList list of strings containing all information extracted from save file"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public EventList(ArrayList\u003cString\u003e inputList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        //magic characters for type of event"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        final char TODO \u003d \u0027T\u0027;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        final char CONCERT \u003d \u0027C\u0027;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        final char LESSON \u003d \u0027L\u0027;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        final char PRACTICE \u003d \u0027P\u0027;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        final char EXAM \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        final char RECITAL \u003d \u0027R\u0027;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        eventArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        for (String currLine : inputList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            boolean isDone \u003d currLine.substring(0, 1).equals(\"V\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            char eventType \u003d currLine.charAt(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            String[] splitString \u003d currLine.split(\"/\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (eventType \u003d\u003d TODO) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                String description \u003d splitString[1];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                String date \u003d splitString[2];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                eventArrayList.add(new ToDo(description, isDone, date));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } else { //for all other events"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                String description \u003d splitString[1];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                String startDateAndTime \u003d splitString[2];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                String endDateAndTime \u003d splitString[3];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                switch (eventType) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    case CONCERT:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        eventArrayList.add(new Concert(description, isDone, startDateAndTime, endDateAndTime,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                                Integer.parseInt(splitString[4])));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    case LESSON:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        eventArrayList.add(new Lesson(description, isDone, startDateAndTime, endDateAndTime));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    case PRACTICE:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        eventArrayList.add(new Practice(description, isDone, startDateAndTime, endDateAndTime));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    case EXAM:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        eventArrayList.add(new Exam(description, isDone, startDateAndTime, endDateAndTime));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    case RECITAL:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        eventArrayList.add(new Recital(description, isDone, startDateAndTime, endDateAndTime));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        budgeting \u003d new Budgeting(eventArrayList, 50);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Edit an event\u0027s description, start time and end time in the list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventIndex     Index of the event to be edited."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param newDescription The new description."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void editEvent(int eventIndex, String newDescription) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        Event tempEvent \u003d this.eventArrayList.get(eventIndex);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        tempEvent.editEvent(newDescription);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.eventArrayList.set(eventIndex, tempEvent);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Checks for a clash, then adds a new event if possible."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param event Model_Class.Event object to be added"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void addEvent(Event event) throws EndBeforeStartException, ClashException, CostExceedsBudgetException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (event.getStartDate().getEventJavaDate().compareTo(event.getEndDate().getEventJavaDate()) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.WARNING, \"The end time is earlier than the start time\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            throw new EndBeforeStartException();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        Event clashEvent \u003d clashEvent(event); //check the list for a schedule clash"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        if (clashEvent \u003d\u003d null) { //null means no clash was found"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (event.getType() \u003d\u003d \u0027C\u0027) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                this.budgeting.updateMonthlyCost((Concert) event);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            this.eventArrayList.add(event);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.INFO, \"The new event is added to the eventList\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else { //if clash is found, notify user via terminal."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.WARNING, \"The event to be added clashes with another event in the list\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            throw new ClashException(clashEvent);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void addNewTodo(Event event) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.eventArrayList.add(event);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//        logger.log(Level.INFO, \"The new Todo is added to the eventList\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    //@@author YuanJiayi"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Adds recurring events to the list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param event  Event to be added as recursion."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param period Period of the recursion."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void addRecurringEvent(Event event, int period) throws ClashException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Calendar calendarStartDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Calendar calendarEndDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        calendarStartDate.setTime(event.getStartDate().getEventJavaDate());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        calendarEndDate.setTime(event.getEndDate().getEventJavaDate());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        ArrayList\u003cEvent\u003e tempEventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Event newEvent \u003d null;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        int ONE_SEMESTER_DAYS \u003d 16 * 7;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        for (int addEventCount \u003d 0; addEventCount * period \u003c\u003d ONE_SEMESTER_DAYS; addEventCount++) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            EventDate toFormatCalendarStartDate \u003d new EventDate(calendarStartDate.getTime());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            EventDate toFormatCalendarEndDate \u003d new EventDate(calendarEndDate.getTime());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            if (event.getType() \u003d\u003d \u0027L\u0027) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                newEvent \u003d new Lesson(event.getDescription(), toFormatCalendarStartDate.getUserInputDateString(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        toFormatCalendarEndDate.getUserInputDateString());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            } else if (event.getType() \u003d\u003d \u0027P\u0027) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                newEvent \u003d new Practice(event.getDescription(), toFormatCalendarStartDate.getUserInputDateString(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        toFormatCalendarEndDate.getUserInputDateString());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            assert newEvent !\u003d null;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            if (clashEvent(newEvent) \u003d\u003d null) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                tempEventList.add(newEvent);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//                logger.log(Level.WARNING, \"At least one of the events to be added clashes with another event in the list\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                throw new ClashException(newEvent);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            calendarStartDate.add(Calendar.DATE, period);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            calendarEndDate.add(Calendar.DATE, period);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.eventArrayList.addAll(tempEventList);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//        logger.log(Level.INFO, \"Recurring events are added to the list\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    //@@author Ryan-Wong-Ren-Wei"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Checks the list of events for any clashes with the newly added event. If"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * there is a clash, return a reference to the event, if not, return null."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param checkingEvent newly added event"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @return event that causes a clash"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private Event clashEvent(Event checkingEvent) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        /*  NOTE: DateObj userInputString is arranged as follows: dd-MM-yyyy HHmm."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            for now, only have one date with differing start time and end time, date in startDateObj will be same as"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            in endDateObj */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        //split new event date string into date and time."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String[] newEventStartDateTime \u003d checkingEvent.getStartDate().getUserInputDateString().split(\" \");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String[] newEventEndDateTime \u003d checkingEvent.getEndDate().getUserInputDateString().split(\" \");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String newEventDate \u003d newEventStartDateTime[0]; //assign date"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int newEventStartTime \u003d Integer.parseInt(newEventStartDateTime[1]); //assign time"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int newEventEndTime \u003d Integer.parseInt(newEventEndDateTime[1]);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        for (Event currEvent : eventArrayList) { //scan list for clashes"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (currEvent.getType() \u003d\u003d \u0027T\u0027) continue; //skip scan if todo class"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            String[] currEventStartDateTime \u003d currEvent.getStartDate().getUserInputDateString().split(\" \");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            String[] currEventEndDateTime \u003d currEvent.getEndDate().getUserInputDateString().split(\" \");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (newEventDate.equals(currEventStartDateTime[0]) \u0026\u0026 //check for same date"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    timeClash(newEventStartTime, newEventEndTime, currEventStartDateTime[1], currEventEndDateTime[1])) { //check for time clash"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                logger.log(Level.INFO, \"Clash found\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                return currEvent; //clash found"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        logger.log(Level.INFO, \"No clash found\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return null; //no clash found"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Checks for a clash in time, returns appropriate boolean."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private boolean timeClash(int newEventStartTime, int newEventEndTime, String s, String s1) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int currEventStartTime \u003d Integer.parseInt(s); //assign time"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int currEventEndTime \u003d Integer.parseInt(s1);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (newEventStartTime \u003e currEventStartTime) { //new event starts after current event starts"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return currEventEndTime \u003e newEventStartTime; //check if new event starts before current event ends"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else if (newEventStartTime \u003c currEventStartTime) { //new event starts before current event starts"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return newEventEndTime \u003e currEventStartTime; //check if new event ends after current event starts"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else { //new event starts at the same time as current event"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * sorts the list of events/tasks according to date, in increasing order."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void sortList() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Collections.sort(eventArrayList);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Deletes a event from the list."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventNo Index of event to be deleted"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void deleteEvent(int eventNo) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (this.eventArrayList.get(eventNo).getType() \u003d\u003d \u0027C\u0027) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            budgeting.removeMonthlyCost((Concert) this.eventArrayList.get(eventNo));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.eventArrayList.remove(eventNo);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//        logger.log(Level.INFO, \"The event is deleted\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Gets list of Model_Class.Event objects stored"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @return Array of EventLists containing all events."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public ArrayList\u003cEvent\u003e getEventArrayList() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        return this.eventArrayList;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Gets number of events stored."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @return number of events stored"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public int getNumEvents() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        return eventArrayList.size();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Gets a specific event using indexing."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param index Index of event to be extracted"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @return Model_Class.Event object of specified event"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Event getEvent(int index) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        return eventArrayList.get(index);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Gets the entire list of events stored in String format"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @return String containing all events, separated by a newline."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public String listOfEvents_String() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String allEvents \u003d \"\";"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int i \u003d 0; i \u003c eventArrayList.size(); ++i) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            if (eventArrayList.get(i) \u003d\u003d null) continue;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            int j \u003d i + 1;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            allEvents +\u003d j + \". \" + this.getEvent(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        return allEvents;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @return String containing the filtered list of events, each separated by a newline."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private String filteredList(Predicate\u003cObject\u003e predicate) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        String filteredEvents \u003d \"\";"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        int j;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        for (int i \u003d 0; i \u003c eventArrayList.size(); ++i) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            if (eventArrayList.get(i) \u003d\u003d null) continue;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            else if (!predicate.check(eventArrayList.get(i).getStartDate())) continue;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            j \u003d i + 1;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            filteredEvents +\u003d j + \". \" + this.getEvent(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        return filteredEvents;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @return String containing events found in the next 3 days"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public String getReminder() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        String systemDateAndTime \u003d new Date().toString();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        EventDate limit \u003d new EventDate(systemDateAndTime);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        limit.addDaysAndSetMidnight(3);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        String reminderDeadline \u003d limit.getEventJavaDate().toString();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Predicate\u003cObject\u003e objectPredicate \u003d new Predicate\u003c\u003e(limit, GREATER_THAN);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return \"The time now is \" + systemDateAndTime + \".\\n\" +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                \"Here is a list of events you need to complete in the next 3 days (by \" +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                reminderDeadline + \"):\\n\" + filteredList(objectPredicate);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Used to reinstate deleted event in case of failure to reschedule"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void undoDeletionOfEvent(Event event) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (event.getType() \u003d\u003d \u0027C\u0027) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                this.budgeting.updateMonthlyCost((Concert) event);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (CostExceedsBudgetException e) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.WARNING, e.getMessage(), e);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            //ignore exception, will never happen"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventArrayList.add(event);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//        logger.log(Level.INFO, \"The deleted event is added back to the list\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Budgeting getBudgeting() {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return budgeting;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 54,
      "Dng132FEI": 20,
      "yenpeichih": 13,
      "ZhangYihanNus": 45,
      "Ryan-Wong-Ren-Wei": 226,
      "-": 1
    }
  },
  {
    "path": "src/main/java/Events/Storage/Goal.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "//@@author yenpeichih"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "package Events.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "public class Goal {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    private String goalDescription;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    private boolean isAchieved;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Creates a Goal instance with the goal input by user and a boolean to check if goal is achieved."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public Goal(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        goalDescription \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        isAchieved \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public String getGoal() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        return goalDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void setAchieved() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        isAchieved \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        if (isAchieved) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            return \"Yes\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            return \"No\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yenpeichih": 35
    }
  },
  {
    "path": "src/main/java/Events/Storage/Instruments/Instrument.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "package Events.Storage.Instruments;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "import Events.Formatting.EventDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "public class Instrument {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"Instrument\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    private String instrumentName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    private ArrayList\u003cServiceInfo\u003e serviceInfoList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * Creates an Instrument instance with the input name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * @param name Name of instrument"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public Instrument(String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "       this.instrumentName \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "       serviceInfoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \treturn instrumentName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public int addService (EventDate date, String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tServiceInfo newServiceInfo \u003d new ServiceInfo(date, description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        serviceInfoList.add(newServiceInfo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//        logger.log(Level.INFO, \"The new service info is added to the list\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        return serviceInfoList.size();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public String getServiceInfos() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tString res \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tint j;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tfor (int i \u003d 0; i \u003c serviceInfoList.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \t\tj \u003d i+1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \t\tres +\u003d j + \". \" + serviceInfoList.get(i).getServiceInfo() + \"\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \t}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \treturn res;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public String getIndexAndService(int index) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \treturn index + \". \" + serviceInfoList.get(index-1).getServiceInfo();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 6,
      "Dng132FEI": 43
    }
  },
  {
    "path": "src/main/java/Events/Storage/Instruments/InstrumentList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "package Events.Storage.Instruments;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "import Events.Formatting.EventDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "public class InstrumentList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "\tprivate static Logger logger \u003d Logger.getLogger(\"instrumentList\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    private ArrayList\u003cInstrument\u003e instrumentList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "//    private boolean isAchieved;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * Creates a Goal instance with the goal input by user and a boolean to check if goal is achieved."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public InstrumentList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    \tinstrumentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public String getInstruments() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tString res \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tint j;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tfor (int i \u003d 0; i \u003c instrumentList.size(); i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \t\tj \u003d i+1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \t\tres +\u003d j + \". \" + instrumentList.get(i).getName() + \"\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \t}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \treturn res;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public int addInstrument(String name) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tInstrument newInstrument \u003d new Instrument(name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tinstrumentList.add(newInstrument);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//    \tlogger.log(Level.INFO, \"The new instrument is added to the list\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \treturn instrumentList.size();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public String getInstrumentServiceInfo(int index) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tint indexInList \u003d index - 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \treturn instrumentList.get(indexInList).getServiceInfos();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public int service(int index, EventDate date, String description) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tint indexInList \u003d index - 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "\t\treturn instrumentList.get(indexInList).addService(date, description);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public String getIndexAndInstrument(int index) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \treturn index + \". \" + instrumentList.get(index-1).getName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public String getIndexAndService(int instrumentIndex, int serviceIndex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \treturn instrumentList.get(instrumentIndex-1).getIndexAndService(serviceIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 7,
      "Dng132FEI": 50
    }
  },
  {
    "path": "src/main/java/Events/Storage/Instruments/ServiceInfo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "package Events.Storage.Instruments;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "import Events.Formatting.EventDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "public class ServiceInfo {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "\t * date of the servicing"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    private EventDate serviceDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * brief description of the servicing"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    private String serviceDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * Creates a Goal instance with the goal input by user and "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * a boolean to check if goal is achieved"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public ServiceInfo(EventDate date, String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        this.serviceDate \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        this.serviceDescription \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * Returns the details of the servicing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * @return the details of the servicing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public String getServiceInfo() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \treturn serviceDescription + \" on \" + serviceDate.getFormattedDateString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dng132FEI": 36
    }
  },
  {
    "path": "src/main/java/Events/Storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Events.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import UserElements.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Class containing file path and scanner, allowing for reading from and writing to the storage file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Allows for creation of new storage file if necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"Storage\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner scanFile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates new Model_Class.Storage object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file The storage file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Storage(File file) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        File folder \u003d new File(\"data\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (!folder.exists()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            folder.mkdir();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reads from the file whenever the program is run."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores all read information into an array of strings to be returned."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui user interface"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Array of strings containing all information from the read file"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cString\u003e readFromFile(UI ui) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean fileAssigned \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(ui.getLineSeparation());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            this.scanFile \u003d new Scanner(file);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            fileAssigned \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(\"Event list loaded!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.INFO, \"The event list is loaded from the existing data file\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException FNFe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"No Duke file found!\\nCreating new file...\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//                logger.log(Level.INFO, \"A new file is created\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException IOe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                System.out.println(\"Failed! Please ensure data folder exists, then try again!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//                logger.log(Level.WARNING, IOe.getMessage(), IOe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"New file created!\\nAssigning...\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(ui.getLineSeparation());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        ArrayList\u003cString\u003e readFromFile \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String fileContent;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.scanFile !\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            while (this.scanFile.hasNextLine()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                fileContent \u003d this.scanFile.nextLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return readFromFile;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves current information to the storage file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param events EventList where information is extracted to be saved"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param ui     User interface"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void saveToFile(EventList events, UI ui) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String toWriteToFile \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (Event currEvent : events.getEventArrayList()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            toWriteToFile +\u003d currEvent.toStringForFile() + \"\\n\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            FileWriter writer \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            writer.write(toWriteToFile);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.INFO, \"The data is stored in the file\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException IOe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.errorWritingToFile();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.WARNING, IOe.getMessage(), IOe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 9,
      "ZhangYihanNus": 4,
      "Ryan-Wong-Ren-Wei": 8,
      "-": 83
    }
  },
  {
    "path": "src/main/java/UserElements/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package UserElements;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.EventSubclasses.AssessmentSubclasses.Exam;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.EventSubclasses.AssessmentSubclasses.Recital;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.EventTypes.EventSubclasses.Concert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.EventTypes.EventSubclasses.RecurringEventSubclasses.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.EventTypes.EventSubclasses.RecurringEventSubclasses.Practice;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.EventTypes.EventSubclasses.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.Formatting.CalendarView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.Formatting.DateStringValidator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.Formatting.EventDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import Events.Storage.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.Storage.Instruments.InstrumentList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import UserElements.ConcertBudgeting.CostExceedsBudgetException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command that is passed via user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Multiple types of commands are possible, executed using switch case method."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"Command\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * The String representing the type of command e.g add/delete event"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * The String representing the continuation of the command, if it exists."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Contains further specific instructions about the command passed e.g which event to add or delete"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private String continuation;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new command with the command type and specific instructions"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param command      The Model_Class.Command type"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param continuation The Model_Class.Command specific instructions"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    Command(String command, String continuation) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.continuation \u003d continuation;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new command where only command param is passed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Specific instructions not necessary for these types of commands."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param command The Model_Class.Command type"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    Command(String command) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.continuation \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command stored."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param events  Class containing the list of events and all relevant methods."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui      Class containing all relevant user interface instructions."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage Class containing access to the storage file and related instructions."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public void execute(EventList events, UI ui, Storage storage, InstrumentList instruments) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean changesMade \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//        logger.log(Level.INFO, \"Read in the command\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"help\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                findHelp(ui);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                listEvents(events, ui);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                changesMade \u003d false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"reminder\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                remindEvents(events, ui);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                changesMade \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                markEventAsDone(events, ui);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                deleteEvent(events, ui);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                searchEvents(events, ui);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                changesMade \u003d false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                addNewTodo(events, ui);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case \"lesson\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                addNewEvent(events, ui, \u0027L\u0027);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case \"concert\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                addNewEvent(events, ui, \u0027C\u0027);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case \"practice\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                addNewEvent(events, ui, \u0027P\u0027);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case \"exam\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                addNewEvent(events, ui, \u0027E\u0027);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case \"recital\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                addNewEvent(events, ui, \u0027R\u0027);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            case \"view\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                viewEvents(events, ui);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                changesMade \u003d false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            case \"check\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                checkFreeDays(events, ui);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                changesMade \u003d false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"reschedule\":"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                rescheduleEvent(events, ui);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            case \"edit\":"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                editEvent(events, ui);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            case \"calendar\":"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                printCalendar(events, ui);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case \"budget\":"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                showBudget(events, ui);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            case \"goal\":"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                goalsManagement(events, ui);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"contact\":"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                contactManagement(events, ui);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            case \"checklist\":"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                checklistManagement(events, ui);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            case \"instrument\":"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                instrumentManagement(instruments, ui);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                ui.printInvalidCommand();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                changesMade \u003d false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        if (changesMade) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            events.sortList();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            storage.saveToFile(events, ui);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private void findHelp(UI ui) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            ui.printHelpList();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            switch (continuation) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                case \"calendar\":"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    ui.printCalendarHelp();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                case \"lesson\":"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                case \"practice\":"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                case \"concert\":"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                case \"exam\":"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                case \"recital\":"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                case \"delete\":"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    ui.printEventHelp();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                case \"goal\":"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    ui.printGoalHelp();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                case \"contact\":"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    ui.printContactHelp();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                case \"checklist\":"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    ui.printChecklistHelp();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                case \"reschedule\":"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                case \"edit\":"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                case \"done\":"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                case \"change\":"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    ui.printChangeHelp();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    ui.printHelpList();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private void checklistManagement(EventList events, UI ui) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            ui.checklistCommandWrongFormat();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.WARNING, \"The description of checklistManagement is empty\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                String[] splitChecklist \u003d continuation.split(\"/\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                String[] checklistCommand \u003d splitChecklist[0].split(\" \");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                int eventIndex \u003d Integer.parseInt(checklistCommand[1]) - 1;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "//                if(!((events.getEvent(eventIndex).getType()\u003d\u003d\u0027P\u0027) || (events.getEvent(eventIndex).getType()\u003d\u003d\u0027L\u0027))) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "//                    ui.noSuchEvent();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "//                    return;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                if (checklistCommand.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    int checklistIndex \u003d Integer.parseInt(checklistCommand[2]);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    switch (checklistCommand[0]) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        case \"delete\":"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                            events.getEvent(eventIndex).deleteChecklist(checklistIndex - 1);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                            ui.checklistDeleted(eventIndex);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        case \"edit\":"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                            events.getEvent(eventIndex).editChecklist(checklistIndex - 1, splitChecklist[1]);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                            ui.checklistEdited(splitChecklist[1], eventIndex);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    switch (checklistCommand[0]) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        case \"add\":"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                            events.getEvent(eventIndex).addChecklist(splitChecklist[1]);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                            System.out.println(splitChecklist[1] + \"___\" + eventIndex);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                            ui.checklistAdded(splitChecklist[1], eventIndex);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        case \"view\":"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                            //print goals list"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                            ArrayList\u003cString\u003e thisChecklist \u003d events.getEvent(eventIndex).getChecklist();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                            ui.printEventChecklist(thisChecklist, eventIndex, events.getEvent(eventIndex));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            } catch (IndexOutOfBoundsException ne) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                ui.noSuchEvent();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//                logger.log(Level.WARNING, ne.getMessage(), ne);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            } catch (NumberFormatException numE) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                ui.notAnInteger();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//                logger.log(Level.WARNING, numE.getMessage(), numE);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private void printCalendar(EventList events, UI ui) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        CalendarView calendarView \u003d null;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            EventDate today \u003d new EventDate(new Date());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            calendarView \u003d new CalendarView(events, today);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        } else if (continuation.equals(\"next\")) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            EventDate nextWeek \u003d new EventDate(new Date());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            nextWeek.addDaysAndSetMidnight(7);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            calendarView \u003d new CalendarView(events, nextWeek);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        } else if (continuation.equals(\"last\")) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            EventDate lastWeek \u003d new EventDate(new Date());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            lastWeek.addDaysAndSetMidnight(-7);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            calendarView \u003d new CalendarView(events, lastWeek);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            ui.calendarCommandWrongFormat();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        calendarView.setCalendarInfo();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        ui.printCalendar(calendarView.getStringForOutput());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Command to edit an event in the list."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private void editEvent(EventList events, UI ui) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            ui.eventDescriptionEmpty();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.WARNING, \"The description of editEvent is empty\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String[] splitInfo \u003d continuation.split(\"/\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            int eventIndex \u003d Integer.parseInt(splitInfo[0]) - 1;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String newDescription \u003d splitInfo[1];"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            events.editEvent(eventIndex, newDescription);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            ui.printEditedEvent(eventIndex + 1, events.getEvent(eventIndex));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    //@@author Ryan-Wong-Ren-Wei"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * passes budget to UI for printing to output"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private void showBudget(EventList events, UI ui) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.budgetCommandWrongFormat();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            logger.log(Level.WARNING, \"The description of showBudget is empty\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            String monthAndYear \u003d continuation;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                int cost \u003d events.getBudgeting().getCostForMonth(monthAndYear);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                UI.printCostForMonth(monthAndYear, cost);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                //NEED TO PRINT COST HERE!"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                UI.printNoCostsForThatMonth();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                logger.log(Level.WARNING, e.getMessage(), e);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private void searchEvents(EventList events, UI ui) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            ui.eventDescriptionEmpty();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.WARNING, \"The description of searchEvents is empty\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String searchKeyWords \u003d continuation;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String foundEvent \u003d \"\";"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            int viewIndex \u003d 1;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            for (Event viewEvent : events.getEventArrayList()) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                if (viewEvent.toString().contains(searchKeyWords)) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    foundEvent +\u003d viewIndex + \". \" + viewEvent.toString() + \"\\n\";"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                viewIndex++;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            boolean isEventsFound \u003d !foundEvent.isEmpty();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            ui.printFoundEvents(foundEvent, isEventsFound);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Finds the next 3 free days in the schedule and passes them to UI class to be printed."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private void checkFreeDays(EventList events, UI ui) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Calendar dayToCheckIfFree \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        String currentDay \u003d formatter.format(dayToCheckIfFree.getTime());"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        EventDate dayToCheckIfFreeObject \u003d new EventDate(currentDay);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Queue\u003cString\u003e daysFree \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        int nextDays \u003d 1;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        while (daysFree.size() \u003c\u003d 3) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            boolean isFree \u003d true;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            for (Event viewEvent : events.getEventArrayList()) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                if (viewEvent.getStartDate().getFormattedDateString().equals(dayToCheckIfFreeObject.getFormattedDateString())) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    isFree \u003d false;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            if (isFree) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                daysFree.add(dayToCheckIfFreeObject.getFormattedDateString());"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            dayToCheckIfFreeObject.addDaysAndSetMidnight(1);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            nextDays++;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        ui.printFreeDays(daysFree);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Searches list for events found in a singular date, passes to UI for printing."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private void viewEvents(EventList events, UI ui) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            ui.viewCommandWrongFormat();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.WARNING, \"The description of viewEvents is empty\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String dateToView \u003d continuation;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String foundEvent \u003d \"\";"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            int viewIndex \u003d 1;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            EventDate findDate \u003d new EventDate(dateToView);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            for (Event viewEvent : events.getEventArrayList()) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                if (viewEvent.toString().contains(findDate.getFormattedDateString())) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    foundEvent +\u003d viewIndex + \". \" + viewEvent.toString() + \"\\n\";"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                viewIndex++;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            boolean isEventsFound \u003d !foundEvent.isEmpty();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            ui.printFoundEvents(foundEvent, isEventsFound);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    //@@author Ryan-Wong-Ren-Wei"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private void addNewEvent(EventList events, UI ui, char eventType) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.eventDescriptionEmpty();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            logger.log(Level.WARNING, \"The description of the addNewEvent is empty\");"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            int NO_PERIOD \u003d -1;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                EntryForEvent entryForEvent \u003d new EntryForEvent().invoke(); //separate all info into relevant details"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                Event newEvent \u003d newEvent(eventType, entryForEvent); //instantiate new event"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                assert newEvent !\u003d null;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                if (entryForEvent.getPeriod() \u003d\u003d NO_PERIOD) { //non-recurring"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    events.addEvent(newEvent);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    ui.eventAdded(newEvent, events.getNumEvents());"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                } else { //recurring"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    events.addRecurringEvent(newEvent, entryForEvent.getPeriod());"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    ui.recurringEventAdded(newEvent, events.getNumEvents(), entryForEvent.getPeriod());"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } catch (ClashException e) { //clash found"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                ui.scheduleClash(e.getClashEvent());"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                logger.log(Level.WARNING, e.getMessage(), e);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } catch (CostExceedsBudgetException e) { //budget exceeded in attempt to add concert"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                ui.costExceedsBudget(e.getConcert(), e.getBudget());"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                logger.log(Level.WARNING, e.getMessage(), e);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } catch (StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException | ParseException e) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                ui.newEntryFormatWrong();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                logger.log(Level.WARNING, e.getMessage(), e);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } catch (EndBeforeStartException e) { //start time is after end time"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                ui.eventEndsBeforeStart();"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                logger.log(Level.WARNING, e.getMessage(), e);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    //@@author Ryan-Wong-Ren-Wei"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Instantiates a new event based on details passed as parameter"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param entryForEvent contains all necessary info for creating new event"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @return instantiated event"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private Event newEvent(char eventType, EntryForEvent entryForEvent) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event newEvent \u003d null;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        switch (eventType) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case \u0027L\u0027:"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                newEvent \u003d new Lesson(entryForEvent.getDescription(), false, entryForEvent.getStartDate(),"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        entryForEvent.getEndDate());"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case \u0027C\u0027:"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                newEvent \u003d new Concert(entryForEvent.getDescription(), false, entryForEvent.getStartDate(),"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        entryForEvent.getEndDate(), entryForEvent.getCost());"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case \u0027P\u0027:"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                newEvent \u003d new Practice(entryForEvent.getDescription(), false, entryForEvent.getStartDate(),"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        entryForEvent.getEndDate());"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case \u0027E\u0027:"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                newEvent \u003d new Exam(entryForEvent.getDescription(), false, entryForEvent.getStartDate(),"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        entryForEvent.getEndDate());"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case \u0027R\u0027:"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                newEvent \u003d new Recital(entryForEvent.getDescription(), false, entryForEvent.getStartDate(),"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        entryForEvent.getEndDate());"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        logger.log(Level.INFO, \"New event is created\");"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return newEvent;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private void addNewTodo(EventList events, UI ui) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.eventDescriptionEmpty();"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            logger.log(Level.WARNING, \"The description of createNewTodo is empty\");"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            EntryForToDo entryForToDo \u003d new EntryForToDo().invoke(); //separate all info into relevant details"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            Event newToDo \u003d new ToDo(entryForToDo.getDescription(), entryForToDo.getDate());"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            events.addNewTodo(newToDo);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.eventAdded(newToDo, events.getNumEvents());"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException | ParseException e) {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.newEntryFormatWrong();"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private void deleteEvent(EventList events, UI ui) {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            int eventNo \u003d Integer.parseInt(continuation);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            Event currEvent \u003d events.getEvent(eventNo - 1);"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            events.deleteEvent(eventNo - 1);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.eventDeleted(currEvent);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (IndexOutOfBoundsException outOfBoundsE) {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.noSuchEvent();"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.WARNING, outOfBoundsE.getMessage(), outOfBoundsE);"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (NumberFormatException notInteger) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.notAnInteger();"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.WARNING, notInteger.getMessage(), notInteger);"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private void markEventAsDone(EventList events, UI ui) {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            int eventNo \u003d Integer.parseInt(continuation);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (events.getEvent(eventNo - 1) instanceof ToDo) {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                events.getEvent(eventNo - 1).markAsDone();"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                ui.eventDone(events.getEvent(eventNo - 1));"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                ui.noSuchEvent();"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//                logger.log(Level.INFO, \"Do not have the event in the list\");"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (IndexOutOfBoundsException outOfBoundsE) {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.noSuchEvent();"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.WARNING, outOfBoundsE.getMessage(), outOfBoundsE);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (NumberFormatException notInteger) {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.notAnInteger();"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.WARNING, notInteger.getMessage(), notInteger);"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    //@@author YuanJiayi"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Reschedules the date and time of an existing event."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param events The event list."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private void rescheduleEvent(EventList events, UI ui) {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Event newEvent;"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        EventDate copyOfStartDate;"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        EventDate copyOfEndDate;"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            String[] rescheduleDetail \u003d continuation.split(\" \"); //split details by space (dd-MM-yyyy HHmm HHmm)"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            int eventIndex \u003d Integer.parseInt(rescheduleDetail[0]) - 1;"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            newEvent \u003d events.getEvent(eventIndex); //event to be used as a replacement."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            copyOfStartDate \u003d new EventDate(newEvent.getStartDate().getUserInputDateString());"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            copyOfEndDate \u003d new EventDate(newEvent.getEndDate().getUserInputDateString());"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            EventDate newStartDate \u003d new EventDate(rescheduleDetail[1] + \" \" + rescheduleDetail[2]);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            EventDate newEndDate \u003d new EventDate(rescheduleDetail[1] + \" \" + rescheduleDetail[3]);"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            events.deleteEvent(eventIndex); //delete event from list before continuing"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            newEvent.rescheduleStartDate(newStartDate); //reschedule start date \u0026 time"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            newEvent.rescheduleEndDate(newEndDate); //reschedule end date \u0026 time"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            ui.rescheduleFormatWrong();"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.WARNING, e.getMessage(), e);"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            events.addEvent(newEvent);"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            ui.rescheduleEvent(newEvent);"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        } catch (ClashException clashE) {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            ui.scheduleClash(clashE.getClashEvent());"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            newEvent.rescheduleStartDate(copyOfStartDate);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            newEvent.rescheduleEndDate(copyOfEndDate);"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            events.undoDeletionOfEvent(newEvent);"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.WARNING, clashE.getMessage(), clashE);"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        } catch (CostExceedsBudgetException e) {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            ui.costExceedsBudget(e.getConcert(), e.getBudget());"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            newEvent.rescheduleStartDate(copyOfStartDate);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            newEvent.rescheduleEndDate(copyOfEndDate);"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            events.undoDeletionOfEvent(newEvent);"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.WARNING, e.getMessage(), e);"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            ui.eventEndsBeforeStart();"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            newEvent.rescheduleStartDate(copyOfStartDate);"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            newEvent.rescheduleEndDate(copyOfEndDate);"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            events.undoDeletionOfEvent(newEvent);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.WARNING, e.getMessage(), e);"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    //@@author yenpeichih"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Manages the goals of an existing event."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     *"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * @param events The event list."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    private void goalsManagement(EventList events, UI ui) {"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            ui.goalCommandWrongFormat();"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "//            logger.log(Level.INFO, \"The description of goalManagement is empty\");"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            String[] splitGoal \u003d continuation.split(\"/\");"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            String[] goalCommand \u003d splitGoal[0].split(\" \");"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            int eventIndex \u003d Integer.parseInt(goalCommand[1]) - 1;"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            if (goalCommand.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                int goalIndex \u003d Integer.parseInt(goalCommand[2]);"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                switch (goalCommand[0]) {"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    case \"delete\":"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        if (!events.getEvent(eventIndex).getGoalList().isEmpty()) {"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                            events.getEvent(eventIndex).removeGoal(goalIndex - 1);"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                            ui.goalDeleted();"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                            ui.noSuchGoal();"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    case \"edit\":"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        if (!events.getEvent(eventIndex).getGoalList().isEmpty()) {"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                            Goal newGoal \u003d new Goal(splitGoal[1]);"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                            events.getEvent(eventIndex).editGoalList(newGoal, goalIndex - 1);"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                            ui.goalUpdated();"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                            ui.noSuchGoal();"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    case \"achieved\":"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        if (!events.getEvent(eventIndex).getGoalList().isEmpty()) {"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                            events.getEvent(eventIndex).updateGoalAchieved(goalIndex - 1);"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                            ui.goalSetAsAchieved();"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                            ui.noSuchGoal();"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                }"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                switch (goalCommand[0]) {"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    case \"add\":"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        Goal newGoal \u003d new Goal(splitGoal[1]);"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        events.getEvent(eventIndex).addGoal(newGoal);"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        ui.goalAdded();"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    case \"view\":"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        ui.printEventGoals(events.getEvent(eventIndex));"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                }"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            }"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        } catch (IndexOutOfBoundsException ne) {"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            ui.noSuchEvent();"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "//            logger.log(Level.WARNING, ne.getMessage(), ne);"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        } catch (NumberFormatException numE) {"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            ui.notAnInteger();"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "//            logger.log(Level.WARNING, numE.getMessage(), numE);"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    //@@author YuanJiayi"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * Manage the contacts of an existing event."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param events The event list."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private void contactManagement(EventList events, UI ui) {"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            ui.contactCommandWrongFormat();"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.WARNING, \"The description of contactManagement is empty\");"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            String[] splitContact \u003d continuation.split(\"/\");"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            String[] contactCommand \u003d splitContact[0].split(\" \");"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            int eventIndex \u003d Integer.parseInt(contactCommand[1]) - 1;"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            if (contactCommand.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                switch (contactCommand[0]) {"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    case \"add\":"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        String[] contactDetails \u003d splitContact[1].split(\",\");"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        Contact newContact \u003d new Contact(contactDetails[0], contactDetails[1], contactDetails[2]);"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        events.getEvent(eventIndex).addContact(newContact);"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        ui.contactAdded();"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    case \"view\":"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        if (events.getEvent(eventIndex).getContactList().isEmpty()) {"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                            ui.noContactInEvent();"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                            ui.printEventContacts(events.getEvent(eventIndex));"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                int contactIndex \u003d Integer.parseInt(contactCommand[2]) - 1;"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                switch (contactCommand[0]) {"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    case \"delete\":"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        events.getEvent(eventIndex).removeContact(contactIndex);"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        ui.contactDeleted();"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    case \"edit\":"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        char editType \u003d \u0027 \u0027;"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        switch (contactCommand[3]) {"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                            case \"name\":"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                                editType \u003d \u0027N\u0027;"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                            case \"email\":"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                                editType \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                            case \"phone\":"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                                editType \u003d \u0027P\u0027;"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        events.getEvent(eventIndex).editContact(contactIndex, editType, splitContact[1]);"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        ui.contactEdited(events.getEvent(eventIndex).getContactList().get(contactIndex));"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            ui.noSuchEvent();"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.WARNING, e.getMessage(), e);"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        } catch (NumberFormatException en) {"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            ui.notAnInteger();"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "//            logger.log(Level.WARNING, en.getMessage(), en);"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    //@@author Dng132FEI"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public void instrumentManagement(InstrumentList instruments, UI ui) {"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                ui.noSuchEvent();"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "//\t            logger.log(Level.WARNING, \"The description of instrumentManagement is empty\");"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            }"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            String splitInstrument[] \u003d continuation.split(\"/\");"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            String instrumentCommand[] \u003d continuation.split(\" \");"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            int instrumentIndex;"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            String instrumentIndexAndName;"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            switch (instrumentCommand[0]) {"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                case \"add\":"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                    instrumentIndex \u003d instruments.addInstrument(splitInstrument[1]);"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                    instrumentIndexAndName \u003d instruments.getIndexAndInstrument(instrumentIndex);"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                    ui.instrumentAdded(instrumentIndexAndName);"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                case \"service\":"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                    instrumentIndex \u003d Integer.parseInt(instrumentCommand[1]);"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                    EventDate inputDate \u003d new EventDate(splitInstrument[2]);"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                    int serviceIndex \u003d instruments.service(instrumentIndex, inputDate, splitInstrument[1]);"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                    instrumentIndexAndName \u003d instruments.getIndexAndInstrument(instrumentIndex);"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                    String serviceIndexAndName \u003d instruments.getIndexAndService(instrumentIndex, serviceIndex);"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                    ui.serviceAdded(serviceIndexAndName, instrumentIndexAndName);"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                case \"view\":"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                    switch (instrumentCommand[1]) {"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                        case \"instruments\":"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                            String listOfInstruments \u003d instruments.getInstruments();"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                            ui.printInstruments(listOfInstruments);"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                        case \"services\":"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                            instrumentIndex \u003d Integer.parseInt(instrumentCommand[2]);"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                            String listOfServices \u003d instruments.getInstrumentServiceInfo(instrumentIndex);"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                            instrumentIndexAndName \u003d instruments.getIndexAndInstrument(instrumentIndex);"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                            ui.printServices(listOfServices, instrumentIndexAndName);"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            }"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            ui.noSuchEvent();"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "//            logger.log(Level.WARNING, e.getMessage(), e);"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private void remindEvents(EventList events, UI ui) {"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        ui.printReminder(events);"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private void listEvents(EventList events, UI ui) {"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        UI.printListOfEvents(events);"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    //@@author Ryan-Wong-Ren-Wei"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Contains all info concerning a new entry an event."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private class EntryForEvent {"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        private String startDate;"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        private String endDate;"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        private int cost; //only for concert events"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        private int period; //recurring period. -1(NON_RECURRING) if non-recurring."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        public String getDescription() {"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return description;"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String getStartDate() {"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return startDate;"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String getEndDate() {"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return endDate;"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int getPeriod() {"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return period;"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int getCost() {"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return cost;"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "         * contains all info regarding an entry for a non-recurring event"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "         *"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "         * @return organized entryForEvent information"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        private EntryForEvent invoke() throws ParseException {"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            int NON_RECURRING \u003d -1;"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            String[] splitEvent \u003d continuation.split(\"/\");"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            description \u003d splitEvent[0];"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            String date \u003d splitEvent[1];"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            String[] splitDate \u003d date.split(\" \");"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (splitDate.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                startDate \u003d splitDate[0] + \" \" + splitDate[1];"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                endDate \u003d splitDate[0] + \" \" + splitDate[2];"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (!DateStringValidator.isValidDateForEvent(startDate) ||"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    !DateStringValidator.isValidDateForEvent(endDate)) {"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                throw new ParseException(\"Invalid date for Event\", 0);"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (splitEvent.length \u003d\u003d 2) {//cant find period extension of command, event is non-recurring"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                period \u003d NON_RECURRING;"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                if (command.equals(\"concert\")) {"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    cost \u003d Integer.parseInt(splitEvent[2]);"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    period \u003d NON_RECURRING;"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    period \u003d Integer.parseInt(splitEvent[2]);"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                    logger.log(Level.INFO, \"The event to be added is recurring\");"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Contains all info concerning a new entry for a ToDo"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private class EntryForToDo {"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        private String date;"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        public String getDescription() {"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return description;"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        public String getDate() {"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "         * contains all info regarding an entry for a ToDo"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "         *"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "         * @return organized entryForEvent information"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        public EntryForToDo invoke() throws ParseException{"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            String[] splitEvent \u003d continuation.split(\"/\");"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            description \u003d splitEvent[0];"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            date \u003d splitEvent[1];"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (DateStringValidator.isValidDateForToDo(date)) {"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                return this;"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                throw new ParseException(\"Date is invalid\", 0);"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 192,
      "Dng132FEI": 56,
      "yenpeichih": 99,
      "ZhangYihanNus": 144,
      "Ryan-Wong-Ren-Wei": 314,
      "-": 73
    }
  },
  {
    "path": "src/main/java/UserElements/ConcertBudgeting/Budgeting.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//@@author Ryan-Wong-Ren-Wei"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package UserElements.ConcertBudgeting;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.EventSubclasses.Concert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.Formatting.EventDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class Budgeting {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Map that stores all information regarding monthly budgeting for concerts"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * String is the month followed by year \u003cMM-yyyy\u003e representing the month that we analyze budget"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * MonthlyBudget is the class corresponding to the month being analyzed, stores all details"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * for budget analysis including the corresponding Concert objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private HashMap\u003cString, MonthlyBudget\u003e monthlyCosts;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    int budget; //current user defined budget"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Constructor for budgeting system. Sets budget and creates new map of monthly costs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param eventList List of Event objects containing all events currently in the list, to be used"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *                  in monthly budget/cost calculation"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Budgeting(ArrayList\u003cEvent\u003e eventList, int budget) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        createMap(eventList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        Iterator monthlyCostIterator \u003d monthlyCosts.entrySet().iterator();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        while (monthlyCostIterator.hasNext()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            Map.Entry mapElement \u003d (Map.Entry)monthlyCostIterator.next();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            MonthlyBudget testMonthlyBudget \u003d (MonthlyBudget) mapElement.getValue();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            for (Concert testConcert : testMonthlyBudget.getListOfConcerts()){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                System.out.print(testConcert.toString() + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                System.out.println(testConcert.getCost());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * remove costs from list when deleting a Concert object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param concert Concert to be deleted."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void removeMonthlyCost(Concert concert) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String monthAndYear \u003d getMonthAndYear(concert.getStartDate());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        MonthlyBudget currMonthlyBudget \u003d monthlyCosts.get(monthAndYear);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        currMonthlyBudget.removeConcert(concert);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (currMonthlyBudget.getListOfConcerts().isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            monthlyCosts.remove(monthAndYear);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * update the cost for the month when a new Concert object is added to EventList."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param concert Concert that was added."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void updateMonthlyCost(Concert concert) throws CostExceedsBudgetException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String monthAndYear \u003d getMonthAndYear(concert.getStartDate());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        MonthlyBudget currMonthlyBudget \u003d monthlyCosts.get(monthAndYear);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (currMonthlyBudget \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            currMonthlyBudget \u003d new MonthlyBudget(concert.getStartDate());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            currMonthlyBudget.addConcert(concert, this.budget);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            monthlyCosts.put(monthAndYear, currMonthlyBudget);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            currMonthlyBudget.addConcert(concert, this.budget);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void setBudget(int budget) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates a map where key is the month(MM-yyyy format) and value is the MonthlyBudget object for that month."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param eventList list of all events in the current list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @return created map."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private void createMap(ArrayList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (eventList.isEmpty() || !hasConcerts(eventList)) { //if empty list, initialize map and return"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            monthlyCosts \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        monthlyCosts \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        EventDate monthlyDate \u003d null; //stores a date of a day in the month we are currently checking for"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        ArrayList\u003cEvent\u003e listOfConcerts \u003d new ArrayList\u003cEvent\u003e(); //to store the concerts in a given month"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String monthAndYear \u003d \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        for (Event currEvent : eventList) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (currEvent.getType() !\u003d \u0027C\u0027) //if not concert type event, skip iteration"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (!isSameMonth(currEvent.getStartDate(), monthlyDate)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                if (!listOfConcerts.isEmpty()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    this.monthlyCosts.put(monthAndYear, new MonthlyBudget(listOfConcerts));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                monthlyDate \u003d currEvent.getStartDate();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                monthAndYear \u003d getMonthAndYear(monthlyDate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                listOfConcerts.clear();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            listOfConcerts.add(currEvent);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.monthlyCosts.put(monthAndYear, new MonthlyBudget(listOfConcerts));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Checks list of events for concerts."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private boolean hasConcerts(ArrayList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        for (Event event : eventList) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (event.getType() \u003d\u003d \u0027C\u0027) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private boolean isSameMonth(EventDate eventDateA, EventDate eventDateB) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            cal.setTime(eventDateA.getEventJavaDate());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            int monthA \u003d cal.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            int yearA \u003d cal.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            cal.setTime(eventDateB.getEventJavaDate());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            int monthB \u003d cal.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            int yearB \u003d cal.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return (monthA \u003d\u003d monthB) \u0026\u0026 (yearA \u003d\u003d yearB);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private String getMonthAndYear(EventDate date) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String MonthAndYear \u003d date.getUserInputDateString();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        MonthAndYear \u003d MonthAndYear.substring(3, 10); //get MM-yyyy from dd-MM-yyyy HHmm"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return MonthAndYear;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public int getCostForMonth(String monthAndYear) throws NullPointerException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return monthlyCosts.get(monthAndYear).getTotalCost();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ryan-Wong-Ren-Wei": 161
    }
  },
  {
    "path": "src/main/java/UserElements/ConcertBudgeting/CostExceedsBudgetException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package UserElements.ConcertBudgeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.EventSubclasses.Concert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class CostExceedsBudgetException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    Concert concert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    int budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public CostExceedsBudgetException(Concert concert, int budget) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.concert \u003d concert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Concert getConcert() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return concert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public int getBudget() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return budget;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ryan-Wong-Ren-Wei": 21
    }
  },
  {
    "path": "src/main/java/UserElements/ConcertBudgeting/MonthlyBudget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//@@author Ryan-Wong-Ren-Wei"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package UserElements.ConcertBudgeting;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.EventSubclasses.Concert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.Formatting.EventDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class MonthlyBudget {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private ArrayList\u003cConcert\u003e listOfConcerts; //list storing all concerts happening in the month"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private int totalCost; //total cost of concerts in month"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private EventDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Constructor for monthly budget class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param listOfConcerts Contains the list of Concert objects in the current month for easy access"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public MonthlyBudget(ArrayList\u003cEvent\u003e listOfConcerts) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.listOfConcerts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        setDateToFirstOfMonth(listOfConcerts.get(0).getStartDate()); //set EventDate date to first day of month"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        storeConcerts(listOfConcerts); //convert events to Concert objects, and store in list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public MonthlyBudget(EventDate date) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.totalCost \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        setDateToFirstOfMonth(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        listOfConcerts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private void storeConcerts(ArrayList\u003cEvent\u003e concertsInMonth) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.totalCost \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        for (Event currEvent : concertsInMonth) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            Concert tempConcert \u003d (Concert) currEvent;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            this.listOfConcerts.add(tempConcert);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            this.totalCost +\u003d tempConcert.getCost();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void addConcert(Concert concert, int budget) throws CostExceedsBudgetException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int newCost \u003d this.totalCost + concert.getCost();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (newCost \u003e budget) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            throw new CostExceedsBudgetException(concert, budget);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            this.totalCost \u003d newCost;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.listOfConcerts.add(concert);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Updates EventDate date to correct value."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param date EventDate of first event in the list of concerts for the current month"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private void setDateToFirstOfMonth(EventDate date) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String dateString \u003d date.getUserInputDateString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        dateString \u003d \"01\" + dateString.substring(2,10);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.date \u003d new EventDate(dateString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public ArrayList\u003cConcert\u003e getListOfConcerts() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return this.listOfConcerts;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void removeConcert(Concert concert) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        for (Concert currConcert : listOfConcerts) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (currConcert.getStartDate().getUserInputDateString().equals(concert.getStartDate().getUserInputDateString())) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                listOfConcerts.remove(currConcert);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.totalCost -\u003d concert.getCost();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public int getTotalCost() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return this.totalCost;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ryan-Wong-Ren-Wei": 79
    }
  },
  {
    "path": "src/main/java/UserElements/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package UserElements;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains method to parse the user input and interpret it for Model_Class.Command class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private Scanner inputScanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates new Model_Class.Parser object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public Parser() {}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public String readUserInput() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return inputScanner.nextLine();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input to extract command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput String containing user input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Model_Class.Command object after parsing input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseInput(String userInput) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String continuation;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        if (userInput.contains(\" \")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            int indexOfSpace \u003d userInput.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            command \u003d userInput.substring(0, indexOfSpace);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            continuation \u003d userInput.substring(indexOfSpace + 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Command(command, continuation);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Command(userInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 1,
      "Ryan-Wong-Ren-Wei": 7,
      "-": 31
    }
  },
  {
    "path": "src/main/java/UserElements/UI.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package UserElements;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.EventTypes.EventSubclasses.Concert;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "import Events.Storage.Contact;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.Storage.EventList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.Storage.Goal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * User interface: contains all methods pertaining to user interaction."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String lineSeparation \u003d \"____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Comparator function codes"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static final int EQUAL \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static final int GREATER_THAN \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static final int SMALLER_THAN \u003d 2;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Filter type codes"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DATE \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int TYPE \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * prints welcome message and instructions for use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void welcome() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        String logo \u003d \" ___    ___   __________    __________   __________   __________   _________\" + \"\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"|   \\\\  /   | |___    ___|  /  ________| |___    ___| |   _______| |   ____  \\\\\" + \"\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"| |\\\\ \\\\/ /| |     |  |     /  /              |  |     |  |         |  |    \\\\  \\\\\" + \"\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"| | \\\\  / | |     |  |     \\\\  \\\\_______       |  |     |  |____     |  |____/  /\" + \"\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"| |  \\\\/  | |     |  |      \\\\_______  \\\\      |  |     |   ____|    |   ___   /\" + \"\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"| |      | |     |  |              \\\\  \\\\     |  |     |  |         |  |   \\\\  \\\\\" + \"\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"| |      | |  ___|  |___   ________/  /     |  |     |  |_______  |  |    |  |\" + \"\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"|_|      |_| |__________| |__________/      |__|     |__________| |__|    |__|\" + \"\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \" ___    ___   __      __    __________   __________   __      __ \" + \"\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"|   \\\\  /   | |  |    |  |  /  ________| |___    ___| |  |    /  /\" + \"\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"| |\\\\ \\\\/ /| | |  |    |  | /  /              |  |     |  |   /  /\" + \"\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"| | \\\\  / | | |  |    |  | \\\\  \\\\_______       |  |     |  |__/  /\" + \"\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"| |  \\\\/  | | |  |    |  |  \\\\_______  \\\\      |  |     |   __  |\" + \"\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"| |      | | |  |    |  |          \\\\  \\\\     |  |     |  |  \\\\  \\\\\" + \"\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"| |      | | |  |____|  |  ________/  /  ___|  |___  |  |   \\\\  \\\\\" + \"\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                + \"|_|      |_| |__________| |__________/  |__________| |__|    \\\\__\\\\\" + \"\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(lineSeparation + \"Hello! I\u0027m MisterMusik!\\nWhat can I do for you?\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        printHelpList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Please enter the command: \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void printHelpList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Notice: Words in \u003c\u003e are the parameters to be supplied by the user;\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"        Items in [] are optional;\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"        Items with | in between them indicate the user can choose to use either of them\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"-----Basic Commands-----\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"1.  \\\"help\\\"            -- Print out all the commands you can input.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"2.  \\\"list\\\"            -- Print out all the events in the list.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"3.  \\\"reminder\\\"        -- Display the list of events over the next 3 days.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"4.  \\\"check\\\"           -- Print the next 3 free days.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"5.  \\\"find \u003ckeyword\u003e\\\"  -- Search for a specific event using keywords.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"6.  \\\"view dd-MM-yyyy\\\" -- Print the event list for a particular date.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"7.  \\\"budget MM-yyyy\\\"  -- View monthly cost of concerts.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"8.  \\\"bye\\\"             -- Exit the program.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"-----More Commands-----\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"1.  \\\"help calendar\\\"   -- To see commands about calendar.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"2.  \\\"help event\\\"      -- To see commands about how to add or delete event.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"3.  \\\"help goal\\\"       -- To see commands about goal management of an event.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"4.  \\\"help contact\\\"    -- To see commands about contact management of an event.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"5.  \\\"help checklist\\\"  -- To see commands about checklist management of an event.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"6.  \\\"help change\\\"     -- To see commands about changing basic information of an event.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void printCalendarHelp() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"1.  \\\"calendar\\\"      -- Print the calendar for the current week.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"2.  \\\"calendar last\\\" -- Print the calendar for the last week.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"3.  \\\"calendar next\\\" -- Print the calendar for the next week.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void printEventHelp() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"1.  \\\"todo \u003cdescription\u003e /dd-MM-yyyy [HHmm]\\\"                                  \\n\\t-- \" +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                \"Add a todo task to the list.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"2.  \\\"exam|recital|lesson|practice \u003cdescription\u003e /dd-MM-yyyy HHmm HHmm\\\"       \\n\\t-- \" +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                \"Add an event to the list.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"3.  \\\"concert \u003cdescription\u003e /dd-MM-yyyy HHmm HHmm [/\u003ccost of concert\u003e]\\\"       \\n\\t-- \" +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                \"Add a concert to the list.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"4.  \\\"practice|lesson \u003cdescription\u003e /dd-MM-yyyy HHmm HHmm /\u003cperiod(in days)\u003e\\\" \\n\\t-- \" +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                \"Add recurring events with the first event date to the list.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"5.  \\\"delete \u003cevent index\u003e\\\"                                                   \\n\\t-- \" +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                \"Delete the specific event.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void printGoalHelp() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"1.  \\\"goal add \u003cevent index\u003e /\u003cgoal\u003e\\\"                   \\n\\t-- \" +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                \"Add a goal to a specific event.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"2.  \\\"goal delete \u003cevent index\u003e \u003cgoal\u003e\\\"                 \\n\\t-- Delete a specified goal.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"3.  \\\"goal edit \u003cevent index\u003e \u003cgoal index\u003e /\u003cnew goal\u003e\\\" \\n\\t-- Edit an existing goal.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"4.  \\\"goal achieved \u003cevent index\u003e \u003cgoal index\u003e\\\"         \\n\\t-- Set the goal as achieved.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"5.  \\\"goal view \u003cevent index\u003e\\\"                          \" +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                \"\\n\\t-- Display the goals list of a specified event with their status.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void printContactHelp() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"1.  \\\"contact add \u003cevent index\u003e /\u003cname\u003e, [\u003cemail\u003e], [\u003cphone number\u003e]\\\"        \\n\\t-- \" +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                \"Add a contact to a specific event.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"2.  \\\"contact delete \u003cevent index\u003e \u003ccontact index\u003e\\\"                          \\n\\t-- \" +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                \"Delete a specified contact.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"3.  \\\"contact edit \u003cevent index\u003e \u003ccontact index\u003e \u003cedit type\u003e /\u003cnew contact\u003e\\\" \\n\\t-- \" +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                \"Edit an existing contact, the edit type should be one of \\\"name\\\", \\\"email\\\", and \\\"phone\\\".\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"4.  \\\"contact view \u003cevent index\u003e\\\"                                            \\n\\t-- \" +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                \"Display the contact list of a specified event with their status.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void printChecklistHelp() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"1.  \\\"checklist add \u003cevent index\u003e /\u003cchecklist\u003e\\\"                        \\n\\t-- \" +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                \"Add a checklist to a specific event.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"2.  \\\"checklist delete \u003cevent index\u003e \u003cchecklist index\u003e\\\"                \\n\\t-- \" +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                \"Delete a specified checklist.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"3.  \\\"checklist edit \u003cevent index\u003e \u003cchecklist index\u003e /\u003cnew checklist\u003e\\\" \\n\\t-- \" +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                \"Edit an existing checklist.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"4.  \\\"checklist view \u003cevent index\u003e\\\"                                    \\n\\t-- \" +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                \"Display the checklist list of a specified event with their status.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void printChangeHelp() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"\\\"1.  done \u003cevent index\u003e\\\"                  \\n\\t-- \" +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                \"Mark a Todo task as completed. Do not work for non-Todo event.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"\\\"2.  reschedule \u003cevent index\u003e dd-MM-yyyy\\\" \\n\\t-- \" +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                \"Reschedule the date and time of an event.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"\\\"3.  edit \u003cevent index\u003e /\u003cdescription\u003e\\\"   \\n\\t-- Edit the description of an event.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Obtains the current date and prints the events to be completed within the next"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * three days as a reminder."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param events the EventList used in the Duke function."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void printReminder(EventList events) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        System.out.print(events.getReminder());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints a message when an invalid command is entered."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void printInvalidCommand() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Sorry! I don\u0027t know what that means.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void calendarCommandWrongFormat() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"The format of calendar command is wrong.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Please enter \\\"help calendar\\\" to see right format.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void contactAdded() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Ok, the contact has been added to the event.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void contactDeleted() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Ok, the contact has been deleted from the event.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void printEventContacts(Event viewEventContact) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Here is the list of contacts for the following event \" + viewEventContact.toString());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        int contactNo \u003d 1;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        for (Contact currContact : viewEventContact.getContactList()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            System.out.println(contactNo + \". Name: \" + currContact.getName() + \" Email: \" + currContact.getEmail()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            + \" Phone Number: \" + currContact.getPhoneNo());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            contactNo++;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void contactEdited(Contact newContact) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"The contact has been edited to: Name: \" + newContact.getName() + \" Email: \""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                + newContact.getEmail() + \" Phone Number: \" +newContact.getPhoneNo());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void noContactInEvent() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Do not have any contact in this event.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * prints entire list of events stored."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param events Model_Class.EventList object containing all stored classes and pertaining methods."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    static void printListOfEvents(EventList events) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.print(events.listOfEvents_String());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * prints goodbye message"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void bye() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation + \"Bye. Hope to see you again soon!\\n\" + lineSeparation);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return line of underscores to separate different Model_Class.UI outputs."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getLineSeparation() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        return lineSeparation;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * prints message when a event is successfully added"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventAdded event in question"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param numEvents  total number of events"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void eventAdded(Event eventAdded, int numEvents) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(lineSeparation + \"Got it. I\u0027ve added this event:\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            System.out.println(\"[\" + eventAdded.getDoneSymbol() + \"][\" + eventAdded.getType() + \"] \" +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    eventAdded.getDescription() + \" START: \" + eventAdded.getStartDate().getFormattedDateString() +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    \" END: \" + eventAdded.getEndDate().getFormattedDateString());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(\"Now you have \" + numEvents + \" events in the list.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            System.out.println(\"[\" + eventAdded.getDoneSymbol() + \"][\" + eventAdded.getType() + \"] \" +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    eventAdded.getDescription() + \" BY: \" + eventAdded.getStartDate().getFormattedDateString());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            System.out.println(\"Now you have \" + numEvents + \" events in the list.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void inputDetails() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(\"Please input the event details below in the format\" + \"\\n\" +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                \"\u003cvenue\u003e/\u003cteachers or assessors\u003e/\u003cpieces to practice\u003e/\u003cperformers\u003e. For non-applicable categories please input \u0027NA\u0027.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * prints message when a event is marked as completed"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param event event in question"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void eventDone(Event event) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this event as done:\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(event.toString());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * prints message when a event is deleted successfully"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param event event in question to be deleted"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void eventDeleted(Event event) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this event:\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(event.toString());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * prints message containing events found when a search is performed."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * prints error message if no events are found"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param allFoundEvents string containing all the events found, separated by newline character"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param found          boolean signifying whether or not any events were found"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void printFoundEvents(String allFoundEvents, boolean found) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        if (found) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(\"Here are the matching events in your list:\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.print(allFoundEvents);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(\"No such events were found! Please try again.\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * prints message if command does not contain valid input for related event."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void noSuchEvent() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"There is no such event! Please try again.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void rescheduleFormatWrong() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Please enter command in the following format:\\n\" +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"reschedule \u003ctaskIndex\u003e dd-MM-yyyy HHmm HHmm\\n\" +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"Please ensure that the taskIndex is a valid integer as well!\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * prints message if no event description is found when adding a new event to the list"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void eventDescriptionEmpty() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"The description of your event cannot be empty!\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void checklistCommandWrongFormat() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"The format of checklist command is wrong.\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Please enter \\\"help checklist\\\" to see the right format.\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void budgetCommandWrongFormat() {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"The format of budget command is wrong.\");"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Please enter \\\"budget MM-yyyy\\\" to view monthly cost of concerts.\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void viewCommandWrongFormat() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"The format of view command is wrong.\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Please enter \\\"view dd-MM-yyyy\\\" to view the events of a particular date.\");"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void goalCommandWrongFormat() {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"The format of goal management command is wrong.\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Please enter \\\"help goal\\\" to see the right commands.\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void contactCommandWrongFormat() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"The format of contact management command is wrong.\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.println(\"Please enter \\\"help contact\\\" to see the right commands.\");"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void eventEndsBeforeStart() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"The event you added ends before it starts! Please try again.\");"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * prints message when event index from input is not an integer"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void notAnInteger() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"That is not a valid integer! Please enter the index of the event you intend to alter.\");"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * prints message when input format is wrong for addition of new event type event."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void newEntryFormatWrong() {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Please enter the date in the format \u0027dd-MM-yyyy HHmm HHmm\u0027 for Event\" +"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \" or \u0027dd-MM-yyyy\u0027 for ToDo.\\n\" +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"For Event entry, first time entered is start time, second time entered is end time.\");"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Please also ensure that the date you entered is valid.\");"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void scheduleClash(Event event) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"That event clashes with another in the schedule! \" +"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Please resolve the conflict and try again!\");"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Clashes with: \" + event.toString());"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * prints message when recurring events are added to the list successfully"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void recurringEventAdded(Event eventAdded, int numEvents, int period) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(lineSeparation + \"Got it. I\u0027ve added these recurring events:\");"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(\"[\" + eventAdded.getDoneSymbol() + \"][\" + eventAdded.getType() + \"] \" +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                eventAdded.getDescription() + \" START: \" + eventAdded.getStartDate().getFormattedDateString() +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                \" END: \" + eventAdded.getEndDate().getFormattedDateString() + \" (every \" + period + \" days)\");"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"Now you have \" + numEvents + \" events in the list.\");"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * prints next 3 days that are free"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param freeDays queue of free days of type DateObj"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void printFreeDays(Queue\u003cString\u003e freeDays) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Here are the next 3 free days!\");"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d freeDays.size(); i++) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            System.out.println(freeDays.poll());"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * prints message when reschedule an event successfully"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param event event after rescheduled"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void rescheduleEvent(Event event) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Rescheduled event to \" + event.toString() + \" successfully!\");"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void errorWritingToFile() {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Error writing to file! Details not saved!\");"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints message to show success of edit command."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventIndex  The index of the edited event."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventEdited The event after edit."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void printEditedEvent(int eventIndex, Event eventEdited) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(lineSeparation + \"Got it. Successfully edited event\" + eventIndex + \":\");"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(\"[\" + eventEdited.getDoneSymbol() + \"][\" + eventEdited.getType() + \"] \" +"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    eventEdited.getDescription() + \" START: \" + eventEdited.getStartDate().getFormattedDateString() +"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    \" END: \" + eventEdited.getEndDate().getFormattedDateString());"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(\"[\" + eventEdited.getDoneSymbol() + \"][\" + eventEdited.getType() + \"] \" +"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    eventEdited.getDescription() + \" BY: \" + eventEdited.getStartDate().getFormattedDateString());"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void printCalendar(String calendarInfo) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"Here is the calendar of the 7 days!\");"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(calendarInfo);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"\\nEnter a command:\");"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void costExceedsBudget(Concert concert, int budget) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"The following concert you wanted to add causes you to exceed the stipulated budget for that month!\");"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(concert.toString());"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String date \u003d concert.getStartDate().getFormattedDateString().substring(8, 16);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"exceeds budget of $\" + budget + \" for the month of \" + date);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Operation has been cancelled.\");"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    static void printCostForMonth(String monthAndYear, int cost) {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Your total concert costs for \" + monthAndYear + \" is:\");"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"$\" + cost);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    static void printNoCostsForThatMonth() {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"There are no concerts for that month!\");"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void printEventGoals(Event viewEventGoal) {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(\"Here is the list of goals for the following event: \" + viewEventGoal.toString());"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        if (!viewEventGoal.getGoalList().isEmpty()) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            int goalIndex \u003d 1;"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            for (Goal goalObject : viewEventGoal.getGoalList()) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                System.out.println(goalIndex + \". \" + goalObject.getGoal() + \" - \" + \"Achieved: \" + goalObject.getStatus());"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                goalIndex +\u003d 1;"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            System.out.println(\"You currently have no goals for this event.\");"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void goalAdded() {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(\"Ok, the goal has been added to the event.\");"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void goalDeleted() {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(\"Ok, the goal has been deleted from the event.\");"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void goalUpdated() {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(\"Ok, the goal has been updated.\");"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void goalSetAsAchieved() {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(\"Ok, the goal has been set as achieved. Congratulations for achieving the goal!\");"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void noSuchGoal() {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(\"Sorry, the specified goal does not exist!\");"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "  "
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void checklistDeleted(int eventIndex) {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"Ok, checklist of event \" + eventIndex + 1 + \" has been deleted.\");"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void checklistEdited(String newChecklistItem, int eventIndex) {"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"Ok, checklist of event \" + eventIndex + 1 + \" has been edited to:\");"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(newChecklistItem);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void checklistAdded(String newChecklistItem, int eventIndex) {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"Ok, the following item has been added to checklist of event \" + eventIndex + 1 + \":\");"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(newChecklistItem);"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void printEventChecklist(ArrayList\u003cString\u003e thisChecklist, int eventIndex, Event eventAdded) {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"Here is the checklist for the following event: \");"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"[\" + eventAdded.getDoneSymbol() + \"][\" + eventAdded.getType() + \"] \" +"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                eventAdded.getDescription());"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"Checklist: \");"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        int checklistIndex \u003d 1;"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (String checklistItem : thisChecklist) {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(checklistIndex + \". \" + checklistItem);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            checklistIndex +\u003d 1;"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    "
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void instrumentAdded(String instrumentIndexAndName) {"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tSystem.out.print(lineSeparation);"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tSystem.out.println(\"Ok, the following instrument has been added: \");"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tSystem.out.println(instrumentIndexAndName);"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tSystem.out.println(lineSeparation);"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    "
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void serviceAdded(String serviceIndexAndName, String instrumentIndexAndName) {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tSystem.out.println(lineSeparation);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tSystem.out.println(\"Ok, the following service: \");"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tSystem.out.println(serviceIndexAndName);"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tSystem.out.println(\"has been added for the following instrument: \");"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tSystem.out.println(instrumentIndexAndName);"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tSystem.out.println(lineSeparation);"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    "
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void printInstruments(String instruments) {"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tSystem.out.println(lineSeparation);"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tSystem.out.println(\"Here are the list of instruments stored in the system: \");"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tSystem.out.println(instruments);"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tSystem.out.println(lineSeparation);"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    "
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    void printServices(String services, String instrumentIndexAndName) {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tSystem.out.println(lineSeparation);"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tSystem.out.println(\"Here are the list of services: \");"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tSystem.out.println(services);"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tSystem.out.println(\"Done before for the following instrument: \");"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tSystem.out.println(instrumentIndexAndName);"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    \tSystem.out.println(lineSeparation);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 214,
      "Dng132FEI": 29,
      "yenpeichih": 68,
      "ZhangYihanNus": 87,
      "Ryan-Wong-Ren-Wei": 67,
      "-": 136
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.EventTypes.EventSubclasses.AssessmentSubclasses.Recital;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.EventSubclasses.Concert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.EventSubclasses.RecurringEventSubclasses.Lesson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.EventSubclasses.RecurringEventSubclasses.Practice;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.EventSubclasses.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.Formatting.EventDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.Storage.ClashException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.Storage.EndBeforeStartException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.Storage.EventList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.Storage.Goal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import UserElements.ConcertBudgeting.CostExceedsBudgetException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    //@@author Ryan-Wong-Ren-Wei"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * test clash handling for single event addition"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void clashTest(){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        ArrayList\u003cString\u003e readFromFile \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String fileContent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"XT/fawpeifwe/02-12-2019\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"XP/apiejfpwiefw/03-12-2019 1500/03-12-2019 1800\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"XC/halloween/04-12-2019 1600/04-12-2019 1930/13\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        EventList eventListTest \u003d new EventList(readFromFile);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event testEvent \u003d new Practice(\"Horn practice\", \"3-12-2019 1400\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"3-12-2019 1600\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            eventListTest.addEvent(testEvent);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (ClashException e){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            assertEquals(e.getClashEvent(), eventListTest.getEvent(1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Test clash handling for recurring events"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void clashTestRecurring(){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        ArrayList\u003cString\u003e readFromFile \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String fileContent;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"XT/fawpeifwe/02-12-2019\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"XP/apiejfpwiefw/03-12-2019 1500/03-12-2019 1800\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"XC/halloween/04-12-2019 1600/04-12-2019 1930/3\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        EventList eventListTest \u003d new EventList(readFromFile);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event testEvent \u003d new Practice(\"Horn practice\", \"28-11-2019 1400\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"28-11-2019 1600\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            eventListTest.addRecurringEvent(testEvent, 4);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (ClashException e){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            assertEquals(e.getClashEvent(), eventListTest.getEvent(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void testSorting() throws Exception{"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        ArrayList\u003cString\u003e readFromFile \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String fileContent;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"XT/fawpeifwe/02-12-2019\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"XP/apiejfpwiefw/03-12-2019 1500/03-12-2019 1800\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"XC/halloween/04-12-2019 1600/04-12-2019 1930/5\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        EventList eventListTest \u003d new EventList(readFromFile);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        boolean succeeded \u003d true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event testEvent1 \u003d new Practice(\"Horn practice\", \"05-12-2019 1400\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"05-12-2019 1600\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event testEvent2 \u003d new Lesson(\"Full Orchestra rehearsal\", \"03-12-2019 1400\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"03-12-2019 1500\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event testEvent3 \u003d new ToDo(\"Complete theory homework CS2113\", \"01-12-2019\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListTest.addEvent(testEvent1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListTest.addEvent(testEvent2);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListTest.addNewTodo(testEvent3);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListTest.sortList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        ArrayList\u003cEvent\u003e eventListCompare \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListCompare.add(new ToDo(\"Complete theory homework CS2113\", \"01-12-2019\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListCompare.add(new ToDo(\"fawpeifwe\", \"02-12-2019\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListCompare.add(new Lesson(\"Full Orchestra rehearsal\", \"03-12-2019 1400\", \"03-12-2019 1500\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListCompare.add(new Practice(\"apiejfpwiefw\", \"03-12-2019 1500\", \"03-12-2019 1800\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListCompare.add(new Concert(\"halloween\", \"04-12-2019 1600\", \"04-12-2019 1930\", 5));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListCompare.add(new Practice(\"Horn practice\", \"05-12-2019 1400\", \"05-12-2019 1600\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        for (Event currEvent : eventListTest.getEventArrayList()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            System.out.println(currEvent.toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            System.out.println(eventListCompare.get(i).toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (!currEvent.toString().equals(eventListCompare.get(i).toString())) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                succeeded \u003d false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ++i;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertEquals(true, succeeded);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void goalsListTest() throws CostExceedsBudgetException, EndBeforeStartException, ClashException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        ArrayList\u003cString\u003e testListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        EventList testList \u003d new EventList(testListString);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event practiceTest1 \u003d new Practice(\"band rehearsal\", \"12-12-2019 1800\", \"12-12-2019 2100\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        testList.addEvent(practiceTest1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Goal practiceGoal1 \u003d new Goal(\"Finish Flight of the Bumblebee\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        testList.getEvent(0).addGoal(practiceGoal1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int goalIndex \u003d 1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String testOutput \u003d \"\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        for (Goal goalObject : practiceTest1.getGoalList()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            testOutput +\u003d goalIndex + \". \" + goalObject.getGoal() + \" - \" + \"Achieved: \" + goalObject.getStatus();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            goalIndex +\u003d 1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        boolean isGoalFound \u003d !testOutput.isEmpty();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        //testing if added successfully"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertEquals(true, isGoalFound);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Goal practiceGoal2 \u003d new Goal(\"Finish Symphony No.9\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        testList.getEvent(0).editGoalList(practiceGoal2, 0);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        boolean isUpdated \u003d false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (testList.getEvent(0).getGoalList().get(0).getGoal().equals(\"Finish Symphony No.9\")) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            isUpdated \u003d true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        //testing if edited successfully"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertEquals(true, isUpdated);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void viewScheduleTest() throws CostExceedsBudgetException, EndBeforeStartException, ClashException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        ArrayList\u003cString\u003e testListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        EventList testList \u003d new EventList(testListString);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event toDoTest \u003d new ToDo(\"cheese\", \"19-09-2019\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addNewTodo(toDoTest);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event practiceTest1 \u003d new Practice(\"individual practice\", \"19-09-2019 1900\", \"19-09-2019 2000\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addEvent(practiceTest1);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event practiceTest2 \u003d new Practice(\"sectional practice\", \"19-09-2019 2100\", \"19-09-2019 2200\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addEvent(practiceTest2);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event practiceTest3 \u003d new Practice(\"full band rehearsal\", \"19-09-2020 1000\", \"19-09-2020 1100\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addEvent(practiceTest3);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Event eventTest \u003d new Recital(\"band recital\", \"20-09-2019 2100\", \"20-09-2019 2200\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        testList.addEvent(eventTest);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        String dateToView \u003d \"19-09-2019\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        String foundTask \u003d \"\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        int viewIndex \u003d 1;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        EventDate findDate \u003d new EventDate(dateToView);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        for (Event testViewTask : testList.getEventArrayList()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            if (testViewTask.toString().contains(findDate.getFormattedDateString())) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                foundTask +\u003d viewIndex + \". \" + testViewTask.toString() + \"\\n\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                viewIndex++;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        boolean isTasksFound \u003d !foundTask.isEmpty();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        assertEquals(true, isTasksFound);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    public void addRecurringEventTest() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        ArrayList\u003cString\u003e taskListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        EventList testList \u003d new EventList(taskListString);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        testList.addRecurringEvent(new Event(\"recurring event\", \"12/08/2019\"), 100);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        testList.addRecurringEvent(new Event(\"Recurring event\", \"12/09/2019 2359\"), 80);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        Event expectedEvent1 \u003d new Event(\"recurring event\", \"12/08/2019\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        Event expectedEvent2 \u003d new Event(\"recurring event\", \"20/11/2019\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        Event expectedEvent3 \u003d new Event(\"Recurring event\", \"12/09/2019 2359\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        Event expectedEvent4 \u003d new Event(\"Recurring event\", \"01/12/2019 2359\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        int taskFound \u003d 0;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        for (Task testViewTask : testList.getTaskArrayList()) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            if (testViewTask.toString().equals(expectedEvent1.toString()) ||"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                    testViewTask.toString().equals(expectedEvent2.toString()) ||"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                    testViewTask.toString().equals(expectedEvent3.toString()) ||"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                    testViewTask.toString().equals(expectedEvent4.toString())) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                taskFound++;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        assertEquals(4, taskFound);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    public void checkFreeDaysTest() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        ArrayList\u003cString\u003e taskListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        EventList testList \u003d new EventList(taskListString);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        Task toDoTest \u003d new ToDo(\"B-extensions\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        testList.addTask(toDoTest);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        Task deadlineTest1 \u003d new Deadline(\"finish extension\", \"21/09/2019 1900\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        testList.addTask(deadlineTest1);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        Task deadlineTest2 \u003d new Deadline(\"submit report\", \"22/09/2019 2000\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        testList.addTask(deadlineTest2);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        SimpleDateFormat f \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        EventDate today \u003d new EventDate(f.format(new Date()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        Queue\u003cString\u003e daysFree \u003d new LinkedList\u003cString\u003e();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        int nextDays \u003d 1;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        while (daysFree.size() \u003c\u003d 3) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            boolean flagFree \u003d true;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            for (Task viewTask : testList.getTaskArrayList()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                if (viewTask.toString().contains(today.toOutputString())) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                    flagFree \u003d false;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                    break;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            if (flagFree) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                daysFree.add(today.toOutputString());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            today.addDays(nextDays);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        boolean checkFreeFlag \u003d false;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        if (daysFree.poll().equals(\"19 SEP 2019\")) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            checkFreeFlag \u003d true;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        assertEquals(true, checkFreeFlag);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    public void reminderTest () {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tArrayList\u003cString\u003e testcase \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tArrayList\u003cString\u003e all \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tSimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \t// case 1: task due long ago (printed)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tTask dueLongAgo \u003d new Deadline(\"longAgo\", \"09/08/1965 0000\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tall.add(dueLongAgo.toString());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \ttestcase.add(dueLongAgo.toString());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \t// case 2: task due now (printed)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tDate now \u003d new Date();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tCalendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tc.setTime(now);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tString nowStr \u003d formatter.format(now);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tTask dueNow \u003d new Deadline(\"now\", nowStr);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tall.add(dueNow.toString());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \ttestcase.add(dueNow.toString());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \t// case 3: task due 2 days later (printed)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tc.add(Calendar.DATE, 2);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tDate twoDays \u003d c.getTime();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tString twoDaysStr \u003d formatter.format(twoDays);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tTask dueTwoDays \u003d new Deadline(\"twoDays\", twoDaysStr);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tall.add(dueTwoDays.toString());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \ttestcase.add(dueTwoDays.toString());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \t// case 4: task due 3 days later (printed)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tc.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tDate threeDays \u003d c.getTime();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tString threeDaysStr \u003d formatter.format(threeDays);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tTask dueThreeDays \u003d new Deadline(\"threeDays\", threeDaysStr);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tall.add(dueThreeDays.toString());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \ttestcase.add(dueThreeDays.toString());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \t// case 5: task due 4 days later (not printed)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tc.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tDate fourDays \u003d c.getTime();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tString fourDaysStr \u003d formatter.format(fourDays);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tTask dueFourDays \u003d new Deadline(\"fourDays\", fourDaysStr);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tall.add(dueFourDays.toString());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \t// case 6: task due 10 days later (not printed)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tc.add(Calendar.DATE, 6);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tDate tenDays \u003d c.getTime();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tString tenDaysStr \u003d formatter.format(tenDays);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tTask dueTenDays \u003d new Deadline(\"tenDays\", tenDaysStr);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tall.add(dueTenDays.toString());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tEventList expected \u003d new EventList(testcase);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tEventList allitms \u003d new EventList(all);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tEventDate limit \u003d new EventDate();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tlimit.addDays(4);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tlimit.setMidnight();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tPredicate\u003cObject\u003e pred \u003d new Predicate\u003c\u003e(limit, GREATER_THAN);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tString cmp \u003d expected.listOfTasks_String();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tString result \u003d allitms.filteredlist(pred, DATE);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tassertEquals(cmp, result);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yenpeichih": 29,
      "Ryan-Wong-Ren-Wei": 258,
      "-": 11
    }
  }
]
