[
  {
    "path": "src/main/java/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.Storage.EventList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Events.Storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import UserElements.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import UserElements.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import UserElements.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static UI ui \u003d new UI();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static EventList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * main Duke method"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.welcome(tasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        String userInput \u003d parser.readUserInput().toLowerCase();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!userInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            Command currCommand \u003d parser.parseInput(userInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            currCommand.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            userInput \u003d parser.readUserInput();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.bye();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * instantiates all necessary classes to run duke program"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static void setup() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        storage \u003d new Storage(new File(\"data/Duke.txt\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        tasks \u003d new EventList(storage.readFromFile(ui));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yenpeichih": 1,
      "Ryan-Wong-Ren-Wei": 18,
      "-": 23
    }
  },
  {
    "path": "src/main/java/Events/EventTypes/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Events.EventTypes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.Formatting.EventDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Model_Class.Event object inherits Model_Class.Task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Is a type of task available for use."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public abstract class Event implements Comparable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    protected EventDate startEventDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    protected EventDate endEventDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    protected char eventType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates event with one date input (e.g todo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param description event description"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param isDone      boolean representing state of event completion"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param dateAndTime string representing date of event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Event(String description, boolean isDone, String dateAndTime) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.startEventDate \u003d new EventDate(dateAndTime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.endEventDate \u003d null; //no end date, set to null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.eventType \u003d \u0027T\u0027; //event with no end date can only be todo type"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Creates event with two date input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param description      event description"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param isDone           boolean representing state of event completion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param startDateAndTime string representing start date of event"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param endDateAndTime   string representing end date of event"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Event(String description, boolean isDone, String startDateAndTime, String endDateAndTime, char eventType) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.startEventDate \u003d new EventDate(startDateAndTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.endEventDate \u003d new EventDate(endDateAndTime);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.eventType \u003d eventType;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Edit event with new description and two date input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param newDescription new event description"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void editEvent(String newDescription) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.description \u003d newDescription;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts event type task to string format for printing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Formatted string representing the event, whether or not it is completed and its date."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (getType() \u003d\u003d \u0027T\u0027) { //if todo, then only one date entry"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            return \"[\" + getDoneSymbol() + \"][T] \" + getDescription()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    + \" BY: \" + this.getStartDate().getFormattedDateString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else { //multiple date entries"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return \"[\" + getDoneSymbol() + \"][\" + getType() + \"] \" +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    getDescription() + \" START: \" + startEventDate.getFormattedDateString() +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    \" END: \" + endEventDate.getFormattedDateString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public String toStringForFile() { //string that is to be saved to file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (getEndDate() \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return getDoneSymbol() + getType() + \" \" + getDescription() + \" \" +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    getStartDate().getUserInputDateString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return getDoneSymbol() + getType() + \" \" + getDescription() + \" \" +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                getStartDate().getUserInputDateString() + \" \" + getEndDate().getUserInputDateString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public char getType() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return eventType;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public EventDate getStartDate() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return startEventDate;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public EventDate getEndDate() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return endEventDate;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public String getDoneSymbol() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return (isDone) ? \"✓\" : \"✗\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void rescheduleStartDate(EventDate newStartDate) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.startEventDate \u003d newStartDate;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void rescheduleEndDate(EventDate newEndDate) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.endEventDate \u003d newEndDate;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public int compareTo(Event currEvent) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (this.startEventDate.getEventJavaDate().compareTo(currEvent.startEventDate.getEventJavaDate()) \u003e 0) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 10,
      "Dng132FEI": 5,
      "yenpeichih": 2,
      "ZhangYihanNus": 20,
      "Ryan-Wong-Ren-Wei": 51,
      "-": 33
    }
  },
  {
    "path": "src/main/java/Events/EventTypes/EventSubclasses/Assessment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package Events.EventTypes.EventSubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public abstract class Assessment extends Event {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Creates assessment event with isDone boolean for reading from files"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventType type of event denoted by character"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Assessment(String description, boolean isDone, String startDateAndTime, String endDateAndTime, char eventType) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, isDone, startDateAndTime, endDateAndTime, eventType);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Creates assessment without isDone boolean for user input (assumes event entered is incomplete)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventType type of event denoted by character"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Assessment(String description, String startDateAndTime, String endDateAndTime, char eventType) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, false, startDateAndTime, endDateAndTime, eventType);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYihanNus": 20,
      "Ryan-Wong-Ren-Wei": 3
    }
  },
  {
    "path": "src/main/java/Events/EventTypes/EventSubclasses/AssessmentSubclasses/Exam.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "package Events.EventTypes.EventSubclasses.AssessmentSubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import Events.EventTypes.EventSubclasses.Assessment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public class Exam extends Assessment {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Creates exam event with isDone boolean for reading from files"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Exam(String description, boolean isDone, String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, isDone, startDateAndTime, endDateAndTime, \u0027E\u0027);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Creates exam without isDone boolean for user input (assumes event entered is incomplete)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Exam(String description, String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, false, startDateAndTime, endDateAndTime, \u0027E\u0027);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYihanNus": 19
    }
  },
  {
    "path": "src/main/java/Events/EventTypes/EventSubclasses/AssessmentSubclasses/Recital.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "package Events.EventTypes.EventSubclasses.AssessmentSubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import Events.EventTypes.EventSubclasses.Assessment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public class Recital extends Assessment {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Creates recital event with isDone boolean for reading from files"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Recital(String description, boolean isDone, String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, isDone, startDateAndTime, endDateAndTime, \u0027R\u0027);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Creates recital without isDone boolean for user input (assumes event entered is incomplete)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Recital(String description, String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, false, startDateAndTime, endDateAndTime, \u0027R\u0027);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYihanNus": 19
    }
  },
  {
    "path": "src/main/java/Events/EventTypes/EventSubclasses/Concert.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package Events.EventTypes.EventSubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public class Concert extends Event {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * creates new lesson class with boolean to read from file"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Concert(String description, boolean isDone, String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, isDone, startDateAndTime, endDateAndTime, \u0027C\u0027);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * creates new lesson class without boolean to read from user input (assumes incomplete)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Concert(String description, String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, false, startDateAndTime, endDateAndTime, \u0027C\u0027);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYihanNus": 18,
      "Ryan-Wong-Ren-Wei": 1
    }
  },
  {
    "path": "src/main/java/Events/EventTypes/EventSubclasses/RecurrentEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package Events.EventTypes.EventSubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public abstract class RecurrentEvent extends Event {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates recurrent event with isDone boolean for reading from files"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param eventType type of event denoted by character"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public RecurrentEvent(String description, boolean isDone, String startDateAndTime, String endDateAndTime, char eventType) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        super(description, isDone, startDateAndTime, endDateAndTime, eventType);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates recurrent event without isDone boolean for user input (assumes task entered is incomplete)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param eventType type of event denoted by character"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public RecurrentEvent(String description, String startDateAndTime, String endDateAndTime, char eventType) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        super(description, false, startDateAndTime, endDateAndTime, eventType);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ryan-Wong-Ren-Wei": 23
    }
  },
  {
    "path": "src/main/java/Events/EventTypes/EventSubclasses/RecurringEventSubclasses/Lesson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "package Events.EventTypes.EventSubclasses.RecurringEventSubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.EventTypes.EventSubclasses.RecurrentEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public class Lesson extends RecurrentEvent {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * creates new lesson class with boolean to read from file"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Lesson(String description, boolean isDone, String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, isDone, startDateAndTime, endDateAndTime, \u0027L\u0027);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * creates new lesson class with boolean to read from user input (assume incomplete)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Lesson(String description, String startDateAndTime, String EndDateAndTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, false, startDateAndTime, EndDateAndTime, \u0027L\u0027);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yenpeichih": 2,
      "ZhangYihanNus": 17
    }
  },
  {
    "path": "src/main/java/Events/EventTypes/EventSubclasses/RecurringEventSubclasses/Practice.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package Events.EventTypes.EventSubclasses.RecurringEventSubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.EventSubclasses.RecurrentEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public class Practice extends RecurrentEvent {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * creates new practice class with boolean to read from file"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Practice(String description, boolean isDone, String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, isDone, startDateAndTime, endDateAndTime, \u0027P\u0027);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * creates new practice class without boolean to read from user input (assume incopmlete)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public Practice(String description,String startDateAndTime, String endDateAndTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, false, startDateAndTime, endDateAndTime, \u0027P\u0027);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangYihanNus": 17,
      "Ryan-Wong-Ren-Wei": 3
    }
  },
  {
    "path": "src/main/java/Events/EventTypes/EventSubclasses/ToDo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "package Events.EventTypes.EventSubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "public class ToDo extends Event {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Creates ToDo with description and done boolean for reading from file."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public ToDo(String description, boolean isDone, String dateAndTime) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, isDone, dateAndTime);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Creates ToDo without boolean, assumed incomplete read from user input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public ToDo(String description, String dateAndTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        super(description, false, dateAndTime);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        return \"[\" + getDoneSymbol() + \"][T] \" + getDescription() + \" BY: \" + this.getStartDate().getFormattedDateString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yenpeichih": 2,
      "ZhangYihanNus": 18,
      "Ryan-Wong-Ren-Wei": 4
    }
  },
  {
    "path": "src/main/java/Events/Formatting/CalendarView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package Events.Formatting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.Storage.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class CalendarView {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private List\u003cQueue\u003cEvent\u003e\u003e eventsOfTheWeek \u003d new ArrayList\u003c\u003e(7);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private ArrayList\u003cString\u003e daysToDisplay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    private ArrayList\u003cString\u003e datesToDisplay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private String stringForOutput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    static final int MONDAY \u003d 0, TUESDAY \u003d 1, WEDNESDAY \u003d 2, THURSDAY \u003d 3, FRIDAY \u003d 4, SATURDAY \u003d 6, SUNDAY \u003d 7;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public CalendarView(EventList eventList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        ArrayList\u003cEvent\u003e eventArrayList \u003d eventList.getEventArrayList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            eventsOfTheWeek.add(new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        EventDate today \u003d new EventDate(new Date());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        setDaysAndDatesList(today);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        getEventsOfTheWeek(eventArrayList, today);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public String getStringForOutput() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return stringForOutput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Find all the events in the coming 7 days."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventArrayList List of all events."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param today          The current day."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private void getEventsOfTheWeek(ArrayList\u003cEvent\u003e eventArrayList, EventDate today) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        EventDate yesterday \u003d new EventDate(new Date());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        yesterday.addDaysAndSetMidnight(-1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        EventDate endOfWeek \u003d new EventDate(new Date());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        endOfWeek.addDaysAndSetMidnight(6);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        EventDate thisDay \u003d new EventDate(new Date());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        int thisDayNum \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        thisDay.addDaysAndSetMidnight(thisDayNum);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (Event thisEvent : eventArrayList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            //if this event is within the next 6 days"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            if ((thisEvent.getStartDate().compare(endOfWeek) \u003c\u003d 0) \u0026\u0026 (thisEvent.getStartDate().compare(yesterday) \u003e 0)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                while ((thisEvent.getStartDate().compare(thisDay) \u003e 0) \u0026\u0026 (thisDayNum \u003c 7)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    thisDayNum++;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    thisDay.addDaysAndSetMidnight(thisDayNum);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                if (thisDayNum \u003c 7) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                    eventsOfTheWeek.get(thisDayNum).offer(thisEvent);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Sets the two ArrayLists containing days and dates info for the coming 7 days."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param today The current day."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private void setDaysAndDatesList(EventDate today) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String currDay \u003d today.getEventJavaDate().toString().split(\" \")[0];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String[] weekdays \u003d new String[] {\"    \u003cMonday\u003e    \", \"   \u003cTuesday\u003e    \", \"   \u003cWednesday\u003e  \","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                \"   \u003cThursday\u003e   \", \"    \u003cFriday\u003e    \", \"   \u003cSaturday\u003e   \", \"    \u003cSunday\u003e    \"};"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int startDay \u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        switch (currDay) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"Mon\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                startDay \u003d MONDAY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"Tue\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                startDay \u003d TUESDAY;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"Wed\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                startDay \u003d WEDNESDAY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"Thu\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                startDay \u003d THURSDAY;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"Fri\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                startDay \u003d FRIDAY;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"Sat\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                startDay \u003d SATURDAY;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"Sun\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                startDay \u003d SUNDAY;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            this.daysToDisplay.add(weekdays[(startDay + i) % 7]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        EventDate tempDay \u003d today;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            tempDay.addDaysAndSetMidnight(i);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String thisDate \u003d tempDay.getUserInputDateString().split(\" \")[0];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            this.datesToDisplay.add(\"   \" + thisDate + \"   \");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void setCalendarInfo() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String calendarInfo \u003d \"\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        int maxNumOfEvent \u003d 0;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (Queue\u003cEvent\u003e thisQue : eventsOfTheWeek) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            if (thisQue.size() \u003e maxNumOfEvent) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                maxNumOfEvent \u003d thisQue.size();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        // head of table"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        calendarInfo +\u003d \"________________________________________________________________________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                \"|                                                  Events of the week                                                  |\\n\" +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                \"________________________________________________________________________________________________________________________\\n\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        // row of days"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            calendarInfo +\u003d \"|\" + this.daysToDisplay.get(i);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        calendarInfo +\u003d \"|\\n\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        // row of dates"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            calendarInfo +\u003d \"|\" + this.datesToDisplay.get(i);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        calendarInfo +\u003d \"|\\n\" +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"________________________________________________________________________________________________________________________\\n\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        // rows of events"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int idxOfEventRow \u003d 0; idxOfEventRow \u003c maxNumOfEvent; idxOfEventRow++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            String[][] eventsLine;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            eventsLine \u003d getEventsOfOneRow(idxOfEventRow);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            for (int row \u003d 0; row \u003c 3; row++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                for (int day \u003d 0; day \u003c 7; day++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    calendarInfo +\u003d \"|\" + eventsLine[row][day];"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                calendarInfo +\u003d \"|\\n\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        calendarInfo +\u003d \"|                |                |                |                |                |                |                |\\n\" +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                \"________________________________________________________________________________________________________________________\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.stringForOutput \u003d calendarInfo;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Provides the events info in one (3) row, of 7 days."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * If there is no event in a day, keep empty."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param idxOfEventRow the current row of calendar where we wish to get events\u0027 info"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @return the String info of this row of events"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private String[][] getEventsOfOneRow(int idxOfEventRow) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String[][] eventsLine \u003d new String[3][7];"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String emptySection \u003d \"                \";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int day \u003d 0; day \u003c 7; day++) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String thisTime \u003d emptySection;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String thisDescription \u003d emptySection;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String thisDashes \u003d emptySection;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            if (!eventsOfTheWeek.get(day).isEmpty()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                Event tempEvent \u003d eventsOfTheWeek.get(day).poll();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                //time"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                String thisStartTime, thisEndTime;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                assert tempEvent !\u003d null;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                if (!(tempEvent.getStartDate() \u003d\u003d null) \u0026\u0026"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        (tempEvent.getStartDate().getFormattedDateString().split(\", \").length \u003e 2)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    thisStartTime \u003d tempEvent.getStartDate().getFormattedDateString().split(\", \")[2];"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    thisTime \u003d \"* \" + thisStartTime;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    if (!(tempEvent.getEndDate() \u003d\u003d null) \u0026\u0026"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                            (tempEvent.getEndDate().getFormattedDateString().split(\", \").length \u003e 2)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        thisEndTime \u003d tempEvent.getEndDate().getFormattedDateString().split(\", \")[2];"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        thisTime +\u003d \" ~ \" + thisEndTime + \" \";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                } else if (tempEvent.getType() \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    thisTime \u003d \"* TODO          \";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                //description"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                String tempDescription \u003d tempEvent.getDescription();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                if (tempDescription.length() \u003e 13) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    thisDescription \u003d tempDescription.substring(0, 13) + \"...\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    String spaces \u003d \"\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    for (int i \u003d 0; i \u003c (16 - tempDescription.length()); i++) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                        spaces +\u003d \" \";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    thisDescription \u003d tempDescription + spaces;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                //dashes"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                thisDashes \u003d \"----------------\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            eventsLine[0][day] \u003d thisTime;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            eventsLine[1][day] \u003d thisDescription;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            eventsLine[2][day] \u003d thisDashes;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        return eventsLine;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 22,
      "ZhangYihanNus": 155,
      "Ryan-Wong-Ren-Wei": 36
    }
  },
  {
    "path": "src/main/java/Events/Formatting/EventDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "package Events.Formatting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " * Model_Class.DateObj object stores the input date and time as a java object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class EventDate {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    protected String userInputDateString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    protected Date javaDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    protected String formattedDateString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    protected int STRING_TO_DATE \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    protected int DATE_TO_STRING \u003d 2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Creates a custom \"date object\" for string to date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public EventDate(String userInputDateString) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        this.userInputDateString \u003d userInputDateString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        formatDate(STRING_TO_DATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Creates a custom \"date object\" for date to string (used for recurring events)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public EventDate(Date dateClass) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.javaDate \u003d dateClass;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        formatDate(DATE_TO_STRING);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * Takes in an identifier and performs the corresponding actions."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param identifier identify the date information is string to date or date to string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    private void formatDate(int identifier) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (identifier \u003d\u003d STRING_TO_DATE) { //convert user input to java date and store both."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                SimpleDateFormat formatter \u003d new SimpleDateFormat(\"EEE, dd MMM yyyy, HH:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                this.javaDate \u003d dateFormat.parse(userInputDateString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                this.formattedDateString \u003d formatter.format(javaDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                this.userInputDateString \u003d dateFormat.format(javaDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"EEE, dd MMM yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    this.javaDate \u003d dateFormat.parse(userInputDateString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    this.formattedDateString \u003d formatter.format(javaDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    this.userInputDateString \u003d dateFormat.format(javaDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                } catch (ParseException pe2) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    this.formattedDateString \u003d userInputDateString;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else if (identifier \u003d\u003d DATE_TO_STRING) { //convert date object to input string format and store both."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"EEE, dd MMM yyyy, HH:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            this.formattedDateString \u003d formatter.format(javaDate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            formatter \u003d new SimpleDateFormat(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            this.userInputDateString \u003d formatter.format(javaDate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Gets the current java Date object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public Date getCurrentJavaDate() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        javaDate \u003d new Date();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return javaDate;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public String getUserInputDateString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        return userInputDateString;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public String getFormattedDateString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        return this.formattedDateString;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Gets the Event java Date object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public Date getEventJavaDate() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return this.javaDate;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * Compares this dateObj with another input dateObj"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * If this \u003d\u003d other, return 0."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * If this \u003c other, return -1."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * If this \u003e other, return 1."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * If the two EventDates cannot be compared as either one of them stores the date as a string, return 2."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * @param other the input dateObj used for the comparison"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * @return Output the result of the comparison according to the algorithm stated above."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public int compare(EventDate other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (javaDate \u003d\u003d null || other.getEventJavaDate() \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            return 2;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            Date otherDate \u003d other.getEventJavaDate();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (javaDate.compareTo(otherDate) \u003e 0) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } else if (javaDate.compareTo(otherDate) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } else if (javaDate.compareTo(otherDate) \u003c 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        return 2;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * Adds n days to the javaDate object."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "     * @param noOfDays numbers of days to add"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void addDaysAndSetMidnight(int noOfDays) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        //sets calender class date to midnight."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        c.add(Calendar.DATE, noOfDays);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        c.set(Calendar.HOUR_OF_DAY, 23);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        c.set(Calendar.MINUTE, 59);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        c.set(Calendar.SECOND, 59);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.javaDate \u003d c.getTime();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.userInputDateString \u003d formatter.format(javaDate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        formatter \u003d new SimpleDateFormat(\"EEE, dd MMM yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.formattedDateString \u003d formatter.format(javaDate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 6,
      "Dng132FEI": 30,
      "yenpeichih": 51,
      "ZhangYihanNus": 1,
      "Ryan-Wong-Ren-Wei": 57
    }
  },
  {
    "path": "src/main/java/Events/Formatting/Predicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Events.Formatting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Model_Class.Predicate checks if an input satisfies a"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * certain predicate."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Predicate\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * compare_func codes"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    static final int EQUAL \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    static final int GREATER_THAN \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    static final int SMALLER_THAN \u003d 2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * compare_type codes"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    static final int JAVA_DATE \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    static final int STRING \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The item used as the reference to check if the predicate is true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private T reference;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * The function used for the following comparison: reference (compare_func) input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private int compare_func;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * The type of variable that is used as the reference"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private int variable_type;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates a new Model_Class.Predicate Object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param ref  the reference used to check if the predicate is true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param comp the comparator function used in the following comparison: reference (comp) input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Predicate(T ref, int comp) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        switch (comp) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case EQUAL:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                this.compare_func \u003d EQUAL;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case GREATER_THAN:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                this.compare_func \u003d GREATER_THAN;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case SMALLER_THAN:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                this.compare_func \u003d SMALLER_THAN;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.reference \u003d ref;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (this.reference instanceof EventDate) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            this.variable_type \u003d JAVA_DATE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else if (this.reference instanceof String) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            this.variable_type \u003d STRING;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Compares the input date against the reference to check if the predicate is true."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    protected boolean compare_dates(T input) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        EventDate x \u003d (EventDate) reference;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        EventDate y \u003d (EventDate) input;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        switch (this.compare_func) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case EQUAL:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                return x.compare(y) \u003d\u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case GREATER_THAN:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                return x.compare(y) \u003d\u003d 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case SMALLER_THAN:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                return x.compare(y) \u003d\u003d -1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Compares the input string against the reference to check if the predicate is true."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    protected boolean compare_str(T input) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String x \u003d (String) reference;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String y \u003d (String) input;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        switch (this.compare_func) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case EQUAL:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                return x.compareTo(y) \u003d\u003d 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case GREATER_THAN:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                return x.compareTo(y) \u003e 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case SMALLER_THAN:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                return x.compareTo(y) \u003c 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Checks if the input satisfies the predicate. This function"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * will direct to the correct protected comparator functions"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * based on the type of the reference."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public boolean check(T item) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        switch (this.variable_type) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case JAVA_DATE:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                return compare_dates(item);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case STRING:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                return compare_str(item);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ryan-Wong-Ren-Wei": 101,
      "-": 12
    }
  },
  {
    "path": "src/main/java/Events/Storage/ClashException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package Events.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class ClashException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private Event clashEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    ClashException(Event clashEvent) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.clashEvent \u003d clashEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Event getClashEvent() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return clashEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ryan-Wong-Ren-Wei": 15
    }
  },
  {
    "path": "src/main/java/Events/Storage/EventList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "package Events.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.EventSubclasses.AssessmentSubclasses.Exam;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.EventSubclasses.AssessmentSubclasses.Recital;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.EventTypes.EventSubclasses.Concert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.EventTypes.EventSubclasses.RecurringEventSubclasses.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.EventTypes.EventSubclasses.RecurringEventSubclasses.Practice;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.EventTypes.EventSubclasses.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.Formatting.EventDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.Formatting.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": " * Allows for access to the list of events currently stored, and editing that list of events."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " * Does NOT contain any methods for reading/writing to savefile."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "public class EventList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * list of Model_Class.Event objects currently stored."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private ArrayList\u003cEvent\u003e eventArrayList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     * Comparator function codes"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    private static final int GREATER_THAN \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Filter type codes"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    private static final int DATE \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    private static final int TYPE \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Creates new Model_Class.EventList object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param inputList list of strings containing all information extracted from save file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public EventList(ArrayList\u003cString\u003e inputList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        //magic characters for type of event"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        final char TODO \u003d \u0027T\u0027;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        final char CONCERT \u003d \u0027C\u0027;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        final char LESSON \u003d \u0027L\u0027;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        final char PRACTICE \u003d \u0027P\u0027;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        final char EXAM \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        final char RECITAL \u003d \u0027R\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        eventArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        for (String currLine : inputList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            boolean isDone \u003d currLine.substring(0, 3).equals(\"✓\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            char eventType \u003d currLine.charAt(3);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (eventType \u003d\u003d TODO) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                String[] splitString \u003d currLine.split(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                String description \u003d splitString[1];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                String date \u003d splitString[2];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                eventArrayList.add(new ToDo(description, isDone, date));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } else { //for all other events"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                String[] splitString \u003d currLine.split(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                String description \u003d splitString[1];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                String startDateAndTime \u003d splitString[2] + \" \" + splitString[3];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                String endDateAndTime \u003d splitString[4] + \" \" + splitString[5];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                switch (eventType) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    case CONCERT:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        eventArrayList.add(new Concert(description, isDone, startDateAndTime, endDateAndTime));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    case LESSON:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        eventArrayList.add(new Lesson(description, isDone, startDateAndTime, endDateAndTime));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    case PRACTICE:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        eventArrayList.add(new Practice(description, isDone, startDateAndTime, endDateAndTime));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    case EXAM:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        eventArrayList.add(new Exam(description, isDone, startDateAndTime, endDateAndTime));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    case RECITAL:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        eventArrayList.add(new Recital(description, isDone, startDateAndTime, endDateAndTime));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Edit an event\u0027s description, start time and end time in the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventIndex     Index of the event to be edited."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param newDescription The new description."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void editEvent(int eventIndex, String newDescription) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        Event tempEvent \u003d this.eventArrayList.get(eventIndex);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        tempEvent.editEvent(newDescription);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.eventArrayList.set(eventIndex, tempEvent);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Checks for a clash, then adds a new event if possible."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param event Model_Class.Event object to be added"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void addEvent(Event event) throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (event.getStartDate().getEventJavaDate().compareTo(event.getEndDate().getEventJavaDate()) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            throw new Exception();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        Event clashEvent \u003d clashEvent(event); //check the list for a schedule clash"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        if (clashEvent \u003d\u003d null) { //null means no clash was found"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            this.eventArrayList.add(event);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else { //if clash is found, notify user via terminal."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            throw new ClashException(clashEvent);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void addNewTodo(Event event) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        this.eventArrayList.add(event);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Adds recurring events to the list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *  @param event  Event to be added as recursion."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param period Period of the recursion."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void addRecurringEvent(Event event, int period) throws ClashException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Calendar calendarStartDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Calendar calendarEndDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        calendarStartDate.setTime(event.getStartDate().getEventJavaDate());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        calendarEndDate.setTime(event.getEndDate().getEventJavaDate());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        ArrayList\u003cEvent\u003e tempEventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event newEvent \u003d null;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int ONE_SEMESTER_DAYS \u003d 16 * 7;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int addEventCount \u003d 0; addEventCount * period \u003c\u003d ONE_SEMESTER_DAYS; addEventCount++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            EventDate toFormatCalendarStartDate \u003d new EventDate(calendarStartDate.getTime());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            EventDate toFormatCalendarEndDate \u003d new EventDate(calendarEndDate.getTime());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            if (event.getType() \u003d\u003d \u0027L\u0027) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                newEvent \u003d new Lesson(event.getDescription(), toFormatCalendarStartDate.getUserInputDateString(),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        toFormatCalendarEndDate.getUserInputDateString());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            } else if (event.getType() \u003d\u003d \u0027P\u0027) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                newEvent \u003d new Practice(event.getDescription(), toFormatCalendarStartDate.getUserInputDateString(),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        toFormatCalendarEndDate.getUserInputDateString());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            assert newEvent !\u003d null;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (clashEvent(newEvent) \u003d\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                tempEventList.add(newEvent);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                throw new ClashException(newEvent);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            calendarStartDate.add(Calendar.DATE, period);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            calendarEndDate.add(Calendar.DATE, period);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        this.eventArrayList.addAll(tempEventList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Checks the list of events for any clashes with the newly added event. If"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * there is a clash, return a reference to the event, if not, return null."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param checkingEvent newly added event"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @return event that causes a clash"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private Event clashEvent(Event checkingEvent) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        /*  NOTE: DateObj userInputString is arranged as follows: dd-MM-yyyy HHmm."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            for now, only have one date with differing start time and end time, date in startDateObj will be same as"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            in endDateObj */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        //split new event date string into date and time."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String[] newEventStartDateTime \u003d checkingEvent.getStartDate().getUserInputDateString().split(\" \");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String[] newEventEndDateTime \u003d checkingEvent.getEndDate().getUserInputDateString().split(\" \");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String newEventDate \u003d newEventStartDateTime[0]; //assign date"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int newEventStartTime \u003d Integer.parseInt(newEventStartDateTime[1]); //assign time"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int newEventEndTime \u003d Integer.parseInt(newEventEndDateTime[1]);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        for (Event currEvent : eventArrayList) { //scan list for clashes"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (currEvent.getType() \u003d\u003d \u0027T\u0027) continue; //skip scan if todo class"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            String[] currEventStartDateTime \u003d currEvent.getStartDate().getUserInputDateString().split(\" \");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            String[] currEventEndDateTime \u003d currEvent.getEndDate().getUserInputDateString().split(\" \");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (newEventDate.equals(currEventStartDateTime[0]) \u0026\u0026 //check for same date"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    timeClash(newEventStartTime, newEventEndTime, currEventStartDateTime[1], currEventEndDateTime[1])) { //check for time clash"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                return currEvent; //clash found"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return null; //no clash found"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Checks for a clash in time, returns appropriate boolean."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private boolean timeClash(int newEventStartTime, int newEventEndTime, String s, String s1) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int currEventStartTime \u003d Integer.parseInt(s); //assign time"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int currEventEndTime \u003d Integer.parseInt(s1);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (newEventStartTime \u003e currEventStartTime) { //new event starts after current event starts"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return currEventEndTime \u003e newEventStartTime; //check if new event starts before current event ends"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else if (newEventStartTime \u003c currEventStartTime) { //new event starts before current event starts"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return newEventEndTime \u003e currEventStartTime; //check if new event ends after current event starts"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } else { //new event starts at the same time as current event"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * sorts the list of events/tasks according to date, in increasing order."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void sortList() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Collections.sort(eventArrayList);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Deletes a event from the list."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventNo Index of event to be deleted"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void deleteEvent(int eventNo) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        this.eventArrayList.remove(eventNo);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Gets list of Model_Class.Event objects stored"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @return Array of EventLists containing all events."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public ArrayList\u003cEvent\u003e getEventArrayList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        return this.eventArrayList;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Gets number of events stored."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @return number of events stored"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public int getNumEvents() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        return eventArrayList.size();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Gets a specific event using indexing."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param index Index of event to be extracted"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @return Model_Class.Event object of specified event"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public Event getEvent(int index) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        return eventArrayList.get(index);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Gets the entire list of events stored in String format"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @return String containing all events, separated by a newline."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public String listOfEvents_String() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        String allEvents \u003d \"\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (int i \u003d 0; i \u003c eventArrayList.size(); ++i) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            if (eventArrayList.get(i) \u003d\u003d null) continue;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            int j \u003d i + 1;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            allEvents +\u003d j + \". \" + this.getEvent(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        return allEvents;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @return String containing the filtered list of events, each separated by a newline."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private String filteredList(Predicate\u003cObject\u003e predicate) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        String filteredEvents \u003d \"\";"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        int j;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        for (int i \u003d 0; i \u003c eventArrayList.size(); ++i) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            if (eventArrayList.get(i) \u003d\u003d null) continue;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            else if (!predicate.check(eventArrayList.get(i).getStartDate())) continue; "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "            j \u003d i + 1;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            filteredEvents +\u003d j + \". \" + this.getEvent(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        return filteredEvents;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @return String containing events found in the next 3 days"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "    public String getReminder() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        String systemDateAndTime \u003d new Date().toString();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        EventDate limit \u003d new EventDate(systemDateAndTime);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        limit.addDaysAndSetMidnight(3);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        String reminderDeadline \u003d limit.getEventJavaDate().toString();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Predicate\u003cObject\u003e objectPredicate \u003d new Predicate\u003c\u003e(limit, GREATER_THAN);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return \"The time now is \" + systemDateAndTime + \".\\n\" +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                \"Here is a list of events you need to complete in the next 3 days (by \" +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                reminderDeadline + \"):\\n\" + filteredList(objectPredicate);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Used to reinstate deleted event in case of failure to reschedule"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void undoDeletionOfEvent(Event event) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventArrayList.add(event);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 7,
      "Dng132FEI": 20,
      "yenpeichih": 19,
      "ZhangYihanNus": 47,
      "Ryan-Wong-Ren-Wei": 221
    }
  },
  {
    "path": "src/main/java/Events/Storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Events.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import UserElements.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Class containing file path and scanner, allowing for reading from and writing to the storage file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Allows for creation of new storage file if necessary."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner scanFile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates new Model_Class.Storage object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file The storage file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Storage(File file) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reads from the file whenever the program is run."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores all read information into an array of strings to be returned."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui user interface"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Array of strings containing all information from the read file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cString\u003e readFromFile(UI ui) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean fileAssigned \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(ui.getLineSeparation());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            this.scanFile \u003d new Scanner(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            fileAssigned \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(\"Event list loaded!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException FNFe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"No Duke file found!\\nCreating new file...\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException IOe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                System.out.println(\"Failed! Please ensure data folder exists, then try again!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"New file created!\\nAssigning...\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(ui.getLineSeparation());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        ArrayList\u003cString\u003e readFromFile \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String fileContent;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.scanFile !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            while (this.scanFile.hasNextLine()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                fileContent \u003d this.scanFile.nextLine();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return readFromFile;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves current information to the storage file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param events EventList where information is extracted to be saved"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param ui     User interface"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void saveToFile(EventList events, UI ui) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String toWriteToFile \u003d \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        for (Event currEvent : events.getEventArrayList()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            toWriteToFile +\u003d currEvent.toStringForFile() + \"\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            FileWriter writer \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            writer.write(toWriteToFile);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException IOe) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.errorWritingToFile();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 2,
      "ZhangYihanNus": 4,
      "Ryan-Wong-Ren-Wei": 4,
      "-": 83
    }
  },
  {
    "path": "src/main/java/UserElements/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package UserElements;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.EventSubclasses.AssessmentSubclasses.Exam;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.EventSubclasses.AssessmentSubclasses.Recital;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.EventTypes.EventSubclasses.Concert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.EventTypes.EventSubclasses.RecurringEventSubclasses.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.EventTypes.EventSubclasses.RecurringEventSubclasses.Practice;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import Events.EventTypes.EventSubclasses.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.Formatting.EventDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.Formatting.CalendarView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.Storage.ClashException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import Events.Storage.EventList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import Events.Storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command that is passed via user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Multiple types of commands are possible, executed using switch case method."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * The String representing the type of command e.g add/delete event"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * The String representing the continuation of the command, if it exists."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Contains further specific instructions about the command passed e.g which event to add or delete"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String continuation;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new command with the command type and specific instructions"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param command      The Model_Class.Command type"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param continuation The Model_Class.Command specific instructions"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command(String command, String continuation) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.continuation \u003d continuation;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new command where only command param is passed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Specific instructions not necessary for these types of commands."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param command The Model_Class.Command type"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command(String command) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.continuation \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command stored."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param events  Class containing the list of events and all relevant methods."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui      Class containing all relevant user interface instructions."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage Class containing access to the storage file and related instructions."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void execute(EventList events, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean changesMade \u003d true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                listEvents(events, ui);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                changesMade \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"reminder\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                remindEvents(events, ui);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                changesMade \u003d false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                markEventAsDone(events, ui);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                deleteEvent(events, ui);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                searchEvents(events, ui);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                changesMade \u003d false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                createNewTodo(events, ui);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case \"lesson\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                createNewEvent(events, ui, \u0027L\u0027);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case \"concert\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                createNewEvent(events, ui, \u0027C\u0027);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case \"practice\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                createNewEvent(events, ui, \u0027P\u0027);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case \"exam\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                createNewEvent(events, ui, \u0027E\u0027);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case \"recital\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                createNewEvent(events, ui, \u0027R\u0027);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"view\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                viewEvents(events, ui);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                changesMade \u003d false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"check\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                checkFreeDays(events, ui);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                changesMade \u003d false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            case \"reschedule\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                rescheduleEvent(events, ui);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            case \"edit\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                editEvent(events, ui);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            case \"calendar\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                printCalendar(events, ui);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.printInvalidCommand();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                changesMade \u003d false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (changesMade) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            events.sortList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            storage.saveToFile(events, ui);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private void printCalendar(EventList events, UI ui) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        CalendarView calendarView \u003d new CalendarView(events);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        calendarView.setCalendarInfo();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        ui.printCalendar(calendarView.getStringForOutput());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Command to edit an event in the list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private void editEvent(EventList events, UI ui) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            ui.eventDescriptionEmpty();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String[] splitInfo \u003d continuation.split(\"/\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            int eventIndex \u003d Integer.parseInt(splitInfo[0]) - 1;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String newDescription \u003d splitInfo[1];"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            events.editEvent(eventIndex, newDescription);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            ui.printEditedEvent(eventIndex + 1, events.getEvent(eventIndex));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    private void searchEvents(EventList events, UI ui) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            ui.eventDescriptionEmpty();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String searchKeyWords \u003d continuation;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String foundEvent \u003d \"\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            int viewIndex \u003d 1;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            for (Event viewEvent : events.getEventArrayList()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                if (viewEvent.toString().contains(searchKeyWords)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    foundEvent +\u003d viewIndex + \". \" + viewEvent.toString() + \"\\n\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                viewIndex++;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            boolean isEventsFound \u003d !foundEvent.isEmpty();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            ui.printFoundEvents(foundEvent, isEventsFound);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Finds the next 3 free days in the schedule and passes them to UI class to be printed."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void checkFreeDays(EventList events, UI ui) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        Calendar dayToCheckIfFree \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        String currentDay \u003d formatter.format(dayToCheckIfFree.getTime());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        EventDate dayToCheckIfFreeObject \u003d new EventDate(currentDay);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        Queue\u003cString\u003e daysFree \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        int nextDays \u003d 1;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        while (daysFree.size() \u003c\u003d 3) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            boolean isFree \u003d true;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            for (Event viewEvent : events.getEventArrayList()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                if (viewEvent.getStartDate().getFormattedDateString().equals(dayToCheckIfFreeObject.getFormattedDateString())) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    isFree \u003d false;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            if (isFree) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                daysFree.add(dayToCheckIfFreeObject.getFormattedDateString());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            dayToCheckIfFreeObject.addDaysAndSetMidnight(nextDays);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            nextDays++;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        ui.printFreeDays(daysFree);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Searches list for events found in a singular date, passes to UI for printing."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void viewEvents(EventList events, UI ui) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            ui.eventDescriptionEmpty();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String dateToView \u003d continuation;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            String foundEvent \u003d \"\";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            int viewIndex \u003d 1;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            EventDate findDate \u003d new EventDate(dateToView);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            for (Event viewEvent : events.getEventArrayList()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                if (viewEvent.toString().contains(findDate.getFormattedDateString())) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    foundEvent +\u003d viewIndex + \". \" + viewEvent.toString() + \"\\n\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "                viewIndex++;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            boolean isEventsFound \u003d !foundEvent.isEmpty();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            ui.printFoundEvents(foundEvent, isEventsFound);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void createNewEvent(EventList events, UI ui, char eventType) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            ui.eventDescriptionEmpty();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            int NO_PERIOD \u003d -1;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                EntryForEvent entryForEvent \u003d new EntryForEvent().invoke(); //separate all info into relevant details"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                Event newEvent \u003d NewEvent(eventType, entryForEvent); //instantiate new event"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                assert newEvent !\u003d null;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                if (entryForEvent.getPeriod() \u003d\u003d NO_PERIOD) { //non-recurring"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    events.addEvent(newEvent);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    ui.eventAdded(newEvent, events.getNumEvents());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                } else { //recurring"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    events.addRecurringEvent(newEvent, entryForEvent.getPeriod());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                    ui.recurringEventAdded(newEvent, events.getNumEvents(), entryForEvent.getPeriod());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } catch (ClashException e) { //clash found"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                ui.scheduleClash(e.getClashEvent());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } catch (StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                ui.eventFormatWrong();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } catch (Exception e) { //start time is after end time"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                ui.eventEndsBeforeStart();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Instantiates a new event based on details passed as parameter"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param entryForEvent contains all necessary info for creating new event"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @return instantiated event"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private Event NewEvent(char eventType, EntryForEvent entryForEvent) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event newEvent \u003d null;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        switch (eventType) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case \u0027L\u0027:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                newEvent \u003d new Lesson(entryForEvent.getDescription(), false, entryForEvent.getStartDate(),"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        entryForEvent.getEndDate());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case \u0027C\u0027:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                newEvent \u003d new Concert(entryForEvent.getDescription(), false, entryForEvent.getStartDate(),"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        entryForEvent.getEndDate());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case \u0027P\u0027:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                newEvent \u003d new Practice(entryForEvent.getDescription(), false, entryForEvent.getStartDate(),"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        entryForEvent.getEndDate());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case \u0027E\u0027:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                newEvent \u003d new Exam(entryForEvent.getDescription(), false, entryForEvent.getStartDate(),"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        entryForEvent.getEndDate());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            case \u0027R\u0027:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                newEvent \u003d new Recital(entryForEvent.getDescription(), false, entryForEvent.getStartDate(),"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                        entryForEvent.getEndDate());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return newEvent;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void createNewTodo(EventList events, UI ui) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        if (continuation.isEmpty()) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.eventDescriptionEmpty();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        EntryForEvent entryForEvent \u003d new EntryForEvent().invoke(); //separate all info into relevant details"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event newEvent \u003d new ToDo(entryForEvent.getDescription(), entryForEvent.getStartDate());"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        events.addNewTodo(newEvent);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        ui.eventAdded(newEvent, events.getNumEvents());"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void deleteEvent(EventList events, UI ui) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            int eventNo \u003d Integer.parseInt(continuation);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            Event currEvent \u003d events.getEvent(eventNo - 1);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            events.deleteEvent(eventNo - 1);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.eventDeleted(currEvent);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (IndexOutOfBoundsException outOfBoundsE) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.noSuchEvent();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (NumberFormatException notInteger) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.notAnInteger();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void markEventAsDone(EventList events, UI ui) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            int eventNo \u003d Integer.parseInt(continuation);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (events.getEvent(eventNo - 1) instanceof ToDo) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                events.getEvent(eventNo - 1).markAsDone();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                ui.eventDone(events.getEvent(eventNo - 1));"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                ui.noSuchEvent();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (IndexOutOfBoundsException outOfBoundsE) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.noSuchEvent();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (NumberFormatException notInteger) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.notAnInteger();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void rescheduleEvent(EventList events, UI ui) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event copyOfEvent \u003d null, newEvent \u003d null;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            String[] rescheduleDetail \u003d continuation.split(\" \"); //split details by space (dd-MM-yyyy HHmm HHmm)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "            int eventIndex \u003d Integer.parseInt(rescheduleDetail[0]) - 1;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            copyOfEvent \u003d events.getEvent(eventIndex); //copy of event in case rescheduling fails"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            newEvent \u003d events.getEvent(eventIndex); //event to be used as a replacement."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            EventDate newStartDate \u003d new EventDate(rescheduleDetail[1] + \" \" + rescheduleDetail[2]);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            EventDate newEndDate \u003d new EventDate(rescheduleDetail[1] + \" \" + rescheduleDetail[3]);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            newEvent.rescheduleStartDate(newStartDate); //reschedule start date \u0026 time"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            newEvent.rescheduleEndDate(newEndDate); //reschedule end date \u0026 time"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            events.deleteEvent(eventIndex); //delete event from list before continuing"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.rescheduleFormatWrong();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            events.addEvent(newEvent);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.rescheduleEvent(newEvent);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (ClashException clashE) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.scheduleClash(clashE.getClashEvent());"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            events.undoDeletionOfEvent(copyOfEvent); //reinstate previous event when rescheduling fails"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ui.eventEndsBeforeStart();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            events.undoDeletionOfEvent(copyOfEvent); //reinstate previous event when rescheduling fails"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void remindEvents(EventList events, UI ui) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        ui.printReminder(events);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void listEvents(EventList events, UI ui) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        ui.printListOfEvents(events);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Contains all info concerning a new entry an event."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private class EntryForEvent {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        private String startDate;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        private String endDate;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        private int period; //recurring period. -1(NON_RECURRING) if non-recurring."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        public String getDescription() {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return description;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        public String getStartDate() {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return startDate;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        public String getEndDate() {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return endDate;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        public int getPeriod() {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return period;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "         * contains all info regarding an entry for a non-recurring event"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "         *"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "         * @return organized entryForEvent information"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        public EntryForEvent invoke() {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            int NON_RECURRING \u003d -1;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            String[] splitEvent \u003d continuation.split(\"/\");"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            description \u003d splitEvent[0];"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            String date \u003d splitEvent[1];"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            String[] splitDate \u003d date.split(\" \");"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (splitDate.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                startDate \u003d splitDate[0] + \" \" + splitDate[1];"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                endDate \u003d splitDate[0] + \" \" + splitDate[2];"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } else if (splitDate.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                startDate \u003d splitDate[0] + \" \" + splitDate[1];"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                endDate \u003d \"\";"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                startDate \u003d splitDate[0];"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                endDate \u003d \"\";"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (splitEvent.length \u003d\u003d 2) {//cant find period extension of command, event is non-recurring"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                period \u003d NON_RECURRING;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                period \u003d Integer.parseInt(splitEvent[2]);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 12,
      "Dng132FEI": 3,
      "yenpeichih": 25,
      "ZhangYihanNus": 81,
      "Ryan-Wong-Ren-Wei": 231,
      "-": 89
    }
  },
  {
    "path": "src/main/java/UserElements/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package UserElements;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains method to parse the user input and interpret it for Model_Class.Command class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private Scanner inputScanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates new Model_Class.Parser object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public Parser() {}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public String readUserInput() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        return inputScanner.nextLine();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input to extract command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput String containing user input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Model_Class.Command object after parsing input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseInput(String userInput) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String continuation;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        if (userInput.contains(\" \")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            int indexOfSpace \u003d userInput.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            command \u003d userInput.substring(0, indexOfSpace);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            continuation \u003d userInput.substring(indexOfSpace + 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Command(command, continuation);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Command(userInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 1,
      "Ryan-Wong-Ren-Wei": 7,
      "-": 31
    }
  },
  {
    "path": "src/main/java/UserElements/UI.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package UserElements;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.Storage.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.Formatting.EventDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import Events.Formatting.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * User interface: contains all methods pertaining to user interaction."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String lineSeparation \u003d \"____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Comparator function codes"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static final int EQUAL \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static final int GREATER_THAN \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    private static final int SMALLER_THAN \u003d 2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Filter type codes"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DATE \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int TYPE \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * prints welcome message and instructions for use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void welcome(EventList Events) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(lineSeparation + \"Hello! I\u0027m Duke\\nWhat can I do for you?\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Commands:\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"1. list: Print a list of events currently stored.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"2. todo \u003cdescription of event\u003e: Adds a simple event with no time or date involved\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"3. event OR deadline \u003cdescription of event\u003e /at OR /by \u003ctime\u003e: adds an event/deadline to the list of events.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"4. done \u003cevent number\u003e: completes a event\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"5. bye: exits the program\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"6. reminder: view your upcoming events for the next 3 days\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"When entering dates and times, you may do so in the following format for faster entry : \\n\" +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                \"dd-MM-yyyy HHmm\\n\" + lineSeparation);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        printReminder(Events);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Enter a command:\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Obtains the current date and prints the events to be completed within the next"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * three days as a reminder."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param events the EventList used in the Duke function."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void printReminder(EventList events) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dng132FEI"
        },
        "content": "        System.out.print(events.getReminder());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints a message when an invalid command is entered."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printInvalidCommand() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Sorry! I don\u0027t know what that means.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * prints entire list of events stored."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param events Model_Class.EventList object containing all stored classes and pertaining methods."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public static void printListOfEvents(EventList events) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.print(events.listOfEvents_String());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * prints goodbye message"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void bye() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation + \"Bye. Hope to see you again soon!\\n\" + lineSeparation);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return line of underscores to separate different Model_Class.UI outputs."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getLineSeparation() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return lineSeparation;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * prints message when a event is successfully added"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventAdded event in question"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param numEvents  total number of events"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void eventAdded(Event eventAdded, int numEvents) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(lineSeparation + \"Got it. I\u0027ve added this event:\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            System.out.println(\"[\" + eventAdded.getDoneSymbol() + \"][\" + eventAdded.getType() + \"] \" +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    eventAdded.getDescription() + \" START: \" + eventAdded.getStartDate().getFormattedDateString() +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    \" END: \" + eventAdded.getEndDate().getFormattedDateString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(\"Now you have \" + numEvents + \" events in the list.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            System.out.println(\"[\" + eventAdded.getDoneSymbol() + \"][\" + eventAdded.getType() + \"] \" +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                    eventAdded.getDescription() + \" BY: \" + eventAdded.getStartDate().getFormattedDateString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            System.out.println(\"Now you have \" + numEvents + \" events in the list.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "    public void inputDetails() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(\"Please input the event details below in the format\" + \"\\n\" +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                \"\u003cvenue\u003e/\u003cteachers or assessors\u003e/\u003cpieces to practice\u003e/\u003cperformers\u003e. For non-applicable categories please input \u0027NA\u0027.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * prints message when a event is marked as completed"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param event event in question"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void eventDone(Event event) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this event as done:\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(event.toString());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * prints message when a event is deleted successfully"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param event event in question to be deleted"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void eventDeleted(Event event) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this event:\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(event.toString());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * prints message containing events found when a search is performed."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * prints error message if no events are found"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param allFoundEvents string containing all the events found, separated by newline character"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param found          boolean signifying whether or not any events were found"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void printFoundEvents(String allFoundEvents, boolean found) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (found) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(\"Here are the matching events in your list:\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.print(allFoundEvents);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(\"No such events were found! Please try again.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * prints message if command does not contain valid input for related event."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void noSuchEvent() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"There is no such event! Please try again.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void rescheduleFormatWrong() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Please enter command in the following format:\\n\" +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            \"reschedule \u003ctaskIndex\u003e dd-MM-yyyy HHmm HHmm\\n\" +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"Please ensure that the taskIndex is a valid integer as well!\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * prints message if no event description is found when adding a new event to the list"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void eventDescriptionEmpty() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"The description of your event cannot be empty!\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void eventEndsBeforeStart() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"The event you added ends before it starts! Please try again.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * prints message when event index from input is not an integer"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void notAnInteger() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"That is not a valid integer! Please enter the index of the event you intend to alter.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * prints message when input format is wrong for addition of new event type event."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void eventFormatWrong() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Please enter the date in the format \u0027dd-MM-yyyy HHmm HHmm\u0027 or \u0027dd-MM-yyyy\u0027.\\n\" +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"First time entered is start time, second time entered is end time.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void scheduleClash(Event event) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"That event clashes with another in the schedule! \" +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Please resolve the conflict and try again!\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Clashes with: \" + event.toString());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * prints message when recurring events are added to the list successfully"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void recurringEventAdded(Event eventAdded, int numEvents, int period) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(lineSeparation + \"Got it. I\u0027ve added these recurring events:\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "        System.out.println(\"[\" + eventAdded.getDoneSymbol() + \"][\" + eventAdded.getType() + \"] \" +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                eventAdded.getDescription() + \" START: \" + eventAdded.getStartDate().getFormattedDateString() +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yenpeichih"
        },
        "content": "                \" END: \" + eventAdded.getEndDate().getFormattedDateString() + \" (every \" + period + \" days)\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"Now you have \" + numEvents + \" events in the list.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * prints next 3 days that are free"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * @param freeDays queue of free days of type DateObj"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void printFreeDays(Queue\u003cString\u003e freeDays) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Here are the next 3 free days!\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d freeDays.size(); i++) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            System.out.println(freeDays.poll());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * prints message when reschedule an event successfully"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "     * @param event event after rescheduled"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    public void rescheduleEvent(Event event) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Rescheduled event to \" + event.toString() + \" successfully!\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YuanJiayi"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void errorWritingToFile() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.println(\"Error writing to file! Details not saved!\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * Prints message to show success of edit command."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventIndex  The index of the edited event."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     * @param eventEdited The event after edit."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void printEditedEvent(int eventIndex, Event eventEdited) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(lineSeparation + \"Got it. Successfully edited event\" + eventIndex + \":\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(\"[\" + eventEdited.getDoneSymbol() + \"][\" + eventEdited.getType() + \"] \" +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    eventEdited.getDescription() + \" START: \" + eventEdited.getStartDate().getFormattedDateString() +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    \" END: \" + eventEdited.getEndDate().getFormattedDateString());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.println(\"[\" + eventEdited.getDoneSymbol() + \"][\" + eventEdited.getType() + \"] \" +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "                    eventEdited.getDescription() + \" BY: \" + eventEdited.getStartDate().getFormattedDateString());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "            System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "    public void printCalendar(String calendarInfo) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(lineSeparation);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"Here is the calendar of the next 7 days!\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(calendarInfo);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ZhangYihanNus"
        },
        "content": "        System.out.println(\"\\nEnter a command:\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuanJiayi": 6,
      "Dng132FEI": 1,
      "yenpeichih": 22,
      "ZhangYihanNus": 74,
      "Ryan-Wong-Ren-Wei": 47,
      "-": 151
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import Events.EventTypes.Event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.EventSubclasses.Concert;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.EventSubclasses.RecurringEventSubclasses.Lesson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.EventSubclasses.RecurringEventSubclasses.Practice;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.EventTypes.EventSubclasses.ToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.Formatting.EventDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import Events.Formatting.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.Storage.ClashException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import Events.Storage.EventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "import UserElements.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * test clash handling for single event addition"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clashTest(){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e readFromFile \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String fileContent;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"✗T fawpeifwe 02-12-2019\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"✗P apiejfpwiefw 03-12-2019 1500 03-12-2019 1800\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"✗C halloween 04-12-2019 1600 04-12-2019 1930\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        EventList eventListTest \u003d new EventList(readFromFile);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event testEvent \u003d new Practice(\"Horn practice\", \"3-12-2019 1400\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"3-12-2019 1600\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            eventListTest.addEvent(testEvent);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (ClashException e){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            assertEquals(e.getClashEvent(), eventListTest.getEvent(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     * Test clash handling for recurring events"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void clashTestRecurring(){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        ArrayList\u003cString\u003e readFromFile \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String fileContent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"✗T fawpeifwe 02-12-2019\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"✗P apiejfpwiefw 03-12-2019 1500 03-12-2019 1800\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"✗C halloween 04-12-2019 1600 04-12-2019 1930\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        EventList eventListTest \u003d new EventList(readFromFile);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event testEvent \u003d new Practice(\"Horn practice\", \"28-11-2019 1400\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"28-11-2019 1600\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            eventListTest.addRecurringEvent(testEvent, 4);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (ClashException e){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            assertEquals(e.getClashEvent(), eventListTest.getEvent(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "    public void testSorting() throws Exception{"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        ArrayList\u003cString\u003e readFromFile \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        String fileContent;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"✗T fawpeifwe 02-12-2019\\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"✗P apiejfpwiefw 03-12-2019 1500 03-12-2019 1800\\n\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        fileContent \u003d \"✗C halloween 04-12-2019 1600 04-12-2019 1930\\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        readFromFile.add(fileContent);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        EventList eventListTest \u003d new EventList(readFromFile);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        boolean succeeded \u003d true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event testEvent1 \u003d new Practice(\"Horn practice\", \"05-12-2019 1400\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"05-12-2019 1600\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event testEvent2 \u003d new Lesson(\"Full Orchestra rehearsal\", \"03-12-2019 1400\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                \"03-12-2019 1500\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        Event testEvent3 \u003d new ToDo(\"Complete theory homework CS2113\", \"01-12-2019\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListTest.addEvent(testEvent1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListTest.addEvent(testEvent2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListTest.addNewTodo(testEvent3);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListTest.sortList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        ArrayList\u003cEvent\u003e eventListCompare \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListCompare.add(new ToDo(\"Complete theory homework CS2113\", \"01-12-2019\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListCompare.add(new ToDo(\"fawpeifwe\", \"02-12-2019\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListCompare.add(new Lesson(\"Full Orchestra rehearsal\", \"03-12-2019 1400\", \"03-12-2019 1500\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListCompare.add(new Practice(\"apiejfpwiefw\", \"03-12-2019 1500\", \"03-12-2019 1800\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListCompare.add(new Concert(\"halloween\", \"04-12-2019 1600\", \"04-12-2019 1930\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        eventListCompare.add(new Practice(\"Horn practice\", \"05-12-2019 1400\", \"05-12-2019 1600\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        for (Event currEvent : eventListTest.getEventArrayList()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            System.out.println(currEvent.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            System.out.println(eventListCompare.get(i).toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            if (!currEvent.toString().equals(eventListCompare.get(i).toString())) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                System.out.println(\"hi\" + i);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "                succeeded \u003d false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "            ++i;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "        assertEquals(true, succeeded);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    private static final int GREATER_THAN \u003d 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    private static final int DATE \u003d 0;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    public void viewScheduleTest() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        ArrayList\u003cString\u003e testListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        EventList testList \u003d new EventList(testListString);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        Task toDoTest \u003d new ToDo(\"cheese\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        testList.addTask(toDoTest);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        Task deadlineTest1 \u003d new Deadline(\"eat cheese\", \"19/09/2019 1900\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        testList.addTask(deadlineTest1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        Task deadlineTest2 \u003d new Deadline(\"buy cheese\", \"19/09/2019 2000\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        testList.addTask(deadlineTest2);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        Task deadlineTest3 \u003d new Deadline(\"throw cheese\", \"19/09/2020 1000\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        testList.addTask(deadlineTest3);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        Task eventTest \u003d new Event(\"cheese party\", \"20/09/2019 2100\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        testList.addTask(eventTest);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        String dateToView \u003d \"19/09/2019\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        String foundTask \u003d \"\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        int viewIndex \u003d 1;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        EventDate findDate \u003d new EventDate(dateToView);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        for (Task testViewTask : testList.getTaskArrayList()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            if (testViewTask.toString().contains(findDate.toOutputString())) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                foundTask +\u003d viewIndex + \". \" + testViewTask.toString() + \"\\n\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                viewIndex++;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        boolean isTasksFound \u003d !foundTask.isEmpty();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        assertEquals(true, isTasksFound);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    public void addRecurringEventTest() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        ArrayList\u003cString\u003e taskListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        EventList testList \u003d new EventList(taskListString);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        testList.addRecurringEvent(new Event(\"recurring event\", \"12/08/2019\"), 100);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        testList.addRecurringEvent(new Event(\"Recurring event\", \"12/09/2019 2359\"), 80);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        Event expectedEvent1 \u003d new Event(\"recurring event\", \"12/08/2019\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        Event expectedEvent2 \u003d new Event(\"recurring event\", \"20/11/2019\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        Event expectedEvent3 \u003d new Event(\"Recurring event\", \"12/09/2019 2359\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        Event expectedEvent4 \u003d new Event(\"Recurring event\", \"01/12/2019 2359\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        int taskFound \u003d 0;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        for (Task testViewTask : testList.getTaskArrayList()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            if (testViewTask.toString().equals(expectedEvent1.toString()) ||"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                    testViewTask.toString().equals(expectedEvent2.toString()) ||"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                    testViewTask.toString().equals(expectedEvent3.toString()) ||"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                    testViewTask.toString().equals(expectedEvent4.toString())) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                taskFound++;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        assertEquals(4, taskFound);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    public void checkFreeDaysTest() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        ArrayList\u003cString\u003e taskListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        EventList testList \u003d new EventList(taskListString);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        Task toDoTest \u003d new ToDo(\"B-extensions\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        testList.addTask(toDoTest);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        Task deadlineTest1 \u003d new Deadline(\"finish extension\", \"21/09/2019 1900\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        testList.addTask(deadlineTest1);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        Task deadlineTest2 \u003d new Deadline(\"submit report\", \"22/09/2019 2000\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        testList.addTask(deadlineTest2);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        SimpleDateFormat f \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        EventDate today \u003d new EventDate(f.format(new Date()));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        Queue\u003cString\u003e daysFree \u003d new LinkedList\u003cString\u003e();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        int nextDays \u003d 1;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        while (daysFree.size() \u003c\u003d 3) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            boolean flagFree \u003d true;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            for (Task viewTask : testList.getTaskArrayList()) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                if (viewTask.toString().contains(today.toOutputString())) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                    flagFree \u003d false;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                    break;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            if (flagFree) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//                daysFree.add(today.toOutputString());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            today.addDays(nextDays);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        boolean checkFreeFlag \u003d false;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        if (daysFree.poll().equals(\"19 SEP 2019\")) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//            checkFreeFlag \u003d true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//        assertEquals(true, checkFreeFlag);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    public void reminderTest () {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tArrayList\u003cString\u003e testcase \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tArrayList\u003cString\u003e all \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tSimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \t// case 1: task due long ago (printed)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tTask dueLongAgo \u003d new Deadline(\"longAgo\", \"09/08/1965 0000\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tall.add(dueLongAgo.toString());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \ttestcase.add(dueLongAgo.toString());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \t// case 2: task due now (printed)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tDate now \u003d new Date();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tCalendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tc.setTime(now);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tString nowStr \u003d formatter.format(now);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tTask dueNow \u003d new Deadline(\"now\", nowStr);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tall.add(dueNow.toString());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \ttestcase.add(dueNow.toString());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \t// case 3: task due 2 days later (printed)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tc.add(Calendar.DATE, 2);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tDate twoDays \u003d c.getTime();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tString twoDaysStr \u003d formatter.format(twoDays);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tTask dueTwoDays \u003d new Deadline(\"twoDays\", twoDaysStr);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tall.add(dueTwoDays.toString());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \ttestcase.add(dueTwoDays.toString());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \t// case 4: task due 3 days later (printed)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tc.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tDate threeDays \u003d c.getTime();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tString threeDaysStr \u003d formatter.format(threeDays);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tTask dueThreeDays \u003d new Deadline(\"threeDays\", threeDaysStr);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tall.add(dueThreeDays.toString());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \ttestcase.add(dueThreeDays.toString());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \t// case 5: task due 4 days later (not printed)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tc.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tDate fourDays \u003d c.getTime();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tString fourDaysStr \u003d formatter.format(fourDays);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tTask dueFourDays \u003d new Deadline(\"fourDays\", fourDaysStr);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tall.add(dueFourDays.toString());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \t// case 6: task due 10 days later (not printed)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tc.add(Calendar.DATE, 6);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tDate tenDays \u003d c.getTime();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tString tenDaysStr \u003d formatter.format(tenDays);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tTask dueTenDays \u003d new Deadline(\"tenDays\", tenDaysStr);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tall.add(dueTenDays.toString());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tEventList expected \u003d new EventList(testcase);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tEventList allitms \u003d new EventList(all);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tEventDate limit \u003d new EventDate();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tlimit.addDays(4);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tlimit.setMidnight();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tPredicate\u003cObject\u003e pred \u003d new Predicate\u003c\u003e(limit, GREATER_THAN);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tString cmp \u003d expected.listOfTasks_String();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tString result \u003d allitms.filteredlist(pred, DATE);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    \tassertEquals(cmp, result);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Ryan-Wong-Ren-Wei"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ryan-Wong-Ren-Wei": 241,
      "-": 35
    }
  }
]
