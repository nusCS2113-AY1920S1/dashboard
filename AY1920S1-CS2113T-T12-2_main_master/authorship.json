[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    archiveVersion \u003d \"V1.1\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    mainClassName \u003d \u0027duke.Main\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    compile \u0027com.jfoenix:jfoenix:9.0.8\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    mainClassName \u003d \"duke/Launcher\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 3,
      "-": 44,
      "lucasfoo": 7
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Budget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.ExpenseList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeRuntimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * Represents our Duke and contains the main program of Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String BACKUP_EXTENSION \u003d \".backup\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final File DEFAULT_USER_DIRECTORY \u003d new File(\"data\" + File.separator + \"duke\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final File EXPENSES_FILE \u003d new File(DEFAULT_USER_DIRECTORY, \"expenses.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final File BUDGET_FILE \u003d new File(DEFAULT_USER_DIRECTORY, \"budget.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final File EXPENSES_BACKUP_FILE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        new File(DEFAULT_USER_DIRECTORY, \"expenses.txt\" + BACKUP_EXTENSION);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final File BUDGET_BACKUP_FILE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        new File(DEFAULT_USER_DIRECTORY, \"budget.txt\" + BACKUP_EXTENSION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Budget budget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public ExpenseList expenseList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "*/"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs the Duke with the filePath of storage.txt"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * If errors occur during the loading process, an empty taskList will be initialized instead."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param userDirectory The user directory to store all the files associated with Duke."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public Duke(File userDirectory) throws DukeRuntimeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        userDirectory.mkdirs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                expenseList \u003d new ExpenseList(EXPENSES_FILE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                ui.showError(e);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                EXPENSES_BACKUP_FILE.delete();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                EXPENSES_FILE.renameTo(EXPENSES_BACKUP_FILE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                expenseList \u003d new ExpenseList(EXPENSES_FILE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeRuntimeException(\"Could not load expenses from file, nor recover using a new file\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                budget \u003d new Budget(BUDGET_FILE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                ui.showError(e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                BUDGET_BACKUP_FILE.delete();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                BUDGET_FILE.renameTo(BUDGET_BACKUP_FILE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                budget \u003d new Budget(BUDGET_FILE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                throw new DukeRuntimeException(\"Could not load budget from file, nor recover using a new file\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeRuntimeException(\"Could not load budget from file, nor recover using a new file\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        // In case we support changing Duke\u0027s directory in the future"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        this(DEFAULT_USER_DIRECTORY);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Gets the output from Duke\u0027s logic."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param fullCommand String of the full command that the user entered."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return String containing last output message of Duke."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public String getResponse(String fullCommand) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            CommandParams commandParams \u003d new CommandParams(fullCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            Command command \u003d commandParams.getCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            command.execute(commandParams, this);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return ui.getMostRecent();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void println(String s) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        ui.println(s);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 39,
      "ChaojieLiu666": 12,
      "-": 1,
      "lucasfoo": 45
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 8,
      "lucasfoo": 1
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.LogicManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.DukePP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.PlanBot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.ExpenseListStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.ExpenseListStorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.storage.PlanAttributesStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.storage.PlanAttributesStorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.StorageManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.ui.UiManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * Bridge between duke and MainWindow."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Main.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        ExpenseListStorage expenseListStorage \u003d new ExpenseListStorageManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        PlanAttributesStorage planAttributesStorage \u003d new PlanAttributesStorageManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        storage \u003d new StorageManager(expenseListStorage, planAttributesStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        model \u003d new DukePP(storage.loadExpenseList(), storage.loadPlanAttributes());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        int size \u003d storage.loadExpenseList().getExternalList().size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"The size of external list from storage is \" + size);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"Initialized the app\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Starts Duke with MainWindow."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param primaryStage The main GUI of Duke"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        primaryStage.setResizable(false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 7,
      "ChaojieLiu666": 41,
      "lucasfoo": 22
    }
  },
  {
    "path": "src/main/java/duke/commons/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "// borrowed from AddressBook Level_3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String LOG_FILE \u003d \"Duke++.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 117
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * The exception Duke throws upon encountering a problem that can be recovered from."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_LOAD_FILE_FAILED \u003d \"The file at %s could not be loaded. \""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        + \"I will back it up and create a new file.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_SAVE_FILE_FAILED \u003d \"The file at %s could not be saved to. \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        + \"Close other programs that may be accessing it.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_NO_ITEM_AT_INDEX \u003d \"There is no %s numbered %d!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_PARSER_TIME_INVALID \u003d \"%s is not a valid time!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_EXPENSE_AMOUNT_INVALID \u003d \"%s is not a valid amount!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_EXPENSE_TIME_INVALID \u003d \"%s is not a valid time!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_COMMAND_PARAM_UNKNOWN \u003d \"%s is not a valid parameter for this command!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_COMMAND_PARAM_MISSING_VALUE \u003d \"/%s needs a value!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_COMMAND_PARAM_MISSING \u003d \"This command needs /%s to be given!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_COMMAND_PARAM_DUPLICATE \u003d \"/%s cannot be specified twice!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_COMMAND_NAME_UNKNOWN \u003d \"I don\u0027t know what command that is!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_BUDGET_AMOUNT_INVALID \u003d \"%s is not a valid amount!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static final String MESSAGE_EXPENSE_SORT_CRITERIA_INVALID \u003d \"%s is not a valid sort criteria!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static final String MESSAGE_EXPENSE_VIEW_SCOPE_NAME_INVALID \u003d \"%s is not a valid view scope name!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static final String MESSAGE_EXPENSE_VIEW_SCOPE_NUMBER_INVALID \u003d \"%s is not a valid view scope number!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public static final String MESSAGE_DESIRED_PANE_NAME_INVALID \u003d \"%s is not an available pane!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public static final String MESSAGE_INCOME_AMOUNT_INVALID \u003d \"%s is not a valid amount!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public static final String MESSAGE_INCOME_TIME_INVALID \u003d \"%s is not a valid time!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 3,
      "otonashixav": 17,
      "ChaojieLiu666": 3,
      "lucasfoo": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeRuntimeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * The exception Duke throws upon encountering an unexpected error not caused by the user nor"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * by invalid validation of parameters."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class DukeRuntimeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String MESSAGE_FATAL_ERROR \u003d \"A fatal error has occurred. %s.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an {@code DukeRuntimeException} object with exception message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public DukeRuntimeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(String.format(MESSAGE_FATAL_ERROR, message));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an {@code DukeRuntimeException} object with exception message and cause."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public DukeRuntimeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(String.format(MESSAGE_FATAL_ERROR, message), cause);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 23
    }
  },
  {
    "path": "src/main/java/duke/logic/CommandParams.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeRuntimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.command.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * An object containing information about a command\u0027s type and parameters."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class CommandParams {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // Internal map that stores all secondary parameters"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private final Map\u003cString, String\u003e secondaryParams;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // The command type i.e. the first word in the command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private final Command command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // The main parameter value i.e. everything after the first word, before any secondary parameters are declared"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private final String mainParam;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // The regular expression used to identify secondary parameters."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // Currently matches and replaces any number of spaces followed by a forward slash (\\\\s+(\\\\/)),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // which are followed by any word consisting of only lowercase alphabets (not replaced)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // Matches [and replaces]: \"[ /]at\", \"[ /]b\", \"[ /]test\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // Ignores: \"1/1\", \"a / b\", \"a/ \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final Pattern PARAM_INDICATOR_REGEX \u003d Pattern.compile(\"(\\\\s+(\\\\/(?\u003d[a-z]+)))\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // The regular expression used to identify a space."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // Currently matches and replaces any number of spaces."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final Pattern SPACE_REGEX \u003d Pattern.compile(\"(\\\\s+)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final Supplier\u003cStream\u003cCommand\u003e\u003e COMMANDS \u003d () -\u003e Stream.of("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        new AddExpenseCommand(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // new BudgetCommand(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        new DeleteExpenseCommand(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        new ConfirmTentativeCommand(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        new ExitCommand(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        new FilterExpenseCommand(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        new SortExpenseCommand(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        new ViewExpenseCommand(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        new GoToCommand(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        new PlanBotCommand()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Creates a new {@code CommandParams} object using a {@code String} obtained directly from"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * the user. The {@code CommandParams} object cannot have two parameters of the same name, and"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * will throw a {@code DukeException} if the user tries to specify two parameters of the same name."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param fullCommand the full command input by the user, which will be parsed into parameters."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the user specified a parameter twice."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public CommandParams(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        secondaryParams \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        // Split the input into an array of Strings, containing concatenated parameter names and values"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        String[] nameValueStrings \u003d PARAM_INDICATOR_REGEX.split(fullCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        // Get commandType and mainParam first"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        command \u003d parseCommand(nameValueStrings[0]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        mainParam \u003d extractMainParam(nameValueStrings[0], SPACE_REGEX.split(command.getName()).length);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        // Get all the others"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        for (int i \u003d 1; i \u003c nameValueStrings.length; i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            String[] nameValuePair \u003d SPACE_REGEX.split(nameValueStrings[i], 2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            List\u003cString\u003e possibleParamNames \u003d command.getSecondaryParams().keySet().stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .filter(k -\u003e k.startsWith(nameValuePair[0]))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (possibleParamNames.size() !\u003d 1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_UNKNOWN, nameValuePair[0]));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            String verifiedParamName \u003d possibleParamNames.get(0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (secondaryParams.containsKey(verifiedParamName)) { // can\u0027t contain the same key twice"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                throw new DukeException("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    String.format(DukeException.MESSAGE_COMMAND_PARAM_DUPLICATE, verifiedParamName));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (nameValuePair.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                secondaryParams.put(verifiedParamName, nameValuePair[1]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                secondaryParams.put(verifiedParamName, null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the command corresponding to this command params object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the command corresponding to this command params object."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the {@code mainParam} parameter that was input by the user. May be null."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return {@code mainParam}. May be null."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public String getMainParam() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return mainParam;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns whether the command has a {@code mainParam}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the existence of {@code mainParam}, that is, whether it is null or not."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public boolean containsMainParam() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return mainParam !\u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the value of a requested parameter. The parameter\u0027s existence should be checked prior if"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * the parameter is optional, as this method throws {@code DukeException} if the parameter does not"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * exist, or is null."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param paramName the name of the parameter whose value to return."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the value of the requested parameter."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeRuntimeException if the parameter does not exist, or is null."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public String getParam(String paramName) throws DukeException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        String paramValue \u003d secondaryParams.get(paramName);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (paramValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING_VALUE, paramName));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return paramValue;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns true if all parameters specified by {@code paramNames} exist in the {@code CommandParams}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * object, and false otherwise."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Can be used to check for optional flags."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param paramNames the parameter(s) whose existence to check for."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return true if the parameter(s) specified by {@code paramNames} exists, and false otherwise."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public boolean containsParams(String... paramNames) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        for (String paramName : paramNames) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (!secondaryParams.containsKey(paramName)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static String extractMainParam(String string, int numberOfWords) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        String[] words \u003d SPACE_REGEX.split(string, numberOfWords + 1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (words.length \u003c\u003d numberOfWords) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return words[numberOfWords];"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static Command parseCommand(String commandName) throws DukeException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        // Inelegant solution, but I don\u0027t want to have to add a new method to every Command class."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        String[] commandNameWords \u003d Arrays.copyOfRange(commandName.split(\"\\\\s+\"), 0, 2);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (commandNameWords.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            List\u003cCommand\u003e validCommands \u003d COMMANDS.get()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .filter(c -\u003e c.getName().split(\" \").length \u003d\u003d 2)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .filter(c -\u003e (c.getName().split(\" \")[0].startsWith(commandNameWords[0])"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    \u0026\u0026 c.getName().split(\" \")[1].startsWith(commandNameWords[1])))"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (validCommands.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                return validCommands.get(0);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        List\u003cCommand\u003e validCommands \u003d COMMANDS.get()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .filter(c -\u003e c.getName().split(\" \").length \u003d\u003d 1)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .filter(c -\u003e (c.getName().split(\" \")[0].startsWith(commandNameWords[0])))"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (validCommands.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return validCommands.get(0);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        throw new DukeException(DukeException.MESSAGE_COMMAND_NAME_UNKNOWN);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 186,
      "ChaojieLiu666": 7,
      "lucasfoo": 3
    }
  },
  {
    "path": "src/main/java/duke/logic/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public enum DisplayedPane {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        EXPENSE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        TRENDING,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        CURRENT,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        PLAN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // todo: add more custom pages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private String consoleInfo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private DisplayedPane displayedPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult(String consoleInfo, DisplayedPane displayedPane, boolean isExit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.consoleInfo \u003d consoleInfo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.displayedPane \u003d displayedPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult(String consoleInfo, DisplayedPane displayedPane) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this(consoleInfo, displayedPane, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult(String consoleInfo) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this(consoleInfo, DisplayedPane.CURRENT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public String getConsoleInfo() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return consoleInfo;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public DisplayedPane getDisplayedPane() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return displayedPane;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 46,
      "lucasfoo": 2
    }
  },
  {
    "path": "src/main/java/duke/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.PlanBot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * API of the Logic component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    CommandResult execute(String userInput) throws DukeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    ObservableList\u003cExpense\u003e getExternalExpenseList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    ObservableList\u003cPlanBot.PlanDialog\u003e getDialogObservableList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    BigDecimal getTagAmount(String tag);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 3,
      "ChaojieLiu666": 17,
      "lucasfoo": 4
    }
  },
  {
    "path": "src/main/java/duke/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.PlanBotCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Expense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.model.ExpenseList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.PlanBot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult execute(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        CommandParams commandParams \u003d new CommandParams(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Command command \u003d commandParams.getCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        commandResult \u003d command.execute(commandParams, model, storage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExternalExpenseList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return model.getExpenseExternalList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public ObservableList\u003cPlanBot.PlanDialog\u003e getDialogObservableList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return model.getDialogObservableList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BigDecimal getTagAmount(String tag) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return model.getExpenseList().getTagAmount(tag);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 8,
      "ChaojieLiu666": 35,
      "lucasfoo": 7
    }
  },
  {
    "path": "src/main/java/duke/logic/Parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * Parses the command line from user input to tokens and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * packages the tokens to {@code Command} object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm dd/MM/yyyy\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Converts a LocalDateTime to a user readable string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param localDateTime LocalDateTime object that we wish to convert"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return String that is a formatted date and time"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static String formatTime(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return localDateTime.format(dateTimeFormatter);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Converts a {@code String} to a {@code LocalDateTime}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param string {@code String} to convert."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return {@code LocalDateTime} corresponding to the string."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the string cannot be parsed into a {@code LocalDateTime} object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static LocalDateTime parseTime(String string) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return LocalDateTime.parse(string, dateTimeFormatter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_PARSER_TIME_INVALID, string));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 32,
      "ChaojieLiu666": 1,
      "lucasfoo": 8
    }
  },
  {
    "path": "src/main/java/duke/logic/command/AddExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Expense;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * Represents a specified command as AddCommand by extending the {@code Command} class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * Adds various specified type of expensesList into the ExpenseList. e.g event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * Responses with the result."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class AddExpenseCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String name \u003d \"addExpense\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String description \u003d \"Adds a new Expense\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String usage \u003d \"add $cost\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Added the expense!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        DESCRIPTION(\"description\", \"a short description or name for the expense\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        TAG(\"tag\", \"tags that should be added to the expense\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TIME(\"time\", \"the time of the expense\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TENTATIVE(\"tentative\", \"sets the expense to be tentative\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Creates a new command object, with its name, description, usage and secondary parameters."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public AddExpenseCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(name,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            description,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            usage,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense.Builder expenseBuilder \u003d new Expense.Builder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (!commandParams.containsMainParam()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"amount\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        expenseBuilder.setAmount(commandParams.getMainParam());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (commandParams.containsParams(SecondaryParam.DESCRIPTION.name)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            expenseBuilder.setDescription(commandParams.getParam(SecondaryParam.DESCRIPTION.name));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (commandParams.containsParams(SecondaryParam.TAG.name)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            expenseBuilder.invertTags(commandParams.getParam(SecondaryParam.TAG.name));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (commandParams.containsParams(SecondaryParam.TIME.name)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            expenseBuilder.setTime(commandParams.getParam(SecondaryParam.TIME.name));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (commandParams.containsParams(SecondaryParam.TENTATIVE.name)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            expenseBuilder.setTentative(true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        model.addExpense(expenseBuilder.build());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // duke.expenseList.update();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        storage.saveExpenseList(model.getExpenseList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.EXPENSE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (commandParams.containsParams(SecondaryParam.TENTATIVE.name)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            expenseBuilder.setTentative(true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 49,
      "ChaojieLiu666": 17,
      "lucasfoo": 23
    }
  },
  {
    "path": "src/main/java/duke/logic/command/BudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class BudgetCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String name \u003d \"budget\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String description \u003d \"sets a budget\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String usage \u003d \"budget $amount\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TAG(\"tag\", \"tags that we want a budget to be associated with\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public BudgetCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        super(name, description, usage, Stream.of(BudgetCommand.SecondaryParam.values())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Duke duke) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (!commandParams.containsMainParam()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"amount\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            BigDecimal amount \u003d new BigDecimal(commandParams.getMainParam());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            BigDecimal scaledAmount \u003d amount.setScale(2, RoundingMode.HALF_UP);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            if (commandParams.containsParams(SecondaryParam.TAG.name)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                String category \u003d commandParams.getParam(SecondaryParam.TAG.name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                duke.budget.setCategoryBudget(category, amount);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            duke.budget.setMonthlyBudget(scaledAmount);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            duke.budget.save();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_BUDGET_AMOUNT_INVALID,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                commandParams.getMainParam()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 2,
      "ChaojieLiu666": 6,
      "lucasfoo": 50
    }
  },
  {
    "path": "src/main/java/duke/logic/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * Acts as the parent class of all commands in the command package, with fields meant to be"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * populated by the individual commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private String usage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private Map\u003cString, String\u003e secondaryParams;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public String getUsage() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return usage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public Map\u003cString, String\u003e getSecondaryParams() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return secondaryParams;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Creates a new command object, with its name, description, usage and secondary parameters."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param name            the name of the command to create."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param description     the description of the command to create."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param usage           the usage of the command to create."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param secondaryParams the secondary parameters of the command to create."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected Command(String name, String description, String usage, Map\u003cString, String\u003e secondaryParams) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        this.usage \u003d usage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        this.secondaryParams \u003d secondaryParams;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Executes the command with parameters given by the user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param commandParams the parameters given by the user, parsed into a {@code CommandParams} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param model          The Duke object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 38,
      "ChaojieLiu666": 7,
      "lucasfoo": 14
    }
  },
  {
    "path": "src/main/java/duke/logic/command/ConfirmTentativeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.Expense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class ConfirmTentativeCommand extends Command{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Creates a new command object, with its name, description, usage and secondary parameters."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param name            the name of the command to create."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param description     the description of the command to create."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param usage           the usage of the command to create."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param secondaryParams the secondary parameters of the command to create."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String name \u003d \"confirm\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String description \u003d \"confirm a tentative Expense\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String usage \u003d \"confirms $index, if it is a tentative task\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Confirmed the tentative expense!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public ConfirmTentativeCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            int index \u003d Integer.parseInt(commandParams.getMainParam());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Expense expense \u003d model.getExpenseExternalList().get(index - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            if (expense.isTentative()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                model.deleteExpense(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                expense.setTentative(false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                model.addExpense(expense);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                throw new DukeException(index + \" is not a tentative task!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeException(\"The index you\u0027ve entered is not a valid number!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeException(\"The index you\u0027ve entered is out of range!\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.EXPENSE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 64
    }
  },
  {
    "path": "src/main/java/duke/logic/command/DeleteExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * Represents a specified command as DeleteCommand by extending the {@code Command} class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": " * Deletes the task with given index or specific command from the ExpenseList of Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * Responses with the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class DeleteExpenseCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String name \u003d \"deleteExpense\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String description \u003d \"Deletes an Expense\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String usage \u003d \"delete $index\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Deleted the expense!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs a {@code DeleteCommand} object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * given the index of the task to be deleted."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public DeleteExpenseCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Lets the ExpenseList of Duke delete the task with the given index(s), or the entire task list and"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * updates content of storage file according to new ExpenseList."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Responses the result to user by using ui of Duke."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException If the index given is out of range, invalid, or does not exist."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        if (!commandParams.containsMainParam()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"index\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        if (commandParams.getMainParam().equals(\"all\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            model.clearExpense();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        } else if (commandParams.getMainParam().contains(\"-\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            String[] index \u003d commandParams.getMainParam().split(\"-\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            int difference \u003d Integer.parseInt(index[1]) - Integer.parseInt(index[0]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            int counter \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            for (int i \u003d Integer.parseInt(index[0]); counter \u003c\u003d difference; counter++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                model.deleteExpense(i);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            model.deleteExpense(Integer.parseInt(commandParams.getMainParam()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // duke.expenseList.update();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        storage.saveExpenseList(model.getExpenseList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.EXPENSE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 14,
      "otonashixav": 23,
      "ChaojieLiu666": 18,
      "lucasfoo": 20
    }
  },
  {
    "path": "src/main/java/duke/logic/command/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * Represents a specified command as ExitCommand by extending the {@code Command} class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * Terminates the loop in {@code main} method of Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * Responses with the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String name \u003d \"bye\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String description \u003d \"Exits Duke++\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String usage \u003d \"bye\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an {@code ExitCommand} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Shows bye to user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // duke.ui.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Platform.exit();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.CURRENT, true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 27,
      "ChaojieLiu666": 12,
      "lucasfoo": 15
    }
  },
  {
    "path": "src/main/java/duke/logic/command/FilterExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class FilterExpenseCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String name \u003d \"filterExpense\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String description \u003d \"Filter expenses according to a given criteria\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String usage \u003d \"filter $criteria\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Filtered the expense!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an {@code FilterCommand} object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public FilterExpenseCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String mainParam \u003d commandParams.getMainParam();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        model.filterExpense(mainParam);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.EXPENSE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 21,
      "ChaojieLiu666": 26
    }
  },
  {
    "path": "src/main/java/duke/logic/command/GoToCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class GoToCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String name \u003d \"goto\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String description \u003d \"go to a desired pane.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String usage \u003d \"goto $paneName\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public GoToCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super(name,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                description,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                usage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                Stream.of(GoToCommand.SecondaryParam.values())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                        .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String desiredPage \u003d commandParams.getMainParam();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        CommandResult.DisplayedPane displayedPane;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            displayedPane \u003d CommandResult.DisplayedPane.valueOf(desiredPage.toUpperCase());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_DESIRED_PANE_NAME_INVALID, desiredPage));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, displayedPane);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 52
    }
  },
  {
    "path": "src/main/java/duke/logic/command/PlanBotCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.PlanBot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class PlanBotCommand extends  Command{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String name \u003d \"plan\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String description \u003d \"a reply to planBot\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String usage \u003d \"sends the user input to planBot\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public  PlanBotCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        super(name, description, usage, Stream.of(PlanBotCommand.SecondaryParam.values())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        model.processPlanInput(commandParams.getMainParam());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        storage.savePlanAttributes(model.getKnownPlanAttributes());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return new CommandResult(\"PlanBot replied!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 43
    }
  },
  {
    "path": "src/main/java/duke/logic/command/SortExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class SortExpenseCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String name \u003d \"sortExpense\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String description \u003d \"Sort expenses according to a given criteria\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String usage \u003d \"sort $criteria\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Sorted the expense!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an {@code SortCommand} object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public SortExpenseCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String mainParam \u003d commandParams.getMainParam();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        model.sortExpense(mainParam);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.EXPENSE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 22,
      "ChaojieLiu666": 25
    }
  },
  {
    "path": "src/main/java/duke/logic/command/ViewExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class ViewExpenseCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String name \u003d \"viewExpense\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String description \u003d \"Change how expenses are displayed\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String usage \u003d \"view $criteria\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Changed view scope of expenses!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        PREVIOUS(\"previous\", \"the number of pages to move back by\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an {@code ViewCommand} object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ViewExpenseCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String mainParam \u003d commandParams.getMainParam();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (!commandParams.containsParams(\"previous\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            model.viewExpense(mainParam, 0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.EXPENSE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        int previous;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            previous \u003d Integer.parseInt(commandParams.getParam(\"previous\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                DukeException.MESSAGE_EXPENSE_VIEW_SCOPE_NUMBER_INVALID,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                commandParams.getParam(\"previous\")));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        model.viewExpense(mainParam, previous);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.EXPENSE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 25,
      "ChaojieLiu666": 35
    }
  },
  {
    "path": "src/main/java/duke/logic/util/InputHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Enables the user to iterate through previous inputs one by one."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Pressing UP key once shows one input earlier."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Pressing more times shows much earlier inputs until the earliest input is reached."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Pressing DOWN key once traverses back to recent input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Pressing more times shows more recent inputs until the most recent input is reached."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * While the most recent input displayed, pressing DOWN Key will clear the textField."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class InputHistory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final int INITIAL_INDEX \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private List\u003cString\u003e inputHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private int iteratingIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Creates an InputHistory to record user commands sent in textField of mainWindow."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public InputHistory() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        inputHistory \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        iteratingIndex \u003d INITIAL_INDEX;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Adds the input command from textField into InputHistory after it is executed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param newInput The input command to be recorded."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void add(String newInput) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        inputHistory.add(newInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        iteratingIndex \u003d inputHistory.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Tests whether there are still available earlier commands."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return True if earlier commands can be found in the record and false otherwise."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public boolean isAbleToLast() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return iteratingIndex \u003e\u003d 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Tests whether there are still available later commands."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return True if later commands can be found in the record and false otherwise."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public boolean isAbleToNext() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return iteratingIndex \u003c inputHistory.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Gets the one earlier command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return The earlier command as {@code String}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public String getLastInput() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(isAbleToLast()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            iteratingIndex \u003d iteratingIndex - 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return inputHistory.get(iteratingIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Gets the one later command."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return The later command as {@code String}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public String getNextInput() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(isAbleToNext()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            iteratingIndex \u003d iteratingIndex + 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(iteratingIndex \u003d\u003d inputHistory.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "           return EMPTY_STRING;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return inputHistory.get(iteratingIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 85
    }
  },
  {
    "path": "src/main/java/duke/model/Budget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String STORAGE_DELIMITER \u003d \"\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private BigDecimal monthlyBudget;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Maps a category to the budget set for the category."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private HashMap\u003cString, BigDecimal\u003e budgetCategory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Constructor of Budget object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param file the File for budget in Duke"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @throws DukeException if the file cannot be created or read."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @throws IOException   if the file cannot be created or read."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Budget(File file) throws DukeException, IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        load();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Writes to the save file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @throws DukeException if unable to save the file successfully"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void save() throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            try (FileWriter fileWriter \u003d new FileWriter(file)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                fileWriter.write(monthlyBudget.toPlainString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                fileWriter.write(STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                if (!budgetCategory.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    for (String category : budgetCategory.keySet()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        BigDecimal budget \u003d budgetCategory.get(category);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        fileWriter.write(category + \" \" + budget);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        fileWriter.write(STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_SAVE_FILE_FAILED, file.getPath()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * loads from the save file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @throws DukeException if the file cannot be created or read.if the file cannot be created or read."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @throws IOException   if the file cannot be created or read."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void load() throws DukeException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        file.createNewFile();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        monthlyBudget \u003d BigDecimal.ZERO;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        budgetCategory \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try (Scanner fileReader \u003d new Scanner(file).useDelimiter(STORAGE_DELIMITER)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            if (fileReader.hasNext()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                String monthlyBudgetString \u003d fileReader.next();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                monthlyBudget \u003d new BigDecimal(monthlyBudgetString);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            while (fileReader.hasNext()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                String line \u003d fileReader.next();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                String[] separatedLine \u003d line.split(\" \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                String category \u003d separatedLine[0];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                String budgetString \u003d separatedLine[1];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                BigDecimal budget \u003d new BigDecimal(budgetString);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                budget.setScale(2, RoundingMode.HALF_UP);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                budgetCategory.put(category, budget);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_LOAD_FILE_FAILED, file.getPath()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Setter method for monthlyBudget."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param monthlyBudget BigDecimal budget set for each month"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void setMonthlyBudget(BigDecimal monthlyBudget) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.monthlyBudget \u003d monthlyBudget;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Gets a string value for monthlyBudget."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @return a String of the monthly budget"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public String getMonthlyBudgetString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return \"$\" + monthlyBudget.toPlainString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Sets budget to a given category."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param category the String tag specified that we want to set a budget for"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param budget   a BigDecimal amount for the budget we want to set"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void setCategoryBudget(String category, BigDecimal budget) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        budgetCategory.put(category, budget);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Gets the difference between the monthly budget and the total expenses spent."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param total the BigDecimal total expenditure from expenseList"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @return BigDecimal value fo the difference"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public BigDecimal getRemaining(BigDecimal total) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return monthlyBudget.subtract(total);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public HashMap\u003cString, BigDecimal\u003e getBudgetCategory() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return budgetCategory;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 1,
      "ChaojieLiu666": 1,
      "lucasfoo": 133
    }
  },
  {
    "path": "src/main/java/duke/model/DukeItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * The parent class for all {@code DukeItem}s, which are stored in {@code DukeList}s."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "abstract class DukeItem implements Serializable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The string that separates different fields in the storage string."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected static final String STORAGE_FIELD_DELIMITER \u003d \"\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The string that separates the names from the values in the storage string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected static final String STORAGE_NAME_SEPARATOR \u003d \":\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The string that separates tags from each other in the storage string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected static final String STORAGE_TAG_SEPARATOR \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The string that separates tags from each other in an input string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected static final String TAG_SEPARATOR \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The item\u0027s tags."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected final Set\u003cString\u003e tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * A utility method used to extract fields from a storage string into a map, so that they can be"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * easily accessed by the subclasses in order to construct a new builder from the storage string."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param storageString the storage string representing a subclass."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return a map of the storage string\u0027s fields."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected static Map\u003cString, String\u003e storageStringToMap(String storageString) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return Stream.of(storageString.split(STORAGE_FIELD_DELIMITER))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .map(s -\u003e s.split(STORAGE_NAME_SEPARATOR, 2))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            .collect(Collectors.toMap(s -\u003e s[0], s -\u003e s.length \u003e 1 ? s[1] : \"\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Subclassing solution taken from https://stackoverflow.com/a/17165079"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * A builder class for {@code DukeItem}, making it easier to construct items with"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * optional fields."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param \u003cT\u003e the subclassed builder; see the sof link above."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    abstract static class Builder\u003cT extends Builder\u003cT\u003e\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private Set\u003cString\u003e tags \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Constructs an empty item with default values for all fields."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        protected Builder() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Constructs an item from an existing item."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param i the existing item."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        protected Builder(DukeItem i) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            tags \u003d i.tags;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Constructs an item from its storage string. Used to load items from storage."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param storageString the item\u0027s storage string."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        protected Builder(String storageString) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this(storageStringToMap(storageString));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Constructs an item from its mapped storage string. Used internally to load items from storage."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param mappedStorageString a map of the item\u0027s storage string."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        protected Builder(Map\u003cString, String\u003e mappedStorageString) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (mappedStorageString.containsKey(\"tags\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                invertTags(mappedStorageString.get(\"tags\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    .split(STORAGE_TAG_SEPARATOR));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Inverts the presence of certain tags inside {@code tags}, specified by the parameter {@code tagsToInvert}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * This effectively adds tags not present, and removes tags that were present."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param tagsToInvert the tags to invert."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public T invertTags(String[] tagsToInvert) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            for (String tagToInvert : tagsToInvert) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                if (this.tags.contains(tagToInvert)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    this.tags.remove(tagToInvert);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    this.tags.add(tagToInvert);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return getThis();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Inverts the presence of certain tags inside {@code tags}, specified by the parameter {@code tagsToInvert}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * This effectively adds tags not present, and removes tags that were present."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param tagsToInvert the tags to invert as a string."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public T invertTags(String tagsToInvert) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return invertTags(tagsToInvert.split(TAG_SEPARATOR));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Method used to limit the scope of suppression; returns {@code this}, type-cast to {@code T},"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * the subclassed builder."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return {@code this} type-casted to {@code T}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private T getThis() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return (T) this;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an item from the item builder."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param builder the builder containing information for this object."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected DukeItem(Builder\u003c?\u003e builder) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        tags \u003d builder.tags;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Converts the item to a storage string to be saved, then loaded later."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the item\u0027s storage string."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected String toStorageString() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        StringJoiner stringJoiner \u003d new StringJoiner(STORAGE_FIELD_DELIMITER);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        stringJoiner.add(\"tags\" + STORAGE_NAME_SEPARATOR + String.join(\" \", tags));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return stringJoiner.toString();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the set of tags of this item."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the set of tags of this item."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public Set\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Returns a single string containing all of the tags."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return single String of all the tags"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public String getTagsString() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        StringJoiner stringJoiner \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            stringJoiner.add(String.join(\" \", tags));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return stringJoiner.toString();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 1,
      "otonashixav": 166,
      "ChaojieLiu666": 1,
      "lucasfoo": 15
    }
  },
  {
    "path": "src/main/java/duke/model/DukeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.ObjectInput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.ObjectOutput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeRuntimeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * The generic parent list of all lists in Duke, which are responsible for saving their own information"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * and have undo and redo capabilities."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * @param \u003cT\u003e The {@code DukeItem} contained in the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "abstract class DukeList\u003cT extends DukeItem\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static String STORAGE_DELIMITER \u003d \"\\n\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    // private final File file;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private final String itemName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private Stack\u003cbyte[]\u003e undoStates;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private byte[] currentState;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private Stack\u003cbyte[]\u003e redoStates;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected List\u003cT\u003e internalList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    protected ObservableList\u003cT\u003e externalList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Creates a new {@code DukeList}, which saves its data to a file {@code file}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param file     The file to save to."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param itemName the name of the item that populates the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the file cannot be created or read."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public DukeList(File file, String itemName) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        internalList \u003d new ArrayList\u003cT\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        load();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        undoStates \u003d new Stack\u003cbyte[]\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        currentState \u003d toByteArray(internalList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        redoStates \u003d new Stack\u003cbyte[]\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public DukeList(List\u003cT\u003e internalList, String itemName) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.internalList \u003d internalList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        undoStates \u003d new Stack\u003cbyte[]\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        currentState \u003d toByteArray(internalList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        redoStates \u003d new Stack\u003cbyte[]\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Updates, then returns  {@code externalList}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * {@code externalList} should be updated based on filter, sort and view which are implemented"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * by the subclasses."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the up-to-date externalList."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract ObservableList\u003cT\u003e getExternalList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract List\u003cT\u003e getInternalList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract void setSortCriteria(String sortCriteria) throws DukeException;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract void setFilterCriteria(String filterCriteria) throws DukeException;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract void setViewScope(String viewScope, int previous) throws DukeException;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract List\u003cT\u003e sort(List\u003cT\u003e currentList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract List\u003cT\u003e filter(List\u003cT\u003e currentList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract List\u003cT\u003e view(List\u003cT\u003e currentList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Adds an item into {@code internalList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param item the item to add."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void add(T item) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        internalList.add(item);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns an item referenced using its index in {@code externalList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param index the index of the item in @{code externalList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the item."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the index is out of bounds."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public T get(int index) throws DukeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (index \u003c 1 || index \u003e externalList.size()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_NO_ITEM_AT_INDEX, itemName, index));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return externalList.get(index - 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the number of items in {@code internalList}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the number of items in {@code internalList}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public int internalSize() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Removes an item from {@code internalList} using its index in {@code externalList}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param index the index of the item to in {@code externalList}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the index is out of bounds."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void remove(int index) throws DukeException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        internalList.remove(get(index));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Removes all items from {@code internalList}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Calling this method indicates that {@code internalList} or one of its members has changed,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * that the file should be updated, and that the state has progressed such that all {@code redoStates}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * are now invalid and should be discarded."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if saving was unsuccessful."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void update() throws DukeException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        undoStates.push(currentState);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        currentState \u003d toByteArray(internalList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        redoStates.clear();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Saves {@code internalList} into {@code file}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the file could not be saved to."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private void save() throws DukeException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            try (FileWriter fileWriter \u003d new FileWriter(file)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                for (T item : internalList) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    fileWriter.write(item.toStorageString());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    fileWriter.write(STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_SAVE_FILE_FAILED, file.getPath()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Loads the data contained in {@code file} into {@code internalList} and updates {@code externalList},"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * overwriting any existing information."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the file could not be accessed, or if any information in the file is invalid."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void load() throws DukeException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            try (Scanner fileReader \u003d new Scanner(file).useDelimiter(STORAGE_DELIMITER)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                while (fileReader.hasNext()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    internalList.add(itemFromStorageString(fileReader.next()));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (IOException | DukeException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_LOAD_FILE_FAILED, file.getPath()));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns an item from its storage string. Although this method is present in the item builders,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * it is declared here to make it easier to implement (otherwise requires reflection)."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param storageString the storage string of the item."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the item."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the item could not be created from the storage string."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    // protected abstract T itemFromStorageString(String storageString) throws DukeException;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Reverts the state of {@code internalList} some number of times to an earlier state."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param times the number of times to undo."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the number of times actually undone."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the changes could not be saved."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public int undo(int times) throws DukeException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        int actualTimes \u003d 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        for (actualTimes \u003d 0; actualTimes \u003c times \u0026\u0026 !undoStates.isEmpty(); actualTimes++) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            redoStates.push(currentState);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            currentState \u003d undoStates.pop();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        internalList \u003d fromByteArray(currentState);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return actualTimes;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Forwards the state of {@code internalList} some number of times to a later state."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param times the number of times to redo."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the number of times actually undone."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeRuntimeException if the changes could not be saved."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @see #undo"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public int redo(int times) throws DukeException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        int actualTimes \u003d 0;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        for (actualTimes \u003d 0; actualTimes \u003c times \u0026\u0026 !redoStates.isEmpty(); actualTimes++) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            undoStates.push(currentState);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            currentState \u003d redoStates.pop();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        internalList \u003d fromByteArray(currentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return actualTimes;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Taken from https://stackoverflow.com/a/30968827"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Converts the current state of {@code internalList} into a byte array so that it can be restored later."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the byte array of the current {@code internalList}."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private byte[] toByteArray(List\u003cT\u003e list) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try (ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            ObjectOutput out \u003d new ObjectOutputStream(bos)) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            out.writeObject(list);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return bos.toByteArray();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeRuntimeException(\"Failed to create byte array from list.\", e);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Taken from https://stackoverflow.com/a/30968827"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns a list corresponding to a previous state of {@code internalList}."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Casting to {@code List\u003cT\u003e} causes the warning. As the code is self-contained, there is no risk of"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * the object in {@code bytes} not being one of type {@code List\u003cT\u003e}."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param bytes a byte array corresponding to a previous state of {@code internalList}."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the previous state of {@code internalList}."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private List\u003cT\u003e fromByteArray(byte[] bytes) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try (ByteArrayInputStream bis \u003d new ByteArrayInputStream(bytes);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            ObjectInput in \u003d new ObjectInputStream(bis)) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return (List\u003cT\u003e) in.readObject();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeRuntimeException(\"Failed to load list from byte array.\", e);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 7,
      "otonashixav": 238,
      "ChaojieLiu666": 44
    }
  },
  {
    "path": "src/main/java/duke/model/DukePP.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.storage.PlanAttributesStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.beans.value.ObservableStringValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Wraps all memory data of Duke++"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Implements the interface of model module."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class DukePP implements Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DukePP.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private final ExpenseList expenseList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private final PlanBot planBot;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    // todo: add other data inside the DukePP."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ObservableList\u003cExpense\u003e externalExpenseList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Creates a DukePP."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * This constructor is used for loading DukePP from storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    // todo: pass more arguments to constructor as more data are implemented."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public DukePP(ExpenseList expenseList, Map\u003cString, String\u003e planAttributes) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.expenseList \u003d expenseList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.planBot \u003d new PlanBot(planAttributes);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    //******************************** ExpenseList operations"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        expenseList.add(expense);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"Model\u0027s externalList length now is \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                + externalExpenseList.size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void deleteExpense(int index) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        expenseList.remove(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void clearExpense() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        expenseList.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void filterExpense(String filterCriteria) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        expenseList.setFilterCriteria(filterCriteria);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void sortExpense(String sortCriteria) throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        expenseList.setSortCriteria(sortCriteria);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void viewExpense(String viewScope, int previous) throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        expenseList.setViewScope(viewScope, previous);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseExternalList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"Model sends external List length \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                + expenseList.getExternalList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        externalExpenseList \u003d FXCollections.unmodifiableObservableList(expenseList.getExternalList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return externalExpenseList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Returns the expenseList for storage."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ExpenseList getExpenseList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return expenseList;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    //************************************************************"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    // PlanBot operations"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public ObservableList\u003cPlanBot.PlanDialog\u003e getDialogObservableList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return planBot.getDialogObservableList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void processPlanInput(String input) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        planBot.processInput(input);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Map\u003cString, String\u003e getKnownPlanAttributes() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return planBot.getPlanAttributes();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    //******************************** Operations for other data...."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    //******************************** For example, operations of monthly income list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    //    todo: add other data operations"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 77,
      "lucasfoo": 22
    }
  },
  {
    "path": "src/main/java/duke/model/Expense.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.Parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class Expense extends DukeItem {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The amount of money of the expense."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private final BigDecimal amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The description of the expense."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Whether or not the expense is tentative."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private boolean isTentative;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The time of the expense."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private final LocalDateTime time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static class Builder extends DukeItem.Builder\u003cBuilder\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private BigDecimal amount \u003d BigDecimal.ZERO;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String description \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private boolean isTentative \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private LocalDateTime time \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Constructs a builder from an existing expense."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param expense the expense whose values to use as the builder\u0027s default values."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder(Expense expense) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            super(expense);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            amount \u003d expense.amount;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            description \u003d expense.description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            isTentative \u003d expense.isTentative;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            time \u003d expense.time;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * {@inheritDoc}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Builder(String storageString) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this(storageStringToMap(storageString));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * {@inheritDoc}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Builder(Map\u003cString, String\u003e mappedStorageString) throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            super(mappedStorageString);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (mappedStorageString.containsKey(\"amount\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                setAmount(mappedStorageString.get(\"amount\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (mappedStorageString.containsKey(\"description\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                setDescription(mappedStorageString.get(\"description\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (mappedStorageString.containsKey(\"isTentative\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                setTentative(Boolean.parseBoolean(mappedStorageString.get(\"isTentative\")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (mappedStorageString.containsKey(\"time\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                setTime(Parser.parseTime(mappedStorageString.get(\"time\")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Sets the amount of the expense using a string."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param amount the amount of the expense as a string."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @throws DukeException if the value in amount cannot be converted into a {@code BigDecimal},"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *                       or if the {@code BigDecimal} does not represent a valid amount."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         * @see #setAmount(BigDecimal)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder setAmount(String amount) throws DukeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                return setAmount(new BigDecimal(amount));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                throw new DukeException(String.format(DukeException.MESSAGE_EXPENSE_AMOUNT_INVALID, amount));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Sets the amount of the expense."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param amount the amount of the expense."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @throws DukeException if the {@code BigDecimal} does not represent a valid amount."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder setAmount(BigDecimal amount) throws DukeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (amount.scale() \u003e 2) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                throw new DukeException("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    String.format(DukeException.MESSAGE_EXPENSE_AMOUNT_INVALID, amount.toPlainString()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.amount \u003d amount.setScale(2, RoundingMode.UNNECESSARY);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Sets the description of the expense."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param description the description of the expense."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder setDescription(String description) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Sets the tentativeness of the expense."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param tentative whether the expense is tentative."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder setTentative(boolean tentative) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            isTentative \u003d tentative;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Sets the time of the expense using a string."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param time the time of the expense as a string."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @throws DukeException if the time string cannot be parsed into a {@code LocalDateTime} object."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         * @see #setTime(LocalDateTime)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder setTime(String time) throws DukeException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                return setTime(Parser.parseTime(time));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                throw new DukeException(String.format(DukeException.MESSAGE_EXPENSE_TIME_INVALID, time));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Sets the time of the expense."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param time the time of the expense."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder setTime(LocalDateTime time) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Builds the expense."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return the expense."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Expense build() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return new Expense(this);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an expense from the expense builder."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param builder the expense builder."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private Expense(Builder builder) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(builder);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        amount \u003d builder.amount;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        description \u003d builder.description;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        isTentative \u003d builder.isTentative;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        time \u003d builder.time;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the amount of the expense."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return {@link #amount}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public BigDecimal getAmount() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the description of the expense."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return {@link #description}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns whether the expense is tentative."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return {@link #isTentative}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public boolean isTentative() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return isTentative;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void setTentative(boolean val) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        isTentative \u003d val;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the date of the expense."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return {@link #time}."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Return the formatted time."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @return String of time that is formatted"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public String getTimeString() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return Parser.formatTime(time);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Converts the expense into a string."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the expense as a string."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        StringJoiner stringJoiner \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        stringJoiner.add((amount.compareTo(BigDecimal.valueOf(0)) \u003c 0 ? \"-$\" + amount.abs() : \"$\" + amount));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        stringJoiner.add(description);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        stringJoiner.add(Parser.formatTime(time));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (isTentative) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            stringJoiner.add(\"(tentative)\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (!tags.isEmpty()) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            stringJoiner.add(String.join(\" \", tags));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return stringJoiner.toString();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Converts the expense into a storage string."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the expense as a storage string."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        StringJoiner stringJoiner \u003d new StringJoiner(STORAGE_FIELD_DELIMITER);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        stringJoiner.add(super.toStorageString());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        stringJoiner.add(\"amount\" + STORAGE_NAME_SEPARATOR + amount);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        stringJoiner.add(\"description\" + STORAGE_NAME_SEPARATOR + description);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        stringJoiner.add(\"time\" + STORAGE_NAME_SEPARATOR + Parser.formatTime(time));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        stringJoiner.add(\"isTentative\" + STORAGE_NAME_SEPARATOR + isTentative);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return stringJoiner.toString();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 1,
      "otonashixav": 242,
      "ChaojieLiu666": 3,
      "lucasfoo": 26
    }
  },
  {
    "path": "src/main/java/duke/model/ExpenseList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.ObservableArray;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class ExpenseList extends DukeList\u003cExpense\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ExpenseList.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private enum SortCriteria {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        AMOUNT(Comparator.comparing(Expense::getAmount)),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        TIME(Comparator.comparing(Expense::getTime)),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        DESCRIPTION(Comparator.comparing(Expense::getDescription));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private Comparator\u003cExpense\u003e comparator;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        SortCriteria(Comparator\u003cExpense\u003e comparator) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public enum ViewScopeName {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        DAY, WEEK, MONTH, YEAR, ALL;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public class ViewScope {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private int viewScopeNumber;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private ViewScopeName viewScopeName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        public ViewScope(String viewScopeName, int viewScopeNumber) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.viewScopeNumber \u003d viewScopeNumber;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                this.viewScopeName \u003d ViewScopeName.valueOf(viewScopeName.toUpperCase());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                throw new DukeException(String.format("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    DukeException.MESSAGE_EXPENSE_VIEW_SCOPE_NAME_INVALID, viewScopeName));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        public ViewScope(ViewScopeName viewScopeName) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.viewScopeNumber \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.viewScopeName \u003d viewScopeName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private List\u003cExpense\u003e dayView(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return currentList.stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .filter(e -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    LocalDate dateOfExpense \u003d e.getTime().toLocalDate();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    LocalDate current \u003d LocalDate.now().minusDays(viewScopeNumber);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    return dateOfExpense.equals(current);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                })"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private List\u003cExpense\u003e weekView(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return currentList.stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .filter(e -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    int dayOfWeek \u003d e.getTime().getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    LocalDate start \u003d e.getTime().minusDays(dayOfWeek - 1).toLocalDate(); // Sunday of week of expense."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    LocalDate end \u003d e.getTime().plusDays(7 - dayOfWeek).toLocalDate(); // Monday of week of expense."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    LocalDate current \u003d LocalDate.now().minusWeeks(viewScopeNumber);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    return (current.equals(end) || current.equals(start)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        || (current.isAfter(start) \u0026\u0026 current.isBefore(end)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                })"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private List\u003cExpense\u003e monthView(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return currentList.stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .filter(e -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    LocalDate dateOfExpense \u003d e.getTime().toLocalDate();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    LocalDate current \u003d LocalDate.now().minusMonths(viewScopeNumber);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    boolean isSameYear \u003d dateOfExpense.getYear() \u003d\u003d current.getYear();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    boolean isSameMonth \u003d dateOfExpense.getMonth().equals(current.getMonth());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    return (isSameYear \u0026\u0026 isSameMonth);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                })"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private List\u003cExpense\u003e yearView(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return currentList.stream()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .filter(e -\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    LocalDate dateOfExpense \u003d e.getTime().toLocalDate();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    LocalDate current \u003d LocalDate.now().minusYears(viewScopeNumber);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    return dateOfExpense.getYear() \u003d\u003d current.getYear();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                })"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         * Returns a filtered list based on the view scope."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         * @param currentList List of Expenses we want to filter down"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         * @return the filtered List of Expense"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        public List\u003cExpense\u003e view(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            switch (viewScopeName) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case DAY:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                return dayView(currentList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case WEEK:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                return weekView(currentList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case MONTH:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                return monthView(currentList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case YEAR:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                return yearView(currentList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            default: // case ALL:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                return currentList; // the viewScope here is ALL."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        public ViewScopeName getViewScopeName() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return viewScopeName;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private SortCriteria sortCriteria;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private ViewScope viewScope;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private String filterCriteria;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private List\u003cExpense\u003e filteredSortedViewedList;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private ObservableList\u003cExpense\u003e internalFinalList;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private ObservableList\u003cExpense\u003e externalFinalList;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Creates a new expense list using a file for storage."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the file could not be loaded from, or created."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public ExpenseList(File file) throws DukeException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(file, \"expense\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        viewScope \u003d new ViewScope(ViewScopeName.ALL);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        sortCriteria \u003d SortCriteria.TIME;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        externalList \u003d getExternalList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ExpenseList(List\u003cExpense\u003e internalList) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super(internalList, \"expense\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        viewScope \u003d new ViewScope(ViewScopeName.ALL);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        sortCriteria \u003d SortCriteria.TIME;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        externalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        externalFinalList \u003d FXCollections.unmodifiableObservableList(externalList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        updateExternalList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private void updateExternalList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        filteredSortedViewedList \u003d filter(sort(view(internalList)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        internalFinalList \u003d FXCollections.observableArrayList(filteredSortedViewedList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        externalList.setAll(internalFinalList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void add(Expense expense) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super.add(expense);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        updateExternalList();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"externalList lengths \" + externalList.size());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void remove(int index) throws DukeException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super.remove(index);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        updateExternalList();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super.clear();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        updateExternalList();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Updates {@code externalList}, then returns it."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return {@code externalList}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExternalList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return externalFinalList;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public List\u003cExpense\u003e getInternalList() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Sets the sort criteria."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Sort criteria include AMOUNT, TIME, DESCRIPTION."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param sortCriteria The String indicating the criteria for sorting."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @throws DukeException If the format of sort criteria is incorrect."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setSortCriteria(String sortCriteria) throws DukeException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.sortCriteria \u003d SortCriteria.valueOf(sortCriteria.toUpperCase());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_EXPENSE_SORT_CRITERIA_INVALID, sortCriteria));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        updateExternalList();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setFilterCriteria(String filterCriteria) throws DukeException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.filterCriteria \u003d filterCriteria;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        updateExternalList();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public SortCriteria getSortCriteria() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return sortCriteria;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public String getFilterCriteria() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return filterCriteria;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public ViewScope getViewScope() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return viewScope;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Sets the view scope."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * View scopes include DAY, WEEK, MONTH, YEAR, ALL;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param viewScopeName The string indicating the time scope of displayed list."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @throws DukeException If the format of view scope is incorrect."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setViewScope(String viewScopeName, int viewScopeNumber) throws DukeException {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.viewScope \u003d new ViewScope(viewScopeName, viewScopeNumber);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        updateExternalList();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Sorts the given List with the given criteria and returns the sorted List."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param currentList The List going to be sorted."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return The sorted List."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public List\u003cExpense\u003e sort(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        currentList.sort(sortCriteria.comparator);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return currentList;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * To be implemented when tags are specified."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param currentList The List going to be filtered."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return The filtered List."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public List\u003cExpense\u003e filter(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return currentList;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Tailors the given List so that only {@code Expense} within the given time scope are preserved."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * The time scope is composed of time unit(e.g. week) and how many (e.g. weeks) ago."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Returns the tailored List."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param currentList The list going to be modified."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return The tailored List."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public List\u003cExpense\u003e view(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return viewScope.view(currentList);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Returns an item from its storage string. Although this method is present in the item builders,"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * it is declared here to make it easier to implement (otherwise requires reflection)."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param storageString the storage string of the item."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return the item."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @throws DukeException if the item could not be created from the storage string."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static Expense itemFromStorageString(String storageString) throws DukeException {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return new Expense.Builder(storageString).build();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the total amount of money spent."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return BigDecimal of the total amount of money spent."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public BigDecimal getTotalAmount() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                .filter(expense -\u003e !expense.isTentative())"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .map(Expense::getAmount)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .reduce(BigDecimal.ZERO, BigDecimal::add);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * returns the total Amount given a specific tag."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param tag the tag of"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @return A BigDecimal which is the sum of all items of a single tag"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public BigDecimal getTagAmount(String tag) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                .filter(expense -\u003e expense.getTags().contains(tag))"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                .filter(expense -\u003e !expense.isTentative())"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                .map(Expense::getAmount)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                .reduce(BigDecimal.ZERO, BigDecimal::add);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the total amount of money spent on currently visible expenses i.e. those in {@code externalList}."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return BigDecimal of the total amount of money spent on currently visible expenses."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public BigDecimal getTotalExternalAmount() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return externalList.stream()"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            .filter(expense -\u003e !expense.isTentative())"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            .map(Expense::getAmount)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            .reduce(BigDecimal.ZERO, BigDecimal::add);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 40,
      "ChaojieLiu666": 246,
      "lucasfoo": 52
    }
  },
  {
    "path": "src/main/java/duke/model/Income.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.logic.Parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "termehlee"
        },
        "content": "public class Income extends DukeItem {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * The amount of money of the income."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private final BigDecimal amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * The description of the income."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * The time of the income."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private final LocalDateTime time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public static class Builder extends DukeItem.Builder\u003cBuilder\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        private BigDecimal amount \u003d BigDecimal.ZERO;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        private String description \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        private LocalDateTime time \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        public Builder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * Constructs a builder from an existing income."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @param income the income whose values to use as the builder\u0027s default values."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        public Builder(Income income) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            super(income);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            amount \u003d income.amount;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            description \u003d income.description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            time \u003d income.time;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * {@inheritDoc}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        Builder(String storageString) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            this(storageStringToMap(storageString));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * {@inheritDoc}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        Builder(Map\u003cString, String\u003e mappedStorageString) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            super(mappedStorageString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            if (mappedStorageString.containsKey(\"amount\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                setAmount(mappedStorageString.get(\"amount\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            if (mappedStorageString.containsKey(\"description\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                setDescription(mappedStorageString.get(\"description\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            if (mappedStorageString.containsKey(\"time\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                setTime(Parser.parseTime(mappedStorageString.get(\"time\")));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * Sets the amount of the income using a string."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @param amount the amount of the income as a string."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @throws DukeException if the value in amount cannot be converted into a {@code BigDecimal},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         *                       or if the {@code BigDecimal} does not represent a valid amount."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @see #setAmount(BigDecimal)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        public Builder setAmount(String amount) throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                return setAmount(new BigDecimal(amount));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                throw new DukeException(String.format(DukeException.MESSAGE_INCOME_AMOUNT_INVALID, amount));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * Sets the amount of the income."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @param amount the amount of the income."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @throws DukeException if the {@code BigDecimal} does not represent a valid amount."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        public Builder setAmount(BigDecimal amount) throws DukeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            if (amount.scale() \u003e 2) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                throw new DukeException("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                        String.format(DukeException.MESSAGE_INCOME_AMOUNT_INVALID, amount.toPlainString()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            this.amount \u003d amount.setScale(2, RoundingMode.UNNECESSARY);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * Sets the description of the income."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @param description the description of the income."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        public Builder setDescription(String description) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * Sets the time of the income using a string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @param time the time of the income as a string."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @throws DukeException if the time string cannot be parsed into a {@code LocalDateTime} object."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @see #setTime(LocalDateTime)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        public Builder setTime(String time) throws DukeException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                return setTime(Parser.parseTime(time));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                throw new DukeException(String.format(DukeException.MESSAGE_INCOME_TIME_INVALID, time));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * Sets the time of the income."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @param time the time of the income."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        public Builder setTime(LocalDateTime time) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * Builds the income."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @return the income."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        public Income build() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            return new Income(this);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Constructs an income from the income builder."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @param builder the income builder."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private Income(Builder builder) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        super(builder);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        amount \u003d builder.amount;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        description \u003d builder.description;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        time \u003d builder.time;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Returns the amount of the income."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return {@link #amount}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BigDecimal getAmount() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Returns the description of the income."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return {@link #description}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Returns the date of the income."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return {@link #time}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Return the formatted time."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return String of time that is formatted"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public String getTimeString() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return Parser.formatTime(time);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Converts the income into a string."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return the income as a string."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        StringJoiner stringJoiner \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        stringJoiner.add((amount.compareTo(BigDecimal.valueOf(0)) \u003c 0 ? \"-$\" + amount.abs() : \"$\" + amount));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        stringJoiner.add(description);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        stringJoiner.add(Parser.formatTime(time));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return stringJoiner.toString();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Converts the income into a storage string."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return the income as a storage string."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        StringJoiner stringJoiner \u003d new StringJoiner(STORAGE_FIELD_DELIMITER);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        stringJoiner.add(super.toStorageString());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        stringJoiner.add(\"amount\" + STORAGE_NAME_SEPARATOR + amount);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        stringJoiner.add(\"description\" + STORAGE_NAME_SEPARATOR + description);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        stringJoiner.add(\"time\" + STORAGE_NAME_SEPARATOR + Parser.formatTime(time));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return stringJoiner.toString();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "termehlee"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "termehlee": 233
    }
  },
  {
    "path": "src/main/java/duke/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.beans.value.ObservableStringValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    //******************************** ExpenseList operations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void addExpense(Expense expense);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void deleteExpense(int index) throws DukeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void clearExpense();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void filterExpense(String filterCriteria) throws DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void sortExpense(String sortCriteria) throws DukeException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void viewExpense(String viewScope, int previous) throws DukeException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseExternalList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ExpenseList getExpenseList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    //******************************** Operations for other data...."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    //******************************** For example, operations of monthly income list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    // todo: add other data operations"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    //PlanBot"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public ObservableList\u003cPlanBot.PlanDialog\u003e getDialogObservableList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void processPlanInput(String input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Map\u003cString, String\u003e getKnownPlanAttributes();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 33,
      "lucasfoo": 9
    }
  },
  {
    "path": "src/main/java/duke/model/PlanBot.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.storage.PlanAttributesStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class PlanBot {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private List\u003cPlanDialog\u003e dialogList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private ObservableList\u003cPlanDialog\u003e dialogObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private PlanQuestionBank planQuestionBank;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private Map\u003cString,String\u003e planAttributes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public PlanBot(Map\u003cString,String\u003e planAttributes) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.dialogList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        dialogObservableList \u003d FXCollections.observableList(dialogList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.planAttributes \u003d planAttributes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if(!planAttributes.isEmpty()){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            StringBuilder knownAttributes \u003d new StringBuilder(\"Here\u0027s what I know about you: \\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            for(String key : planAttributes.keySet()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                knownAttributes.append(key + \" : \" + planAttributes.get(key) + \"\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            PlanDialog knownDialog \u003d new PlanDialog(knownAttributes.toString(), Agent.BOT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            dialogObservableList.add(knownDialog);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        planQuestionBank \u003d new PlanQuestionBank();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        PlanDialog initial \u003d new PlanDialog(planQuestionBank.getCurrentQuestion(), Agent.BOT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        dialogObservableList.add(initial);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public enum Agent{"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        USER,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        BOT"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public ObservableList\u003cPlanDialog\u003e getDialogObservableList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return dialogObservableList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void processInput(String input) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        dialogObservableList.add(new PlanDialog(input, Agent.USER));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        PlanQuestionBank.Reply reply \u003d planQuestionBank.getReply(input, planAttributes);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        String replyString \u003d reply.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        planAttributes \u003d reply.getAttributes();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        dialogObservableList.add(new PlanDialog(replyString, Agent.BOT));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public class PlanDialog {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        public String text;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        public Agent agent;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        public PlanDialog(String text, Agent agent) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.agent \u003d agent;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.text \u003d text;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Map\u003cString, String\u003e getPlanAttributes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return planAttributes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 70
    }
  },
  {
    "path": "src/main/java/duke/model/PlanQuestionBank.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class PlanQuestionBank {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private int curr;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private List\u003cString\u003e questionList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private List\u003cString\u003e expectedAnswerType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public PlanQuestionBank(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        questionList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        expectedAnswerType \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        questionList.add(\"Are you a student from NUS?\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        expectedAnswerType.add(\"bool\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        curr \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Reply getReply(String input, Map\u003cString,String\u003e attributes){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if(expectedAnswerType.get(curr) \u003d\u003d \"bool\"){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                parseBool(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                attributes.put(\"NUS_STUDENT\", \"TRUE\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                return new Reply(\"Noted\", attributes);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                return new Reply(e.getMessage(), attributes);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return new Reply(\"Something strange happened, please try again\", attributes);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public String getCurrentQuestion() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return questionList.get(curr);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private boolean parseBool(String input) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        input \u003d input.toLowerCase();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        case \"yes\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        case \"y\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        case \"no\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        case \"n\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeException(\"Your answer should be a yes/no!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private BigDecimal parseMoney(String input) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            double moneyDouble \u003d Double.parseDouble(input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            BigDecimal money \u003d BigDecimal.valueOf(moneyDouble);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return money.setScale(2, RoundingMode.HALF_EVEN);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public class Reply {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        private String text;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        private Map\u003cString,String\u003e attributes;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        public Reply(String text, Map\u003cString, String\u003e attributes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.text \u003d text;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.attributes \u003d attributes;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        public String getText() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return text;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        public Map\u003cString, String\u003e getAttributes() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return attributes;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 87
    }
  },
  {
    "path": "src/main/java/duke/storage/ExpenseListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.ExpenseList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public interface ExpenseListStorage {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void saveExpenseList(ExpenseList expenseList) throws DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ExpenseList loadExpenseList() throws DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 11
    }
  },
  {
    "path": "src/main/java/duke/storage/ExpenseListStorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.ExpenseList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class ExpenseListStorageManager implements ExpenseListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final File DEFAULT_USER_DIRECTORY \u003d new File(\"data\" + File.separator + \"duke\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final File EXPENSES_FILE \u003d new File(DEFAULT_USER_DIRECTORY, \"expenses.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static String STORAGE_DELIMITER \u003d \"\\n\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ExpenseListStorageManager() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        DEFAULT_USER_DIRECTORY.mkdirs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void saveExpenseList(ExpenseList expenseList) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            EXPENSES_FILE.createNewFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            try (FileWriter fileWriter \u003d new FileWriter(EXPENSES_FILE)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                for (Expense expense : expenseList.getInternalList()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    fileWriter.write(expense.toStorageString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    fileWriter.write(STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_SAVE_FILE_FAILED, EXPENSES_FILE.getPath()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ExpenseList loadExpenseList() throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        List\u003cExpense\u003e internalList \u003d new ArrayList\u003cExpense\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            EXPENSES_FILE.createNewFile();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            try (Scanner fileReader \u003d new Scanner(EXPENSES_FILE).useDelimiter(STORAGE_DELIMITER)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                while (fileReader.hasNext()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    internalList.add(ExpenseList.itemFromStorageString(fileReader.next()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (IOException | DukeException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_LOAD_FILE_FAILED, EXPENSES_FILE.getPath()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return new ExpenseList(internalList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 56
    }
  },
  {
    "path": "src/main/java/duke/storage/PlanAttributesStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public interface PlanAttributesStorage {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void savePlanAttributes(Map\u003cString, String\u003e attributes) throws DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Map\u003cString, String\u003e loadAttributes();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 12
    }
  },
  {
    "path": "src/main/java/duke/storage/PlanAttributesStorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class PlanAttributesStorageManager implements PlanAttributesStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final File DEFAULT_USER_DIRECTORY \u003d new File(\"data\" + File.separator + \"duke\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final File PLAN_ATTRIBUTES_FILE \u003d new File(DEFAULT_USER_DIRECTORY, \"planAttributes.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static String STORAGE_DELIMITER \u003d \"\\n\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public PlanAttributesStorageManager() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        DEFAULT_USER_DIRECTORY.mkdir();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void savePlanAttributes(Map\u003cString, String\u003e attributes) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            PLAN_ATTRIBUTES_FILE.createNewFile();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            try (FileWriter fileWriter \u003d new FileWriter(PLAN_ATTRIBUTES_FILE)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                for (String key : attributes.keySet()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    String value \u003d attributes.get(key);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    fileWriter.write(key + \" \" + value);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    fileWriter.write(STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_SAVE_FILE_FAILED, PLAN_ATTRIBUTES_FILE.getPath()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Map\u003cString, String\u003e loadAttributes() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        Map\u003cString, String\u003e attributes \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            PLAN_ATTRIBUTES_FILE.createNewFile();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            try (Scanner scanner \u003d new Scanner(PLAN_ATTRIBUTES_FILE).useDelimiter(STORAGE_DELIMITER)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    String keyValue \u003d scanner.next();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    String keyValueArr[] \u003d keyValue.split(\" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    attributes.put(keyValueArr[0], keyValueArr[1]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return attributes;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 59
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.ExpenseList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public interface Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    void saveExpenseList(ExpenseList expenseList) throws DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    ExpenseList loadExpenseList() throws DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    void savePlanAttributes(Map\u003cString,String\u003e attributes) throws DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    Map\u003cString, String\u003e loadPlanAttributes();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    // todo: add other interface methods for other lists."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 16,
      "lucasfoo": 6
    }
  },
  {
    "path": "src/main/java/duke/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.ExpenseList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private ExpenseListStorage expenseListStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private PlanAttributesStorage planAttributesStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public StorageManager(ExpenseListStorage expenseListStorage, PlanAttributesStorage planAttributesStorage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.expenseListStorage \u003d expenseListStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.planAttributesStorage \u003d planAttributesStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void saveExpenseList(ExpenseList expenseList) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        expenseListStorage.saveExpenseList(expenseList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ExpenseList loadExpenseList() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return expenseListStorage.loadExpenseList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void savePlanAttributes(Map\u003cString, String\u003e attributes) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        planAttributesStorage.savePlanAttributes(attributes);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Map\u003cString, String\u003e loadPlanAttributes() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return planAttributesStorage.loadAttributes();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 22,
      "lucasfoo": 17
    }
  },
  {
    "path": "src/main/java/duke/ui/BudgetGUI.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Expense;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.TableCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.TableRow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * Controller for MainWindow.fxml"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class BudgetGUI /*extends UiPart\u003cBorderPane\u003e*/ /*{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Label totalSpentLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public BorderPane main;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public TextField inputField;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Label lastCommandLabel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Label monthlyBudgetLabel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    Label remainingBudgetLabel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    TableView expenseTableView;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    ListView\u003cString\u003e budgetListView \u003d new ListView\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    Label dayLabel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    Label weekLabel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    Label monthLabel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    Label yearLabel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    Label allLabel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    Label filterLabel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Detects enter key and passes command entered in the TextField into Duke, and update the GUI accordingly."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void onEnter() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        String userInput \u003d inputField.getText();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        String response \u003d duke.getResponse(userInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        lastCommandLabel.setText(response);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        inputField.clear();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        updateTotalSpentLabel();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        updateTableListView();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateMonthlyBudget();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateRemainingBudget();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateBudgetListView();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateViewScopeLabel();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Sets the duke object in MainWindow."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param d \u003ccode\u003eDuke\u003c/code\u003eDuke object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.duke \u003d d;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        updateTotalSpentLabel();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateMonthlyBudget();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateRemainingBudget();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateTableListView();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateBudgetListView();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateViewScopeLabel();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateFilterLabel();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public Duke returnDuke() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return this.duke;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Populate the ListView with a list of expenses."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private void updateTableListView() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        expenseTableView.getItems().clear();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        expenseTableView.setPlaceholder(new Label(\"No expenses to display!\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TableColumn\u003cExpense, Void\u003e indexColumn \u003d new TableColumn\u003c\u003e(\"No.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        indexColumn.setCellFactory(col -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            TableCell\u003cExpense, Void\u003e cell \u003d new TableCell\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            cell.textProperty().bind(Bindings.createStringBinding(() -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                if (cell.isEmpty()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    return null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    return Integer.toString(cell.getIndex() + 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }, cell.emptyProperty(), cell.indexProperty()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return cell;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        indexColumn.setSortable(false);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TableColumn\u003cString, Expense\u003e timeColumn \u003d new TableColumn\u003c\u003e(\"Time\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        timeColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"timeString\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        timeColumn.setSortable(false);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TableColumn\u003cString, Expense\u003e amountColumn \u003d new TableColumn\u003c\u003e(\"Amount\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        amountColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"amount\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        amountColumn.setSortable(false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TableColumn\u003cExpense, String\u003e descriptionColumn \u003d new TableColumn\u003c\u003e(\"Description\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        descriptionColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"description\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        descriptionColumn.setSortable(false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TableColumn\u003cExpense, String\u003e tagColumn \u003d new TableColumn\u003c\u003e(\"Tags\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        tagColumn.setSortable(false);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        tagColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"tagsString\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        tagColumn.setSortable(false);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        expenseTableView.setRowFactory(new Callback\u003cTableView\u003cExpense\u003e, TableRow\u003cExpense\u003e\u003e() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            public TableRow\u003cExpense\u003e call(TableView\u003cExpense\u003e tableView) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                final TableRow\u003cExpense\u003e row \u003d new TableRow\u003cExpense\u003e() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    protected void updateItem(Expense expense, boolean empty) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        super.updateItem(expense, empty);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        if (expense !\u003d null \u0026\u0026 expense.isTentative()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            setStyle(\"-fx-text-background-color: grey;\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            setStyle(\"-fx-text-background-color: black;\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                };"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                return row;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        expenseTableView.getColumns().setAll("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                indexColumn,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                timeColumn,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                amountColumn,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                descriptionColumn,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                tagColumn"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        for (Expense expense : duke.expenseList.getExternalList()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            expenseTableView.getItems().add(expense);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Updates the total amount label."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void updateTotalSpentLabel() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        totalSpentLabel.setText(\"Total: \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                + ((duke.expenseList.getTotalExternalAmount().compareTo(BigDecimal.valueOf(0)) \u003c 0)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                ? \"-$\" + duke.expenseList.getTotalExternalAmount().abs() : \"$\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                + duke.expenseList.getTotalExternalAmount()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Updates the monthly budget label."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void updateMonthlyBudget() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        monthlyBudgetLabel.setText(\"Budget: \" + duke.budget.getMonthlyBudgetString());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Updates the remaining budget label."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void updateRemainingBudget() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        remainingBudgetLabel.setText(\"Remaining: \""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                + ((duke.budget.getRemaining(duke.expenseList.getTotalAmount()).compareTo(BigDecimal.valueOf(0)) \u003c 0)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                ? \"-$\" + duke.budget.getRemaining(duke.expenseList.getTotalAmount()).abs()"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                : \"$\" + duke.budget.getRemaining(duke.expenseList.getTotalAmount())));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Updates the Budget List of all categories."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void updateBudgetListView() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        budgetListView.getItems().clear();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        budgetListView.getItems().add(\"Tag: Spent/Budget\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        for (String tag : duke.budget.getBudgetCategory().keySet()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            budgetListView.getItems().add(tag"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    + \": $\" + duke.expenseList.getTagAmount(tag)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    + \" / $\" + duke.budget.getBudgetCategory().get(tag));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Updates View Scope Labels."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void updateViewScopeLabel() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        switch (duke.expenseList.getViewScope().getViewScopeName()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        case DAY:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            dayLabel.setTextFill(Color.BLACK);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            weekLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            monthLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            yearLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            allLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        case WEEK:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            weekLabel.setTextFill(Color.BLACK);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            dayLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            monthLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            yearLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            allLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        case MONTH:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            monthLabel.setTextFill(Color.BLACK);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            dayLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            weekLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            yearLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            allLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        case YEAR:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            yearLabel.setTextFill(Color.BLACK);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            dayLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            weekLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            monthLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            yearLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            dayLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            weekLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            monthLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            yearLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            allLabel.setTextFill(Color.BLACK);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Updates Filter labels."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void updateFilterLabel() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        filterLabel.setText(duke.expenseList.getFilterCriteria());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "termehlee": 3,
      "otonashixav": 5,
      "ChaojieLiu666": 19,
      "lucasfoo": 236
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.PlanBot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class DialogBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String FXML_FILE_NAME \u003d \"DialogBox.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public final PlanBot.PlanDialog dialog;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public DialogBox(PlanBot.PlanDialog dialog) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        super(FXML_FILE_NAME, null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.dialog \u003d dialog;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        text.setText(dialog.text);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if(dialog.agent \u003d\u003d PlanBot.Agent.BOT) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            text.setAlignment(Pos.BOTTOM_RIGHT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            text.setAlignment(Pos.BOTTOM_LEFT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 31
    }
  },
  {
    "path": "src/main/java/duke/ui/ExpensePane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Expense;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.TableCell;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.TableRow;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class ExpensePane extends UiPart\u003cBorderPane\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ExpensePane.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String FXML_FILE_NAME \u003d \"ExpensePane1.fxml\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private Pane paneView;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private PieChart pieChartSample;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    TableView expenseTableView;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public Set\u003cString\u003e tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public ExpensePane(ObservableList\u003cExpense\u003e expenseList, Logic logic) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super(FXML_FILE_NAME, null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"expenseList has length \" + expenseList.size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        expenseTableView.getItems().clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        expenseTableView.setPlaceholder(new Label(\"No expenses to display!\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TableColumn\u003cExpense, Void\u003e indexColumn \u003d new TableColumn\u003c\u003e(\"No.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        indexColumn.setCellFactory(col -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            TableCell\u003cExpense, Void\u003e cell \u003d new TableCell\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            cell.textProperty().bind(Bindings.createStringBinding(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                if (cell.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    return null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    return Integer.toString(cell.getIndex() + 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }, cell.emptyProperty(), cell.indexProperty()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return cell;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        indexColumn.setSortable(false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TableColumn\u003cString, Expense\u003e timeColumn \u003d new TableColumn\u003c\u003e(\"Time\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        timeColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"timeString\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        timeColumn.setSortable(false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TableColumn\u003cString, Expense\u003e amountColumn \u003d new TableColumn\u003c\u003e(\"Amount\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        amountColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"amount\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        amountColumn.setSortable(false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TableColumn\u003cExpense, String\u003e descriptionColumn \u003d new TableColumn\u003c\u003e(\"Description\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        descriptionColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"description\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        descriptionColumn.setSortable(false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TableColumn\u003cExpense, String\u003e tagColumn \u003d new TableColumn\u003c\u003e(\"Tags\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        tagColumn.setSortable(false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        tagColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"tagsString\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        tagColumn.setSortable(false);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        expenseTableView.setRowFactory(new Callback\u003cTableView\u003cExpense\u003e, TableRow\u003cExpense\u003e\u003e() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            public TableRow\u003cExpense\u003e call(TableView\u003cExpense\u003e tableView) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                final TableRow\u003cExpense\u003e row \u003d new TableRow\u003cExpense\u003e() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    protected void updateItem(Expense expense, boolean empty) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                        super.updateItem(expense, empty);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        if (expense !\u003d null \u0026\u0026 expense.isTentative()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            setStyle(\"-fx-text-background-color: grey;\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        expenseListView.setItems(expenseList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        logger.info(\"Items are set.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        expenseListView.setCellFactory(listview -\u003e new ExpenseListViewCell());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        logger.info(\"cell factory is set.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        PieChart pieChartSample \u003d new PieChart();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        pieChartSample.setData(getData());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        paneView.getChildren().clear();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        pieChartSample.setTitle(\"Expenditure\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        paneView.getChildren().add(pieChartSample);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        logger.info(\"Pie chart is set.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            setStyle(\"-fx-text-background-color: black;\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                };"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                return row;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        expenseTableView.getColumns().setAll("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                indexColumn,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                timeColumn,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                amountColumn,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                descriptionColumn,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                tagColumn"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        );"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        logger.info(\"Items are set.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        for (Expense expense : expenseList) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            expenseTableView.getItems().add(expense);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        logger.info(\"cell factory is set.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private ObservableList\u003cPieChart.Data\u003e getData() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        getTags();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e dataList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        for (Object tag : this.tags) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            dataList.add(new PieChart.Data((String) tag, logic.getTagAmount((String) tag).doubleValue()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        //final PieChart chart \u003d new PieChart(dataList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        //chart.setTitle(\"Expenditure\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return dataList;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private void getTags() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        for (Expense expense : logic.getExternalExpenseList()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            String[] tagsString \u003d expense.getTagsString().split(\" \");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            if (tagsString.length \u003e 0) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                tags.addAll(Arrays.asList(tagsString));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 54,
      "ChaojieLiu666": 28,
      "lucasfoo": 63
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import com.jfoenix.controls.JFXButton;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.util.InputHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "termehlee"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String FXML_FILE_NAME \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private ExpensePane expensePane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private TrendingPane trendingPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    // todo: create controller for trendingPage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private InputHistory inputHistory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private PlanPane planPane;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private CommandResult.DisplayedPane displayedPane;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /* todo: create controller for trendingPage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private TrendingPage trendingPage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    // The area that can be switched."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private Label boardTitle;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private AnchorPane commonBoard;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    // TextInput and TextOutput"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private Label console;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    // Duke++ Menu"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private JFXButton expenseButton;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private JFXButton incomeButton;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private JFXButton loanButton;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private JFXButton trendingButton;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private JFXButton planButton;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    // Utilities Menu"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private JFXButton tagsButton;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        super(FXML_FILE_NAME, primaryStage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        inputHistory \u003d new InputHistory();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void fillInnerPart() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        expensePane \u003d new ExpensePane(logic.getExternalExpenseList(), logic);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        logger.info(\"The filled externalList length \" + logic.getExternalExpenseList().size());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        trendingPane \u003d new TrendingPane();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        logger.info(\"trendingPane is constructed.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        planPane \u003d new PlanPane(logic.getDialogObservableList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        logger.info(\"planPane is constructed.\" + logic.getDialogObservableList().size());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        // todo: add more data parts to be added."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        String inputString \u003d userInput.getText();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            CommandResult commandResult;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            if (displayedPane \u003d\u003d CommandResult.DisplayedPane.PLAN \u0026\u0026 !inputString.contains(\"goto\") \u0026\u0026 !inputString.contains(\"bye\")){"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                commandResult \u003d logic.execute(\"plan \" + inputString);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                commandResult \u003d logic.execute(inputString);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            console.setText(commandResult.getConsoleInfo());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            fillInnerPart();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            showPane(commandResult);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            if (commandResult.isExit()) Platform.exit();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            console.setText(e.getMessage());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        inputHistory.add(inputString);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // logger.info(\"New Input has been stored.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private void handleKeyPressed(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"Key Press detected!\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case UP:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                if(inputHistory.isAbleToLast()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    userInput.setText(inputHistory.getLastInput());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case DOWN:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                if(inputHistory.isAbleToNext()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    userInput.setText(inputHistory.getNextInput());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private void showPane(CommandResult commandResult) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        switch (commandResult.getDisplayedPane()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        case EXPENSE:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            showExpensePane();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            displayedPane \u003d CommandResult.DisplayedPane.EXPENSE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        case TRENDING:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            showTrendingPane();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            displayedPane \u003d CommandResult.DisplayedPane.TRENDING;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        case PLAN:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            showPlanPane();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            displayedPane \u003d CommandResult.DisplayedPane.PLAN;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private void showExpensePane() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        commonBoard.getChildren().clear();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        commonBoard.getChildren().add(expensePane.getRoot());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        //commonBoard.getChildren().add(pieChartSample.getRoot());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        expenseButton.setButtonType(JFXButton.ButtonType.RAISED);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        incomeButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        loanButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        trendingButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        tagsButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        planButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        boardTitle.setText(\"Expenses\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private void showTrendingPane() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        commonBoard.getChildren().clear();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        commonBoard.getChildren().add(trendingPane.getRoot());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        expenseButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        incomeButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        loanButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        trendingButton.setButtonType(JFXButton.ButtonType.RAISED);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        tagsButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        planButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        boardTitle.setText(\"Trending\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private void showPlanPane() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        commonBoard.getChildren().clear();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        commonBoard.getChildren().add(planPane.getRoot());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        expenseButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        incomeButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        loanButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        trendingButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        tagsButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        planButton.setButtonType(JFXButton.ButtonType.RAISED);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        boardTitle.setText(\"Plan\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "termehlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 134,
      "ChaojieLiu666": 41,
      "lucasfoo": 39
    }
  },
  {
    "path": "src/main/java/duke/ui/PieChartSample.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.model.Expense;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.model.ExpenseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "termehlee"
        },
        "content": "public class PieChartSample extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(PieChartSample.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String FXML_FILE_NAME \u003d \"PieChart.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public Logic logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public Set\u003cString\u003e tags;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private PieChart pieChart;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public PieChartSample(Logic logic) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        super(FXML_FILE_NAME, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        this.pieChart \u003d new PieChart();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        pieChart.setData(getData());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        logger.info(\"Pie chart is set.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private ObservableList\u003cPieChart.Data\u003e getData() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        getTags();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e dataList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        for (Object tag : this.tags) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            dataList.add(new PieChart.Data((String) tag, logic.getTagAmount((String) tag).doubleValue()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        //final PieChart chart \u003d new PieChart(dataList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        //chart.setTitle(\"Expenditure\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return dataList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private void getTags() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        for (Expense expense : logic.getExternalExpenseList()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            String[] tagsString \u003d expense.getTagsString().split(\" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            if (tagsString.length \u003e 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                tags.addAll(Arrays.asList(tagsString));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "termehlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 57
    }
  },
  {
    "path": "src/main/java/duke/ui/PlanPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.PlanBot;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class PlanPane extends UiPart\u003cBorderPane\u003e{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(PlanPane.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String FXML_FILE_NAME \u003d \"PlanPane.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private ListView\u003cPlanBot.PlanDialog\u003e dialogListView ;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public PlanPane(ObservableList\u003cPlanBot.PlanDialog\u003e dialogObservableList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        super(FXML_FILE_NAME, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        dialogListView.setItems(dialogObservableList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        logger.info(\"DialogList set\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        dialogListView.setCellFactory(planDialogListView -\u003e new PlanDialogListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        addAutoScroll(dialogListView);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code PlanBot.PlanDialog} using a {@code PlanBot.PlanDialog}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    class PlanDialogListViewCell extends ListCell\u003cPlanBot.PlanDialog\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        protected void updateItem(PlanBot.PlanDialog dialog, boolean empty) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            super.updateItem(dialog, empty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            if (empty || dialog \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                setGraphic(new DialogBox(dialog).getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Code from https://stackoverflow.com/questions/14779135/javafx-tableview-auto-scroll-to-the-last"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param view the listView we want to auto scroll"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param \u003cS\u003e the object in the list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public static \u003cS\u003e void addAutoScroll(final ListView\u003cS\u003e view) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (view \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        view.getItems().addListener((ListChangeListener\u003cS\u003e) (c -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            c.next();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            final int size \u003d view.getItems().size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            if (size \u003e 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                view.scrollTo(size - 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 74
    }
  },
  {
    "path": "src/main/java/duke/ui/TextUi.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.ExpenseList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the User Interface of Duke, and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * manages both input and output operations."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class TextUi {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner dukeIn;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private String mostRecent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an Ui object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public TextUi() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        dukeIn \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows welcome message to the user when Duke starts."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"I am Duke. What can I do for you?\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reads one line of user\u0027s commands."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return User\u0027s command in {@code String} type."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return dukeIn.nextLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Replaces the {@code System.out.println} method."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param s The string to be printed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void println(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        mostRecent \u003d s;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints the message of the exception."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param e the {@code DukeException} whose message will be printed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showError(DukeException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        mostRecent \u003d e.getMessage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Prints the {@code ExpenseList} given."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param expenseList {@code ExpenseList} that we want to be printed"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void printExpenseList(ExpenseList expenseList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (expenseList.internalSize() \u003e 0) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            int count \u003d 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            for (Expense expense : expenseList.getExternalList()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                println(expense.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public String getMostRecent() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return mostRecent;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 38,
      "-": 58
    }
  },
  {
    "path": "src/main/java/duke/ui/TrendingPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class TrendingPane extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String FXML_FILE_NAME \u003d \"TrendingPane.fxml\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public TrendingPane() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super(FXML_FILE_NAME, null);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 13
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void start(Stage primaryStage);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 1,
      "ChaojieLiu666": 3,
      "lucasfoo": 4
    }
  },
  {
    "path": "src/main/java/duke/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.Logic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        mainWindow.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        mainWindow.fillInnerPart(); // ***"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"MainWindow are showed and filled in.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 29,
      "lucasfoo": 1
    }
  },
  {
    "path": "src/main/java/duke/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        URL fxmlFileUrl \u003d Main.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 68,
      "lucasfoo": 1
    }
  },
  {
    "path": "src/main/java/duke/utils/DateCompare.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DateCompare {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if day2 lies inside of day1."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param day1 the whole day from 00:00 to 23:59:59"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param day2 the day we want to check if it is in day 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if day 2 is in day 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isSameDay(Date day1, Date day2) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        calendar.setTime(day1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        calendar.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        calendar.add(Calendar.SECOND, -1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Date day1End \u003d calendar.getTime();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return day2.after(day1) \u0026\u0026 day2.before(day1End);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if 2 date ranges, A and B are overlapping each other."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDateA start of date A"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endDateA   end of date A"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDateB start of date B"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endDateB   end of date B"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if dates are overlapping else return false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isOverlapping(Date startDateA, Date endDateA, Date startDateB, Date endDateB) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (startDateA.after(startDateB) \u0026\u0026 startDateA.before(endDateB)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (endDateA.after(startDateB) \u0026\u0026 endDateA.before(endDateB)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (startDateA.after(startDateB) \u0026\u0026 endDateA.before(endDateB)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (startDateB.after(startDateA) \u0026\u0026 startDateB.before(endDateA)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (endDateB.after(startDateA) \u0026\u0026 endDateB.before(endDateB)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (startDateB.after(startDateA) \u0026\u0026 endDateB.before(startDateB)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return startDateA.equals(startDateB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || endDateA.equals(endDateB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || startDateA.equals(endDateB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                || endDateA.equals(startDateB);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 5,
      "-": 48
    }
  },
  {
    "path": "src/main/resources/layout/MainWindow.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "BorderPane {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "Textfield {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-alignment: bottom;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "#expenseTableView, #budgetListView{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-effect: dropshadow(three-pass-box, rgba(0, 0, 0, 0.8), 10, 0, 0, 0);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "Label {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-padding: 2 2 2 2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "#totalSpentLabel, #monthlyBudgetLabel {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-font-size: 2em;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "#dayLabel, #weekLabel, #monthLabel, #yearLabel, #allLabel {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "HBox {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-min-width: 800px;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "VBox {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-padding: 5 5 5 5;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "#inputField {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-font-size: 1.5em;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 34
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003cHBox xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            prefHeight\u003d\"50.0\" prefWidth\u003d\"775.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            \u003cLabel fx:id\u003d\"text\" prefHeight\u003d\"50.0\" prefWidth\u003d\"775.0\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 13
    }
  },
  {
    "path": "src/main/resources/view/ExpensePane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003cBorderPane maxHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            maxWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            prefWidth\u003d\"800.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/11.0.1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "      \u003ccenter\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "      \u003cTableView fx:id\u003d\"expenseTableView\" minWidth\u003d\"600\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "      \u003c/center\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 5,
      "lucasfoo": 14
    }
  },
  {
    "path": "src/main/resources/view/ExpensePane1.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXListView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "      \u003cSplitPane dividerPositions\u003d\"0.6755852842809364\" layoutX\u003d\"-3.0\" layoutY\u003d\"84.0\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        \u003citems\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            \u003cJFXListView fx:id\u003d\"expenseListView\" layoutX\u003d\"89.0\" layoutY\u003d\"106.0\" prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            \u003cAnchorPane fx:id\u003d\"paneView\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"303.0\" prefWidth\u003d\"462.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        \u003c/items\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": "      \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "termehlee"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "termehlee": 17
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXButton?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003cfx:root type\u003d\"Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            \u003cAnchorPane prefHeight\u003d\"700.0\" prefWidth\u003d\"1000.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "               \u003cVBox layoutX\u003d\"14.0\" layoutY\u003d\"14.0\" prefHeight\u003d\"500.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: #fff8dc#fff8dc #fff8dc#fff8dc;\" AnchorPane.bottomAnchor\u003d\"250.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"800.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                     \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\" text\u003d\"Duke++\" textFill\u003d\"#1f91bf\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                        \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                           \u003cFont name\u003d\"Arial Bold\" size\u003d\"34.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                        \u003c/font\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                     \u003cJFXButton fx:id\u003d\"expenseButton\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\" text\u003d\"Expense\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                      \u003cJFXButton fx:id\u003d\"planButton\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\" text\u003d\"Plan\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                      \u003cJFXButton fx:id\u003d\"incomeButton\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\" text\u003d\"Monthly Income\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                     \u003cJFXButton fx:id\u003d\"loanButton\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\" text\u003d\"Loan \u0026amp; Lend\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                     \u003cJFXButton fx:id\u003d\"trendingButton\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\" text\u003d\"Expense Trending\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "               \u003cVBox layoutX\u003d\"53.0\" layoutY\u003d\"350.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-background-color: #f0fff0 #f0fff0;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"800.0\" AnchorPane.topAnchor\u003d\"450.0\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                     \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"40.0\" prefWidth\u003d\"200.0\" text\u003d\"Utilities\" textFill\u003d\"#2ad121\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                        \u003cfont\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                           \u003cFont name\u003d\"Helvetica Neue\" size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                        \u003c/font\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                     \u003cJFXButton fx:id\u003d\"tagsButton\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\" text\u003d\"Tags\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "               \u003cVBox layoutX\u003d\"492.0\" layoutY\u003d\"431.0\" prefHeight\u003d\"60.0\" prefWidth\u003d\"800.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"200.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"640.0\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                     \u003cLabel fx:id\u003d\"console\" prefHeight\u003d\"25.0\" prefWidth\u003d\"800.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                     \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" onKeyPressed\u003d\"#handleKeyPressed\" prefHeight\u003d\"35.0\" prefWidth\u003d\"800.0\" promptText\u003d\"/Enter your Command..\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "               \u003cLabel fx:id\u003d\"boardTitle\" alignment\u003d\"CENTER\" layoutX\u003d\"542.0\" layoutY\u003d\"26.0\" prefHeight\u003d\"40.0\" prefWidth\u003d\"800.0\" text\u003d\"Welcome to Duke++\" AnchorPane.bottomAnchor\u003d\"660.0\" AnchorPane.leftAnchor\u003d\"200.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                     \u003cFont name\u003d\"Arial\" size\u003d\"26.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "               \u003cAnchorPane fx:id\u003d\"commonBoard\" prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" AnchorPane.bottomAnchor\u003d\"60.0\" AnchorPane.leftAnchor\u003d\"200.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 46,
      "lucasfoo": 11
    }
  },
  {
    "path": "src/main/resources/view/PieChart.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        \u003cJFXListView fx:id\u003d\"pieChartSample\" layoutX\u003d\"89.0\" layoutY\u003d\"106.0\" prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "termehlee": 10
    }
  },
  {
    "path": "src/main/resources/view/PlanPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003cBorderPane xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            maxHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            maxWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            \u003ccenter\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    \u003cListView prefWidth\u003d\"800\" prefHeight\u003d\"600\" fx:id\u003d\"dialogListView\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            \u003c/center\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 21
    }
  },
  {
    "path": "src/main/resources/view/Tableview.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003cBorderPane fx:id\u003d\"main\" prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.ExpensePane\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    \u003ctop\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            \u003cLabel fx:id\u003d\"totalSpentLabel\" text\u003d\"Total: $0.00\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            \u003cLabel fx:id\u003d\"monthlyBudgetLabel\" text\u003d\"Budget:inf\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            \u003cLabel fx:id\u003d\"remainingBudgetLabel\" text\u003d\"Remaining:inf\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                \u003cTableView fx:id\u003d\"expenseTableView\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                \u003cListView fx:id\u003d\"budgetListView\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    \u003c/top\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "termehlee": 25
    }
  },
  {
    "path": "src/main/resources/view/TrendingPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "      \u003cLabel layoutX\u003d\"261.0\" layoutY\u003d\"258.0\" text\u003d\"This is the Trending Chart to be implemented!\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 10
    }
  },
  {
    "path": "src/test/java/duke/model/BudgetTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class BudgetTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    File userDirectory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testBasicOperations() throws IOException, DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Budget budget \u003d new Budget(new File(userDirectory, \"test.txt\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        budget.setMonthlyBudget(BigDecimal.TEN);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Assertions.assertEquals(\"$10\", budget.getMonthlyBudgetString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 1,
      "otonashixav": 2,
      "ChaojieLiu666": 1,
      "lucasfoo": 19
    }
  },
  {
    "path": "src/test/java/duke/model/ExpenseListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class ExpenseListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    File userDirectory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String STORAGE_DELIMITER \u003d \"\\n\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testBasicOperations() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        ExpenseList testExpenseList \u003d new ExpenseList(new File(userDirectory, \"test.txt\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpense);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.update();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.get(1), testExpense);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.internalSize(), 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.remove(1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.update();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.internalSize(), 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testInvalidBasicOperations() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        ExpenseList testExpenseList \u003d new ExpenseList(new File(userDirectory, \"test.txt\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpense);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.update();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            testExpenseList.get(2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            assertEquals(String.format(DukeException.MESSAGE_NO_ITEM_AT_INDEX, \"expense\", 2), e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            testExpenseList.remove(2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            assertEquals(String.format(DukeException.MESSAGE_NO_ITEM_AT_INDEX, \"expense\", 2), e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testUndoRedo() throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        ExpenseList testExpenseList \u003d new ExpenseList(new File(userDirectory, \"test.txt\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpense);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.update();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.remove(1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.update();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.undo(1), 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.internalSize(), 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.undo(1), 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.internalSize(), 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.redo(1), 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.internalSize(), 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.redo(1), 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.internalSize(), 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.undo(2), 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.redo(2), 2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testGetTotalAmount() throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        ExpenseList testExpenseList \u003d new ExpenseList(new File(userDirectory, \"test.txt\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpenseOne \u003d new Expense.Builder().build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpenseTwo \u003d new Expense.Builder().setAmount(\"12\").build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpenseThree \u003d new Expense.Builder().setAmount(\"13\").build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpenseFour \u003d new Expense.Builder().setAmount(\"12.4\").build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpenseFive \u003d new Expense.Builder().setAmount(\"12.23\").build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpenseOne);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpenseTwo);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpenseThree);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpenseFour);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpenseFive);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.getTotalAmount(), new BigDecimal(\"49.63\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 84,
      "ChaojieLiu666": 1,
      "lucasfoo": 4
    }
  },
  {
    "path": "src/test/java/duke/model/ExpenseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.Parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class ExpenseTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final BigDecimal DEFAULT_AMOUNT \u003d BigDecimal.ZERO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String DEFAULT_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final boolean DEFAULT_TENTATIVE \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String DEFAULT_TIME \u003d Parser.formatTime(LocalDateTime.now());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final BigDecimal TEST_AMOUNT \u003d new BigDecimal(\"1.23\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String TEST_DESCRIPTION \u003d \"test description\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final boolean TEST_TENTATIVE \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String TEST_TIME \u003d \"18:00 01/01/2000\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String[] TEST_TAGS \u003d {\"tag1\", \"tag2\", \"tag3\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String[] TEST_FLIP_TAGS \u003d {\"tag1\", \"tag2\", \"tag4\"};"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String[] TEST_FLIPPED_TAGS \u003d {\"tag3\", \"tag4\"};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String INVALID_STORAGE_STRING \u003d \"tags:tag1 tag2 tag3\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            + \"amount:1.223\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"d:1\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"t:2\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String ACTUAL_TO_STRING \u003d \"$1.23 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"test description \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"18:00 01/01/2000 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"(tentative) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"Tags: tag1 tag2 tag3\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String ACTUAL_TO_STORAGE_STRING \u003d \"tags:tag1 tag2 tag3\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"amount:1.23\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"description:test description\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"time:18:00 01/01/2000\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"isTentative:true\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testDefaults() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getAmount(), DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getDescription(), DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.isTentative(), DEFAULT_TENTATIVE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(Parser.formatTime(testExpense.getTime()), DEFAULT_TIME);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertTrue(testExpense.getTags().isEmpty());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testBuilderFromExpense() throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .setAmount(TEST_AMOUNT)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .setDescription(TEST_DESCRIPTION)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .setTentative(TEST_TENTATIVE)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .setTime(TEST_TIME)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .invertTags(TEST_TAGS)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpenseTwo \u003d new Expense.Builder(testExpense).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getAmount(), testExpenseTwo.getAmount());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getDescription(), testExpenseTwo.getDescription());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getTags(), testExpenseTwo.getTags());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getTime(), testExpenseTwo.getTime());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getAmount(), testExpenseTwo.getAmount());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testAmount() throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().setAmount(TEST_AMOUNT).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getAmount(), TEST_AMOUNT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testDescription() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().setDescription(TEST_DESCRIPTION).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getDescription(), TEST_DESCRIPTION);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testIsTentative() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().setTentative(TEST_TENTATIVE).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.isTentative(), TEST_TENTATIVE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testTime() throws DukeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().setTime(TEST_TIME).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(Parser.formatTime(testExpense.getTime()), TEST_TIME);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testTags() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().invertTags(TEST_TAGS).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getTags(), Set.of(TEST_TAGS));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpense \u003d new Expense.Builder().invertTags(TEST_TAGS).invertTags(TEST_FLIP_TAGS).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getTags(), Set.of(TEST_FLIPPED_TAGS));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testToString() throws DukeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(new Expense.Builder()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .setAmount(TEST_AMOUNT)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .setDescription(TEST_DESCRIPTION)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .setTentative(TEST_TENTATIVE)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .setTime(TEST_TIME)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .invertTags(TEST_TAGS)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .build()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .toString(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                ACTUAL_TO_STRING);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testToStorageString() throws DukeException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        String storageString \u003d new Expense.Builder()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .setAmount(TEST_AMOUNT)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .setDescription(TEST_DESCRIPTION)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .setTentative(TEST_TENTATIVE)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .setTime(TEST_TIME)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .invertTags(TEST_TAGS)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .build()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .toStorageString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(storageString, ACTUAL_TO_STORAGE_STRING);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder(storageString).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getAmount(), TEST_AMOUNT);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getDescription(), TEST_DESCRIPTION);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.isTentative(), TEST_TENTATIVE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(Parser.formatTime(testExpense.getTime()), TEST_TIME);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getTags(), Set.of(TEST_TAGS));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testInvalidStorageString() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            new Expense.Builder(INVALID_STORAGE_STRING);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            assertEquals(String.format(DukeException.MESSAGE_EXPENSE_AMOUNT_INVALID, \"1.223\"), e.getMessage());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 1,
      "otonashixav": 136,
      "ChaojieLiu666": 2,
      "lucasfoo": 6
    }
  },
  {
    "path": "src/test/java/duke/parser/CommandParamsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class CommandParamsTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void testCorrectParamValues() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        CommandParams testParams \u003d new CommandParams(\"add 2.12 /description hello /tag a b c\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testParams.getCommand().getName(), \"add\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testParams.getMainParam(), \"2.12\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testParams.getParam(\"description\"), \"hello\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testParams.getParam(\"tag\"), \"a b c\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertTrue(testParams.containsParams(\"tag\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertFalse(testParams.containsParams(\"time\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void testCorrectNullParamValues() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        CommandParams testParams \u003d new CommandParams(\"add /description /tag not null\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertNull(testParams.getMainParam());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testParams.getParam(\"tag\"), \"not null\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            testParams.getParam(\"description\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING_VALUE, \"description\"), e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testParamNotFoundException() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        CommandParams testParams \u003d new CommandParams(\"add\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            testParams.getParam(\"a\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING_VALUE, \"a\"), e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testDuplicateParams() throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            CommandParams testParams \u003d new CommandParams(\"add /time /time\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                String.format(DukeException.MESSAGE_COMMAND_PARAM_DUPLICATE, \"time\"), e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testAbbreviationFunctionality() throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            CommandParams testParams \u003d new CommandParams(\"b\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                DukeException.MESSAGE_COMMAND_NAME_UNKNOWN, e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        CommandParams testParams \u003d new CommandParams(\"ad /d description\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testParams.getCommand().getName(), \"add\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testParams.getParam(\"description\"), \"description\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 3,
      "otonashixav": 71,
      "ChaojieLiu666": 1,
      "lucasfoo": 4
    }
  }
]
