[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    archiveVersion \u003d \"V1.1\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    mainClassName \u003d \u0027main.java.Main\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    mainClassName \u003d \"duke/Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 1,
      "ChaojieLiu666": 1,
      "-": 44,
      "lucasfoo": 7
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.dukeobject.Budget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.dukeobject.ExpenseList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeRuntimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.command.CommandParams;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * Represents our Duke and contains the main program of Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String BACKUP_EXTENSION \u003d \".backup\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final File DEFAULT_USER_DIRECTORY \u003d new File(\"data\" + File.separator + \"duke\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final File EXPENSES_FILE \u003d new File(DEFAULT_USER_DIRECTORY, \"expenses.txt\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final File BUDGET_FILE \u003d new File(DEFAULT_USER_DIRECTORY, \"budget.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final File EXPENSES_BACKUP_FILE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        new File(DEFAULT_USER_DIRECTORY, \"expenses.txt\" + BACKUP_EXTENSION);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final File BUDGET_BACKUP_FILE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        new File(DEFAULT_USER_DIRECTORY, \"budget.txt\" + BACKUP_EXTENSION);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Budget budget;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public ExpenseList expenseList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public Ui ui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs the Duke with the filePath of storage.txt"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * If errors occur during the loading process, an empty taskList will be initialized instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param userDirectory The user directory to store all the files associated with Duke."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public Duke(File userDirectory) throws DukeRuntimeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        userDirectory.mkdirs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                expenseList \u003d new ExpenseList(EXPENSES_FILE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                ui.showError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                EXPENSES_BACKUP_FILE.delete();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                EXPENSES_FILE.renameTo(EXPENSES_BACKUP_FILE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                expenseList \u003d new ExpenseList(EXPENSES_FILE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeRuntimeException(\"Could not load expenses from file, nor recover using a new file\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                budget \u003d new Budget(BUDGET_FILE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                ui.showError(e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                BUDGET_BACKUP_FILE.delete();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                BUDGET_FILE.renameTo(BUDGET_BACKUP_FILE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                budget \u003d new Budget(BUDGET_FILE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                throw new DukeRuntimeException(\"Could not load budget from file, nor recover using a new file\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeRuntimeException(\"Could not load budget from file, nor recover using a new file\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        // In case we support changing Duke\u0027s directory in the future"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        this(DEFAULT_USER_DIRECTORY);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Gets the output from Duke\u0027s logic."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param fullCommand String of the full command that the user entered."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return String containing last output message of Duke."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public String getResponse(String fullCommand) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            CommandParams commandParams \u003d new CommandParams(fullCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            Command command \u003d commandParams.getCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            command.execute(commandParams, this);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return ui.getMostRecent();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void println(String s) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        ui.println(s);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 42,
      "ChaojieLiu666": 2,
      "-": 1,
      "lucasfoo": 48
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 8,
      "lucasfoo": 1
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * Bridge between duke and MainWindow."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Starts Duke with MainWindow."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param stage The main GUI of Duke"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            BorderPane borderPane \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Scene scene \u003d new Scene(borderPane);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            scene.getStylesheets().add(\"/layout/MainWindow.css\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            stage.setTitle(\"Duke++\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(new Duke());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 10,
      "lucasfoo": 30
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.dukeobject.Expense;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.TableCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.TableRow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * Controller for MainWindow.fxml"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class MainWindow extends BorderPane {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Label totalSpentLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public BorderPane main;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public TextField inputField;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Label lastCommandLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Label monthlyBudgetLabel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    Label remainingBudgetLabel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    TableView expenseTableView;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    ListView\u003cString\u003e budgetListView \u003d new ListView\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Detects enter key and passes command entered in the TextField into Duke, and update the GUI accordingly."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void onEnter() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        String userInput \u003d inputField.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        String response \u003d duke.getResponse(userInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        lastCommandLabel.setText(response);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        inputField.clear();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        updateTotalSpentLabel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        updateTableListView();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateMonthlyBudget();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateRemainingBudget();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateBudgetListView();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Sets the duke object in MainWindow."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param d \u003ccode\u003eDuke\u003c/code\u003eDuke object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.duke \u003d d;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        updateTotalSpentLabel();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateMonthlyBudget();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateRemainingBudget();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateTableListView();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateBudgetListView();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Populate the ListView with a list of expenses."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private void updateTableListView() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        expenseTableView.getItems().clear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        expenseTableView.setPlaceholder(new Label(\"No expenses to display!\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TableColumn\u003cExpense, Void\u003e indexColumn \u003d new TableColumn\u003c\u003e(\"No.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        indexColumn.setCellFactory(col -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            TableCell\u003cExpense, Void\u003e cell \u003d new TableCell\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            cell.textProperty().bind(Bindings.createStringBinding(() -\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                if (cell.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    return null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    return Integer.toString(cell.getIndex() + 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }, cell.emptyProperty(), cell.indexProperty()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return cell;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        indexColumn.setSortable(false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TableColumn\u003cString, Expense\u003e timeColumn \u003d new TableColumn\u003c\u003e(\"Time\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        timeColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"timeString\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        timeColumn.setSortable(false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TableColumn\u003cString, Expense\u003e amountColumn \u003d new TableColumn\u003c\u003e(\"Amount\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        amountColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"amount\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        amountColumn.setSortable(false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TableColumn\u003cExpense, String\u003e descriptionColumn \u003d new TableColumn\u003c\u003e(\"Description\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        descriptionColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"description\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        descriptionColumn.setSortable(false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TableColumn\u003cExpense, String\u003e tagColumn \u003d new TableColumn\u003c\u003e(\"Tags\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        tagColumn.setSortable(false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        tagColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"tagsString\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        tagColumn.setSortable(false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        expenseTableView.setRowFactory(new Callback\u003cTableView\u003cExpense\u003e, TableRow\u003cExpense\u003e\u003e() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            public TableRow\u003cExpense\u003e call(TableView\u003cExpense\u003e tableView) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                final TableRow\u003cExpense\u003e row \u003d new TableRow\u003cExpense\u003e() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    protected void updateItem(Expense expense, boolean empty) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        super.updateItem(expense, empty);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        if (expense !\u003d null \u0026\u0026 expense.isTentative()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            setStyle(\"-fx-text-background-color: blue;\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            setStyle(\"-fx-text-background-color: black;\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                };"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                return row;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        expenseTableView.getColumns().setAll("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                indexColumn,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                timeColumn,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                amountColumn,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                descriptionColumn,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                tagColumn"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        );"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        for (Expense expense : duke.expenseList.getExternalList()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            expenseTableView.getItems().add(expense);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Updates the total amount label."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void updateTotalSpentLabel() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        totalSpentLabel.setText(\"Total: \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                + ((duke.expenseList.getTotalAmount().compareTo(BigDecimal.valueOf(0)) \u003c 0)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                ? \"-$\" + duke.expenseList.getTotalAmount().abs() : \"$\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                + duke.expenseList.getTotalAmount()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Updates the monthly budget label."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void updateMonthlyBudget() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        monthlyBudgetLabel.setText(\"Budget: \" + duke.budget.getMonthlyBudgetString());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Updates the remaining budget label."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void updateRemainingBudget() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        remainingBudgetLabel.setText(\"Remaining: \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                + ((duke.budget.getRemaining(duke.expenseList.getTotalAmount()).compareTo(BigDecimal.valueOf(0)) \u003c 0)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                ? \"-$\" + duke.budget.getRemaining(duke.expenseList.getTotalAmount()).abs()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                : \"$\" + duke.budget.getRemaining(duke.expenseList.getTotalAmount())));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Updates the Budget List of all categories."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void updateBudgetListView() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        budgetListView.getItems().clear();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        budgetListView.getItems().add(\"Tag: Spent/Budget\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        for (String tag : duke.budget.getBudgetCategory().keySet()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            budgetListView.getItems().add(tag"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    + \": $\" + duke.expenseList.getTagAmount(tag)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    + \"/$\" + duke.budget.getBudgetCategory().get(tag));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "termehlee": 3,
      "otonashixav": 7,
      "lucasfoo": 172
    }
  },
  {
    "path": "src/main/java/duke/command/AddExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.dukeobject.Expense;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * Represents a specified command as AddCommand by extending the {@code Command} class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * Adds various specified type of expensesList into the ExpenseList. e.g event"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * Responses with the result."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class AddExpenseCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String name \u003d \"add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String description \u003d \"Adds a new Expense\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String usage \u003d \"add $cost\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        DESCRIPTION(\"description\", \"a short description or name for the expense\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        TAG(\"tag\", \"tags that should be added to the expense\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TIME(\"time\", \"the time of the expense\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TENTATIVE(\"tentative\", \"sets the expense to be tentative\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Creates a new command object, with its name, description, usage and secondary parameters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public AddExpenseCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(name,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            description,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            usage,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void execute(CommandParams commandParams, Duke duke) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense.Builder expenseBuilder \u003d new Expense.Builder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (!commandParams.containsMainParam()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"amount\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        expenseBuilder.setAmount(commandParams.getMainParam());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (commandParams.containsParams(SecondaryParam.DESCRIPTION.name)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            expenseBuilder.setDescription(commandParams.getParam(SecondaryParam.DESCRIPTION.name));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (commandParams.containsParams(SecondaryParam.TAG.name)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            expenseBuilder.invertTags(commandParams.getParam(SecondaryParam.TAG.name));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (commandParams.containsParams(SecondaryParam.TIME.name)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            expenseBuilder.setTime(commandParams.getParam(SecondaryParam.TIME.name));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (commandParams.containsParams(SecondaryParam.TENTATIVE.name)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            expenseBuilder.setTentative(true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        duke.expenseList.add(expenseBuilder.build());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        duke.expenseList.update();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 52,
      "ChaojieLiu666": 1,
      "lucasfoo": 24
    }
  },
  {
    "path": "src/main/java/duke/command/BudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class BudgetCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String name \u003d \"budget\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String description \u003d \"sets a budget\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String usage \u003d \"budget $amount\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TAG(\"tag\", \"tags that we want a budget to be associated with\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public BudgetCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        super(name, description, usage, Stream.of(BudgetCommand.SecondaryParam.values())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void execute(CommandParams commandParams, Duke duke) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (!commandParams.containsMainParam()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"amount\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            BigDecimal amount \u003d new BigDecimal(commandParams.getMainParam());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            BigDecimal scaledAmount \u003d amount.setScale(2, RoundingMode.HALF_UP);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            if (commandParams.containsParams(SecondaryParam.TAG.name)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                String category \u003d commandParams.getParam(SecondaryParam.TAG.name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                duke.budget.setCategoryBudget(category, amount);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            duke.budget.setMonthlyBudget(scaledAmount);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            duke.budget.save();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_BUDGET_AMOUNT_INVALID,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                commandParams.getMainParam()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 2,
      "lucasfoo": 53
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * Acts as the parent class of all commands in the command package, with fields meant to be"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * populated by the individual commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private String usage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private Map\u003cString, String\u003e secondaryParams;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public String getUsage() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return usage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public Map\u003cString, String\u003e getSecondaryParams() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return secondaryParams;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Creates a new command object, with its name, description, usage and secondary parameters."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param name            the name of the command to create."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param description     the description of the command to create."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param usage           the usage of the command to create."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param secondaryParams the secondary parameters of the command to create."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected Command(String name, String description, String usage, Map\u003cString, String\u003e secondaryParams) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        this.usage \u003d usage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        this.secondaryParams \u003d secondaryParams;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Executes the command with parameters given by the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param commandParams the parameters given by the user, parsed into a {@code CommandParams} object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param duke          The Duke object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public abstract void execute(CommandParams commandParams, Duke duke) throws DukeException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 40,
      "lucasfoo": 16
    }
  },
  {
    "path": "src/main/java/duke/command/CommandParams.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.command.AddExpenseCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.command.BudgetCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeRuntimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * An object containing information about a command\u0027s type and parameters."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class CommandParams {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // Internal map that stores all secondary parameters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private final Map\u003cString, String\u003e secondaryParams;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // The command type i.e. the first word in the command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private final Command command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // The main parameter value i.e. everything after the first word, before any secondary parameters are declared"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private final String mainParam;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // The regular expression used to identify secondary parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // Currently matches and replaces any number of spaces followed by a forward slash (\\\\s+(\\\\/)),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // which are followed by any word consisting of only lowercase alphabets (not replaced)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // Matches [and replaces]: \"[ /]at\", \"[ /]b\", \"[ /]test\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // Ignores: \"1/1\", \"a / b\", \"a/ \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final Pattern PARAM_INDICATOR_REGEX \u003d Pattern.compile(\"(\\\\s+(\\\\/(?\u003d[a-z]+)))\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // The regular expression used to identify a space."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // Currently matches and replaces any number of spaces."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final Pattern SPACE_REGEX \u003d Pattern.compile(\"(\\\\s+)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final Supplier\u003cStream\u003cCommand\u003e\u003e COMMANDS \u003d () -\u003e Stream.of("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        new AddExpenseCommand(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        new BudgetCommand(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        new DeleteCommand(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        new ConfirmTentativeCommand(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        new ExitCommand(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        new FilterCommand(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        new SortCommand(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        new ViewCommand()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Creates a new {@code CommandParams} object using a {@code String} obtained directly from"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * the user. The {@code CommandParams} object cannot have two parameters of the same name, and"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * will throw a {@code DukeException} if the user tries to specify two parameters of the same name."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param fullCommand the full command input by the user, which will be parsed into parameters."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the user specified a parameter twice."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public CommandParams(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        secondaryParams \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        // Split the input into an array of Strings, containing concatenated parameter names and values"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        String[] nameValueStrings \u003d PARAM_INDICATOR_REGEX.split(fullCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        // Get commandType and mainParam first"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        command \u003d parseCommand(nameValueStrings[0]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        mainParam \u003d extractMainParam(nameValueStrings[0], SPACE_REGEX.split(command.getName()).length);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        // Get all the others"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        for (int i \u003d 1; i \u003c nameValueStrings.length; i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            String[] nameValuePair \u003d SPACE_REGEX.split(nameValueStrings[i], 2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            List\u003cString\u003e possibleParamNames \u003d command.getSecondaryParams().keySet().stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .filter(k -\u003e k.startsWith(nameValuePair[0]))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (possibleParamNames.size() !\u003d 1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_UNKNOWN, nameValuePair[0]));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            String verifiedParamName \u003d possibleParamNames.get(0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (secondaryParams.containsKey(verifiedParamName)) { // can\u0027t contain the same key twice"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                throw new DukeException("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    String.format(DukeException.MESSAGE_COMMAND_PARAM_DUPLICATE, verifiedParamName));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (nameValuePair.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                secondaryParams.put(verifiedParamName, nameValuePair[1]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                secondaryParams.put(verifiedParamName, null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the command corresponding to this command params object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the command corresponding to this command params object."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the {@code mainParam} parameter that was input by the user. May be null."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return {@code mainParam}. May be null."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public String getMainParam() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return mainParam;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns whether the command has a {@code mainParam}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the existence of {@code mainParam}, that is, whether it is null or not."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public boolean containsMainParam() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return mainParam !\u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the value of a requested parameter. The parameter\u0027s existence should be checked prior if"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * the parameter is optional, as this method throws {@code DukeException} if the parameter does not"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * exist, or is null."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param paramName the name of the parameter whose value to return."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the value of the requested parameter."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeRuntimeException if the parameter does not exist, or is null."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public String getParam(String paramName) throws DukeException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        String paramValue \u003d secondaryParams.get(paramName);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (paramValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING_VALUE, paramName));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return paramValue;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns true if all parameters specified by {@code paramNames} exist in the {@code CommandParams}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * object, and false otherwise."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Can be used to check for optional flags."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param paramNames the parameter(s) whose existence to check for."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return true if the parameter(s) specified by {@code paramNames} exists, and false otherwise."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public boolean containsParams(String... paramNames) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        for (String paramName : paramNames) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (!secondaryParams.containsKey(paramName)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static String extractMainParam(String string, int numberOfWords) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        String[] words \u003d SPACE_REGEX.split(string, numberOfWords + 1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (words.length \u003c\u003d numberOfWords) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return words[numberOfWords];"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static Command parseCommand(String commandName) throws DukeException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        // Inelegant solution, but I don\u0027t want to have to add a new method to every Command class."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        String[] commandNameWords \u003d Arrays.copyOfRange(commandName.split(\"\\\\s+\"), 0, 2);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (commandNameWords.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            List\u003cCommand\u003e validCommands \u003d COMMANDS.get()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .filter(c -\u003e c.getName().split(\" \").length \u003d\u003d 2)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .filter(c -\u003e (c.getName().split(\" \")[0].startsWith(commandNameWords[0])"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    \u0026\u0026 c.getName().split(\" \")[1].startsWith(commandNameWords[1])))"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (validCommands.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                return validCommands.get(0);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        List\u003cCommand\u003e validCommands \u003d COMMANDS.get()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .filter(c -\u003e c.getName().split(\" \").length \u003d\u003d 1)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .filter(c -\u003e (c.getName().split(\" \")[0].startsWith(commandNameWords[0])))"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (validCommands.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return validCommands.get(0);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        throw new DukeException(DukeException.MESSAGE_COMMAND_NAME_UNKNOWN);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 195,
      "lucasfoo": 1
    }
  },
  {
    "path": "src/main/java/duke/command/ConfirmTentativeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.dukeobject.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class ConfirmTentativeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Creates a new command object, with its name, description, usage and secondary parameters."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param name            the name of the command to create."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param description     the description of the command to create."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param usage           the usage of the command to create."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param secondaryParams the secondary parameters of the command to create."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String name \u003d \"confirm\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String description \u003d \"confirm a tentative Expense\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String usage \u003d \"confirms $index, if it is a tentative task\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public ConfirmTentativeCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void execute(CommandParams commandParams, Duke duke) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            int index \u003d Integer.parseInt(commandParams.getMainParam());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Expense expense \u003d duke.expenseList.get(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            if (expense.isTentative()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                duke.expenseList.remove(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                expense.setTentative(false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                duke.expenseList.add(expense);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                throw new DukeException(index + \" is not a tentative task!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeException(\"The index you\u0027ve entered is not a valid number!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeException(\"The index you\u0027ve entered is out of range!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 59
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * Represents a specified command as DeleteCommand by extending the {@code Command} class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": " * Deletes the task with given index or specific command from the ExpenseList of Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * Responses with the result."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String name \u003d \"delete\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String description \u003d \"Deletes an Expense\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String usage \u003d \"delete $index\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs a {@code DeleteCommand} object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * given the index of the task to be deleted."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public DeleteCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Lets the ExpenseList of Duke delete the task with the given index(s), or the entire task list and"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * updates content of storage file according to new ExpenseList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Responses the result to user by using ui of Duke."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param duke The Duke object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException If the index given is out of range, invalid, or does not exist."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void execute(CommandParams commandParams, Duke duke) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        if (!commandParams.containsMainParam()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"index\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        if (commandParams.getMainParam().equals(\"all\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            duke.expenseList.clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        } else if (commandParams.getMainParam().contains(\"-\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            String[] index \u003d commandParams.getMainParam().split(\"-\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            int difference \u003d Integer.parseInt(index[1]) - Integer.parseInt(index[0]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            int counter \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            for (int i \u003d Integer.parseInt(index[0]); counter \u003c\u003d difference; counter++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                duke.expenseList.remove(i);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            duke.expenseList.remove(Integer.parseInt(commandParams.getMainParam()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        duke.expenseList.update();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 14,
      "otonashixav": 26,
      "lucasfoo": 28
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * Represents a specified command as ExitCommand by extending the {@code Command} class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * Terminates the loop in {@code main} method of Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * Responses with the result."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String name \u003d \"bye\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String description \u003d \"Exits Duke++\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String usage \u003d \"bye\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an {@code ExitCommand} object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Shows bye to user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param duke The Duke object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void execute(CommandParams commandParams, Duke duke) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        duke.ui.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 32,
      "ChaojieLiu666": 1,
      "lucasfoo": 15
    }
  },
  {
    "path": "src/main/java/duke/command/FilterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String name \u003d \"filter\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String description \u003d \"Filter expenses according to a given criteria\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String usage \u003d \"filter $criteria\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an {@code FilterCommand} object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public FilterCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void execute(CommandParams commandParams, Duke duke) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String mainParam \u003d commandParams.getMainParam();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        duke.expenseList.setFilterCriteria(mainParam);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 22,
      "ChaojieLiu666": 18
    }
  },
  {
    "path": "src/main/java/duke/command/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String name \u003d \"sort\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String description \u003d \"Sort expenses according to a given criteria\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String usage \u003d \"sort $criteria\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an {@code SortCommand} object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public SortCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void execute(CommandParams commandParams, Duke duke) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String mainParam \u003d commandParams.getMainParam();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        duke.expenseList.setSortCriteria(mainParam);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 23,
      "ChaojieLiu666": 17
    }
  },
  {
    "path": "src/main/java/duke/command/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String name \u003d \"view\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String description \u003d \"Change how expenses are displayed\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String usage \u003d \"view $criteria\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        PREVIOUS(\"previous\", \"the number of pages to move back by\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an {@code ViewCommand} object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ViewCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void execute(CommandParams commandParams, Duke duke) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String mainParam \u003d commandParams.getMainParam();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (!commandParams.containsParams(\"previous\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            duke.expenseList.setViewScope(mainParam, 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        int previous;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            previous \u003d Integer.parseInt(commandParams.getParam(\"previous\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                DukeException.MESSAGE_EXPENSE_VIEW_SCOPE_NUMBER_INVALID,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                commandParams.getParam(\"previous\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        duke.expenseList.setViewScope(mainParam, previous);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 26,
      "ChaojieLiu666": 27
    }
  },
  {
    "path": "src/main/java/duke/dukeobject/Budget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.dukeobject;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String STORAGE_DELIMITER \u003d \"\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private BigDecimal monthlyBudget;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Maps a category to the budget set for the category."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private HashMap\u003cString, BigDecimal\u003e budgetCategory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Constructor of Budget object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param file the File for budget in Duke"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @throws DukeException if the file cannot be created or read."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @throws IOException   if the file cannot be created or read."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Budget(File file) throws DukeException, IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        load();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Writes to the save file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @throws DukeException if unable to save the file successfully"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void save() throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            try (FileWriter fileWriter \u003d new FileWriter(file)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                fileWriter.write(monthlyBudget.toPlainString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                fileWriter.write(STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                if (!budgetCategory.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    for (String category : budgetCategory.keySet()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        BigDecimal budget \u003d budgetCategory.get(category);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        fileWriter.write(category + \" \" + budget);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        fileWriter.write(STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_SAVE_FILE_FAILED, file.getPath()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * loads from the save file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @throws DukeException if the file cannot be created or read.if the file cannot be created or read."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @throws IOException   if the file cannot be created or read."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void load() throws DukeException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        file.createNewFile();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        monthlyBudget \u003d BigDecimal.ZERO;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        budgetCategory \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try (Scanner fileReader \u003d new Scanner(file).useDelimiter(STORAGE_DELIMITER)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            if (fileReader.hasNext()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                String monthlyBudgetString \u003d fileReader.next();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                monthlyBudget \u003d new BigDecimal(monthlyBudgetString);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            while (fileReader.hasNext()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                String line \u003d fileReader.next();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                String[] separatedLine \u003d line.split(\" \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                String category \u003d separatedLine[0];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                String budgetString \u003d separatedLine[1];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                BigDecimal budget \u003d new BigDecimal(budgetString);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                budget.setScale(2, RoundingMode.HALF_UP);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                budgetCategory.put(category, budget);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_LOAD_FILE_FAILED, file.getPath()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Setter method for monthlyBudget."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param monthlyBudget BigDecimal budget set for each month"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void setMonthlyBudget(BigDecimal monthlyBudget) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.monthlyBudget \u003d monthlyBudget;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Gets a string value for monthlyBudget."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @return a String of the monthly budget"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public String getMonthlyBudgetString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return \"$\" + monthlyBudget.toPlainString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Sets budget to a given category."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param category the String tag specified that we want to set a budget for"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param budget   a BigDecimal amount for the budget we want to set"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void setCategoryBudget(String category, BigDecimal budget) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        budgetCategory.put(category, budget);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Gets the difference between the monthly budget and the total expenses spent."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param total the BigDecimal total expenditure from expenseList"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @return BigDecimal value fo the difference"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public BigDecimal getRemaining(BigDecimal total) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return monthlyBudget.subtract(total);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public HashMap\u003cString, BigDecimal\u003e getBudgetCategory() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return budgetCategory;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 1,
      "lucasfoo": 134
    }
  },
  {
    "path": "src/main/java/duke/dukeobject/DukeItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.dukeobject;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * The parent class for all {@code DukeItem}s, which are stored in {@code DukeList}s."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "abstract class DukeItem implements Serializable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The string that separates different fields in the storage string."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected static final String STORAGE_FIELD_DELIMITER \u003d \"\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The string that separates the names from the values in the storage string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected static final String STORAGE_NAME_SEPARATOR \u003d \":\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The string that separates tags from each other in the storage string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected static final String STORAGE_TAG_SEPARATOR \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The string that separates tags from each other in an input string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected static final String TAG_SEPARATOR \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The item\u0027s tags."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected final Set\u003cString\u003e tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * A utility method used to extract fields from a storage string into a map, so that they can be"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * easily accessed by the subclasses in order to construct a new builder from the storage string."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param storageString the storage string representing a subclass."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return a map of the storage string\u0027s fields."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected static Map\u003cString, String\u003e storageStringToMap(String storageString) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return Stream.of(storageString.split(STORAGE_FIELD_DELIMITER))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .map(s -\u003e s.split(STORAGE_NAME_SEPARATOR, 2))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            .collect(Collectors.toMap(s -\u003e s[0], s -\u003e s.length \u003e 1 ? s[1] : \"\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Subclassing solution taken from https://stackoverflow.com/a/17165079"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * A builder class for {@code DukeItem}, making it easier to construct items with"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * optional fields."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param \u003cT\u003e the subclassed builder; see the sof link above."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    abstract static class Builder\u003cT extends Builder\u003cT\u003e\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private Set\u003cString\u003e tags \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Constructs an empty item with default values for all fields."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        protected Builder() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Constructs an item from an existing item."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param i the existing item."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        protected Builder(DukeItem i) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            tags \u003d i.tags;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Constructs an item from its storage string. Used to load items from storage."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param storageString the item\u0027s storage string."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        protected Builder(String storageString) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this(storageStringToMap(storageString));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Constructs an item from its mapped storage string. Used internally to load items from storage."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param mappedStorageString a map of the item\u0027s storage string."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        protected Builder(Map\u003cString, String\u003e mappedStorageString) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (mappedStorageString.containsKey(\"tags\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                invertTags(mappedStorageString.get(\"tags\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    .split(STORAGE_TAG_SEPARATOR));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Inverts the presence of certain tags inside {@code tags}, specified by the parameter {@code tagsToInvert}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * This effectively adds tags not present, and removes tags that were present."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param tagsToInvert the tags to invert."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public T invertTags(String[] tagsToInvert) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            for (String tagToInvert : tagsToInvert) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                if (this.tags.contains(tagToInvert)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    this.tags.remove(tagToInvert);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    this.tags.add(tagToInvert);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return getThis();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Inverts the presence of certain tags inside {@code tags}, specified by the parameter {@code tagsToInvert}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * This effectively adds tags not present, and removes tags that were present."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param tagsToInvert the tags to invert as a string."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public T invertTags(String tagsToInvert) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return invertTags(tagsToInvert.split(TAG_SEPARATOR));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Method used to limit the scope of suppression; returns {@code this}, type-cast to {@code T},"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * the subclassed builder."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return {@code this} type-casted to {@code T}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private T getThis() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return (T) this;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an item from the item builder."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param builder the builder containing information for this object."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected DukeItem(Builder\u003c?\u003e builder) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        tags \u003d builder.tags;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Converts the item to a storage string to be saved, then loaded later."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the item\u0027s storage string."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected String toStorageString() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        StringJoiner stringJoiner \u003d new StringJoiner(STORAGE_FIELD_DELIMITER);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        stringJoiner.add(\"tags\" + STORAGE_NAME_SEPARATOR + String.join(\" \", tags));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return stringJoiner.toString();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the set of tags of this item."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the set of tags of this item."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public Set\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Returns a single string containing all of the tags."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return single String of all the tags"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public String getTagsString() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        StringJoiner stringJoiner \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            stringJoiner.add(String.join(\" \", tags));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return stringJoiner.toString();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 1,
      "otonashixav": 167,
      "lucasfoo": 15
    }
  },
  {
    "path": "src/main/java/duke/dukeobject/DukeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.dukeobject;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.ObjectInput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.ObjectOutput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeRuntimeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * The generic parent list of all lists in Duke, which are responsible for saving their own information"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * and have undo and redo capabilities."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * @param \u003cT\u003e The {@code DukeItem} contained in the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "abstract class DukeList\u003cT extends DukeItem\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static String STORAGE_DELIMITER \u003d \"\\n\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private final File file;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private final String itemName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private Stack\u003cbyte[]\u003e undoStates;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private byte[] currentState;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private Stack\u003cbyte[]\u003e redoStates;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected List\u003cT\u003e internalList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected List\u003cT\u003e externalList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Creates a new {@code DukeList}, which saves its data to a file {@code file}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param file     The file to save to."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param itemName the name of the item that populates the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the file cannot be created or read."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public DukeList(File file, String itemName) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        internalList \u003d new ArrayList\u003cT\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        load();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        undoStates \u003d new Stack\u003cbyte[]\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        currentState \u003d toByteArray(internalList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        redoStates \u003d new Stack\u003cbyte[]\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Updates, then returns  {@code externalList}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * {@code externalList} should be updated based on filter, sort and view which are implemented"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * by the subclasses."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the up-to-date externalList."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public abstract List\u003cT\u003e getExternalList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract void setSortCriteria(String sortCriteria) throws DukeException;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract void setFilterCriteria(String filterCriteria) throws DukeException;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract void setViewScope(String viewScope, int previous) throws DukeException;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract List\u003cT\u003e sort(List\u003cT\u003e currentList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract List\u003cT\u003e filter(List\u003cT\u003e currentList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract List\u003cT\u003e view(List\u003cT\u003e currentList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Adds an item into {@code internalList}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param item the item to add."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void add(T item) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        internalList.add(item);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns an item referenced using its index in {@code externalList}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param index the index of the item in @{code externalList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the item."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the index is out of bounds."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public T get(int index) throws DukeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (index \u003c 1 || index \u003e externalList.size()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_NO_ITEM_AT_INDEX, itemName, index));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return externalList.get(index - 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the number of items in {@code internalList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the number of items in {@code internalList}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public int internalSize() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Removes an item from {@code internalList} using its index in {@code externalList}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param index the index of the item to in {@code externalList}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the index is out of bounds."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void remove(int index) throws DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        internalList.remove(get(index));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Removes all items from {@code internalList}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Calling this method indicates that {@code internalList} or one of its members has changed,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * that the file should be updated, and that the state has progressed such that all {@code redoStates}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * are now invalid and should be discarded."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if saving was unsuccessful."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void update() throws DukeException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        undoStates.push(currentState);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        currentState \u003d toByteArray(internalList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        redoStates.clear();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Saves {@code internalList} into {@code file}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the file could not be saved to."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private void save() throws DukeException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            try (FileWriter fileWriter \u003d new FileWriter(file)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                for (T item : internalList) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    fileWriter.write(item.toStorageString());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    fileWriter.write(STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_SAVE_FILE_FAILED, file.getPath()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Loads the data contained in {@code file} into {@code internalList} and updates {@code externalList},"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * overwriting any existing information."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the file could not be accessed, or if any information in the file is invalid."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void load() throws DukeException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            try (Scanner fileReader \u003d new Scanner(file).useDelimiter(STORAGE_DELIMITER)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                while (fileReader.hasNext()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    internalList.add(itemFromStorageString(fileReader.next()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (IOException | DukeException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_LOAD_FILE_FAILED, file.getPath()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns an item from its storage string. Although this method is present in the item builders,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * it is declared here to make it easier to implement (otherwise requires reflection)."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param storageString the storage string of the item."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the item."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the item could not be created from the storage string."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected abstract T itemFromStorageString(String storageString) throws DukeException;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Reverts the state of {@code internalList} some number of times to an earlier state."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param times the number of times to undo."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the number of times actually undone."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the changes could not be saved."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public int undo(int times) throws DukeException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        int actualTimes \u003d 0;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        for (actualTimes \u003d 0; actualTimes \u003c times \u0026\u0026 !undoStates.isEmpty(); actualTimes++) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            redoStates.push(currentState);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            currentState \u003d undoStates.pop();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        internalList \u003d fromByteArray(currentState);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return actualTimes;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Forwards the state of {@code internalList} some number of times to a later state."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param times the number of times to redo."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the number of times actually undone."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeRuntimeException if the changes could not be saved."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @see #undo"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public int redo(int times) throws DukeException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        int actualTimes \u003d 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        for (actualTimes \u003d 0; actualTimes \u003c times \u0026\u0026 !redoStates.isEmpty(); actualTimes++) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            undoStates.push(currentState);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            currentState \u003d redoStates.pop();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        internalList \u003d fromByteArray(currentState);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return actualTimes;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Taken from https://stackoverflow.com/a/30968827"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Converts the current state of {@code internalList} into a byte array so that it can be restored later."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the byte array of the current {@code internalList}."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private byte[] toByteArray(List\u003cT\u003e list) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try (ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            ObjectOutput out \u003d new ObjectOutputStream(bos)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            out.writeObject(list);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return bos.toByteArray();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeRuntimeException(\"Failed to create byte array from list.\", e);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Taken from https://stackoverflow.com/a/30968827"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns a list corresponding to a previous state of {@code internalList}."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Casting to {@code List\u003cT\u003e} causes the warning. As the code is self-contained, there is no risk of"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * the object in {@code bytes} not being one of type {@code List\u003cT\u003e}."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param bytes a byte array corresponding to a previous state of {@code internalList}."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the previous state of {@code internalList}."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private List\u003cT\u003e fromByteArray(byte[] bytes) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try (ByteArrayInputStream bis \u003d new ByteArrayInputStream(bytes);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            ObjectInput in \u003d new ObjectInputStream(bis)) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return (List\u003cT\u003e) in.readObject();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeRuntimeException(\"Failed to load list from byte array.\", e);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 7,
      "otonashixav": 245,
      "ChaojieLiu666": 13
    }
  },
  {
    "path": "src/main/java/duke/dukeobject/Expense.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.dukeobject;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class Expense extends DukeItem {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The amount of money of the expense."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private final BigDecimal amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The description of the expense."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Whether or not the expense is tentative."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private boolean isTentative;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The time of the expense."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private final LocalDateTime time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static class Builder extends DukeItem.Builder\u003cBuilder\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private BigDecimal amount \u003d BigDecimal.ZERO;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String description \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private boolean isTentative \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private LocalDateTime time \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Constructs a builder from an existing expense."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param expense the expense whose values to use as the builder\u0027s default values."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder(Expense expense) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            super(expense);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            amount \u003d expense.amount;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            description \u003d expense.description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            isTentative \u003d expense.isTentative;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            time \u003d expense.time;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * {@inheritDoc}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Builder(String storageString) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this(storageStringToMap(storageString));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * {@inheritDoc}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Builder(Map\u003cString, String\u003e mappedStorageString) throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            super(mappedStorageString);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (mappedStorageString.containsKey(\"amount\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                setAmount(mappedStorageString.get(\"amount\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (mappedStorageString.containsKey(\"description\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                setDescription(mappedStorageString.get(\"description\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (mappedStorageString.containsKey(\"isTentative\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                setTentative(Boolean.parseBoolean(mappedStorageString.get(\"isTentative\")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (mappedStorageString.containsKey(\"time\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                setTime(Parser.parseTime(mappedStorageString.get(\"time\")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Sets the amount of the expense using a string."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param amount the amount of the expense as a string."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @throws DukeException if the value in amount cannot be converted into a {@code BigDecimal},"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *                       or if the {@code BigDecimal} does not represent a valid amount."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         * @see #setAmount(BigDecimal)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder setAmount(String amount) throws DukeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                return setAmount(new BigDecimal(amount));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                throw new DukeException(String.format(DukeException.MESSAGE_EXPENSE_AMOUNT_INVALID, amount));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Sets the amount of the expense."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param amount the amount of the expense."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @throws DukeException if the {@code BigDecimal} does not represent a valid amount."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder setAmount(BigDecimal amount) throws DukeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (amount.scale() \u003e 2) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                throw new DukeException("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    String.format(DukeException.MESSAGE_EXPENSE_AMOUNT_INVALID, amount.toPlainString()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.amount \u003d amount.setScale(2, RoundingMode.UNNECESSARY);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Sets the description of the expense."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param description the description of the expense."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder setDescription(String description) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Sets the tentativeness of the expense."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param tentative whether the expense is tentative."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder setTentative(boolean tentative) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            isTentative \u003d tentative;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Sets the time of the expense using a string."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param time the time of the expense as a string."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @throws DukeException if the time string cannot be parsed into a {@code LocalDateTime} object."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         * @see #setTime(LocalDateTime)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder setTime(String time) throws DukeException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                return setTime(Parser.parseTime(time));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                throw new DukeException(String.format(DukeException.MESSAGE_EXPENSE_TIME_INVALID, time));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Sets the time of the expense."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param time the time of the expense."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder setTime(LocalDateTime time) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Builds the expense."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return the expense."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Expense build() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return new Expense(this);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an expense from the expense builder."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param builder the expense builder."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private Expense(Builder builder) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(builder);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        amount \u003d builder.amount;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        description \u003d builder.description;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        isTentative \u003d builder.isTentative;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        time \u003d builder.time;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the amount of the expense."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return {@link #amount}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public BigDecimal getAmount() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the description of the expense."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return {@link #description}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns whether the expense is tentative."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return {@link #isTentative}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public boolean isTentative() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return isTentative;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void setTentative(boolean val) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        isTentative \u003d val;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the date of the expense."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return {@link #time}."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Return the formatted time."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @return String of time that is formatted"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public String getTimeString() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return Parser.formatTime(time);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Converts the expense into a string."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the expense as a string."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        StringJoiner stringJoiner \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        stringJoiner.add((amount.compareTo(BigDecimal.valueOf(0)) \u003c 0 ? \"-$\" + amount.abs() : \"$\" + amount));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        stringJoiner.add(description);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        stringJoiner.add(Parser.formatTime(time));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (isTentative) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            stringJoiner.add(\"(tentative)\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (!tags.isEmpty()) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            stringJoiner.add(\"Tags: \" + String.join(\" \", tags));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return stringJoiner.toString();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Converts the expense into a storage string."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the expense as a storage string."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected String toStorageString() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        StringJoiner stringJoiner \u003d new StringJoiner(STORAGE_FIELD_DELIMITER);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        stringJoiner.add(super.toStorageString());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        stringJoiner.add(\"amount\" + STORAGE_NAME_SEPARATOR + amount);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        stringJoiner.add(\"description\" + STORAGE_NAME_SEPARATOR + description);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        stringJoiner.add(\"time\" + STORAGE_NAME_SEPARATOR + Parser.formatTime(time));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        stringJoiner.add(\"isTentative\" + STORAGE_NAME_SEPARATOR + isTentative);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return stringJoiner.toString();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 1,
      "otonashixav": 247,
      "lucasfoo": 25
    }
  },
  {
    "path": "src/main/java/duke/dukeobject/ExpenseList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.dukeobject;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeRuntimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class ExpenseList extends DukeList\u003cExpense\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private enum SortCriteria {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        AMOUNT(Comparator.comparing(Expense::getAmount)),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        TIME(Comparator.comparing(Expense::getTime)),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        DESCRIPTION(Comparator.comparing(Expense::getDescription));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private Comparator\u003cExpense\u003e comparator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        SortCriteria(Comparator\u003cExpense\u003e comparator) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private enum ViewScopeName {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        DAY, WEEK, MONTH, YEAR, ALL;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private class ViewScope {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private int viewScopeNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private ViewScopeName viewScopeName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        public ViewScope(String viewScopeName, int viewScopeNumber) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.viewScopeNumber \u003d viewScopeNumber;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                this.viewScopeName \u003d ViewScopeName.valueOf(viewScopeName.toUpperCase());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                throw new DukeException(String.format("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    DukeException.MESSAGE_EXPENSE_VIEW_SCOPE_NAME_INVALID, viewScopeName));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        public ViewScope(ViewScopeName viewScopeName) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.viewScopeNumber \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.viewScopeName \u003d viewScopeName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private List\u003cExpense\u003e dayView(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return currentList.stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .filter(e -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    LocalDate dateOfExpense \u003d e.getTime().toLocalDate();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    LocalDate current \u003d LocalDate.now().minusDays(viewScopeNumber);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    return dateOfExpense.equals(current);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                })"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private List\u003cExpense\u003e weekView(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return currentList.stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .filter(e -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    int dayOfWeek \u003d e.getTime().getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    LocalDate start \u003d e.getTime().minusDays(dayOfWeek - 1).toLocalDate(); // Sunday of week of expense."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    LocalDate end \u003d e.getTime().plusDays(7 - dayOfWeek).toLocalDate(); // Monday of week of expense."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    LocalDate current \u003d LocalDate.now().minusWeeks(viewScopeNumber);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    return (current.equals(end) || current.equals(start)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        || (current.isAfter(start) \u0026\u0026 current.isBefore(end)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                })"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private List\u003cExpense\u003e monthView(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return currentList.stream()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .filter(e -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    LocalDate dateOfExpense \u003d e.getTime().toLocalDate();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    LocalDate current \u003d LocalDate.now().minusMonths(viewScopeNumber);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    boolean isSameYear \u003d dateOfExpense.getYear() \u003d\u003d current.getYear();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    boolean isSameMonth \u003d dateOfExpense.getMonth().equals(current.getMonth());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    return (isSameYear \u0026\u0026 isSameMonth);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                })"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private List\u003cExpense\u003e yearView(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return currentList.stream()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .filter(e -\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    LocalDate dateOfExpense \u003d e.getTime().toLocalDate();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    LocalDate current \u003d LocalDate.now().minusYears(viewScopeNumber);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    return dateOfExpense.getYear() \u003d\u003d current.getYear();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                })"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        public List\u003cExpense\u003e view(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            switch (viewScopeName) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case DAY:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                return dayView(currentList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case WEEK:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                return weekView(currentList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case MONTH:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                return monthView(currentList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case YEAR:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                return yearView(currentList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            default: // case ALL:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                return currentList; // the viewScope here is ALL."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private SortCriteria sortCriteria;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private ViewScope viewScope;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private String filterCriteria;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Creates a new expense list using a file for storage."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param file the file to store the list into"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the file could not be loaded from, or created."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public ExpenseList(File file) throws DukeException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(file, \"expense\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        viewScope \u003d new ViewScope(ViewScopeName.ALL);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        sortCriteria \u003d SortCriteria.TIME;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        externalList \u003d getExternalList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Updates {@code externalList}, then returns it."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return {@code externalList}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public List\u003cExpense\u003e getExternalList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        List\u003cExpense\u003e externalList;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        externalList \u003d filter(sort(view(internalList)));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return externalList;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Sets the sort criteria."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Sort criteria include AMOUNT, TIME, DESCRIPTION."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param sortCriteria The String indicating the criteria for sorting."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @throws DukeException If the format of sort criteria is incorrect."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setSortCriteria(String sortCriteria) throws DukeException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.sortCriteria \u003d SortCriteria.valueOf(sortCriteria.toUpperCase());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_EXPENSE_SORT_CRITERIA_INVALID, sortCriteria));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setFilterCriteria(String filterCriteria) throws DukeException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.filterCriteria \u003d filterCriteria;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Sets the view scope."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * View scopes include DAY, WEEK, MONTH, YEAR, ALL;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param viewScopeName The string indicating the time scope of displayed list."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @throws DukeException If the format of view scope is incorrect."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setViewScope(String viewScopeName, int viewScopeNumber) throws DukeException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.viewScope \u003d new ViewScope(viewScopeName, viewScopeNumber);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Sorts the given List with the given criteria and returns the sorted List."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param currentList The List going to be sorted."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return The sorted List."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public List\u003cExpense\u003e sort(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        currentList.sort(sortCriteria.comparator);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return currentList;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * To be implemented when tags are specified."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param currentList The List going to be filtered."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return The filtered List."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public List\u003cExpense\u003e filter(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return currentList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Tailors the given List so that only {@code Expense} within the given time scope are preserved."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * The time scope is composed of time unit(e.g. week) and how many (e.g. weeks) ago."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Returns the tailored List."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param currentList The list going to be modified."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return The tailored List."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public List\u003cExpense\u003e view(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return viewScope.view(currentList);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected Expense itemFromStorageString(String storageString) throws DukeException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return new Expense.Builder(storageString).build();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the total amount of money spent."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return BigDecimal of the total amount of money spent."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public BigDecimal getTotalAmount() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                .filter(expense -\u003e !expense.isTentative())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .map(Expense::getAmount)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .reduce(BigDecimal.ZERO, BigDecimal::add);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * returns the total Amount given a specific tag."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param tag the tag of"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @return A BigDecimal which is the sum of all items of a single tag"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public BigDecimal getTagAmount(String tag) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                .filter(expense -\u003e expense.getTags().contains(tag))"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                .filter(expense -\u003e !expense.isTentative())"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                .map(Expense::getAmount)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                .reduce(BigDecimal.ZERO, BigDecimal::add);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the total amount of money spent on currently visible expenses i.e. those in {@code externalList}."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return BigDecimal of the total amount of money spent on currently visible expenses."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public BigDecimal getTotalExternalAmount() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return externalList.stream()"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            .filter(expense -\u003e !expense.isTentative())"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            .map(Expense::getAmount)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            .reduce(BigDecimal.ZERO, BigDecimal::add);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 47,
      "ChaojieLiu666": 185,
      "lucasfoo": 29
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * The exception Duke throws upon encountering a problem that can be recovered from."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_LOAD_FILE_FAILED \u003d \"The file at %s could not be loaded. \""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        + \"I will back it up and create a new file.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_SAVE_FILE_FAILED \u003d \"The file at %s could not be saved to. \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        + \"Close other programs that may be accessing it.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_NO_ITEM_AT_INDEX \u003d \"There is no %s numbered %d!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_PARSER_TIME_INVALID \u003d \"%s is not a valid time!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_EXPENSE_AMOUNT_INVALID \u003d \"%s is not a valid amount!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_EXPENSE_TIME_INVALID \u003d \"%s is not a valid time!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_COMMAND_PARAM_UNKNOWN \u003d \"%s is not a valid parameter for this command!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_COMMAND_PARAM_MISSING_VALUE \u003d \"/%s needs a value!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_COMMAND_PARAM_MISSING \u003d \"This command needs /%s to be given!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_COMMAND_PARAM_DUPLICATE \u003d \"/%s cannot be specified twice!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_COMMAND_NAME_UNKNOWN \u003d \"I don\u0027t know what command that is!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_BUDGET_AMOUNT_INVALID \u003d \"%s is not a valid amount!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static final String MESSAGE_EXPENSE_SORT_CRITERIA_INVALID \u003d \"%s is not a valid sort criteria!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static final String MESSAGE_EXPENSE_VIEW_SCOPE_NAME_INVALID \u003d \"%s is not a valid view scope name!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static final String MESSAGE_EXPENSE_VIEW_SCOPE_NUMBER_INVALID \u003d \"%s is not a valid view scope number!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 17,
      "ChaojieLiu666": 3,
      "lucasfoo": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeRuntimeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * The exception Duke throws upon encountering an unexpected error not caused by the user nor"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * by invalid validation of parameters."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class DukeRuntimeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String MESSAGE_FATAL_ERROR \u003d \"A fatal error has occurred. %s.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an {@code DukeRuntimeException} object with exception message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public DukeRuntimeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(String.format(MESSAGE_FATAL_ERROR, message));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an {@code DukeRuntimeException} object with exception message and cause."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public DukeRuntimeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(String.format(MESSAGE_FATAL_ERROR, message), cause);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 23
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * Parses the command line from user input to tokens and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * packages the tokens to {@code Command} object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm dd/MM/yyyy\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Converts a LocalDateTime to a user readable string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param localDateTime LocalDateTime object that we wish to convert"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return String that is a formatted date and time"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static String formatTime(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return localDateTime.format(dateTimeFormatter);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Converts a {@code String} to a {@code LocalDateTime}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param string {@code String} to convert."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return {@code LocalDateTime} corresponding to the string."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the string cannot be parsed into a {@code LocalDateTime} object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static LocalDateTime parseTime(String string) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return LocalDateTime.parse(string, dateTimeFormatter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_PARSER_TIME_INVALID, string));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 33,
      "lucasfoo": 8
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.dukeobject.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.dukeobject.ExpenseList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeRuntimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the User Interface of Duke, and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * manages both input and output operations."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner dukeIn;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private String mostRecent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an Ui object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        dukeIn \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows welcome message to the user when Duke starts."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"I am Duke. What can I do for you?\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reads one line of user\u0027s commands."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return User\u0027s command in {@code String} type."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return dukeIn.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Replaces the {@code System.out.println} method."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param s The string to be printed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void println(String s) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        mostRecent \u003d s;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints the message of the exception."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param e the {@code DukeException} whose message will be printed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showError(DukeException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        mostRecent \u003d e.getMessage();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Prints the {@code ExpenseList} given."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param expenseList {@code ExpenseList} that we want to be printed"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void printExpenseList(ExpenseList expenseList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (expenseList.internalSize() \u003e 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            int count \u003d 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            for (Expense expense : expenseList.getExternalList()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                println(expense.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public String getMostRecent() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return mostRecent;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 11,
      "-": 60,
      "lucasfoo": 18
    }
  },
  {
    "path": "src/main/java/duke/utils/DateCompare.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DateCompare {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if day2 lies inside of day1."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param day1 the whole day from 00:00 to 23:59:59"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param day2 the day we want to check if it is in day 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if day 2 is in day 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isSameDay(Date day1, Date day2) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        calendar.setTime(day1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        calendar.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        calendar.add(Calendar.SECOND, -1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Date day1End \u003d calendar.getTime();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return day2.after(day1) \u0026\u0026 day2.before(day1End);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if 2 date ranges, A and B are overlapping each other."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDateA start of date A"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endDateA   end of date A"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDateB start of date B"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endDateB   end of date B"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if dates are overlapping else return false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isOverlapping(Date startDateA, Date endDateA, Date startDateB, Date endDateB) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (startDateA.after(startDateB) \u0026\u0026 startDateA.before(endDateB)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (endDateA.after(startDateB) \u0026\u0026 endDateA.before(endDateB)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (startDateA.after(startDateB) \u0026\u0026 endDateA.before(endDateB)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (startDateB.after(startDateA) \u0026\u0026 startDateB.before(endDateA)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (endDateB.after(startDateA) \u0026\u0026 endDateB.before(endDateB)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (startDateB.after(startDateA) \u0026\u0026 endDateB.before(startDateB)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return startDateA.equals(startDateB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || endDateA.equals(endDateB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || startDateA.equals(endDateB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                || endDateA.equals(startDateB);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 5,
      "-": 48
    }
  },
  {
    "path": "src/main/resources/layout/MainWindow.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "BorderPane {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "Textfield {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-alignment: bottom;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "ListView, TableView {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "Label {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "#totalSpentLabel, #monthlyBudgetLabel {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-font-size: 2em;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "HBox {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-effect: dropshadow(three-pass-box, rgba(0, 0, 0, 0.8), 10, 0, 0, 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-min-width: 800px;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "VBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-padding: 10 10 10 10;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "#inputField {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-font-size: 1.5em;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 29
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003cBorderPane xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            fx:controller\u003d\"duke.MainWindow\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            prefHeight\u003d\"600.0\" prefWidth\u003d\"900.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            fx:id\u003d\"main\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    \u003ctop\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            \u003cLabel fx:id\u003d\"totalSpentLabel\" text\u003d\"Total: $0.00\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            \u003cLabel fx:id\u003d\"monthlyBudgetLabel\" text\u003d\"Budget:inf\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            \u003cLabel fx:id\u003d\"remainingBudgetLabel\" text\u003d\"Remaining:inf\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    \u003c/top\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    \u003ccenter\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \u003cTableView fx:id\u003d\"expenseTableView\" minWidth\u003d\"600\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \u003cListView fx:id\u003d\"budgetListView\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    \u003c/center\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    \u003cbottom\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        \u003cVBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            \u003cLabel fx:id\u003d\"lastCommandLabel\" text\u003d\"Hello, welcome to Duke++!\" prefWidth\u003d\"Infinity\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            \u003cTextField fx:id\u003d\"inputField\" promptText\u003d\"enter a command\" onAction\u003d\"#onEnter\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    \u003c/bottom\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 1,
      "lucasfoo": 38
    }
  },
  {
    "path": "src/test/java/duke/dukeobject/BudgetTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.dukeobject;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class BudgetTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    File userDirectory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testBasicOperations() throws IOException, DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Budget budget \u003d new Budget(new File(userDirectory, \"test.txt\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        budget.setMonthlyBudget(BigDecimal.TEN);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Assertions.assertEquals(\"$10\", budget.getMonthlyBudgetString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 1,
      "otonashixav": 2,
      "lucasfoo": 20
    }
  },
  {
    "path": "src/test/java/duke/dukeobject/ExpenseListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.dukeobject;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeRuntimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class ExpenseListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    File userDirectory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String STORAGE_DELIMITER \u003d \"\\n\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testBasicOperations() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        ExpenseList testExpenseList \u003d new ExpenseList(new File(userDirectory, \"test.txt\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpense);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.update();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.get(1), testExpense);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.internalSize(), 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.remove(1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.update();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.internalSize(), 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testInvalidBasicOperations() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        ExpenseList testExpenseList \u003d new ExpenseList(new File(userDirectory, \"test.txt\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpense);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.update();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            testExpenseList.get(2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            assertEquals(String.format(DukeException.MESSAGE_NO_ITEM_AT_INDEX, \"expense\", 2), e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            testExpenseList.remove(2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            assertEquals(String.format(DukeException.MESSAGE_NO_ITEM_AT_INDEX, \"expense\", 2), e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testUndoRedo() throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        ExpenseList testExpenseList \u003d new ExpenseList(new File(userDirectory, \"test.txt\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpense);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.update();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.remove(1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.update();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.undo(1), 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.internalSize(), 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.undo(1), 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.internalSize(), 0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.redo(1), 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.internalSize(), 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.redo(1), 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.internalSize(), 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.undo(2), 2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.redo(2), 2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testGetTotalAmount() throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        ExpenseList testExpenseList \u003d new ExpenseList(new File(userDirectory, \"test.txt\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpenseOne \u003d new Expense.Builder().build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpenseTwo \u003d new Expense.Builder().setAmount(\"12\").build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpenseThree \u003d new Expense.Builder().setAmount(\"13\").build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpenseFour \u003d new Expense.Builder().setAmount(\"12.4\").build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpenseFive \u003d new Expense.Builder().setAmount(\"12.23\").build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpenseOne);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpenseTwo);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpenseThree);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpenseFour);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpenseFive);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.getTotalAmount(), new BigDecimal(\"49.63\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 87,
      "lucasfoo": 4
    }
  },
  {
    "path": "src/test/java/duke/dukeobject/ExpenseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.dukeobject;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class ExpenseTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final BigDecimal DEFAULT_AMOUNT \u003d BigDecimal.ZERO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String DEFAULT_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final boolean DEFAULT_TENTATIVE \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String DEFAULT_TIME \u003d Parser.formatTime(LocalDateTime.now());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final BigDecimal TEST_AMOUNT \u003d new BigDecimal(\"1.23\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String TEST_DESCRIPTION \u003d \"test description\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final boolean TEST_TENTATIVE \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String TEST_TIME \u003d \"18:00 01/01/2000\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String[] TEST_TAGS \u003d {\"tag1\", \"tag2\", \"tag3\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String[] TEST_FLIP_TAGS \u003d {\"tag1\", \"tag2\", \"tag4\"};"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String[] TEST_FLIPPED_TAGS \u003d {\"tag3\", \"tag4\"};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String INVALID_STORAGE_STRING \u003d \"tags:tag1 tag2 tag3\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            + \"amount:1.223\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"d:1\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"t:2\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String ACTUAL_TO_STRING \u003d \"$1.23 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"test description \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"18:00 01/01/2000 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"(tentative) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"Tags: tag1 tag2 tag3\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String ACTUAL_TO_STORAGE_STRING \u003d \"tags:tag1 tag2 tag3\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"amount:1.23\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"description:test description\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"time:18:00 01/01/2000\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"isTentative:true\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testDefaults() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getAmount(), DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getDescription(), DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.isTentative(), DEFAULT_TENTATIVE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(Parser.formatTime(testExpense.getTime()), DEFAULT_TIME);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertTrue(testExpense.getTags().isEmpty());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testBuilderFromExpense() throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .setAmount(TEST_AMOUNT)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .setDescription(TEST_DESCRIPTION)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .setTentative(TEST_TENTATIVE)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .setTime(TEST_TIME)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .invertTags(TEST_TAGS)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpenseTwo \u003d new Expense.Builder(testExpense).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getAmount(), testExpenseTwo.getAmount());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getDescription(), testExpenseTwo.getDescription());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getTags(), testExpenseTwo.getTags());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getTime(), testExpenseTwo.getTime());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getAmount(), testExpenseTwo.getAmount());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testAmount() throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().setAmount(TEST_AMOUNT).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getAmount(), TEST_AMOUNT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testDescription() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().setDescription(TEST_DESCRIPTION).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getDescription(), TEST_DESCRIPTION);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testIsTentative() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().setTentative(TEST_TENTATIVE).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.isTentative(), TEST_TENTATIVE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testTime() throws DukeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().setTime(TEST_TIME).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(Parser.formatTime(testExpense.getTime()), TEST_TIME);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testTags() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().invertTags(TEST_TAGS).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getTags(), Set.of(TEST_TAGS));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpense \u003d new Expense.Builder().invertTags(TEST_TAGS).invertTags(TEST_FLIP_TAGS).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getTags(), Set.of(TEST_FLIPPED_TAGS));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testToString() throws DukeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(new Expense.Builder()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .setAmount(TEST_AMOUNT)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .setDescription(TEST_DESCRIPTION)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .setTentative(TEST_TENTATIVE)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .setTime(TEST_TIME)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .invertTags(TEST_TAGS)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .build()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .toString(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                ACTUAL_TO_STRING);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testToStorageString() throws DukeException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        String storageString \u003d new Expense.Builder()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .setAmount(TEST_AMOUNT)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .setDescription(TEST_DESCRIPTION)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .setTentative(TEST_TENTATIVE)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .setTime(TEST_TIME)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .invertTags(TEST_TAGS)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .build()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .toStorageString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(storageString, ACTUAL_TO_STORAGE_STRING);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder(storageString).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getAmount(), TEST_AMOUNT);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getDescription(), TEST_DESCRIPTION);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.isTentative(), TEST_TENTATIVE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(Parser.formatTime(testExpense.getTime()), TEST_TIME);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getTags(), Set.of(TEST_TAGS));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testInvalidStorageString() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            new Expense.Builder(INVALID_STORAGE_STRING);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            assertEquals(String.format(DukeException.MESSAGE_EXPENSE_AMOUNT_INVALID, \"1.223\"), e.getMessage());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 1,
      "otonashixav": 138,
      "lucasfoo": 6
    }
  },
  {
    "path": "src/test/java/duke/parser/CommandParamsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.command.CommandParams;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeRuntimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class CommandParamsTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void testCorrectParamValues() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        CommandParams testParams \u003d new CommandParams(\"add 2.12 /description hello /tag a b c\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testParams.getCommand().getName(), \"add\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testParams.getMainParam(), \"2.12\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testParams.getParam(\"description\"), \"hello\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testParams.getParam(\"tag\"), \"a b c\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertTrue(testParams.containsParams(\"tag\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertFalse(testParams.containsParams(\"time\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void testCorrectNullParamValues() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        CommandParams testParams \u003d new CommandParams(\"add /description /tag not null\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertNull(testParams.getMainParam());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testParams.getParam(\"tag\"), \"not null\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            testParams.getParam(\"description\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING_VALUE, \"description\"), e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testParamNotFoundException() throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        CommandParams testParams \u003d new CommandParams(\"add\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            testParams.getParam(\"a\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING_VALUE, \"a\"), e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testDuplicateParams() throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            CommandParams testParams \u003d new CommandParams(\"add /time /time\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                String.format(DukeException.MESSAGE_COMMAND_PARAM_DUPLICATE, \"time\"), e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testAbbreviationFunctionality() throws DukeException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            CommandParams testParams \u003d new CommandParams(\"b\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                DukeException.MESSAGE_COMMAND_NAME_UNKNOWN, e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        CommandParams testParams \u003d new CommandParams(\"ad /d description\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testParams.getCommand().getName(), \"add\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testParams.getParam(\"description\"), \"description\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 3,
      "otonashixav": 73,
      "lucasfoo": 4
    }
  }
]
