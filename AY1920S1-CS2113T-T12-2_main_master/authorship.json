[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    ignoreFailures \u003d true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    archiveVersion \u003d \"V1.3\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    mainClassName \u003d \u0027duke.Launcher\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    mainClassName \u003d \"duke/Launcher\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 19,
      "-": 44,
      "lucasfoo": 3
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Budget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.ExpenseList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeRuntimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * Represents our Duke and contains the main program of Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String BACKUP_EXTENSION \u003d \".backup\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final File DEFAULT_USER_DIRECTORY \u003d new File(\"data\" + File.separator + \"duke\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final File EXPENSES_FILE \u003d new File(DEFAULT_USER_DIRECTORY, \"expenses.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final File BUDGET_FILE \u003d new File(DEFAULT_USER_DIRECTORY, \"budget.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final File EXPENSES_BACKUP_FILE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        new File(DEFAULT_USER_DIRECTORY, \"expenses.txt\" + BACKUP_EXTENSION);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final File BUDGET_BACKUP_FILE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        new File(DEFAULT_USER_DIRECTORY, \"budget.txt\" + BACKUP_EXTENSION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Budget budget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public ExpenseList expenseList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "*/"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs the Duke with the filePath of storage.txt"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * If errors occur during the loading process, an empty taskList will be initialized instead."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param userDirectory The user directory to store all the files associated with Duke."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public Duke(File userDirectory) throws DukeRuntimeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        userDirectory.mkdirs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                expenseList \u003d new ExpenseList(EXPENSES_FILE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                ui.showError(e);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                EXPENSES_BACKUP_FILE.delete();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                EXPENSES_FILE.renameTo(EXPENSES_BACKUP_FILE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                expenseList \u003d new ExpenseList(EXPENSES_FILE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeRuntimeException(\"Could not load expenses from file, nor recover using a new file\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                budget \u003d new Budget(BUDGET_FILE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                ui.showError(e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                BUDGET_BACKUP_FILE.delete();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                BUDGET_FILE.renameTo(BUDGET_BACKUP_FILE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                budget \u003d new Budget(BUDGET_FILE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                throw new DukeRuntimeException(\"Could not load budget from file, nor recover using a new file\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeRuntimeException(\"Could not load budget from file, nor recover using a new file\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        // In case we support changing Duke\u0027s directory in the future"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        this(DEFAULT_USER_DIRECTORY);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Gets the output from Duke\u0027s logic."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param fullCommand String of the full command that the user entered."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return String containing last output message of Duke."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public String getResponse(String fullCommand) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            CommandParams commandParams \u003d new CommandParams(fullCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            Command command \u003d commandParams.getCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            command.execute(commandParams, this);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return ui.getMostRecent();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void println(String s) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        ui.println(s);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 39,
      "ChaojieLiu666": 12,
      "-": 1,
      "lucasfoo": 45
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 8,
      "lucasfoo": 1
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.LogicManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.DukePP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.storage.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.payment.PaymentListStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.payment.PaymentListStorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.ui.UiManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * Bridge between duke and MainWindow."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Main.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        ExpenseListStorage expenseListStorage \u003d new ExpenseListStorageManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        PlanAttributesStorage planAttributesStorage \u003d new PlanAttributesStorageManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        IncomeListStorage incomeListStorage \u003d new IncomeListStorageManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        BudgetStorage budgetStorage \u003d new BudgetStorage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        BudgetViewStorage budgetViewStorage \u003d new BudgetViewStorage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        PaymentListStorage paymentListStorage \u003d new PaymentListStorageManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        storage \u003d new StorageManager(expenseListStorage,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                     planAttributesStorage, "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                     incomeListStorage, "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                     budgetStorage,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                                     budgetViewStorage,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                     paymentListStorage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"Initialized the storage\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(!storage.loadPaymentList().isPresent()) logger.info(\"PaymentList is not loaded\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(storage.loadExpenseList() \u003d\u003d null) logger.info(\"expenseList is not loaded\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(storage.loadIncomeList() \u003d\u003d null) logger.info(\"incomeList is not loaded\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(storage.loadBudget() \u003d\u003d null) logger.info(\"budgetList is not loaded\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        model \u003d new DukePP(storage.loadExpenseList(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                storage.loadPlanAttributes(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                storage.loadIncomeList(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                storage.loadBudget(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                storage.loadBudgetView(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                storage.loadPaymentList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"Initialized the model\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"Initialized the logic\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"Initialized the app\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Starts Duke with MainWindow."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param primaryStage The main GUI of Duke"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        primaryStage.setResizable(false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 5,
      "otonashixav": 7,
      "ChaojieLiu666": 47,
      "lucasfoo": 28
    }
  },
  {
    "path": "src/main/java/duke/commons/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 11
    }
  },
  {
    "path": "src/main/java/duke/commons/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "// Adopted from reference project addressbook-level3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via Paths#get(String),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 84
    }
  },
  {
    "path": "src/main/java/duke/commons/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "// Adopted from reference project addressbook-level3"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"Entered the deserializeObjectFromJsonFile method\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @throws DukeException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            logger.info(\"Have read the deserialize object\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"objectMapper starts working.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 145
    }
  },
  {
    "path": "src/main/java/duke/commons/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "// Adopted from reference project addressbook-level3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String LOG_FILE \u003d \"Duke++.log\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 116
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * The exception Duke throws upon encountering a problem that can be recovered from."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_LOAD_FILE_FAILED \u003d \"The file at %s could not be loaded. \""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        + \"I will back it up and create a new file.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_SAVE_FILE_FAILED \u003d \"The file at %s could not be saved to. \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        + \"Close other programs that may be accessing it.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_NO_ITEM_AT_INDEX \u003d \"There is no %s numbered %d!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_PARSER_TIME_INVALID \u003d \"%s is not a valid time!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_EXPENSE_AMOUNT_INVALID \u003d \"%s is not a valid amount!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_EXPENSE_TIME_INVALID \u003d \"%s is not a valid time!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_COMMAND_PARAM_UNKNOWN \u003d \"%s is not a valid parameter for this command!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_COMMAND_PARAM_MISSING_VALUE \u003d \"/%s needs a value!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_COMMAND_PARAM_MISSING \u003d \"This command needs /%s to be given!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_COMMAND_PARAM_DUPLICATE \u003d \"/%s cannot be specified twice!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_COMMAND_NAME_UNKNOWN \u003d \"I don\u0027t know what command that is!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static final String MESSAGE_BUDGET_AMOUNT_INVALID \u003d \"%s is not a valid amount!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public static final String MESSAGE_BUDGET_VIEW_INVALID \u003d \"%s is not a valid view! Choose between a view between 1 to 6!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static final String MESSAGE_SORT_CRITERIA_INVALID \u003d \"%s is not a valid sort criteria!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static final String MESSAGE_EXPENSE_VIEW_SCOPE_NAME_INVALID \u003d \"%s is not a valid view scope name!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static final String MESSAGE_EXPENSE_VIEW_SCOPE_NUMBER_INVALID \u003d \"%s is not a valid view scope number!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public static final String MESSAGE_DESIRED_PANE_NAME_INVALID \u003d \"%s is not an available pane!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public static final String MESSAGE_INCOME_AMOUNT_INVALID \u003d \"%s is not a valid amount!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public static final String MESSAGE_INCOME_TIME_INVALID \u003d \"%s is not a valid time!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static final String MESSAGE_PRIORITY_NAME_INVALID \u003d \"%s is not a priority name.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static final String MESSAGE_PAYMENT_STORAGE_MISSING_FIELD \u003d \"Payment\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static final String MESSAGE_PAYMENT_AMOUNT_INVALID \u003d \"%s is not a valid amount!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static final String MESSAGE_PAYMENT_TIME_INVALID \u003d \"%s is not a valid date!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static final String MESSAGE_PAYMENT_SAVE_FAILED \u003d \"Errors occur in payment storage\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static final String MESSAGE_NUMBER_FORMAT_INVALID \u003d \"%s is not a valid index\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static final String MESSAGE_PAYMENT_SCOPE_INVALID \u003d \"%s is not a valid time scope\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 4,
      "otonashixav": 17,
      "ChaojieLiu666": 10,
      "lucasfoo": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeRuntimeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * The exception Duke throws upon encountering an unexpected error not caused by the user nor"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * by invalid validation of parameters."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class DukeRuntimeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String MESSAGE_FATAL_ERROR \u003d \"A fatal error has occurred. %s.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an {@code DukeRuntimeException} object with exception message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public DukeRuntimeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(String.format(MESSAGE_FATAL_ERROR, message));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an {@code DukeRuntimeException} object with exception message and cause."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public DukeRuntimeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(String.format(MESSAGE_FATAL_ERROR, message), cause);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 23
    }
  },
  {
    "path": "src/main/java/duke/logic/CommandParams.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeRuntimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.logic.command.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.payment.AddPaymentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.payment.ChangePaymentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.payment.DeletePaymentCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.payment.FilterPaymentCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.payment.SearchPaymentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.payment.SortPaymentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.AddExpenseCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.AddIncomeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.BudgetCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.ConfirmTentativeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.FilterExpenseCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.GoToCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.PlanBotCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.SortExpenseCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.ViewExpenseCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.command.payment.*;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * An object containing information about a command\u0027s type and parameters."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class CommandParams {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // Internal map that stores all secondary parameters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private final Map\u003cString, String\u003e secondaryParams;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // The command type i.e. the first word in the command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private final Command command;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // The main parameter value i.e. everything after the first word, before any secondary parameters are declared"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private final String mainParam;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // The regular expression used to identify secondary parameters."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // Currently matches and replaces any number of spaces followed by a forward slash (\\\\s+(\\\\/)),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // which are followed by any word consisting of only lowercase alphabets (not replaced)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // Matches [and replaces]: \"[ /]at\", \"[ /]b\", \"[ /]test\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // Ignores: \"1/1\", \"a / b\", \"a/ \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final Pattern PARAM_INDICATOR_REGEX \u003d Pattern.compile(\"(\\\\s+(\\\\/(?\u003d[a-z]+)))\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // The regular expression used to identify a space."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    // Currently matches and replaces any number of spaces."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final Pattern SPACE_REGEX \u003d Pattern.compile(\"(\\\\s+)\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final Supplier\u003cStream\u003cCommand\u003e\u003e COMMANDS \u003d () -\u003e Stream.of("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            new AddExpenseCommand(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new DeleteExpenseCommand(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            new ConfirmTentativeCommand(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            new ExitCommand(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new FilterExpenseCommand(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new SortExpenseCommand(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new ViewExpenseCommand(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            new GoToCommand(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            new PlanBotCommand(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new BudgetCommand(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new AddPaymentCommand(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new ChangePaymentCommand(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new DeletePaymentCommand(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new FilterPaymentCommand(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new SearchPaymentCommand(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new SortPaymentCommand(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            new AddIncomeCommand(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            new DeleteIncomeCommand(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            new ViewBudgetCommand(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new DonePaymentCommand()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    );"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Creates a new {@code CommandParams} object using a {@code String} obtained directly from"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * the user. The {@code CommandParams} object cannot have two parameters of the same name, and"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * will throw a {@code DukeException} if the user tries to specify two parameters of the same name."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param fullCommand the full command input by the user, which will be parsed into parameters."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the user specified a parameter twice."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public CommandParams(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        secondaryParams \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        // Split the input into an array of Strings, containing concatenated parameter names and values"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String[] nameValueStrings \u003d PARAM_INDICATOR_REGEX.split(fullCommand.trim());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        // Get commandType and mainParam first"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        command \u003d parseCommand(nameValueStrings[0]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        mainParam \u003d extractMainParam(nameValueStrings[0], SPACE_REGEX.split(command.getName()).length);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        // Get all the others"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        for (int i \u003d 1; i \u003c nameValueStrings.length; i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            String[] nameValuePair \u003d SPACE_REGEX.split(nameValueStrings[i], 2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            List\u003cString\u003e possibleParamNames \u003d command.getSecondaryParams().keySet().stream()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    .filter(k -\u003e k.startsWith(nameValuePair[0]))"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (possibleParamNames.size() !\u003d 1) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_UNKNOWN, nameValuePair[0]));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            String verifiedParamName \u003d possibleParamNames.get(0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (secondaryParams.containsKey(verifiedParamName)) { // can\u0027t contain the same key twice"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                throw new DukeException("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        String.format(DukeException.MESSAGE_COMMAND_PARAM_DUPLICATE, verifiedParamName));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (nameValuePair.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                secondaryParams.put(verifiedParamName, nameValuePair[1]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                secondaryParams.put(verifiedParamName, null);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the command corresponding to this command params object."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the command corresponding to this command params object."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the {@code mainParam} parameter that was input by the user. May be null."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return {@code mainParam}. May be null."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public String getMainParam() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return mainParam;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns whether the command has a {@code mainParam}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the existence of {@code mainParam}, that is, whether it is null or not."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public boolean containsMainParam() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return mainParam !\u003d null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the value of a requested parameter. The parameter\u0027s existence should be checked prior if"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * the parameter is optional, as this method throws {@code DukeException} if the parameter does not"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * exist, or is null."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param paramName the name of the parameter whose value to return."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the value of the requested parameter."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeRuntimeException if the parameter does not exist, or is null."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public String getParam(String paramName) throws DukeException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        String paramValue \u003d secondaryParams.get(paramName);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (paramValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING_VALUE, paramName));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return paramValue;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns true if all parameters specified by {@code paramNames} exist in the {@code CommandParams}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * object, and false otherwise."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Can be used to check for optional flags."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param paramNames the parameter(s) whose existence to check for."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return true if the parameter(s) specified by {@code paramNames} exists, and false otherwise."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public boolean containsParams(String... paramNames) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        for (String paramName : paramNames) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (!secondaryParams.containsKey(paramName)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static String extractMainParam(String string, int numberOfWords) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        String[] words \u003d SPACE_REGEX.split(string, numberOfWords + 1);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (words.length \u003c\u003d numberOfWords) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return words[numberOfWords];"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static Command parseCommand(String commandName) throws DukeException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        // Inelegant solution, but I don\u0027t want to have to add a new method to every Command class."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        String[] commandNameWords \u003d Arrays.copyOfRange(commandName.split(\"\\\\s+\"), 0, 2);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (commandNameWords.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            List\u003cCommand\u003e validCommands \u003d COMMANDS.get()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    .filter(c -\u003e c.getName().split(\" \").length \u003d\u003d 2)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    .filter(c -\u003e (c.getName().split(\" \")[0].startsWith(commandNameWords[0])"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                            \u0026\u0026 c.getName().split(\" \")[1].startsWith(commandNameWords[1])))"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (validCommands.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                return validCommands.get(0);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        List\u003cCommand\u003e validCommands \u003d COMMANDS.get()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .filter(c -\u003e c.getName().split(\" \").length \u003d\u003d 1)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .filter(c -\u003e (c.getName().split(\" \")[0].startsWith(commandNameWords[0])))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (validCommands.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return validCommands.get(0);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        throw new DukeException(DukeException.MESSAGE_COMMAND_NAME_UNKNOWN);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 7,
      "otonashixav": 183,
      "ChaojieLiu666": 15,
      "lucasfoo": 20
    }
  },
  {
    "path": "src/main/java/duke/logic/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public enum DisplayedPane {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        EXPENSE,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        TRENDING,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        BUDGET,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        PLAN,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        PAYMENT,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        PAYMENT_SEARCH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // todo: add more custom pages."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private String consoleInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private DisplayedPane displayedPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult(String consoleInfo, DisplayedPane displayedPane, boolean isExit) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.consoleInfo \u003d consoleInfo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.displayedPane \u003d displayedPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult(String consoleInfo, DisplayedPane displayedPane) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this(consoleInfo, displayedPane, false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public String getConsoleInfo() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return consoleInfo;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public DisplayedPane getDisplayedPane() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return displayedPane;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 1,
      "ChaojieLiu666": 45
    }
  },
  {
    "path": "src/main/java/duke/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.model.Income;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.PlanBot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.payment.Payment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * API of the Logic component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    CommandResult execute(String userInput) throws DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    ObservableList\u003cExpense\u003e getExternalExpenseList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    ObservableList\u003cPlanBot.PlanDialog\u003e getDialogObservableList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    BigDecimal getTagAmount(String tag);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    ObservableList\u003cIncome\u003e getExternalIncomeList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    ObservableList\u003cString\u003e getBudgetObservableList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    BigDecimal getMonthlyBudget();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    BigDecimal getTotalAmount();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    BigDecimal getRemaining(BigDecimal total);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    Map\u003cInteger, String\u003e getBudgetViewCategory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    BigDecimal getBudgetTag(String category);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    ObservableList\u003cPayment\u003e getFilteredPaymentList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    StringProperty getPaymentSortingCriteria();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    ObjectProperty\u003cPredicate\u003e getPaymentPredicate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    StringProperty getExpenseListTotalString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    StringProperty getSortCriteriaString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    StringProperty getViewCriteriaString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    StringProperty getFilterCriteriaString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 16,
      "ChaojieLiu666": 27,
      "lucasfoo": 15
    }
  },
  {
    "path": "src/main/java/duke/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.Expense;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.Income;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.PlanBot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.payment.Payment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult execute(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        CommandParams commandParams \u003d new CommandParams(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Command command \u003d commandParams.getCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        commandResult \u003d command.execute(commandParams, model, storage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExternalExpenseList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return model.getExpenseExternalList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public ObservableList\u003cPlanBot.PlanDialog\u003e getDialogObservableList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return model.getDialogObservableList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BigDecimal getTagAmount(String tag) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return model.getExpenseList().getTagAmount(tag);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public ObservableList\u003cIncome\u003e getExternalIncomeList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return model.getIncomeExternalList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public ObservableList\u003cString\u003e getBudgetObservableList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return model.getBudgetObservableList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BigDecimal getMonthlyBudget() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return model.getMonthlyBudget();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BigDecimal getTotalAmount() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return model.getTotalAmount();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BigDecimal getRemaining(BigDecimal total) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return model.getRemaining(total);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    };"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public Map\u003cInteger, String\u003e getBudgetViewCategory() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return model.getBudgetViewCategory();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BigDecimal getBudgetTag(String category) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return model.getBudgetTag(category);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ObservableList\u003cPayment\u003e getFilteredPaymentList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return model.getFilteredPaymentList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public StringProperty getPaymentSortingCriteria() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return model.getPaymentSortingCriteria();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ObjectProperty\u003cPredicate\u003e getPaymentPredicate() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return model.getPaymentPredicate();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public StringProperty getExpenseListTotalString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return model.getExpenseListTotalString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public StringProperty getSortCriteriaString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return model.getSortCriteriaString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public StringProperty getViewCriteriaString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return model.getViewCriteriaString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public StringProperty getFilterCriteriaString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return model.getFilterCriteriaString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 39,
      "ChaojieLiu666": 50,
      "lucasfoo": 34
    }
  },
  {
    "path": "src/main/java/duke/logic/Parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * Parses the command line from user input to tokens and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * packages the tokens to {@code Command} object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm dd/MM/yyyy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Converts a LocalDateTime to a user readable string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param localDateTime LocalDateTime object that we wish to convert"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return String that is a formatted date and time"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static String formatTime(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return localDateTime.format(dateTimeFormatter);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Converts a {@code String} to a {@code LocalDateTime}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param string {@code String} to convert."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return {@code LocalDateTime} corresponding to the string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the string cannot be parsed into a {@code LocalDateTime} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static LocalDateTime parseTime(String string) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return LocalDateTime.parse(string, dateTimeFormatter);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_PARSER_TIME_INVALID, string));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Returns a formatted BigDecimal representing Money."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param string String we want to format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @return a formatted BigDecimal representing Money."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public static BigDecimal parseMoney(String string) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            double amountDouble \u003d Double.parseDouble(string);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            BigDecimal amount \u003d BigDecimal.valueOf(amountDouble);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            BigDecimal scaledAmount \u003d amount.setScale(2, RoundingMode.HALF_EVEN);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return scaledAmount;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (NumberFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_EXPENSE_AMOUNT_INVALID, string));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "otonashixav": 32,
      "ChaojieLiu666": 1,
      "lucasfoo": 29
    }
  },
  {
    "path": "src/main/java/duke/logic/command/AddExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.model.Expense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * Represents a specified command as AddCommand by extending the {@code Command} class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * Adds various specified type of expensesList into the ExpenseList. e.g event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * Responses with the result."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class AddExpenseCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String name \u003d \"addExpense\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String description \u003d \"Adds a new Expense\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String usage \u003d \"add $cost\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Added the expense!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        DESCRIPTION(\"description\", \"a short description or name for the expense\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        TAG(\"tag\", \"tags that should be added to the expense\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        TIME(\"time\", \"the time of the expense\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TENTATIVE(\"tentative\", \"sets the expense to be tentative\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        RECURRING(\"recurring\", \"sets the expense to be recurring\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Creates a new command object, with its name, description, usage and secondary parameters."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public AddExpenseCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(name,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                description,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                usage,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense.Builder expenseBuilder \u003d new Expense.Builder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (!commandParams.containsMainParam()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"amount\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        expenseBuilder.setAmount(commandParams.getMainParam());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (commandParams.containsParams(SecondaryParam.DESCRIPTION.name)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            expenseBuilder.setDescription(commandParams.getParam(SecondaryParam.DESCRIPTION.name));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (commandParams.containsParams(SecondaryParam.TAG.name)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            expenseBuilder.setTag(commandParams.getParam(SecondaryParam.TAG.name).toUpperCase());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (commandParams.containsParams(SecondaryParam.TIME.name)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            expenseBuilder.setTime(commandParams.getParam(SecondaryParam.TIME.name));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (commandParams.containsParams(SecondaryParam.TENTATIVE.name)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            expenseBuilder.setTentative(true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (commandParams.containsParams(SecondaryParam.RECURRING.name)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            expenseBuilder.setRecurring(true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        model.addExpense(expenseBuilder.build());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        // duke.expenseList.update();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        storage.saveExpenseList(model.getExpenseList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.EXPENSE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        if (commandParams.containsParams(SecondaryParam.TENTATIVE.name)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            expenseBuilder.setTentative(true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 22,
      "otonashixav": 47,
      "ChaojieLiu666": 1,
      "lucasfoo": 26
    }
  },
  {
    "path": "src/main/java/duke/logic/command/AddIncomeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.model.Income;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "termehlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": " * Represents a specified command as AddCommand by extending the {@code Command} class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": " * Adds various specified incomeList into the IncomeList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "termehlee"
        },
        "content": " * Responses with the result."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "termehlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": "public class AddIncomeCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String name \u003d \"addIncome\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String description \u003d \"Adds a new Income\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String usage \u003d \"add $income\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Added the income!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        DESCRIPTION(\"description\", \"a short description or name for source of the income\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Creates a new command object, with its name, description, usage and secondary parameters."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public AddIncomeCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        super(name,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                description,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                usage,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                        .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        Income.Builder incomeBuilder \u003d new Income.Builder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        if (!commandParams.containsMainParam()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"amount of income\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        if (!commandParams.containsParams(SecondaryParam.DESCRIPTION.name)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"source of income\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        incomeBuilder.setAmount(commandParams.getMainParam());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        incomeBuilder.setDescription(commandParams.getParam(SecondaryParam.DESCRIPTION.name));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        model.addIncome(incomeBuilder.build());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        storage.saveIncomeList(model.getIncomeList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.BUDGET);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "termehlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 70
    }
  },
  {
    "path": "src/main/java/duke/logic/command/BudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class BudgetCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String name \u003d \"addBudget\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String description \u003d \"sets a budget\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String usage \u003d \"budget $amount\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Set the budget!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String DUPLICATE_MESSAGE \u003d \"Updated the budget!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TAG(\"tag\", \"tags that we want a budget to be associated with\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public BudgetCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        super(name, description, usage, Stream.of(BudgetCommand.SecondaryParam.values())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (!commandParams.containsMainParam()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"amount\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            BigDecimal amount \u003d new BigDecimal(commandParams.getMainParam());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            BigDecimal scaledAmount \u003d amount.setScale(2, RoundingMode.HALF_UP);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            if (commandParams.containsParams(SecondaryParam.TAG.name)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                String category \u003d commandParams.getParam(SecondaryParam.TAG.name).toUpperCase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                model.setCategoryBudget(category, amount);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                model.setMonthlyBudget(scaledAmount);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            storage.saveBudget(model.getBudget());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_BUDGET_AMOUNT_INVALID,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    commandParams.getMainParam()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        if(model.getBudgetCategory().containsKey(commandParams.getParam(SecondaryParam.TAG.name))) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            return new CommandResult(DUPLICATE_MESSAGE, CommandResult.DisplayedPane.BUDGET);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.BUDGET);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 9,
      "otonashixav": 2,
      "ChaojieLiu666": 3,
      "lucasfoo": 53
    }
  },
  {
    "path": "src/main/java/duke/logic/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * Acts as the parent class of all commands in the command package, with fields meant to be"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * populated by the individual commands."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private String usage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private Map\u003cString, String\u003e secondaryParams;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public String getUsage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return usage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public Map\u003cString, String\u003e getSecondaryParams() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return secondaryParams;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Creates a new command object, with its name, description, usage and secondary parameters."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param name            the name of the command to create."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param description     the description of the command to create."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param usage           the usage of the command to create."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param secondaryParams the secondary parameters of the command to create."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected Command(String name, String description, String usage, Map\u003cString, String\u003e secondaryParams) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        this.usage \u003d usage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        this.secondaryParams \u003d secondaryParams;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Executes the command with parameters given by the user."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param commandParams the parameters given by the user, parsed into a {@code CommandParams} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param model          The Duke object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 38,
      "ChaojieLiu666": 8,
      "lucasfoo": 14
    }
  },
  {
    "path": "src/main/java/duke/logic/command/ConfirmTentativeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.Expense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class ConfirmTentativeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Creates a new command object, with its name, description, usage and secondary parameters."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param name            the name of the command to create."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param description     the description of the command to create."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param usage           the usage of the command to create."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param secondaryParams the secondary parameters of the command to create."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String name \u003d \"confirm\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String description \u003d \"confirm a tentative Expense\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String usage \u003d \"confirms $index, if it is a tentative task\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Confirmed the tentative expense!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public ConfirmTentativeCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            int index \u003d Integer.parseInt(commandParams.getMainParam());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Expense expense \u003d model.getExpenseExternalList().get(index - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            if (expense.isTentative()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                model.deleteExpense(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                expense.setTentative(false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                model.addExpense(expense);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                throw new DukeException(index + \" is not a tentative task!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeException(\"Please enter a number!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeException(\"The index you\u0027ve entered is out of range!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.EXPENSE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 65
    }
  },
  {
    "path": "src/main/java/duke/logic/command/DeleteExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * Represents a specified command as DeleteCommand by extending the {@code Command} class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": " * Deletes the task with given index or specific command from the ExpenseList of Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * Responses with the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class DeleteExpenseCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String name \u003d \"deleteExpense\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String description \u003d \"Deletes an Expense\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String usage \u003d \"delete $index\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Deleted the expense!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs a {@code DeleteCommand} object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * given the index of the task to be deleted."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public DeleteExpenseCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Lets the ExpenseList of Duke delete the task with the given index(s), or the entire task list and"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * updates content of storage file according to new ExpenseList."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Responses the result to user by using ui of Duke."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException If the index given is out of range, invalid, or does not exist."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        if (!commandParams.containsMainParam()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"index\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        if (commandParams.getMainParam().equals(\"all\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            model.clearExpense();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        } else if (commandParams.getMainParam().contains(\"-\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            String[] index \u003d commandParams.getMainParam().split(\"-\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            int difference \u003d Integer.parseInt(index[1]) - Integer.parseInt(index[0]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            int counter \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            for (int i \u003d Integer.parseInt(index[0]); counter \u003c\u003d difference; counter++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                model.deleteExpense(i);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            model.deleteExpense(Integer.parseInt(commandParams.getMainParam()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // duke.expenseList.update();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        storage.saveExpenseList(model.getExpenseList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.EXPENSE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 14,
      "otonashixav": 23,
      "ChaojieLiu666": 18,
      "lucasfoo": 20
    }
  },
  {
    "path": "src/main/java/duke/logic/command/DeleteIncomeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "termehlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "termehlee"
        },
        "content": " * Represents a specified command as DeleteIncomeCommand by extending the {@code Command} class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": " * Deletes the task with given index or specific command from the IncomeList of Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": " * Responses with the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "termehlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "termehlee"
        },
        "content": "public class DeleteIncomeCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String name \u003d \"deleteIncome\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String description \u003d \"Deletes an Income\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String usage \u003d \"delete $index\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Deleted the income!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Constructs a {@code DeleteIncomeCommand} object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * given the index of the task to be deleted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public DeleteIncomeCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Lets the IncomeList of Duke delete the task with the given index(s), or the entire task list and"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * updates content of storage file according to new IncomeList."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Responses the result to user by using ui of Duke."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @param"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @throws DukeException If the index given is out of range, invalid, or does not exist."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        if (!commandParams.containsMainParam()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"index\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        if (commandParams.getMainParam().equals(\"all\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            model.clearIncome();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        } else if (commandParams.getMainParam().contains(\"-\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            String[] index \u003d commandParams.getMainParam().split(\"-\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            int difference \u003d Integer.parseInt(index[1]) - Integer.parseInt(index[0]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            int counter \u003d 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            for (int i \u003d Integer.parseInt(index[0]); counter \u003c\u003d difference; counter++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                model.deleteIncome(i);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            model.deleteIncome(Integer.parseInt(commandParams.getMainParam()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        storage.saveIncomeList((model.getIncomeList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.BUDGET);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "termehlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 73
    }
  },
  {
    "path": "src/main/java/duke/logic/command/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * Represents a specified command as ExitCommand by extending the {@code Command} class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * Terminates the loop in {@code main} method of Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * Responses with the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String name \u003d \"bye\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String description \u003d \"Exits Duke++\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String usage \u003d \"bye\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an {@code ExitCommand} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Shows bye to user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // duke.ui.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Platform.exit();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.EXPENSE, true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 27,
      "ChaojieLiu666": 10,
      "lucasfoo": 16
    }
  },
  {
    "path": "src/main/java/duke/logic/command/FilterExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class FilterExpenseCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String name \u003d \"filterExpense\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String description \u003d \"Filter expenses according to a given criteria\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String usage \u003d \"filter $criteria\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Filtered the expense!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an {@code FilterCommand} object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public FilterExpenseCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String mainParam \u003d commandParams.getMainParam();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        model.filterExpense(mainParam);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.EXPENSE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 21,
      "ChaojieLiu666": 26
    }
  },
  {
    "path": "src/main/java/duke/logic/command/GoToCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class GoToCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String name \u003d \"goto\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String description \u003d \"go to a desired pane.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String usage \u003d \"goto $paneName\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public GoToCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super(name,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                description,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                usage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                Stream.of(GoToCommand.SecondaryParam.values())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                        .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String desiredPage \u003d commandParams.getMainParam();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        CommandResult.DisplayedPane displayedPane;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            displayedPane \u003d CommandResult.DisplayedPane.valueOf(desiredPage.toUpperCase());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_DESIRED_PANE_NAME_INVALID, desiredPage));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, displayedPane);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 52
    }
  },
  {
    "path": "src/main/java/duke/logic/command/PlanBotCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.Expense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class PlanBotCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String name \u003d \"plan\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String description \u003d \"a reply to planBot\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String usage \u003d \"sends the user input to planBot\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public PlanBotCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        super(name, description, usage, Stream.of(PlanBotCommand.SecondaryParam.values())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (commandParams.getMainParam() !\u003d null \u0026\u0026 commandParams.getMainParam().contains(\"export\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                for (String category : model.getRecommendedBudgetPlan().getPlanBudget().keySet()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    model.setCategoryBudget(category, model.getRecommendedBudgetPlan().getPlanBudget().get(category));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                for (Expense recommendedExpense : model.getRecommendedBudgetPlan().getRecommendationExpenseList()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    model.addExpense(recommendedExpense);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                storage.saveExpenseList(model.getExpenseList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                storage.saveBudget(model.getBudget());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                return new CommandResult(\"Exported successfully!\", CommandResult.DisplayedPane.EXPENSE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                return new CommandResult(\"Nothing to export!\", CommandResult.DisplayedPane.PLAN);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            model.processPlanInput(commandParams.getMainParam());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            storage.savePlanAttributes(model.getKnownPlanAttributes());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return new CommandResult(\"PlanBot replied!\", CommandResult.DisplayedPane.PLAN);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 59
    }
  },
  {
    "path": "src/main/java/duke/logic/command/SortExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class SortExpenseCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String name \u003d \"sortExpense\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String description \u003d \"Sort expenses according to a given criteria\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String usage \u003d \"sort $criteria\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Sorted the expense!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an {@code SortCommand} object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public SortExpenseCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String mainParam \u003d commandParams.getMainParam();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        model.sortExpense(mainParam);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.EXPENSE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 22,
      "ChaojieLiu666": 25
    }
  },
  {
    "path": "src/main/java/duke/logic/command/ViewBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "termehlee"
        },
        "content": "public class ViewBudgetCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String name \u003d \"viewBudget\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String description \u003d \"sets a budgetView\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String usage \u003d \"budget $amount\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Set the budget view!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        TAG(\"tag\", \"tags that we want a budget to be associated with\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public ViewBudgetCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        super(name, description, usage, Stream.of(ViewBudgetCommand.SecondaryParam.values())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        if (!commandParams.containsMainParam()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"pane\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        if (!commandParams.containsParams(SecondaryParam.TAG.name)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"tag\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        int view \u003d Integer.parseInt(commandParams.getMainParam());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        if (view \u003c 1 || view \u003e 6) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_BUDGET_VIEW_INVALID, view));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        String category \u003d commandParams.getParam(SecondaryParam.TAG.name).toUpperCase();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        model.setBudgetView(view, category);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        storage.saveBudgetView(model.getBudgetView());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.BUDGET);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "termehlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 60
    }
  },
  {
    "path": "src/main/java/duke/logic/command/ViewExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class ViewExpenseCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String name \u003d \"viewExpense\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String description \u003d \"Change how expenses are displayed\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String usage \u003d \"view $criteria\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Changed view scope of expenses!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        PREVIOUS(\"previous\", \"the number of pages to move back by\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an {@code ViewCommand} object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ViewExpenseCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(!commandParams.containsMainParam()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"timeScope\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String mainParam \u003d commandParams.getMainParam();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (!commandParams.containsParams(\"previous\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            model.viewExpense(mainParam, 0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.EXPENSE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        int previous;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            previous \u003d Integer.parseInt(commandParams.getParam(\"previous\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                DukeException.MESSAGE_EXPENSE_VIEW_SCOPE_NUMBER_INVALID,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                commandParams.getParam(\"previous\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        model.viewExpense(mainParam, previous);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.EXPENSE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 25,
      "ChaojieLiu666": 39
    }
  },
  {
    "path": "src/main/java/duke/logic/command/payment/AddPaymentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command.payment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.payment.Payment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class AddPaymentCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String name \u003d \"addPayment\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String description \u003d \"Adds a new pending payment\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String usage \u003d \"addPayment $cost\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Added the payment!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        DESCRIPTION(\"description\", \"a short description or name of the pending payment\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        DUE(\"due\", \"the due date of affording the payment\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        PRIORITY(\"priority\", \"the priority of the payment\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        RECEIVER(\"receiver\", \"the receiver of the payment\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        TAG(\"tag\", \"tag of the pending payment\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Creates a AddPaymentCommand, with its name, description, usage and secondary parameters."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public AddPaymentCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Payment.Builder paymentBuilder \u003d new Payment.Builder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(!commandParams.containsMainParam()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"amount\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paymentBuilder.setAmount(commandParams.getMainParam());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(!commandParams.containsParams(SecondaryParam.DESCRIPTION.name)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"description\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paymentBuilder.setDescription(commandParams.getParam(SecondaryParam.DESCRIPTION.name));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(!commandParams.containsParams(SecondaryParam.DUE.name)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"due\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paymentBuilder.setDue(commandParams.getParam(SecondaryParam.DUE.name));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(commandParams.containsParams(SecondaryParam.PRIORITY.name)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            paymentBuilder.setPriority(commandParams.getParam(SecondaryParam.PRIORITY.name));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(commandParams.containsParams(SecondaryParam.RECEIVER.name)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            paymentBuilder.setReceiver(commandParams.getParam(SecondaryParam.RECEIVER.name));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(commandParams.containsParams(SecondaryParam.TAG.name)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            paymentBuilder.setTag(commandParams.getParam(SecondaryParam.TAG.name));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        model.addPayment(paymentBuilder.build());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            storage.savePaymentList(model.getPaymentList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(DukeException.MESSAGE_PAYMENT_SAVE_FAILED);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.PAYMENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 90
    }
  },
  {
    "path": "src/main/java/duke/logic/command/payment/ChangePaymentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command.payment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.payment.Payment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class ChangePaymentCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String name \u003d \"changePayment\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String description \u003d \"Changes a pending payment\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String usage \u003d \"changePayment $index\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Changed the payment!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        DESCRIPTION(\"description\", \"a short description or name of the pending payment\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        DUE(\"due\", \"the due date of affording the payment\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        PRIORITY(\"priority\", \"the priority of the payment\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        RECEIVER(\"receiver\", \"the receiver of the payment\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        AMOUNT(\"amount\", \"the money of payment\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        TAG(\"tag\", \"remark of the pending payment\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Creates a ChangePaymentCommand, with its name, description, usage and secondary parameters."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ChangePaymentCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (!commandParams.containsMainParam()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"index\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String mainParam \u003d commandParams.getMainParam();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            index \u003d Integer.parseInt(mainParam);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_NUMBER_FORMAT_INVALID, mainParam));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Payment.Builder paymentBuilder \u003d new Payment.Builder(model.getPayment(index));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(commandParams.containsParams(SecondaryParam.AMOUNT.name)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            paymentBuilder.setAmount(commandParams.getParam(SecondaryParam.AMOUNT.name));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(commandParams.containsParams(SecondaryParam.DESCRIPTION.name)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            paymentBuilder.setDescription(commandParams.getParam(SecondaryParam.DESCRIPTION.name));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(commandParams.containsParams(SecondaryParam.DUE.name)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            paymentBuilder.setDue(commandParams.getParam(SecondaryParam.DUE.name));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(commandParams.containsParams(SecondaryParam.PRIORITY.name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            paymentBuilder.setPriority(commandParams.getParam(SecondaryParam.PRIORITY.name));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(commandParams.containsParams(SecondaryParam.RECEIVER.name)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            paymentBuilder.setReceiver(commandParams.getParam(SecondaryParam.RECEIVER.name));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(commandParams.containsParams(SecondaryParam.TAG.name)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            paymentBuilder.setTag(commandParams.getParam(SecondaryParam.TAG.name));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        model.setPayment(index, paymentBuilder.build());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            storage.savePaymentList(model.getPaymentList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(DukeException.MESSAGE_PAYMENT_SAVE_FAILED);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.PAYMENT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 97
    }
  },
  {
    "path": "src/main/java/duke/logic/command/payment/DeletePaymentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command.payment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class DeletePaymentCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String name \u003d \"deletePayment\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String description \u003d \"Deletes a Payment\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String usage \u003d \"deletePayment $index\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Deleted the payment!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Constructs a {@code DeletePaymentCommand} object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * given the index of the payment to be deleted."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public DeletePaymentCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (!commandParams.containsMainParam()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"index\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String mainParam \u003d commandParams.getMainParam();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            model.removePayment(Integer.parseInt(mainParam));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_NUMBER_FORMAT_INVALID, mainParam));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            storage.savePaymentList(model.getPaymentList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(DukeException.MESSAGE_PAYMENT_SAVE_FAILED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.PAYMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 64
    }
  },
  {
    "path": "src/main/java/duke/logic/command/payment/DonePaymentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command.payment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.command.AddExpenseCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Income;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.payment.Payment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class DonePaymentCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String name \u003d \"donePayment\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String description \u003d \"Finish a Payment and add to expenseList\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String usage \u003d \"donePayment $index\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Finished the payment!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Constructs a {@code DeletePaymentCommand} object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * given the index of the payment to be deleted."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public DonePaymentCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (!commandParams.containsMainParam()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"index\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String mainParam \u003d commandParams.getMainParam();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        int targetIndex;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            targetIndex \u003d Integer.parseInt(mainParam);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_NUMBER_FORMAT_INVALID, mainParam));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Payment payment \u003d model.getPayment(targetIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Expense.Builder expenseBuilder \u003d new Expense.Builder(payment);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        model.addExpense(expenseBuilder.build());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        storage.saveExpenseList(model.getExpenseList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        model.removePayment(targetIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            storage.savePaymentList(model.getPaymentList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(DukeException.MESSAGE_PAYMENT_SAVE_FAILED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.PAYMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 80
    }
  },
  {
    "path": "src/main/java/duke/logic/command/payment/FilterPaymentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command.payment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class FilterPaymentCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String name \u003d \"viewPayment\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String description \u003d \"View coming Payments in future\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String usage \u003d \"viewPayment $timeScope\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String OVERDUE_SCOPE \u003d \"overdue\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String WEEK_SCOPE \u003d \"week\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String MONTH_SCOPE \u003d \"month\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String ALL_SCOPE \u003d \"all\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Here are payments!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Constructs a {@code FilterPaymentCommand} object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * given the time scope of coming payments in future to be showed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * The time scope includes overdue, week, month and all."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public FilterPaymentCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(!commandParams.containsMainParam()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"timeScope\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String timeScope \u003d commandParams.getMainParam().toLowerCase();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        switch (timeScope) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case OVERDUE_SCOPE:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                model.setOverduePredicate();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case WEEK_SCOPE:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                model.setWeekPredicate();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case MONTH_SCOPE:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                model.setMonthPredicate();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case ALL_SCOPE:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                model.setAllPredicate();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                throw new DukeException(String.format(DukeException.MESSAGE_PAYMENT_SCOPE_INVALID, timeScope));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.PAYMENT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 76
    }
  },
  {
    "path": "src/main/java/duke/logic/command/payment/SearchPaymentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command.payment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class SearchPaymentCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String name \u003d \"searchPayment\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String description \u003d \"searches payment with given keywords\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String usage \u003d \"searchPayment $keyword\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Here are searching results!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Constructs a {@code SearchPaymentCommand} object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * given the keyword of the payment to be searched."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * The searching scope includes description, receiver and remark of payments."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public SearchPaymentCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(!commandParams.containsMainParam()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"keyword\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        model.setSearchKeyword(commandParams.getMainParam());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.PAYMENT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 53
    }
  },
  {
    "path": "src/main/java/duke/logic/command/payment/SortPaymentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.command.payment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class SortPaymentCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String name \u003d \"sortPayment\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String description \u003d \"Sort Payments with given criteria\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String usage \u003d \"sortPayment $sortCriteria\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String COMPLETE_MESSAGE \u003d \"Payments are sorted!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private enum SecondaryParam {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        SecondaryParam(String name, String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Constructs a {@code SortPaymentCommand} object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * given the sort criteria of payments."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Sort criteria include time, amount and priority."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public SortPaymentCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super(name, description, usage, Stream.of(SecondaryParam.values())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .collect(Collectors.toMap(s -\u003e s.name, s -\u003e s.description)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public CommandResult execute(CommandParams commandParams, Model model, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (!commandParams.containsMainParam()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING, \"sortCriteria\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        model.setPaymentSortingCriteria(commandParams.getMainParam());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return new CommandResult(COMPLETE_MESSAGE, CommandResult.DisplayedPane.PAYMENT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 54
    }
  },
  {
    "path": "src/main/java/duke/logic/util/AutoCompleter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.AddExpenseCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.ConfirmTentativeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.FilterExpenseCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.GoToCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.PlanBotCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.SortExpenseCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.command.ViewExpenseCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.command.BudgetCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.command.ViewBudgetCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.command.payment.AddPaymentCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.command.payment.ChangePaymentCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.command.payment.DeletePaymentCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.command.payment.DonePaymentCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.command.payment.FilterPaymentCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.command.payment.SearchPaymentCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.command.payment.SortPaymentCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Provides a auto-complete to what the user has typed in userInput when TAB key is pressed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * It can complete a commandName or iterate through all suitable commandNames."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * It can also produce a parameter name, complete a parameter name and iterate through all suitable parameter names."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * If the given input ends with space, autoCompleter will produce a parameter name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * If the given input doesn\u0027t end with space and is different from last complement,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * autoCompleter will complete the last token, which can be a commandName or a parameter."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Instead, if the given input is same as last complement,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * autoCompleter will iterate through other suitable complements in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * The mechanism of complement and iteration is firstly getting a suitable token(complement),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * which can be either a complete commandName or parameter, or just original last token from input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * in case that no suitable complements can be applied to current input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Then auto-completer replaces the last token of original input with this suitable token,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * and lastly returns the modified input to userInput TextField."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class AutoCompleter {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AutoCompleter.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Three keywords used to decide the purpose of complement."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Works as a space regex to tokenize the input."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String SPACE \u003d \" \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Works as a indicator of secondary parameter."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String PARAMETER_INDICATOR \u003d \"/\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Indicates the first element of a list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final int INITIAL_INDEX \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Helps conversion between 0-based and 1-based indexes."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final int ZERO_BASED_CONVERSION \u003d 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * The list storing all commands\u0027 names."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private final List\u003cString\u003e allCommandNames;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * CommandNames mapped to their respective secondaryParams\u0027 names."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private final HashMap\u003cString, List\u003cString\u003e\u003e allSecondaryParams;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * The most recent complement provided by auto-completer."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private String lastComplement;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * The content inside the userInput TextField when TAB key is pressed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private String fromInput;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Number of tokens of {@code fromInput}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private int numberOfTokens;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * The starting index of the last token in {@code fromInput}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private int startIndexOfLastToken;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * All suitable tokens that can replace the last token of {@code fromInput}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private List\u003cString\u003e complementList;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * The index used to iterate through {@code complementList}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private int iteratingIndex;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * A supplier that supplies streams of all command classes."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final Supplier\u003cStream\u003cCommand\u003e\u003e COMMANDS \u003d () -\u003e Stream.of("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new AddExpenseCommand(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new DeleteExpenseCommand(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new ConfirmTentativeCommand(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new ExitCommand(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new FilterExpenseCommand(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new SortExpenseCommand(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new ViewExpenseCommand(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new GoToCommand(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new PlanBotCommand(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new AddPaymentCommand(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new ChangePaymentCommand(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new DeletePaymentCommand(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new FilterPaymentCommand(),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new SearchPaymentCommand(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new SortPaymentCommand(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new DonePaymentCommand(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new BudgetCommand(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            new ViewBudgetCommand()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    );"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Purposes of complement."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private enum Purpose {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        COMPLETE_COMMAND_NAME,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        PRODUCE_PARAMETER,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        COMPLETE_PARAMETER,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        ITERATE,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        NOT_DOABLE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Constructs a auto-completer."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * All commandNames are stored in {@code allCommandNames}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * All secondaryParams of each command are stored in {@code allSecondaryParams}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * The {@code complementList} is initialized as an empty ArrayList."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * The {@code lastComplement} is initialized as an empty String."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public AutoCompleter() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        allCommandNames \u003d COMMANDS.get().map(Command::getName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        allSecondaryParams \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        COMMANDS.get().forEach(c -\u003e {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            Set\u003cString\u003e secondaryParamSet \u003d c.getSecondaryParams().keySet();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            List\u003cString\u003e secondaryParamList \u003d new ArrayList\u003cString\u003e(secondaryParamSet);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            allSecondaryParams.put(c.getName(), secondaryParamList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        });"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        complementList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        lastComplement \u003d EMPTY_STRING;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Receives the content in userInput TextField when TAB key is pressed."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Stores it in {@code fromInput}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param fromInput The content in userInput TextField."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void receiveText(String fromInput) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.fromInput \u003d requireNonNull(fromInput);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"start receiving Text\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Replaces the last token of {@code fromInput} with complement token."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * and stores this modified String in {@code lastComplement}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * This modified String is full complement and will be set as text in userInput TextField."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * i.e full complement \u003d fromInput - last token of fromInput + complement token."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return Full complement going to be set in userInput TextField"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public String getFullComplement() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Purpose purpose \u003d getPurpose();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String complement \u003d getComplement(purpose);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        lastComplement \u003d getTailoredInput() + complement;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return lastComplement;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Decides the {@code purpose} with values of various criteria."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Purpose getPurpose() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return Purpose.NOT_DOABLE;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (isSameAsLastComplement()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return Purpose.ITERATE;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (!hasValidCommandName()) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            if (numberOfTokens \u003e 1 || endsWithSpace()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                return Purpose.NOT_DOABLE;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return Purpose.COMPLETE_COMMAND_NAME;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (endsWithSpace()) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return Purpose.PRODUCE_PARAMETER;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (inUncompletedParameter()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return Purpose.COMPLETE_PARAMETER;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (numberOfTokens \u003d\u003d 1) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return Purpose.COMPLETE_COMMAND_NAME;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"purpose decided.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return Purpose.NOT_DOABLE;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Gets the complement token."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * If the {@code purpose} is not {@code ITERATE},"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * it firstly generates {@code complementList} containing all suitable complements(tokens)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * and chooses the first element of list as complement token."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * If the {@code purpose} is {@code ITERATE},"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * it adds the {@code iteratingIndex} by one and chooses the corresponding element"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * in existing {@code complementList} as complement token."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return The complement token"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private String getComplement(Purpose purpose) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        switch (purpose) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        case COMPLETE_COMMAND_NAME:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            completeCommandNameComplements();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            iteratingIndex \u003d INITIAL_INDEX;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        case PRODUCE_PARAMETER:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            produceParameterComplements();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            iteratingIndex \u003d INITIAL_INDEX;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        case COMPLETE_PARAMETER:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            completeParameterComplements();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            iteratingIndex \u003d INITIAL_INDEX;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        case ITERATE:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            iterateIndex();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        case NOT_DOABLE:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            complementList.clear();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (complementList.isEmpty()) { // return original last token if there\u0027s no suitable complement"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return getLastToken();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return complementList.get(iteratingIndex);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Cuts off the last token from {@code fromInput}."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return A tailored input without the last token."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private String getTailoredInput() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return fromInput.substring(INITIAL_INDEX, startIndexOfLastToken);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Tests whether the given input is same as the most recent complement."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * This is a criteria to help decide purpose."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return True if {@code fromInput} is same as {@code lastComplement} and false otherwise"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private boolean isSameAsLastComplement() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return fromInput.equals(lastComplement);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Tests whether the given input is empty."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * This is a criteria to help decide purpose."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return True if {@code fromInput} is an empty String and false otherwise."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private boolean isEmpty() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return fromInput.trim().equals(EMPTY_STRING);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Tests whether the given input ends with a space."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * This is a criteria to help decide purpose."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return True if {@code fromInput} ends with space and false otherwise."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private boolean endsWithSpace() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return fromInput.endsWith(SPACE);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Tests whether the last token of given input starts with {@code PARAMETER_INDICATOR}."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * This is a criteria to help decide purpose."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return True if the last token starts with {@code PARAMETER_INDICATOR} and false otherwise."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private boolean inUncompletedParameter() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return getLastToken().startsWith(PARAMETER_INDICATOR);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Gets the first token of the given input."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Updates {@code numberOfTokens} after the given input is tokenized."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return The first token of {@code fromInput}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private String getCommandName() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        List\u003cString\u003e tokens \u003d Arrays.asList(fromInput.split(SPACE));"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        tokens \u003d tokens.stream().filter(s -\u003e !s.equals(EMPTY_STRING)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        tokens \u003d tokens.stream().map(String::trim).collect(Collectors.toList());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        numberOfTokens \u003d tokens.size();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return tokens.get(INITIAL_INDEX);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Tests whether the first token of given input is a valid commandName."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * This is a criteria to help decide purpose."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return True if the first token of {@code fromInput} is a valid commandName and false otherwise."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private boolean hasValidCommandName() {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return allCommandNames.contains(getCommandName());"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Gets the last token of given input."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Updates {@code startIndexOfLastToken}."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return The last token of {@code fromInput}."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private String getLastToken() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        int index \u003d fromInput.length() - ZERO_BASED_CONVERSION;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        while (index \u003e\u003d INITIAL_INDEX \u0026\u0026 SPACE.charAt(INITIAL_INDEX) !\u003d fromInput.charAt(index)) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            index --;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        startIndexOfLastToken \u003d index + ZERO_BASED_CONVERSION;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return fromInput.substring(startIndexOfLastToken);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Fills the {@code complementList} with all complete versions of current commandName."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * This is called when {@code purpose} is {@code COMPLETE_COMMAND_NAME}."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private void completeCommandNameComplements() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String unCompletedCommandName \u003d getLastToken();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        complementList \u003d allCommandNames.stream()"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .filter(s -\u003e s.startsWith(unCompletedCommandName)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Fills the {@code complementList} with all complete versions of current secondaryParameter."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * This is called when {@code purpose} is {@code COMPLETE_PARAMETER}."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private void completeParameterComplements() {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String unCompletedParameter \u003d getLastToken().substring(1);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        List\u003cString\u003e usableParameters \u003d allSecondaryParams.get(getCommandName());"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        List\u003cString\u003e options \u003d usableParameters.stream()"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .filter(s -\u003e s.startsWith(unCompletedParameter)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"options for complementList lengths \" + options.size());"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        complementList \u003d options.stream().map(s -\u003e PARAMETER_INDICATOR + s).collect(Collectors.toList());"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Fills the {@code complementList} with all secondaryParameters belonging to commandName."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * This is called when {@code purpose} is {@code PRODUCE_PARAMETER}."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private void produceParameterComplements() {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String empty \u003d getLastToken(); // updates the starting index of last token."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        List\u003cString\u003e options \u003d allSecondaryParams.get(getCommandName());"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        complementList \u003d options.stream().map(s -\u003e PARAMETER_INDICATOR + s).collect(Collectors.toList());"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Iterates the index of {@code complementList} by adding it by one."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * This is called when {@code purpose} is {@code ITERATE}."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private void iterateIndex() {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        iteratingIndex ++;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (iteratingIndex \u003e\u003d complementList.size()) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            iteratingIndex \u003d INITIAL_INDEX;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 373,
      "lucasfoo": 45
    }
  },
  {
    "path": "src/main/java/duke/logic/util/InputHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static java.util.Objects.requireNonNullElse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Enables the user to iterate through previous inputs one by one."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Pressing UP key once shows one input earlier."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Pressing more times shows much earlier inputs until the earliest input is reached."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Pressing DOWN key once traverses back to recent input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Pressing more times shows more recent inputs until the most recent input is reached."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * While the most recent input displayed, pressing DOWN Key will clear the textField."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class InputHistory {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final int INITIAL_INDEX \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private List\u003cString\u003e inputHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private int iteratingIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Creates an InputHistory to record user commands sent in textField of mainWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public InputHistory() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        inputHistory \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        iteratingIndex \u003d INITIAL_INDEX;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Adds the input command from textField into InputHistory after it is executed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param newInput The input command to be recorded."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void add(String newInput) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        requireNonNull(newInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (newInput.isBlank()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        inputHistory.add(newInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        iteratingIndex \u003d inputHistory.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Gets the one earlier command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return The earlier command as {@code String}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public String getLastInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(inputHistory.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return EMPTY_STRING;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(isAbleToLast()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            iteratingIndex \u003d iteratingIndex - 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return inputHistory.get(iteratingIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Gets the one later command."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return The later command as {@code String}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public String getNextInput() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(inputHistory.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return EMPTY_STRING;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(isAbleToNext()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            iteratingIndex \u003d iteratingIndex + 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(iteratingIndex \u003d\u003d inputHistory.size()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "           return EMPTY_STRING;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return inputHistory.get(iteratingIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Tests whether there are still available earlier commands."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return True if earlier commands can be found in the record and false otherwise."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private boolean isAbleToLast() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return iteratingIndex \u003e\u003d 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Tests whether there are still available later commands."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return True if later commands can be found in the record and false otherwise."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private boolean isAbleToNext() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return iteratingIndex \u003c inputHistory.size();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 104
    }
  },
  {
    "path": "src/main/java/duke/model/Budget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Budget.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private BigDecimal monthlyBudget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Maps a category to the budget set for the category."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private Map\u003cString, BigDecimal\u003e budgetCategory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private ObservableList\u003cString\u003e budgetObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Constructor for Budget Object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param monthlyBudget a BigDecimal the overall monthly budget"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param budgetCategory A map of String category to the BigDecimal amount"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Budget(BigDecimal monthlyBudget, Map\u003cString, BigDecimal\u003e budgetCategory) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.monthlyBudget \u003d monthlyBudget;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.budgetCategory \u003d budgetCategory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        budgetObservableList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateBudgetObservableList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Setter method for monthlyBudget."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param monthlyBudget BigDecimal budget set for each month"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void setMonthlyBudget(BigDecimal monthlyBudget) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.monthlyBudget \u003d monthlyBudget;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateBudgetObservableList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Gets a string value for monthlyBudget."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @return a String of the monthly budget"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public String getMonthlyBudgetString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return monthlyBudget.toPlainString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Gets a BigDecimal value for monthlyBudget."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return a BigDecimal of the monthly budget"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BigDecimal getMonthlyBudget() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return monthlyBudget;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Sets budget to a given category."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param category the String tag specified that we want to set a budget for"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param budget   a BigDecimal amount for the budget we want to set"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void setCategoryBudget(String category, BigDecimal budget) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        budgetCategory.put(category, budget);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateBudgetObservableList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Gets the difference between the monthly budget and the total expenses spent."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param total the BigDecimal total expenditure from expenseList"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @return BigDecimal value fo the difference"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public BigDecimal getRemaining(BigDecimal total) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return monthlyBudget.subtract(total);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Gets the budget of a specific category"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @param category the String of the specific category"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return BigDecimal value of the budget set for the category"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BigDecimal getBudgetTag(String category) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        if(budgetCategory.containsKey(category)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            return budgetCategory.get(category);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            return BigDecimal.ZERO;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Map\u003cString, BigDecimal\u003e getBudgetCategory() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return budgetCategory;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public ObservableList\u003cString\u003e getBudgetObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return budgetObservableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private void updateBudgetObservableList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        budgetObservableList.clear();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        budgetObservableList.add(\"MONTHLY BUDGET: $\" + monthlyBudget.toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        for (String category : budgetCategory.keySet()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            budgetObservableList.add(category + \": $\" + budgetCategory.get(category));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        logger.info(\"Size of budgetObserverList: $\" + budgetObservableList.size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 25,
      "ChaojieLiu666": 1,
      "lucasfoo": 91
    }
  },
  {
    "path": "src/main/java/duke/model/BudgetView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": "public class BudgetView {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(BudgetView.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Maps the category set for the view"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private Map\u003cInteger, String\u003e budgetViewCategory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Constructor for Budget Object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @param budgetViewCategory A map of view to the category"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BudgetView(Map\u003cInteger, String\u003e budgetViewCategory) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        this.budgetViewCategory \u003d budgetViewCategory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Sets category to a given view."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @param view a Integer view to set"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @param category the String tag specified that we want to set a view to"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void setBudgetView(int view, String category) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        budgetViewCategory.put(view, category);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public Map\u003cInteger, String\u003e getBudgetViewCategory() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return budgetViewCategory;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "termehlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 44
    }
  },
  {
    "path": "src/main/java/duke/model/DukeItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * The parent class for all {@code DukeItem}s, which are stored in {@code DukeList}s."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "abstract class DukeItem implements Serializable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The string that separates different fields in the storage string."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected static final String STORAGE_FIELD_DELIMITER \u003d \"\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The string that separates the names from the values in the storage string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected static final String STORAGE_NAME_SEPARATOR \u003d \":\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The string that separates tags from each other in the storage string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected static final String STORAGE_TAG_SEPARATOR \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The string that separates tags from each other in an input string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected static final String TAG_SEPARATOR \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The item\u0027s tags."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    protected final String tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * A utility method used to extract fields from a storage string into a map, so that they can be"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * easily accessed by the subclasses in order to construct a new builder from the storage string."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param storageString the storage string representing a subclass."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return a map of the storage string\u0027s fields."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected static Map\u003cString, String\u003e storageStringToMap(String storageString) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return Stream.of(storageString.split(STORAGE_FIELD_DELIMITER))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            .map(s -\u003e s.split(STORAGE_NAME_SEPARATOR, 2))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            .collect(Collectors.toMap(s -\u003e s[0], s -\u003e s.length \u003e 1 ? s[1] : \"\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Subclassing solution taken from https://stackoverflow.com/a/17165079"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * A builder class for {@code DukeItem}, making it easier to construct items with"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * optional fields."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param \u003cT\u003e the subclassed builder; see the sof link above."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    abstract static class Builder\u003cT extends Builder\u003cT\u003e\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        private String tag \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Constructs an empty item with default values for all fields."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        protected Builder() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Constructs an item from an existing item."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param i the existing item."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        protected Builder(DukeItem i) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            tag \u003d i.tag;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Constructs an item from its storage string. Used to load items from storage."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param storageString the item\u0027s storage string."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        protected Builder(String storageString) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this(storageStringToMap(storageString));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Constructs an item from its mapped storage string. Used internally to load items from storage."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param mappedStorageString a map of the item\u0027s storage string."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        protected Builder(Map\u003cString, String\u003e mappedStorageString) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            if (mappedStorageString.containsKey(\"tag\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                this.tag \u003d  mappedStorageString.get(\"tag\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        public T setTag(String tag) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.tag \u003d tag;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return getThis();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Method used to limit the scope of suppression; returns {@code this}, type-cast to {@code T},"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * the subclassed builder."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return {@code this} type-casted to {@code T}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private T getThis() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return (T) this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an item from the item builder."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param builder the builder containing information for this object."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected DukeItem(Builder\u003c?\u003e builder) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        tag \u003d builder.tag;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Converts the item to a storage string to be saved, then loaded later."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the item\u0027s storage string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected String toStorageString() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        StringJoiner stringJoiner \u003d new StringJoiner(STORAGE_FIELD_DELIMITER);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        stringJoiner.add(\"tag\" + STORAGE_NAME_SEPARATOR + String.join(\" \", tag));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return stringJoiner.toString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the set of tags of this item."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the set of tags of this item."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public String getTag() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Returns a single string containing all of the tags."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return single String of all the tags"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public String getTagString() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        StringJoiner stringJoiner \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (tag.isEmpty()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return tag;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 1,
      "otonashixav": 131,
      "ChaojieLiu666": 1,
      "lucasfoo": 26
    }
  },
  {
    "path": "src/main/java/duke/model/DukeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.ObjectInput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.ObjectOutput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeRuntimeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * The generic parent list of all lists in Duke, which are responsible for saving their own information"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * and have undo and redo capabilities."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " * @param \u003cT\u003e The {@code DukeItem} contained in the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "abstract class DukeList\u003cT extends DukeItem\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static String STORAGE_DELIMITER \u003d \"\\n\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    // private final File file;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private final String itemName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private Stack\u003cbyte[]\u003e undoStates;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private byte[] currentState;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private Stack\u003cbyte[]\u003e redoStates;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    protected List\u003cT\u003e internalList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    protected ObservableList\u003cT\u003e externalList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Creates a new {@code DukeList}, which saves its data to a file {@code file}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param file     The file to save to."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param itemName the name of the item that populates the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the file cannot be created or read."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public DukeList(File file, String itemName) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        internalList \u003d new ArrayList\u003cT\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        load();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        undoStates \u003d new Stack\u003cbyte[]\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        currentState \u003d toByteArray(internalList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        redoStates \u003d new Stack\u003cbyte[]\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public DukeList(List\u003cT\u003e internalList, String itemName) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.internalList \u003d internalList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        undoStates \u003d new Stack\u003cbyte[]\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        currentState \u003d toByteArray(internalList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        redoStates \u003d new Stack\u003cbyte[]\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Updates, then returns  {@code externalList}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * {@code externalList} should be updated based on filter, sort and view which are implemented"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * by the subclasses."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the up-to-date externalList."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract ObservableList\u003cT\u003e getExternalList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract List\u003cT\u003e getInternalList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract void setSortCriteria(String sortCriteria) throws DukeException;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract void setFilterCriteria(String filterCriteria) throws DukeException;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract void setViewScope(String viewScope, int previous) throws DukeException;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract List\u003cT\u003e sort(List\u003cT\u003e currentList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract List\u003cT\u003e filter(List\u003cT\u003e currentList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public abstract List\u003cT\u003e view(List\u003cT\u003e currentList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Adds an item into {@code internalList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param item the item to add."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void add(T item) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        internalList.add(item);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns an item referenced using its index in {@code externalList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param index the index of the item in @{code externalList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the item."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the index is out of bounds."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public T get(int index) throws DukeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        if (index \u003c 1 || index \u003e externalList.size()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_NO_ITEM_AT_INDEX, itemName, index));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return externalList.get(index - 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the number of items in {@code internalList}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the number of items in {@code internalList}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public int internalSize() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Removes an item from {@code internalList} using its index in {@code externalList}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param index the index of the item to in {@code externalList}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the index is out of bounds."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void remove(int index) throws DukeException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        internalList.remove(get(index));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Removes all items from {@code internalList}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Calling this method indicates that {@code internalList} or one of its members has changed,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * that the file should be updated, and that the state has progressed such that all {@code redoStates}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * are now invalid and should be discarded."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if saving was unsuccessful."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void update() throws DukeException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        undoStates.push(currentState);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        currentState \u003d toByteArray(internalList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        redoStates.clear();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Saves {@code internalList} into {@code file}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the file could not be saved to."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private void save() throws DukeException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            try (FileWriter fileWriter \u003d new FileWriter(file)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                for (T item : internalList) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    fileWriter.write(item.toStorageString());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    fileWriter.write(STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_SAVE_FILE_FAILED, file.getPath()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Loads the data contained in {@code file} into {@code internalList} and updates {@code externalList},"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * overwriting any existing information."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the file could not be accessed, or if any information in the file is invalid."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void load() throws DukeException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            try (Scanner fileReader \u003d new Scanner(file).useDelimiter(STORAGE_DELIMITER)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                while (fileReader.hasNext()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                    internalList.add(itemFromStorageString(fileReader.next()));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (IOException | DukeException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_LOAD_FILE_FAILED, file.getPath()));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns an item from its storage string. Although this method is present in the item builders,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * it is declared here to make it easier to implement (otherwise requires reflection)."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param storageString the storage string of the item."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the item."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the item could not be created from the storage string."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    // protected abstract T itemFromStorageString(String storageString) throws DukeException;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Reverts the state of {@code internalList} some number of times to an earlier state."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param times the number of times to undo."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the number of times actually undone."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the changes could not be saved."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public int undo(int times) throws DukeException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        int actualTimes \u003d 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        for (actualTimes \u003d 0; actualTimes \u003c times \u0026\u0026 !undoStates.isEmpty(); actualTimes++) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            redoStates.push(currentState);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            currentState \u003d undoStates.pop();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        internalList \u003d fromByteArray(currentState);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return actualTimes;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Forwards the state of {@code internalList} some number of times to a later state."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param times the number of times to redo."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the number of times actually undone."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeRuntimeException if the changes could not be saved."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @see #undo"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public int redo(int times) throws DukeException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        int actualTimes \u003d 0;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        for (actualTimes \u003d 0; actualTimes \u003c times \u0026\u0026 !redoStates.isEmpty(); actualTimes++) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            undoStates.push(currentState);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            currentState \u003d redoStates.pop();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        internalList \u003d fromByteArray(currentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return actualTimes;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Taken from https://stackoverflow.com/a/30968827"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Converts the current state of {@code internalList} into a byte array so that it can be restored later."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the byte array of the current {@code internalList}."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private byte[] toByteArray(List\u003cT\u003e list) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try (ByteArrayOutputStream bos \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            ObjectOutput out \u003d new ObjectOutputStream(bos)) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            out.writeObject(list);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return bos.toByteArray();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeRuntimeException(\"Failed to create byte array from list.\", e);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Taken from https://stackoverflow.com/a/30968827"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns a list corresponding to a previous state of {@code internalList}."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Casting to {@code List\u003cT\u003e} causes the warning. As the code is self-contained, there is no risk of"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * the object in {@code bytes} not being one of type {@code List\u003cT\u003e}."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param bytes a byte array corresponding to a previous state of {@code internalList}."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the previous state of {@code internalList}."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private List\u003cT\u003e fromByteArray(byte[] bytes) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try (ByteArrayInputStream bis \u003d new ByteArrayInputStream(bytes);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            ObjectInput in \u003d new ObjectInputStream(bis)) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return (List\u003cT\u003e) in.readObject();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            throw new DukeRuntimeException(\"Failed to load list from byte array.\", e);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 7,
      "otonashixav": 238,
      "ChaojieLiu666": 44
    }
  },
  {
    "path": "src/main/java/duke/model/DukePP.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.payment.Payment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.payment.PaymentList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.payment.PaymentOverduePredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.payment.PaymentInWeekPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.payment.PaymentInMonthPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Wraps all memory data of Duke++"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Implements the interface of model module."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class DukePP implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DukePP.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Predicate\u003cPayment\u003e PREDICATE_SHOW_ALL_PAYMENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private final ExpenseList expenseList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private final PlanBot planBot;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private final IncomeList incomeList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private final Budget budget;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private final BudgetView budgetView;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private final PaymentList payments;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    // todo: add other data inside the DukePP."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ObservableList\u003cExpense\u003e externalExpenseList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public ObservableList\u003cIncome\u003e externalIncomeList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Creates a DukePP."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * This constructor is used for loading DukePP from storage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    // todo: pass more arguments to constructor as more data are implemented."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public DukePP(ExpenseList expenseList, Map\u003cString, String\u003e planAttributes, IncomeList incomeList, Budget budget, BudgetView budgetView, Optional\u003cPaymentList\u003e optionalPayments) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.expenseList \u003d expenseList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.planBot \u003d new PlanBot(planAttributes);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        this.incomeList \u003d incomeList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        this.budgetView \u003d budgetView;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(!optionalPayments.isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            logger.warning(\"PaymentList is not loaded. It be starting with a empty PaymentList\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.payments \u003d new PaymentList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.payments \u003d optionalPayments.get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    //******************************** ExpenseList operations"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        expenseList.add(expense);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        logger.info(\"Model\u0027s expense externalList length now is \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                + externalExpenseList.size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void deleteExpense(int index) throws DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        expenseList.remove(index);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void clearExpense() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        expenseList.clear();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void filterExpense(String filterCriteria) throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        expenseList.setFilterCriteria(filterCriteria);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void sortExpense(String sortCriteria) throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        expenseList.setSortCriteria(sortCriteria);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void viewExpense(String viewScope, int previous) throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        expenseList.setViewScope(viewScope, previous);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseExternalList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        logger.info(\"Model sends external expense list length \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                + expenseList.getExternalList().size());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        externalExpenseList \u003d FXCollections.unmodifiableObservableList(expenseList.getExternalList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return externalExpenseList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Returns the expenseList for storage."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ExpenseList getExpenseList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return expenseList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BigDecimal getTotalAmount() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return expenseList.getTotalAmount();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    //******************************** Budget and budgetView operations"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public StringProperty getExpenseListTotalString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return expenseList.getTotalString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public StringProperty getSortCriteriaString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return expenseList.getSortString();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public StringProperty getViewCriteriaString() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return expenseList.getViewString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public StringProperty getFilterCriteriaString() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return expenseList.getFilterString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public String getMonthlyBudgetString() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return budget.getMonthlyBudgetString();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BigDecimal getMonthlyBudget() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return budget.getMonthlyBudget();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void setMonthlyBudget(BigDecimal monthlyBudget) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        budget.setMonthlyBudget(monthlyBudget);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void setCategoryBudget(String category, BigDecimal budgetBD) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        budget.setCategoryBudget(category, budgetBD);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public BigDecimal getRemaining(BigDecimal total) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return budget.getRemaining(total);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Map\u003cString, BigDecimal\u003e getBudgetCategory() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return budget.getBudgetCategory();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Budget getBudget() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return budget;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BigDecimal getBudgetTag(String category) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return budget.getBudgetTag(category);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public ObservableList\u003cString\u003e getBudgetObservableList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return budget.getBudgetObservableList();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BudgetView getBudgetView() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return budgetView;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void setBudgetView (Integer view, String category) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        budgetView.setBudgetView(view,category);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public Map\u003cInteger , String\u003e getBudgetViewCategory() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return budgetView.getBudgetViewCategory();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    //************************************************************"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    // PlanBot operations"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public ObservableList\u003cPlanBot.PlanDialog\u003e getDialogObservableList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return planBot.getDialogObservableList();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void processPlanInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        planBot.processInput(input);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Map\u003cString, String\u003e getKnownPlanAttributes() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return planBot.getPlanAttributes();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "  "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public PlanQuestionBank.PlanRecommendation getRecommendedBudgetPlan() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return planBot.getPlanBudgetRecommendation();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    //************************************************************ IncomeList operations"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void addIncome(Income income) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        incomeList.add(income);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        logger.info(\"Model\u0027s income externalList length now is \""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                + externalIncomeList.size());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void deleteIncome(int index) throws DukeException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        incomeList.remove(index);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void clearIncome() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        incomeList.clear();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void filterIncome(String filterCriteria) throws DukeException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        expenseList.setFilterCriteria(filterCriteria);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void sortIncome(String sortCriteria) throws DukeException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        expenseList.setSortCriteria(sortCriteria);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void viewIncome(String viewScope, int previous) throws DukeException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        expenseList.setViewScope(viewScope, previous);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public ObservableList\u003cIncome\u003e getIncomeExternalList() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        logger.info(\"Model sends external income list length \""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                + incomeList.getExternalList().size());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        externalIncomeList \u003d FXCollections.unmodifiableObservableList(incomeList.getExternalList());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return externalIncomeList;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public IncomeList getIncomeList() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return incomeList;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    //************************************************************"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    // Pending Payments operations"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void addPayment(Payment payment) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        payments.add(payment);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setPayment(int index, Payment editedPayment) throws DukeException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        payments.setPayment(index, editedPayment);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void removePayment(int index) throws DukeException {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        payments.remove(index);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setPaymentSortingCriteria(String sortCriteria) throws DukeException {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        payments.setSortingCriteria(sortCriteria);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setAllPredicate() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        payments.setTimePredicate(PREDICATE_SHOW_ALL_PAYMENTS);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setMonthPredicate() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        PaymentInMonthPredicate monthPredicate \u003d new PaymentInMonthPredicate();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        payments.setTimePredicate(monthPredicate);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setWeekPredicate() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        PaymentInWeekPredicate weekPredicate \u003d new PaymentInWeekPredicate();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        payments.setTimePredicate(weekPredicate);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setOverduePredicate() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        PaymentOverduePredicate overduePredicate \u003d new PaymentOverduePredicate();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        payments.setTimePredicate(overduePredicate);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setSearchKeyword(String keyword) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        payments.setSearchPredicate(keyword);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public Payment getPayment(int index) throws DukeException {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return payments.getPayment(index);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public FilteredList\u003cPayment\u003e getFilteredPaymentList() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return payments.getFilteredList();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Returns the paymentList itself for storage update ONLY."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return the paymentList"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public PaymentList getPaymentList() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return payments;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public StringProperty getPaymentSortingCriteria() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return payments.getSortingCriteriaIndicator();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ObjectProperty\u003cPredicate\u003e getPaymentPredicate() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return payments.getPredicateIndicator();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 80,
      "ChaojieLiu666": 163,
      "lucasfoo": 83
    }
  },
  {
    "path": "src/main/java/duke/model/Expense.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.Parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.payment.Payment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class Expense extends DukeItem {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The amount of money of the expense."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private final BigDecimal amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The description of the expense."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Whether or not the expense is tentative."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private boolean isTentative;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * The time of the expense."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private final LocalDateTime time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Is true if expense is a recurring one."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private boolean isRecurring;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public static class Builder extends DukeItem.Builder\u003cBuilder\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private BigDecimal amount \u003d BigDecimal.ZERO;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private String description \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private boolean isTentative \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        private boolean isRecurring \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        private LocalDateTime time \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Constructs a builder from an existing expense."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param expense the expense whose values to use as the builder\u0027s default values."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder(Expense expense) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            super(expense);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            amount \u003d expense.amount;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            description \u003d expense.description;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            isTentative \u003d expense.isTentative;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            time \u003d expense.time;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        public Builder(Payment payment) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            setTag(payment.getTag());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            amount \u003d payment.getAmount();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            description \u003d payment.getDescription();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            isTentative \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            time \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * {@inheritDoc}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Builder(String storageString) throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this(storageStringToMap(storageString));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * {@inheritDoc}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Builder(Map\u003cString, String\u003e mappedStorageString) throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            super(mappedStorageString);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (mappedStorageString.containsKey(\"amount\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                setAmount(mappedStorageString.get(\"amount\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (mappedStorageString.containsKey(\"description\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                setDescription(mappedStorageString.get(\"description\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (mappedStorageString.containsKey(\"isTentative\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                setTentative(Boolean.parseBoolean(mappedStorageString.get(\"isTentative\")));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (mappedStorageString.containsKey(\"time\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                setTime(Parser.parseTime(mappedStorageString.get(\"time\")));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }if (mappedStorageString.containsKey(\"isRecurring\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                setRecurring(Boolean.parseBoolean(mappedStorageString.get(\"isRecurring\")));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Sets the amount of the expense using a string."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param amount the amount of the expense as a string."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @throws DukeException if the value in amount cannot be converted into a {@code BigDecimal},"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *                       or if the {@code BigDecimal} does not represent a valid amount."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         * @see #setAmount(BigDecimal)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder setAmount(String amount) throws DukeException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                return setAmount(new BigDecimal(amount));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                throw new DukeException(String.format(DukeException.MESSAGE_EXPENSE_AMOUNT_INVALID, amount));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Sets the amount of the expense."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param amount the amount of the expense."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @throws DukeException if the {@code BigDecimal} does not represent a valid amount."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder setAmount(BigDecimal amount) throws DukeException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            if (amount.scale() \u003e 2) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                throw new DukeException("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        String.format(DukeException.MESSAGE_EXPENSE_AMOUNT_INVALID, amount.toPlainString()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.amount \u003d amount.setScale(2, RoundingMode.UNNECESSARY);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Sets the description of the expense."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param description the description of the expense."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder setDescription(String description) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Sets the tentativeness of the expense."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param tentative whether the expense is tentative."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder setTentative(boolean tentative) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            isTentative \u003d tentative;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         * @param recurring whether the expense is tentative."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        public Builder setRecurring(boolean recurring) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            isRecurring \u003d recurring;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Sets the time of the expense using a string."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param time the time of the expense as a string."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @throws DukeException if the time string cannot be parsed into a {@code LocalDateTime} object."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         * @see #setTime(LocalDateTime)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder setTime(String time) throws DukeException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                return setTime(Parser.parseTime(time));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                throw new DukeException(String.format(DukeException.MESSAGE_EXPENSE_TIME_INVALID, time));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Sets the time of the expense."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @param time the time of the expense."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Builder setTime(LocalDateTime time) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * Builds the expense."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         * @return the expense."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "         */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        public Expense build() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return new Expense(this);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Constructs an expense from the expense builder."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @param builder the expense builder."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private Expense(Builder builder) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(builder);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        amount \u003d builder.amount;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        description \u003d builder.description;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        isTentative \u003d builder.isTentative;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        isRecurring \u003d builder.isRecurring;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        time \u003d builder.time;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the amount of the expense."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return {@link #amount}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public BigDecimal getAmount() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the description of the expense."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return {@link #description}."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns whether the expense is tentative."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return {@link #isTentative}."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public boolean isTentative() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return isTentative;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void setTentative(boolean val) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        isTentative \u003d val;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the date of the expense."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return {@link #time}."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Returns whether the expense is recurring."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @return {@link #isTentative}."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public boolean isRecurring() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return isRecurring;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Return the formatted time."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @return String of time that is formatted"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public String getTimeString() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (isRecurring) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return \"recurring\";"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return Parser.formatTime(time);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Converts the expense into a storage string."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return the expense as a storage string."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        StringJoiner stringJoiner \u003d new StringJoiner(STORAGE_FIELD_DELIMITER);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        stringJoiner.add(super.toStorageString());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        stringJoiner.add(\"amount\" + STORAGE_NAME_SEPARATOR + amount);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        stringJoiner.add(\"description\" + STORAGE_NAME_SEPARATOR + description);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        stringJoiner.add(\"time\" + STORAGE_NAME_SEPARATOR + Parser.formatTime(time));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        stringJoiner.add(\"isTentative\" + STORAGE_NAME_SEPARATOR + isTentative);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        stringJoiner.add(\"isRecurring\" + STORAGE_NAME_SEPARATOR + isRecurring);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return stringJoiner.toString();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 225,
      "ChaojieLiu666": 12,
      "lucasfoo": 56
    }
  },
  {
    "path": "src/main/java/duke/model/ExpenseList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class ExpenseList extends DukeList\u003cExpense\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ExpenseList.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private enum SortCriteria {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        AMOUNT(Comparator.comparing(Expense::getAmount).reversed()),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TIME(Comparator.comparing(Expense::getTime).reversed()),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        DESCRIPTION(Comparator.comparing(Expense::getDescription));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private Comparator\u003cExpense\u003e comparator;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        SortCriteria(Comparator\u003cExpense\u003e comparator) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public enum ViewScopeName {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        DAY, WEEK, MONTH, YEAR, ALL;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public class ViewScope {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private int viewScopeNumber;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private ViewScopeName viewScopeName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        public ViewScope(String viewScopeName, int viewScopeNumber) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.viewScopeNumber \u003d viewScopeNumber;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                this.viewScopeName \u003d ViewScopeName.valueOf(viewScopeName.toUpperCase());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                throw new DukeException(String.format("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                        DukeException.MESSAGE_EXPENSE_VIEW_SCOPE_NAME_INVALID, viewScopeName));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        public ViewScope(ViewScopeName viewScopeName) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.viewScopeNumber \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.viewScopeName \u003d viewScopeName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private List\u003cExpense\u003e dayView(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return currentList.stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    .filter(e -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        boolean isRecurring \u003d e.isRecurring();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                        LocalDate dateOfExpense \u003d e.getTime().toLocalDate();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                        LocalDate current \u003d LocalDate.now().minusDays(viewScopeNumber);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        return dateOfExpense.equals(current) \u0026\u0026 !isRecurring;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    })"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private List\u003cExpense\u003e weekView(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return currentList.stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    .filter(e -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        boolean isRecurring \u003d e.isRecurring();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                        int dayOfWeek \u003d e.getTime().getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                        LocalDate start \u003d e.getTime().minusDays(dayOfWeek - 1).toLocalDate(); // Sunday of week of expense."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                        LocalDate end \u003d e.getTime().plusDays(7 - dayOfWeek).toLocalDate(); // Monday of week of expense."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                        LocalDate current \u003d LocalDate.now().minusWeeks(viewScopeNumber);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        return (current.equals(end) || current.equals(start)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                || (current.isAfter(start) \u0026\u0026 current.isBefore(end)) \u0026\u0026 !isRecurring);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    })"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private List\u003cExpense\u003e monthView(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return currentList.stream()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    .filter(e -\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        boolean isRecurring \u003d e.isRecurring();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                        LocalDate dateOfExpense \u003d e.getTime().toLocalDate();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                        LocalDate current \u003d LocalDate.now().minusMonths(viewScopeNumber);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                        boolean isSameYear \u003d dateOfExpense.getYear() \u003d\u003d current.getYear();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                        boolean isSameMonth \u003d dateOfExpense.getMonth().equals(current.getMonth());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        return (isSameYear \u0026\u0026 isSameMonth || isRecurring);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    })"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private List\u003cExpense\u003e yearView(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return currentList.stream()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    .filter(e -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        boolean isRecurring \u003d e.isRecurring();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                        LocalDate dateOfExpense \u003d e.getTime().toLocalDate();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                        LocalDate current \u003d LocalDate.now().minusYears(viewScopeNumber);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        return dateOfExpense.getYear() \u003d\u003d current.getYear() || isRecurring;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    })"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         * Returns a filtered list based on the view scope."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         * @param currentList List of Expenses we want to filter down"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         * @return the filtered List of Expense"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        public List\u003cExpense\u003e view(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            switch (viewScopeName) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case DAY:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                return dayView(currentList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case WEEK:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                return weekView(currentList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case MONTH:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                return monthView(currentList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case YEAR:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                return yearView(currentList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            default: // case ALL:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                return currentList; // the viewScope here is ALL."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        public ViewScopeName getViewScopeName() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return viewScopeName;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private SortCriteria sortCriteria;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private ViewScope viewScope;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private String filterCriteria;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private ObservableList\u003cExpense\u003e externalFinalList;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private StringProperty totalString;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private StringProperty filterString;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private StringProperty sortString;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private StringProperty viewString;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Creates a new expense list using a file for storage."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @throws DukeException if the file could not be loaded from, or created."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public ExpenseList(File file) throws DukeException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        super(file, \"expense\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        viewScope \u003d new ViewScope(ViewScopeName.ALL);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        sortCriteria \u003d SortCriteria.TIME;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        externalList \u003d getExternalList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ExpenseList(List\u003cExpense\u003e internalList) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super(internalList, \"expense\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        filterCriteria \u003d \"\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        viewScope \u003d new ViewScope(ViewScopeName.ALL);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        sortCriteria \u003d SortCriteria.TIME;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        externalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        externalFinalList \u003d FXCollections.unmodifiableObservableList(externalList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        totalString \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        filterString \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        sortString \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        viewString \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        updateExternalList();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private void updateExternalList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        List\u003cExpense\u003e filteredSortedViewedList \u003d filter(sort(view(internalList)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        ObservableList\u003cExpense\u003e internalFinalList \u003d FXCollections.observableArrayList(filteredSortedViewedList);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        externalList.setAll(internalFinalList);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        totalString.setValue(\"Total: $\" + getTotalExternalAmount());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        filterString.setValue(\"Filter: \" + filterCriteria);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        switch (sortCriteria) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        case TIME:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            sortString.setValue(\"Sort by: Newest\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        case AMOUNT:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            sortString.setValue(\"Sort by: Largest\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        case DESCRIPTION:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            sortString.setValue(\"Sort by:  Alphabetical\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        viewString.set(\"Viewscope: \" + viewScope.getViewScopeName());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void add(Expense expense) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super.add(expense);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        updateExternalList();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"externalList lengths \" + externalList.size());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void remove(int index) throws DukeException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super.remove(index);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        updateExternalList();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super.clear();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        updateExternalList();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Updates {@code externalList}, then returns it."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return {@code externalList}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExternalList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return externalFinalList;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public List\u003cExpense\u003e getInternalList() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Sets the sort criteria."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Sort criteria include AMOUNT, TIME, DESCRIPTION."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param sortCriteria The String indicating the criteria for sorting."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @throws DukeException If the format of sort criteria is incorrect."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setSortCriteria(String sortCriteria) throws DukeException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.sortCriteria \u003d SortCriteria.valueOf(sortCriteria.toUpperCase());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_SORT_CRITERIA_INVALID, sortCriteria));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        updateExternalList();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setFilterCriteria(String filterCriteria) throws DukeException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.filterCriteria \u003d filterCriteria;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        updateExternalList();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public SortCriteria getSortCriteria() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return sortCriteria;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public String getFilterCriteria() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return filterCriteria;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public ViewScope getViewScope() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return viewScope;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Sets the view scope."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * View scopes include DAY, WEEK, MONTH, YEAR, ALL;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param viewScopeName The string indicating the time scope of displayed list."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @throws DukeException If the format of view scope is incorrect."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setViewScope(String viewScopeName, int viewScopeNumber) throws DukeException {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.viewScope \u003d new ViewScope(viewScopeName, viewScopeNumber);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        updateExternalList();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Sorts the given List with the given criteria and returns the sorted List."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param currentList The List going to be sorted."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return The sorted List."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public List\u003cExpense\u003e sort(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        currentList.sort(sortCriteria.comparator);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return currentList;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * To be implemented when tags are specified."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param currentList The List going to be filtered."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return The filtered List."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public List\u003cExpense\u003e filter(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return currentList;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Tailors the given List so that only {@code Expense} within the given time scope are preserved."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * The time scope is composed of time unit(e.g. week) and how many (e.g. weeks) ago."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Returns the tailored List."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param currentList The list going to be modified."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return The tailored List."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public List\u003cExpense\u003e view(List\u003cExpense\u003e currentList) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return viewScope.view(currentList);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Returns an item from its storage string. Although this method is present in the item builders,"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * it is declared here to make it easier to implement (otherwise requires reflection)."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param storageString the storage string of the item."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return the item."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @throws DukeException if the item could not be created from the storage string."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static Expense itemFromStorageString(String storageString) throws DukeException {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return new Expense.Builder(storageString).build();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the total amount of money spent."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return BigDecimal of the total amount of money spent."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public BigDecimal getTotalAmount() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                .filter(expense -\u003e !expense.isTentative())"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .map(Expense::getAmount)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .reduce(BigDecimal.ZERO, BigDecimal::add);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * returns the total Amount given a specific tag."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param tag the tag of"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @return A BigDecimal which is the sum of all items of a single tag"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public BigDecimal getTagAmount(String tag) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return externalList.stream()"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    .filter(expense -\u003e expense.getTag().contains(tag))"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    .filter(expense -\u003e !expense.isTentative())"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    .map(Expense::getAmount)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    .reduce(BigDecimal.ZERO, BigDecimal::add);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            return BigDecimal.ZERO;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * Returns the total amount of money spent on currently visible expenses i.e. those in {@code externalList}."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     *"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     * @return BigDecimal of the total amount of money spent on currently visible expenses."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "     */"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public BigDecimal getTotalExternalAmount() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return externalList.stream()"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                .filter(expense -\u003e !expense.isTentative())"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .map(Expense::getAmount)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .reduce(BigDecimal.ZERO, BigDecimal::add);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public StringProperty getTotalString() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return totalString;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public StringProperty getFilterString() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return filterString;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public StringProperty getSortString() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return sortString;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public StringProperty getViewString() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return viewString;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 4,
      "otonashixav": 38,
      "ChaojieLiu666": 234,
      "lucasfoo": 110
    }
  },
  {
    "path": "src/main/java/duke/model/Income.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.logic.Parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "termehlee"
        },
        "content": "public class Income extends DukeItem {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * The amount of money of the income."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private final BigDecimal amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * The description of the income."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * The time of the expense."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private final LocalDateTime time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public static class Builder extends DukeItem.Builder\u003cBuilder\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        private BigDecimal amount \u003d BigDecimal.ZERO;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        private String description \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        private LocalDateTime time \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        public Builder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * Constructs a builder from an existing income."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @param income the income whose values to use as the builder\u0027s default values."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        public Builder(Income income) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            super(income);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            amount \u003d income.amount;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            description \u003d income.description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            time \u003d income.time;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * {@inheritDoc}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        Builder(String storageString) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            this(storageStringToMap(storageString));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * {@inheritDoc}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        Builder(Map\u003cString, String\u003e mappedStorageString) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            super(mappedStorageString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            if (mappedStorageString.containsKey(\"amount\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                setAmount(mappedStorageString.get(\"amount\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            if (mappedStorageString.containsKey(\"description\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                setDescription(mappedStorageString.get(\"description\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            if (mappedStorageString.containsKey(\"time\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                setTime(Parser.parseTime(mappedStorageString.get(\"time\")));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * Sets the amount of the income using a string."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @param amount the amount of the income as a string."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @throws DukeException if the value in amount cannot be converted into a {@code BigDecimal},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         *                       or if the {@code BigDecimal} does not represent a valid amount."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @see #setAmount(BigDecimal)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        public Builder setAmount(String amount) throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                return setAmount(new BigDecimal(amount));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                throw new DukeException(String.format(DukeException.MESSAGE_INCOME_AMOUNT_INVALID, amount));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * Sets the amount of the income."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @param amount the amount of the income."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @throws DukeException if the {@code BigDecimal} does not represent a valid amount."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        public Builder setAmount(BigDecimal amount) throws DukeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            if (amount.scale() \u003e 2) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                throw new DukeException("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                        String.format(DukeException.MESSAGE_INCOME_AMOUNT_INVALID, amount.toPlainString()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            this.amount \u003d amount.setScale(2, RoundingMode.UNNECESSARY);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * Sets the description of the income."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @param description the description of the income."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        public Builder setDescription(String description) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * Sets the time of the income using a string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @param time the time of the income as a string."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @throws DukeException if the time string cannot be parsed into a {@code LocalDateTime} object."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @see #setTime(LocalDateTime)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        public Builder setTime(String time) throws DukeException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                return setTime(Parser.parseTime(time));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                throw new DukeException(String.format(DukeException.MESSAGE_INCOME_TIME_INVALID, time));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * Sets the time of the income."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @param time the time of the income."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @return this builder."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        public Builder setTime(LocalDateTime time) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * Builds the income."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @return the income."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        public Income build() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            return new Income(this);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Constructs an income from the income builder."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @param builder the income builder."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private Income(Builder builder) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        super(builder);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        amount \u003d builder.amount;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        description \u003d builder.description;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        time \u003d builder.time;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Returns the amount of the income."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return {@link #amount}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BigDecimal getAmount() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Returns the description of the income."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return {@link #description}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Returns the date of the expense."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return {@link #time}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Return the formatted time."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return String of time that is formatted"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public String getTimeString() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return Parser.formatTime(time);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Converts the income into a string."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return the income as a string."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        StringJoiner stringJoiner \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        stringJoiner.add((amount.compareTo(BigDecimal.valueOf(0)) \u003c 0 ? \"-$\" + amount.abs() : \"$\" + amount));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        stringJoiner.add(description);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        stringJoiner.add(Parser.formatTime(time));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return stringJoiner.toString();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Converts the income into a storage string."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return the income as a storage string."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        StringJoiner stringJoiner \u003d new StringJoiner(STORAGE_FIELD_DELIMITER);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        stringJoiner.add(super.toStorageString());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        stringJoiner.add(\"amount\" + STORAGE_NAME_SEPARATOR + amount);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        stringJoiner.add(\"description\" + STORAGE_NAME_SEPARATOR + description);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        stringJoiner.add(\"time\" + STORAGE_NAME_SEPARATOR + Parser.formatTime(time));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return stringJoiner.toString();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "termehlee"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "termehlee": 235
    }
  },
  {
    "path": "src/main/java/duke/model/IncomeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": "public class IncomeList extends DukeList\u003cIncome\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(IncomeList.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private enum SortCriteria {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        AMOUNT(Comparator.comparing(Income::getAmount)),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        DESCRIPTION(Comparator.comparing(Income::getDescription)),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        TIME(Comparator.comparing(Income::getTime));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        private Comparator\u003cIncome\u003e comparator;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        SortCriteria(Comparator\u003cIncome\u003e comparator) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public enum ViewScopeName {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        DAY, WEEK, MONTH, YEAR, ALL;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public class ViewScope {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        private int viewScopeNumber;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        private ViewScopeName viewScopeName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        public ViewScope(String viewScopeName, int viewScopeNumber) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            this.viewScopeNumber \u003d viewScopeNumber;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                this.viewScopeName \u003d ViewScopeName.valueOf(viewScopeName.toUpperCase());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                throw new DukeException(String.format("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                        DukeException.MESSAGE_EXPENSE_VIEW_SCOPE_NAME_INVALID, viewScopeName));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        public ViewScope(ViewScopeName viewScopeName) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            this.viewScopeNumber \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            this.viewScopeName \u003d viewScopeName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        private List\u003cIncome\u003e dayView(List\u003cIncome\u003e currentList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            return currentList.stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                    .filter(e -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                        LocalDate dateOfIncome \u003d e.getTime().toLocalDate();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                        LocalDate current \u003d LocalDate.now().minusDays(viewScopeNumber);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                        return dateOfIncome.equals(current);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                    })"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        private List\u003cIncome\u003e weekView(List\u003cIncome\u003e currentList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            return currentList.stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                    .filter(e -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                        int dayOfWeek \u003d e.getTime().getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                        LocalDate start \u003d e.getTime().minusDays(dayOfWeek - 1).toLocalDate(); // Sunday of week of income."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                        LocalDate end \u003d e.getTime().plusDays(7 - dayOfWeek).toLocalDate(); // Monday of week of income."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                        LocalDate current \u003d LocalDate.now().minusWeeks(viewScopeNumber);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                        return (current.equals(end) || current.equals(start)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                                || (current.isAfter(start) \u0026\u0026 current.isBefore(end)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                    })"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        private List\u003cIncome\u003e monthView(List\u003cIncome\u003e currentList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            return currentList.stream()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                    .filter(e -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                        LocalDate dateOfIncome \u003d e.getTime().toLocalDate();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                        LocalDate current \u003d LocalDate.now().minusMonths(viewScopeNumber);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                        boolean isSameYear \u003d dateOfIncome.getYear() \u003d\u003d current.getYear();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                        boolean isSameMonth \u003d dateOfIncome.getMonth().equals(current.getMonth());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                        return (isSameYear \u0026\u0026 isSameMonth);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                    })"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        private List\u003cIncome\u003e yearView(List\u003cIncome\u003e currentList) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            return currentList.stream()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                    .filter(e -\u003e {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                        LocalDate dateOfIncome \u003d e.getTime().toLocalDate();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                        LocalDate current \u003d LocalDate.now().minusYears(viewScopeNumber);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                        return dateOfIncome.getYear() \u003d\u003d current.getYear();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                    })"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * Returns a filtered list based on the view scope."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @param currentList List of Incomes we want to filter down"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         * @return the filtered List of Income"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        public List\u003cIncome\u003e view(List\u003cIncome\u003e currentList) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            switch (viewScopeName) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            case DAY:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                return dayView(currentList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            case WEEK:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                return weekView(currentList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            case MONTH:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                return monthView(currentList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            case YEAR:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                return yearView(currentList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            default: // case ALL:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                return currentList; // the viewScope here is ALL."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        public ViewScopeName getViewScopeName() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            return viewScopeName;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private SortCriteria sortCriteria;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private ViewScope viewScope;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private String filterCriteria;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private List\u003cIncome\u003e filteredSortedViewedList;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private ObservableList\u003cIncome\u003e internalFinalList;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private ObservableList\u003cIncome\u003e externalFinalList;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Creates a new income list using a file for storage."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @throws DukeException if the file could not be loaded from, or created."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public IncomeList(File file) throws DukeException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        super(file, \"income\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        viewScope \u003d new ViewScope(ViewScopeName.ALL);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        sortCriteria \u003d SortCriteria.TIME;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        externalList \u003d getExternalList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public IncomeList(List\u003cIncome\u003e internalList) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        super(internalList, \"income\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        viewScope \u003d new ViewScope(ViewScopeName.ALL);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        sortCriteria \u003d SortCriteria.TIME;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        externalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        externalFinalList \u003d FXCollections.unmodifiableObservableList(externalList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        updateExternalList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private void updateExternalList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        filteredSortedViewedList \u003d filter(sort(view(internalList)));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        internalFinalList \u003d FXCollections.observableArrayList(filteredSortedViewedList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        externalList.setAll(internalFinalList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void add(Income income) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        super.add(income);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        updateExternalList();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        logger.info(\"externalList lengths \" + externalList.size());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void remove(int index) throws DukeException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        super.remove(index);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        updateExternalList();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        super.clear();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        updateExternalList();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Updates {@code externalList}, then returns it."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return {@code externalList}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public ObservableList\u003cIncome\u003e getExternalList() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return externalFinalList;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public List\u003cIncome\u003e getInternalList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Sets the sort criteria."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Sort criteria include AMOUNT, TIME, DESCRIPTION."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @param sortCriteria The String indicating the criteria for sorting."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @throws DukeException If the format of sort criteria is incorrect."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void setSortCriteria(String sortCriteria) throws DukeException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            this.sortCriteria \u003d SortCriteria.valueOf(sortCriteria.toUpperCase());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_SORT_CRITERIA_INVALID, sortCriteria));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        updateExternalList();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void setFilterCriteria(String filterCriteria) throws DukeException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        this.filterCriteria \u003d filterCriteria;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        updateExternalList();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public SortCriteria getSortCriteria() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return sortCriteria;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public String getFilterCriteria() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return filterCriteria;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public ViewScope getViewScope() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return viewScope;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Sets the view scope."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * View scopes include DAY, WEEK, MONTH, YEAR, ALL;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @param viewScopeName The string indicating the time scope of displayed list."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @throws DukeException If the format of view scope is incorrect."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void setViewScope(String viewScopeName, int viewScopeNumber) throws DukeException {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        this.viewScope \u003d new ViewScope(viewScopeName, viewScopeNumber);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        updateExternalList();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Sorts the given List with the given criteria and returns the sorted List."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @param currentList The List going to be sorted."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return The sorted List."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public List\u003cIncome\u003e sort(List\u003cIncome\u003e currentList) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        currentList.sort(sortCriteria.comparator);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return currentList;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * To be implemented when tags are specified."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @param currentList The List going to be filtered."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return The filtered List."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public List\u003cIncome\u003e filter(List\u003cIncome\u003e currentList) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return currentList;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Tailors the given List so that only {@code Income} within the given time scope are preserved."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * The time scope is composed of time unit(e.g. week) and how many (e.g. weeks) ago."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Returns the tailored List."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @param currentList The list going to be modified."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return The tailored List."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public List\u003cIncome\u003e view(List\u003cIncome\u003e currentList) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return viewScope.view(currentList);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Returns an item from its storage string. Although this method is present in the item builders,"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * it is declared here to make it easier to implement (otherwise requires reflection)."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @param storageString the storage string of the item."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return the item."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @throws DukeException if the item could not be created from the storage string."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public static Income itemFromStorageString(String storageString) throws DukeException {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return new Income.Builder(storageString).build();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Returns the total amount of money spent."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return BigDecimal of the total amount of money spent."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BigDecimal getTotalAmount() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                .map(Income::getAmount)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                .reduce(BigDecimal.ZERO, BigDecimal::add);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * returns the total Amount given a specific tag."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @param tag the tag of"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return A BigDecimal which is the sum of all items of a single tag"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BigDecimal getTagAmount(String tag) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                .filter(income -\u003e income.getTag().contains(tag))"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                .map(Income::getAmount)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                .reduce(BigDecimal.ZERO, BigDecimal::add);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Returns the total amount of money spent on currently visible incomes i.e. those in {@code externalList}."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return BigDecimal of the total amount of money spent on currently visible incomes."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BigDecimal getTotalExternalAmount() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return externalList.stream()"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                .map(Income::getAmount)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                .reduce(BigDecimal.ZERO, BigDecimal::add);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "termehlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 331,
      "ChaojieLiu666": 1,
      "lucasfoo": 2
    }
  },
  {
    "path": "src/main/java/duke/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.payment.Payment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.payment.PaymentList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.beans.value.ObservableStringValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    //******************************** ExpenseList operations"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void addExpense(Expense expense);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void deleteExpense(int index) throws DukeException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void clearExpense();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void filterExpense(String filterCriteria) throws DukeException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void sortExpense(String sortCriteria) throws DukeException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void viewExpense(String viewScope, int previous) throws DukeException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseExternalList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ExpenseList getExpenseList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BigDecimal getTotalAmount();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public StringProperty getExpenseListTotalString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public StringProperty getSortCriteriaString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public StringProperty getViewCriteriaString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public StringProperty getFilterCriteriaString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    //******************************** Budget and BudgetView operations"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public String getMonthlyBudgetString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BigDecimal getMonthlyBudget();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void setMonthlyBudget(BigDecimal monthlyBudget);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void setCategoryBudget(String category, BigDecimal budgetBD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public BigDecimal getRemaining(BigDecimal total);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Map\u003cString, BigDecimal\u003e getBudgetCategory();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Budget getBudget();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BigDecimal getBudgetTag(String category);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public  ObservableList\u003cString\u003e getBudgetObservableList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BudgetView getBudgetView();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public Map\u003cInteger, String\u003e getBudgetViewCategory();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void setBudgetView(Integer view, String category);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    //******************************** Operations for other data...."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    //******************************** For example, operations of monthly income list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    // todo: add other data operations"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    //PlanBot"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public ObservableList\u003cPlanBot.PlanDialog\u003e getDialogObservableList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void processPlanInput(String input) throws DukeException;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Map\u003cString, String\u003e getKnownPlanAttributes();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public PlanQuestionBank.PlanRecommendation getRecommendedBudgetPlan();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    //************************************************************"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    // Pending Payments operations"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void addPayment(Payment payment);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setPayment(int index, Payment editedPayment) throws DukeException;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void removePayment(int index) throws DukeException;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setPaymentSortingCriteria(String sortingCriteria) throws DukeException;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setAllPredicate();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setMonthPredicate();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setWeekPredicate();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setOverduePredicate();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setSearchKeyword(String keyword);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public Payment getPayment(int index) throws DukeException;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public FilteredList\u003cPayment\u003e getFilteredPaymentList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public PaymentList getPaymentList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public StringProperty getPaymentSortingCriteria();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ObjectProperty\u003cPredicate\u003e getPaymentPredicate();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    //******************************** IncomeList operations"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void addIncome(Income income);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void deleteIncome(int index) throws DukeException;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void clearIncome();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void filterIncome(String filterCriteria) throws DukeException;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void sortIncome(String sortCriteria) throws DukeException;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void viewIncome(String viewScope, int previous) throws DukeException;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public ObservableList\u003cIncome\u003e getIncomeExternalList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public IncomeList getIncomeList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 31,
      "ChaojieLiu666": 71,
      "lucasfoo": 33
    }
  },
  {
    "path": "src/main/java/duke/model/PlanBot.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * PlanBot is the overall budget recommendation class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * It\u0027s responsible for displaying the dialog to the user in a list,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * printing error messages as a dialog from the bot"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * and asking users answered questions form question bank."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * It ensures that if its asking a question, only one question is being asked at a time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class PlanBot {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(PlanQuestion.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Denotes if the dialog is from the user or from the Bot."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public enum Agent {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        USER,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        BOT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Contains a \u003ccode\u003eList\u003c/code\u003e of \u003ccode\u003ePlanDialog\u003c/code\u003e which is the chatBot\u0027s history."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private List\u003cPlanDialog\u003e dialogList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * The a \u003ccode\u003eObservableList\u003c/code\u003e of \u003ccode\u003ePlanDialog\u003c/code\u003e history"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * so that the GUI can automatically be updated without having to repopulate the entire list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private ObservableList\u003cPlanDialog\u003e dialogObservableList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Contains all the \u003ccode\u003ePlanQuestion\u003c/code\u003e that we are going to ask the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private PlanQuestionBank planQuestionBank;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * A Map of the user\u0027s attributes that we have already found out."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private Map\u003cString, String\u003e planAttributes;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * The buffer of questions we are asking the user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private Queue\u003cPlanQuestion\u003e questionQueue;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * The current question being asked, contains null when no more questions are being asked."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private PlanQuestion currentQuestion;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private PlanQuestionBank.PlanRecommendation planBudgetRecommendation;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Constructor for PlanBot."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param planAttributes the loaded attributes from Storage"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @throws DukeException when there is an error loading questions based on the loaded planAttributes"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public PlanBot(Map\u003cString, String\u003e planAttributes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.dialogList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        dialogObservableList \u003d FXCollections.observableList(dialogList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.planAttributes \u003d planAttributes;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.questionQueue \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (planAttributes.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            dialogObservableList.add(new PlanDialog(\"Hi, seems like this is the first time using Duke++. \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    + \"Let me plan your budget for you!\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    + \" Alternatively, type \\\"goto expense\\\" to start using Duke++!\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    Agent.BOT));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            planQuestionBank \u003d new PlanQuestionBank();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            dialogObservableList.add(new PlanDialog(e.getMessage(), Agent.BOT));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            questionQueue.addAll(planQuestionBank.getQuestions(planAttributes));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            dialogObservableList.add(new PlanDialog(e.getMessage(), Agent.BOT));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (questionQueue.isEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            currentQuestion \u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            sendCompletedMessage();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            dialogList.add(new PlanDialog(\"Tell me more about yourself to give you recommendations\", Agent.BOT));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            PlanQuestion firstQuestion \u003d questionQueue.peek();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            currentQuestion \u003d firstQuestion;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            questionQueue.remove();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            assert firstQuestion !\u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            PlanDialog initial \u003d new PlanDialog(firstQuestion.getQuestion(), Agent.BOT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            dialogObservableList.add(initial);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public ObservableList\u003cPlanDialog\u003e getDialogObservableList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return dialogObservableList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Processes the input String of the user."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param input the input String from the user"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void processInput(String input) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        dialogObservableList.add(new PlanDialog(input, Agent.USER));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (currentQuestion \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            sendCompletedMessage();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                PlanQuestion.Reply reply \u003d currentQuestion.getReply(input, planAttributes);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                questionQueue.clear();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                questionQueue.addAll(planQuestionBank.getQuestions(planAttributes));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                logger.info(\"\\n\\n\\nQueue size: \" + questionQueue.size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                dialogObservableList.add(new PlanDialog(reply.getText(), Agent.BOT));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                planAttributes \u003d reply.getAttributes();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                if (!questionQueue.isEmpty()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    currentQuestion \u003d questionQueue.peek();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    dialogObservableList.add(new PlanDialog(currentQuestion.getQuestion(), Agent.BOT));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    questionQueue.remove();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    sendCompletedMessage();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                dialogObservableList.add(new PlanDialog(e.getMessage(), Agent.BOT));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public PlanQuestionBank.PlanRecommendation getPlanBudgetRecommendation() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return planBudgetRecommendation;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Map\u003cString, String\u003e getPlanAttributes() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return planAttributes;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Puts the recommendation into the dialog list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private void sendCompletedMessage() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        logger.info(\"Completed Plan Bot\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            dialogList.add(new PlanDialog(planQuestionBank"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    .makeRecommendation(planAttributes)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    .getRecommendation(), Agent.BOT));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            planBudgetRecommendation \u003d planQuestionBank"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    .makeRecommendation(planAttributes);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            StringBuilder recommendedBudgetStringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            for (String category : planBudgetRecommendation.getPlanBudget().keySet()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                recommendedBudgetStringBuilder.append(category)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        .append(\" : \")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        .append(planBudgetRecommendation.getPlanBudget().get(category))"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        .append(\"\\n\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            dialogList.add(new PlanDialog(\"Here\u0027s a recommended budget for you: \\n\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    + recommendedBudgetStringBuilder.toString()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    + \"type \\\"export\\\" to export the budget\","
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    Agent.BOT));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            dialogList.add(new PlanDialog(e.getMessage(), Agent.BOT));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * A container for an individual chat history."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public static class PlanDialog {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        public String text;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        public Agent agent;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        public PlanDialog(String text, Agent agent) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.agent \u003d agent;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.text \u003d text;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 194
    }
  },
  {
    "path": "src/main/java/duke/model/PlanQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.Parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * A single question that is being asked to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class PlanQuestion {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private Map\u003cString, String\u003e answersAttributesValue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private Map\u003cString, Set\u003cInteger\u003e\u003e neighbouringQuestions;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private String attribute;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private final static String SUCCESS_MESSAGE \u003d \"Ok noted!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Constructor for PlanQuestion."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param question       String the question we are asking the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param answers        an Array of strings of the possible answers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param attributeValue an Array of Attributes the attribute could take,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *                       its size should be the same as the answer array"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param attribute      the attribute of the user we want to determine from the question"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @throws DukeException when there are errors in the construction of the question"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public PlanQuestion(String question,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        String[] answers,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        String[] attributeValue,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        String attribute) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.answersAttributesValue \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        int answersSize \u003d answers.length;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (attributeValue.length \u003c answersSize) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeException(\"Some question was set up incorrectly!!! This shouldn\u0027t have happened!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        for (int i \u003d 0; i \u003c answersSize; ++i) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            answersAttributesValue.put(answers[i], attributeValue[i]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.attribute \u003d attribute;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.neighbouringQuestions \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public String getAttribute() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return attribute;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Returns a set of Integers of neighbouring questions given an attribute."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param attribute the attribute we want to get the neighbours of."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @return a set of indexes of neighbouring questions, an empty set if no enighboring quesion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Set\u003cInteger\u003e getNeighbouringQuestions(String attribute) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (answersAttributesValue.containsKey(\"DOUBLE\") \u0026\u0026 (neighbouringQuestions.get(\"DOUBLE\") !\u003d null)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return neighbouringQuestions.get(\"DOUBLE\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (neighbouringQuestions.containsKey(attribute)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return neighbouringQuestions.get(attribute);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *  Returns a success message if the input provided is a valid one and"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *  the question is successfully processed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param input the input string for the question"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param attributes the currently known attributes about the user"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @return Reply containing the updated attributes and success message"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    Reply getReply(String input, Map\u003cString, String\u003e attributes) throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            if (answersAttributesValue.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                if (answersAttributesValue.containsKey(\"DOUBLE\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    BigDecimal scaledAmount \u003d Parser.parseMoney(input);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    String attributeVal \u003d scaledAmount.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    attributes.put(attribute, attributeVal);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    return new Reply(SUCCESS_MESSAGE , attributes);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                if (!answersAttributesValue.containsKey(input.toUpperCase())) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    throw new NoSuchElementException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                String attributeVal \u003d answersAttributesValue.get(input.toUpperCase());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                attributes.put(attribute, attributeVal);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                return new Reply(SUCCESS_MESSAGE, attributes);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (NoSuchElementException | NumberFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeException(\"Please enter a valid reply!\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return new Reply(\"Something strange happened\", attributes);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Adds a neighbouring question\u0027s index to every attribute value."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param neighbouring Integer index of neighbouring question"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void addNeighbouring(Integer neighbouring) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (answersAttributesValue.containsKey(\"DOUBLE\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            if (neighbouringQuestions.containsKey(\"DOUBLE\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                neighbouringQuestions.get(\"DOUBLE\").add(neighbouring);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                neighbouringQuestions.put(\"DOUBLE\", new HashSet\u003c\u003e(Collections.singletonList(neighbouring)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        for (String attributeValue : answersAttributesValue.values()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            if (neighbouringQuestions.containsKey(attributeValue)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                neighbouringQuestions.get(attributeValue).add(neighbouring);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                neighbouringQuestions.put(attributeValue, new HashSet\u003c\u003e(Collections.singletonList(neighbouring)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Adds a neighbouring question\u0027s index to a specific attribute value."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param neighbouring   Integer index of neighbouring question"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param attributeValue String of the attributeValue we want our questions to be mapped to"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void addNeighbouring(String attributeValue, Integer neighbouring) throws DukeException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (!answersAttributesValue.containsValue(attributeValue)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeException(attributeValue + \" is not a valid attribute value for \" + attribute);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            if (neighbouringQuestions.containsKey(attributeValue)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                neighbouringQuestions.get(attributeValue).add(neighbouring);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                neighbouringQuestions.put(attributeValue, new HashSet\u003c\u003e(Collections.singletonList(neighbouring)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    static class Reply {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        private String text;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        private Map\u003cString, String\u003e attributes;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        Reply(String text, Map\u003cString, String\u003e attributes) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.text \u003d text;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.attributes \u003d attributes;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        String getText() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return text;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        Map\u003cString, String\u003e getAttributes() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return attributes;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 166
    }
  },
  {
    "path": "src/main/java/duke/model/PlanQuestionBank.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.Parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class PlanQuestionBank {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private Map\u003cInteger, PlanQuestion\u003e questionList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(PlanQuestionBank.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String[] BOOL_ANSWERS \u003d {\"YES\", \"Y\", \"NO\", \"N\"};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String[] BOOL_ATTRIBUTE_VALUES \u003d {\"TRUE\", \"TRUE\", \"FALSE\", \"FALSE\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String[] DOUBLE \u003d {\"DOUBLE\"};"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Constructor of the question bank, developers should add new questions inside here."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @throws DukeException on Error constructing the QuestionBank"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public PlanQuestionBank() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.questionList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        PlanQuestion question1 \u003d new PlanQuestion(\"Are you a student from NUS? \u003cyes/no\u003e\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                BOOL_ANSWERS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                BOOL_ATTRIBUTE_VALUES,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \"NUS_STUDENT\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        question1.addNeighbouring(\"TRUE\", 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        question1.addNeighbouring(\"TRUE\", 9);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        questionList.put(1, question1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        PlanQuestion question2 \u003d new PlanQuestion(\"Do you live on campus? \u003cyes/no\u003e\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                BOOL_ANSWERS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                BOOL_ATTRIBUTE_VALUES,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \"CAMPUS_LIFE\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        question2.addNeighbouring(\"FALSE\", 3);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        question2.addNeighbouring(\"TRUE\", 6);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        questionList.put(2, question2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        PlanQuestion question3 \u003d new PlanQuestion("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \"How many days of the week do you travel go to school? \u003c0 - 7\u003e\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                generateIntRange(0, 7),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                generateIntRange(0, 7),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \"TRAVEL_DAYS\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        question3.addNeighbouring(4);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        questionList.put(3, question3);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        PlanQuestion question4 \u003d new PlanQuestion(\"How do you go to school? \u003cbus, mrt, both\u003e\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                new String[]{\"BUS\", \"MRT\", \"BOTH\"},"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                new String[]{\"BUS\", \"MRT\", \"BOTH\"},"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \"TRANSPORT_METHOD\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        question4.addNeighbouring(5);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        questionList.put(4, question4);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        PlanQuestion question5 \u003d new PlanQuestion(\"How much does your trip cost each way?\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                DOUBLE,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                DOUBLE,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \"TRIP_COST\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        question5.addNeighbouring(7);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        questionList.put(5, question5);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        PlanQuestion question6 \u003d new PlanQuestion(\"Do you eat at your Hall/RC often?\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                BOOL_ANSWERS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                BOOL_ATTRIBUTE_VALUES,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \"DINE_IN_HALL\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        question6.addNeighbouring(\"FALSE\", 7);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        question6.addNeighbouring(\"TRUE\", 8);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        questionList.put(6, question6);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        PlanQuestion question7 \u003d new PlanQuestion(\"How many meals per day do pay for daily? \u003c0 - 3\u003e\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                generateIntRange(0, 3),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                generateIntRange(0, 3),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \"MEALS_PER_DAY\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        question7.addNeighbouring(\"1\", 8);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        question7.addNeighbouring(\"2\", 8);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        question7.addNeighbouring(\"3\", 8);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        questionList.put(7, question7);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        PlanQuestion question8 \u003d new PlanQuestion(\"How much does each meal that you pay for \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                + \"cost on average? \u003cmoney amount\u003e\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                DOUBLE,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                DOUBLE,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \"AVERAGE_MEAL_COST\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        question8.addNeighbouring(9);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        questionList.put(8, question8);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        PlanQuestion question9 \u003d new PlanQuestion(\"How much do you pay for your phone bill? \u003cmoney amount\u003e\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                DOUBLE,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                DOUBLE,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \"PHONE_BILL\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        question9.addNeighbouring(10);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        questionList.put(9, question9);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        PlanQuestion question10 \u003d new PlanQuestion(\"Do you subscribe to netflix? \u003cyes/no\u003e\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                BOOL_ANSWERS,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                BOOL_ATTRIBUTE_VALUES,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \"NETFLIX\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        question10.addNeighbouring(11);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        questionList.put(10, question10);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        PlanQuestion question11 \u003d new PlanQuestion(\"Do you subscribe to a music subscription service? \u003cyes/no\u003e\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                BOOL_ANSWERS,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                BOOL_ATTRIBUTE_VALUES,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \"MUSIC_SUBSCRIPTION\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        question11.addNeighbouring(12);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        questionList.put(11, question11);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        questionList.put(12, new PlanQuestion(\"How much do you want to \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                + \"spend on online shopping monthly? \u003cmoney amount\u003e\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                DOUBLE,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                DOUBLE,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \"ONLINE_SHOPPING\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Gets a Queue of questions to ask a user in PlanBot."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param knownAttributes Map of String to String of what we already know about the users"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @return a Queue of questions to ask the user"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Set\u003cPlanQuestion\u003e getQuestions(Map\u003cString, String\u003e knownAttributes) throws DukeException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        Map\u003cString, PlanQuestion\u003e attributeQuestion \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        Queue\u003cInteger\u003e questionsToAdd \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        questionsToAdd.add(1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        while (!questionsToAdd.isEmpty()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Integer index \u003d questionsToAdd.peek();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            questionsToAdd.remove();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                PlanQuestion question \u003d questionList.get(index);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                String questionAttribute \u003d question.getAttribute();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                attributeQuestion.put(question.getAttribute(), question);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                if (knownAttributes.containsKey(questionAttribute)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    String attributeValue \u003d knownAttributes.get(questionAttribute);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    Set\u003cInteger\u003e children \u003d questionList.get(index).getNeighbouringQuestions(attributeValue);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    questionsToAdd.addAll(children);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                throw new DukeException(\"Error getting neighbouring questions!\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        for (String knownAttribute : knownAttributes.keySet()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            attributeQuestion.remove(knownAttribute);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return new HashSet\u003c\u003e(attributeQuestion.values());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Makes recommendations for the user."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * This should only be called when we know every attribute of the user."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @return String budget recommendations."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @throws DukeException when there is an error in constructing the recommendation based on the knownAttributes"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    PlanRecommendation makeRecommendation(Map\u003cString, String\u003e planAttributes) throws DukeException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        Map\u003cString, BigDecimal\u003e budgetRecommendation \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        StringBuilder recommendation \u003d new StringBuilder();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        List\u003cExpense\u003e recommendationExpenseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            if (planAttributes.get(\"NUS_STUDENT\").equals(\"FALSE\")) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                return new PlanRecommendation(\"This program is designed for NUS students. \\n \""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        + \"Since you\u0027re not a NUS student, I can\u0027t make any recommendations for you :( \\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        + \"However, you can still use the program! Type \\\"goto expense\\\" to start using.\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        budgetRecommendation,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        recommendationExpenseList);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                //NUS STUDENT"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                if (planAttributes.get(\"CAMPUS_LIFE\").equals(\"FALSE\")) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    String tripCostString \u003d planAttributes.get(\"TRIP_COST\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    String tripsPerWeekString \u003d planAttributes.get(\"TRAVEL_DAYS\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    int tripsPerWeek \u003d Integer.parseInt(tripsPerWeekString);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    BigDecimal tripsPerWeekBD \u003d BigDecimal.valueOf(tripsPerWeek);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    BigDecimal tripCost \u003d Parser.parseMoney(tripCostString);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    BigDecimal monthlyCost \u003d tripCost"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            .multiply(tripsPerWeekBD)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            .multiply(BigDecimal.valueOf(8));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    switch (planAttributes.get(\"TRANSPORT_METHOD\")) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    case \"MRT\":"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        if (monthlyCost.compareTo(BigDecimal.valueOf(48)) \u003e 0) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            recommendation.append(\"Based on your travelling habits, \""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                    + \"it is cheaper to buy concession!\\n\")"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                    .append(\"MRT concession costs: $48.00 monthly.\\n\")"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                    .append(\"You should set your transport budget at $48.00 monthly\\n\\n\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            budgetRecommendation.put(\"transport\", Parser.parseMoney(\"48.00\"));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        } else if (monthlyCost.compareTo(BigDecimal.ZERO) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            recommendation.append(\"You should set transport budget at $\")"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                    .append(monthlyCost)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                    .append(\" monthly. \\n\\n\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    case \"BUS\":"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        if (monthlyCost.compareTo(BigDecimal.valueOf(52)) \u003e 0) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            recommendation.append(\"Based on your travelling habits, \""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                    + \"it is cheaper to buy concession!\\n\")"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                    .append(\"MRT concession costs: $52.00 monthly.\\n\")"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                    .append(\"You should set your transport budget at $52.00 monthly\\n\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            budgetRecommendation.put(\"transport\", Parser.parseMoney(\"52.00\"));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            recommendation.append(\"You should set transport budget at $\")"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                    .append(monthlyCost)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                    .append(\" monthly. \\n\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            budgetRecommendation.put(\"transport\", monthlyCost);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        if (monthlyCost.compareTo(BigDecimal.valueOf(85)) \u003e 0) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            recommendation.append(\"Based on your travelling habits, \""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                    + \"it is cheaper to buy concession!\\n\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                    + \"Combined concession costs: $85.00 monthly.\\n\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                    + \"You should set your transport budget at $85.00 monthly\\n\\n\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            budgetRecommendation.put(\"transport\", Parser.parseMoney(\"85.00\"));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            recommendation.append(\"You should set transport budget at $\")"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                    .append(monthlyCost)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                    .append(\" monthly. \\n\\n\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            budgetRecommendation.put(\"transport\", monthlyCost);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    int mealsPerDay \u003d Integer.parseInt(planAttributes.get(\"MEALS_PER_DAY\"));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    if (mealsPerDay \u003e 0) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        BigDecimal costPerMeal \u003d Parser.parseMoney(planAttributes.get(\"AVERAGE_MEAL_COST\"));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        BigDecimal monthlyFoodBudget \u003d costPerMeal"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                .multiply(BigDecimal.valueOf(mealsPerDay))"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                .multiply(BigDecimal.valueOf(30));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        if (monthlyFoodBudget.compareTo(BigDecimal.ZERO) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            recommendation.append(\"I\u0027d suggest you set your food budget at $\")"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                    .append(monthlyFoodBudget)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                    .append(\" monthly. \\n\\n\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            budgetRecommendation.put(\"food \", monthlyFoodBudget);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    //Stays on campus"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    recommendation.append(\"Since you live in campus, \""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            + \"you can just allocate a small budget of $10 to transport! \\n\\n\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    budgetRecommendation.put(\"transport\", Parser.parseMoney(\"10\"));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    if (planAttributes.get(\"DINE_IN_HALL\").equals(\"TRUE\")) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        BigDecimal costPerMeal \u003d Parser.parseMoney(planAttributes.get(\"AVERAGE_MEAL_COST\"));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        BigDecimal monthlyFoodBudget \u003d costPerMeal"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                .multiply(BigDecimal.valueOf(4))"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                .multiply(BigDecimal.valueOf(11));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        //11 since 3 meals during each weekend * 1 meal per day"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        if (monthlyFoodBudget.compareTo(BigDecimal.ZERO) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            recommendation.append(\"I\u0027d suggest you set your food budget at $\")"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                    .append(monthlyFoodBudget).append(\" monthly. \\n\\n\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            budgetRecommendation.put(\"food\", monthlyFoodBudget);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        //Eats all meals outside of hall"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        int mealsPerDay \u003d Integer.parseInt(planAttributes.get(\"MEALS_PER_DAY\"));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        BigDecimal costPerMeal \u003d Parser.parseMoney(planAttributes.get(\"AVERAGE_MEAL_COST\"));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        BigDecimal monthlyFoodBudget \u003d costPerMeal.multiply(BigDecimal"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                .valueOf(mealsPerDay))"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                .multiply(BigDecimal.valueOf(30));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        if (monthlyFoodBudget.compareTo(BigDecimal.ZERO) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            recommendation.append(\"I\u0027d suggest you set your food budget at $\")"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                    .append(monthlyFoodBudget).append(\" monthly. \\n\\n\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            budgetRecommendation.put(\"food\", monthlyFoodBudget);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                BigDecimal phoneBill \u003d Parser.parseMoney(planAttributes.get(\"PHONE_BILL\"));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                if (!phoneBill.equals(Parser.parseMoney(\"0\"))) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    recommendation.append(\"You set set a budget of $\")"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            .append(phoneBill)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            .append(\" for your phone bill.\\n\\n\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    budgetRecommendation.put(\"phone bill\", phoneBill);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    Expense.Builder phoneBillExpenseBuilder \u003d new Expense.Builder();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    phoneBillExpenseBuilder.setAmount(phoneBill);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    phoneBillExpenseBuilder.setDescription(\"Phone bill\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    phoneBillExpenseBuilder.setRecurring(true);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    phoneBillExpenseBuilder.setTag(\"phone bill\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    recommendationExpenseList.add(phoneBillExpenseBuilder.build());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                if (planAttributes.get(\"NETFLIX\").equals(\"TRUE\")) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    recommendation.append(\"Netflix has a family plan that is $17.00 per month,\""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            + \" so its cheaper if you can find friends to share!\\n\""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            + \"You should allocate $4.25 to netflix\\n\\n\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    budgetRecommendation.put(\"netflix\", Parser.parseMoney(\"4.25\"));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    budgetRecommendation.put(\"phone bill\", phoneBill);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    Expense.Builder netflixExpenseBuilder \u003d new Expense.Builder();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    netflixExpenseBuilder.setAmount(\"4.25\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    netflixExpenseBuilder.setDescription(\"Netflix\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    netflixExpenseBuilder.setRecurring(true);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    netflixExpenseBuilder.setTag(\"netflix\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    recommendationExpenseList.add(netflixExpenseBuilder.build());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                if (planAttributes.get(\"MUSIC_SUBSCRIPTION\").equals(\"TRUE\")) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    recommendation.append(\"Spotify has a student plan that is only $5 a month! \\n\""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            + \"You should allocate $5 to Spotify\\n\\n\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    budgetRecommendation.put(\"spotify\", Parser.parseMoney(\"5\"));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    Expense.Builder spotifyExpenseBuilder \u003d new Expense.Builder();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    spotifyExpenseBuilder.setAmount(\"5.00\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    spotifyExpenseBuilder.setDescription(\"Spotify\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    spotifyExpenseBuilder.setRecurring(true);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    spotifyExpenseBuilder.setTag(\"spotify\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    recommendationExpenseList.add(spotifyExpenseBuilder.build());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                if (Parser.parseMoney(planAttributes.get(\"ONLINE_SHOPPING\")).compareTo(BigDecimal.ZERO) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    budgetRecommendation.put(\"online shopping\", Parser.parseMoney(planAttributes.get(\"ONLINE_SHOPPING\")));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    recommendation.append(\"You should allocate $\""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            + planAttributes.get(\"ONLINE_SHOPPING\")"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            + \" to online shopping.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (NullPointerException | NumberFormatException e) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeException(\"Missing attributes to make recommendation!\" + e.getMessage());"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (recommendation.toString().isEmpty()) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return new PlanRecommendation(\"I can\u0027t make any recommendations for you\""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    + \" :(. Something probably went wrong\","
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    budgetRecommendation,"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    recommendationExpenseList);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return new PlanRecommendation(recommendation.toString(),"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                budgetRecommendation,"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                recommendationExpenseList);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private String[] generateIntRange(int start, int end) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        List\u003cString\u003e strings \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        for (int i \u003d start; i \u003c\u003d end; ++i) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            strings.add(Integer.toString(i));"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return strings.toArray(new String[0]);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Simple container for recommendation."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public class PlanRecommendation {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        String recommendation;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        Map\u003cString, BigDecimal\u003e budget;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        List\u003cExpense\u003e recommendationExpenseList;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         * Constructor for PlanRecommendation."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         *"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         * @param recommendation            String of the recommendation, text that will appear in the dialog"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         * @param budget                    Map\u0026lt;String, BigDecimal\u003e map of category as key and amount as the value"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         * @param recommendationExpenseList List of expenses to add into expense list."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        public PlanRecommendation(String recommendation,"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                  Map\u003cString, BigDecimal\u003e budget,"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                  List\u003cExpense\u003e recommendationExpenseList) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.recommendation \u003d recommendation;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.budget \u003d budget;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            this.recommendationExpenseList \u003d recommendationExpenseList;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        public String getRecommendation() {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return recommendation;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        public Map\u003cString, BigDecimal\u003e getPlanBudget() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return budget;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        public List\u003cExpense\u003e getRecommendationExpenseList() {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return recommendationExpenseList;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 383
    }
  },
  {
    "path": "src/main/java/duke/model/payment/Payment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model.payment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Represents a Payment to pay."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class Payment {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    // Initializes optional string fields with empty String"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String NOT_ASSIGNED \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    // Initializes due as default"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final LocalDate DEFAULT_DUE \u003d LocalDate.MIN;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    // Initializes amount as default"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final BigDecimal DEFAULT_AMOUNT \u003d BigDecimal.ZERO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    // Initializes Priority as default"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final Priority DEFAULT_PRIORITY \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    // Compulsory fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private LocalDate due;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private BigDecimal amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    // Optional fields"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private String receiver;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private String tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Represents the Priority of the Payment."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private enum Priority {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        HIGH(\"High\", 3),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        MEDIUM(\"Medium\", 2),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        LOW(\"Low\", 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         * Helps parse Priority parameter in user input."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         * Also defines how Priority is displayed in Ui."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private String nameShowed;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Makes Priority comparable."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private int numeratedLevel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return nameShowed;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        public int getNumeratedLevel() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return numeratedLevel;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Priority(String nameShowed, int numeratedLevel) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.nameShowed \u003d nameShowed;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.numeratedLevel \u003d numeratedLevel;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * A Builder class for Payment."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Enables construction with optional fields."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static class Builder {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Compulsory fields"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private String description \u003d NOT_ASSIGNED;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private LocalDate due \u003d DEFAULT_DUE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private BigDecimal amount \u003d DEFAULT_AMOUNT;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Optional fields"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private String receiver \u003d NOT_ASSIGNED;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private String tag \u003d NOT_ASSIGNED;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private Priority priority \u003d DEFAULT_PRIORITY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         * Initializes a builder with all properties undefined."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        public Builder() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         * Constructs a builder from an existing Payment."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         * This enables modification on an existing Payment with optional fields."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         * @param payment the existing Payment"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        public Builder(Payment payment) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            requireNonNull(payment);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            description \u003d payment.description;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            receiver \u003d payment.receiver;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            due \u003d payment.due;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            tag \u003d payment.tag;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            amount \u003d payment.amount;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            priority \u003d payment.priority;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        public Builder setDescription(String description) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            requireNonNull(description);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            assert !description.isEmpty();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        public Builder setReceiver(String receiver) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            requireNonNull(receiver);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            assert !receiver.isEmpty();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.receiver \u003d receiver;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         * Parses and sets the field due in builder."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         * @param due String expected to follow format dd/mm/yyyy"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         * @return a builder with the due already set"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         * @throws DukeException if the String has incorrect time format"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        public Builder setDue(String due) throws DukeException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            requireNonNull(due);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                this.due \u003d LocalDate.parse(due, DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                throw new DukeException(String.format(DukeException.MESSAGE_PAYMENT_TIME_INVALID, due));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        public Builder setTag(String tag) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            requireNonNull(tag);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            assert !tag.isEmpty();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.tag \u003d tag;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         * Parses and sets the field amount in builder."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         * @param amount String expected to follow BigDecimal format"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         * @return a builder with the amount already set"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         * @throws DukeException if the String has incorrect BigDecimal format"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        public Builder setAmount(String amount) throws DukeException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            requireNonNull(amount);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                this.amount \u003d new BigDecimal(amount);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                throw new DukeException(String.format(DukeException.MESSAGE_PAYMENT_AMOUNT_INVALID, amount));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         * Parses and sets the field priority in builder."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         * @param priority String expected to follow Priority format"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         * @return a builder with the priority already set"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         * @throws DukeException if the String has incorrect Priority format"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        public Builder setPriority(String priority) throws DukeException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            requireNonNull(priority);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                this.priority \u003d Priority.valueOf(priority.toUpperCase());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                throw new DukeException(String.format(DukeException.MESSAGE_PRIORITY_NAME_INVALID, priority));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         * Builds a Payment with given fields."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         * @return the built Payment"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        public Payment build() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return new Payment(this);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Constructs a Payment with a builder."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param builder the builder containing fields information"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public Payment(Builder builder) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        requireNonNull(builder);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        description \u003d builder.description;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        receiver \u003d builder.receiver;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        due \u003d builder.due;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        tag \u003d builder.tag;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        amount \u003d builder.amount;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        priority \u003d builder.priority;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public String getReceiver() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return receiver;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public LocalDate getDue() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return due;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public String getTag() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return this.tag;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public BigDecimal getAmount() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public String getPriority() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return priority.toString();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public int getNumeratedPriority() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return priority.getNumeratedLevel();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Tests whether any of description, receiver and tag contains the keyword."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * The case of letter is ignored."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param keyword the keyword being searched"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return true if the keyword is found"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public boolean containsKeyword(String keyword) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        requireNonNull(keyword);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assert !keyword.isEmpty();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return description.toLowerCase().contains(keyword.toLowerCase()) //"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                || receiver.toLowerCase().contains(keyword.toLowerCase())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                || tag.toLowerCase().contains(keyword.toLowerCase());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 257
    }
  },
  {
    "path": "src/main/java/duke/model/payment/PaymentInMonthPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model.payment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Tests whether a {@code payment} is due in current month."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class PaymentInMonthPredicate implements Predicate\u003cPayment\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public PaymentInMonthPredicate() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public boolean test(Payment payment) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        requireNonNull(payment);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        LocalDate due \u003d payment.getDue();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        LocalDate now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        boolean isSameYear \u003d (due.getYear() \u003d\u003d now.getYear());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        boolean isSameMonth \u003d due.getMonth().equals(now.getMonth());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return (isSameYear \u0026\u0026 isSameMonth);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 29
    }
  },
  {
    "path": "src/main/java/duke/model/payment/PaymentInWeekPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model.payment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Tests whether a {@code payment} is due in current week."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class PaymentInWeekPredicate implements Predicate\u003cPayment\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public PaymentInWeekPredicate() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public boolean test(Payment payment) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        requireNonNull(payment);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        LocalDate now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        LocalDate due \u003d payment.getDue();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // The current day of week. e.g. Wednesday corresponds to 3"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        int dayOfWeek \u003d now.getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Monday of current week"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        LocalDate thisMonday \u003d now.minusDays(dayOfWeek - 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Sunday of current week"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        LocalDate thisSunday \u003d now.plusDays(7 - dayOfWeek);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return (due.equals(thisSunday)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                || due.equals(thisMonday)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                || (due.isAfter(thisMonday) \u0026\u0026 due.isBefore(thisSunday)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 37
    }
  },
  {
    "path": "src/main/java/duke/model/payment/PaymentList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model.payment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class PaymentList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(PaymentList.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final SortingCriteria DEFAULT_SORT_CRITERIA \u003d SortingCriteria.TIME;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private List\u003cPayment\u003e internalTimeSortedList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private List\u003cPayment\u003e internalAmountSortedList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private List\u003cPayment\u003e internalPrioritySortedList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private ObservableList\u003cPayment\u003e unfilteredList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private SortingCriteria sortingCriteria;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private FilteredList\u003cPayment\u003e filteredList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private StringProperty sortingCriteriaIndicator \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private ObjectProperty\u003cPredicate\u003e predicateIndicator \u003d new SimpleObjectProperty\u003cPredicate\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Predicate\u003cPayment\u003e PREDICATE_SHOW_ALL_PAYMENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private enum SortingCriteria {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        TIME(\"time\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        AMOUNT(\"amount\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        PRIORITY(\"priority\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        private String literalMeaning;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return literalMeaning;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        SortingCriteria(String literalMeaning) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.literalMeaning \u003d literalMeaning;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public PaymentList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"1.0\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.internalTimeSortedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        unfilteredList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        updateInternalAmountSortedList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        updateInternalPrioritySortedList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        sortingCriteria \u003d DEFAULT_SORT_CRITERIA; // TIME"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        fetchInternalListToUnfilteredList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        filteredList \u003d new FilteredList\u003c\u003e(unfilteredList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        filteredList.setPredicate(PREDICATE_SHOW_ALL_PAYMENTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        sortingCriteriaIndicator.setValue(sortingCriteria.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        predicateIndicator.setValue(PREDICATE_SHOW_ALL_PAYMENTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public PaymentList(List\u003cPayment\u003e timeSortedList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.internalTimeSortedList \u003d timeSortedList;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        unfilteredList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        updateInternalAmountSortedList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        updateInternalPrioritySortedList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        sortingCriteria \u003d DEFAULT_SORT_CRITERIA; // TIME"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        fetchInternalListToUnfilteredList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        filteredList \u003d new FilteredList\u003c\u003e(unfilteredList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        filteredList.setPredicate(PREDICATE_SHOW_ALL_PAYMENTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        sortingCriteriaIndicator.setValue(sortingCriteria.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        predicateIndicator.setValue(PREDICATE_SHOW_ALL_PAYMENTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void add(Payment payment) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        internalTimeSortedList.add(payment);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        internalTimeSortedList.sort(Comparator.comparing(Payment::getDue));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        updateInternalAmountSortedList(); // add operation may break the sorted order."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        updateInternalPrioritySortedList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        fetchInternalListToUnfilteredList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void remove(int index) throws DukeException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Payment target \u003d getPayment(index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        internalTimeSortedList.remove(target);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        internalAmountSortedList.remove(target);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        internalPrioritySortedList.remove(target); // remove operation doesn\u0027t break the sorted order."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        fetchInternalListToUnfilteredList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public Payment getPayment(int index) throws DukeException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Payment target;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            target \u003d filteredList.get(index - 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_NO_ITEM_AT_INDEX, index));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return target;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setPayment(int index, Payment editedPayment) throws DukeException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        remove(index);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        add(editedPayment); // using add method can help sort after change of element."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setSortingCriteria(String sortingCriteria) throws DukeException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            this.sortingCriteria \u003d SortingCriteria.valueOf(sortingCriteria.toUpperCase());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_SORT_CRITERIA_INVALID, sortingCriteria));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        fetchInternalListToUnfilteredList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        sortingCriteriaIndicator.setValue(this.sortingCriteria.toString());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setTimePredicate(Predicate\u003cPayment\u003e predicate) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        filteredList.setPredicate(predicate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        predicateIndicator.setValue(predicate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void setSearchPredicate(String keyword) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        SearchKeywordPredicate searchPredicate \u003d new SearchKeywordPredicate(keyword);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        filteredList.setPredicate(searchPredicate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        predicateIndicator.set(searchPredicate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public FilteredList\u003cPayment\u003e getFilteredList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return filteredList;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public StringProperty getSortingCriteriaIndicator() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return sortingCriteriaIndicator;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ObjectProperty\u003cPredicate\u003e getPredicateIndicator() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return predicateIndicator;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Returns all internal payments as an ArrayList."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * This is for storage ONLY!"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return list containing all internal payments."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public List\u003cPayment\u003e getInternalList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return internalTimeSortedList;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private void fetchInternalListToUnfilteredList() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        switch (sortingCriteria) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case TIME:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                unfilteredList.setAll(internalTimeSortedList);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case AMOUNT:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                unfilteredList.setAll(internalAmountSortedList);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case PRIORITY:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                unfilteredList.setAll(internalPrioritySortedList);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private void updateInternalAmountSortedList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        internalAmountSortedList \u003d new ArrayList\u003c\u003e(internalTimeSortedList);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        internalAmountSortedList.sort(Comparator.comparing(Payment::getAmount));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Collections.reverse(internalAmountSortedList);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private void updateInternalPrioritySortedList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        internalPrioritySortedList \u003d new ArrayList\u003c\u003e(internalTimeSortedList);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        internalPrioritySortedList.sort(Comparator.comparing(Payment::getNumeratedPriority));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Collections.reverse(internalPrioritySortedList);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 199
    }
  },
  {
    "path": "src/main/java/duke/model/payment/PaymentOverduePredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model.payment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Tests whether a {@code payment} is overdue."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class PaymentOverduePredicate implements Predicate\u003cPayment\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public PaymentOverduePredicate() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public boolean test(Payment payment) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        requireNonNull(payment);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        LocalDate due \u003d payment.getDue();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        LocalDate now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return due.isBefore(now);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 26
    }
  },
  {
    "path": "src/main/java/duke/model/payment/SearchKeywordPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model.payment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Tests whether a {@code Payment}\u0027s description, receiver or tag contains the keyword given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Ignores the letter case."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class SearchKeywordPredicate implements Predicate\u003cPayment\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public SearchKeywordPredicate(String keyword) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        requireNonNull(keyword);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public boolean test(Payment payment) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        requireNonNull(payment);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return payment.containsKeyword(keyword);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 27
    }
  },
  {
    "path": "src/main/java/duke/storage/BudgetStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.logic.Parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.Budget;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class BudgetStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String STORAGE_DELIMITER \u003d \"\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final File DEFAULT_USER_DIRECTORY \u003d new File(\"data\" + File.separator + \"duke\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final File BUDGET_FILE \u003d new File(DEFAULT_USER_DIRECTORY, \"budget.txt\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Constructor of Budget object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @throws DukeException if the file cannot be created or read."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @throws IOException   if the file cannot be created or read."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public BudgetStorage() throws DukeException, IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        DEFAULT_USER_DIRECTORY.mkdirs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Writes to the save file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @throws DukeException if unable to save the file successfully"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void saveBudget(Budget budget) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Map\u003cString, BigDecimal\u003e budgetCategory \u003d budget.getBudgetCategory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            BUDGET_FILE.createNewFile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            try (FileWriter fileWriter \u003d new FileWriter(BUDGET_FILE)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                fileWriter.write(budget.getMonthlyBudgetString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                fileWriter.write(STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                if (!budgetCategory.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    for (String category : budgetCategory.keySet()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        BigDecimal budgetBD \u003d budgetCategory.get(category);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        fileWriter.write(category + \" \" + budgetBD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        fileWriter.write(STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_SAVE_FILE_FAILED, BUDGET_FILE.getPath()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * loads from the save file."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @throws DukeException if the file cannot be created or read.if the file cannot be created or read."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @throws IOException   if the file cannot be created or read."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Budget loadBudget() throws DukeException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        BUDGET_FILE.createNewFile();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        BigDecimal monthlyBudget \u003d BigDecimal.ZERO;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        Map\u003cString, BigDecimal\u003e budgetCategory \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try (Scanner fileReader \u003d new Scanner(BUDGET_FILE).useDelimiter(STORAGE_DELIMITER)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            if (fileReader.hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                String monthlyBudgetString \u003d fileReader.next();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                monthlyBudget \u003d new BigDecimal(monthlyBudgetString);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            while (fileReader.hasNext()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                String line \u003d fileReader.next();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                String[] separatedLine \u003d line.split(\" \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                int lineLength \u003d separatedLine.length;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                StringBuilder categoryBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                for (int wordNumber \u003d 0; wordNumber \u003c lineLength - 2; ++wordNumber) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    categoryBuilder.append(separatedLine[wordNumber]).append(\" \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                categoryBuilder.append(separatedLine[lineLength - 2]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                String budgetString \u003d separatedLine[lineLength - 1];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                BigDecimal budget \u003d Parser.parseMoney(budgetString);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                budget.setScale(2, RoundingMode.HALF_UP);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                budgetCategory.put(categoryBuilder.toString(), budget);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_LOAD_FILE_FAILED, BUDGET_FILE.getPath()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return new Budget(monthlyBudget, budgetCategory);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 91
    }
  },
  {
    "path": "src/main/java/duke/storage/BudgetViewStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.logic.Parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.model.BudgetView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "termehlee"
        },
        "content": "public class BudgetViewStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String STORAGE_DELIMITER \u003d \"\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final File DEFAULT_USER_DIRECTORY \u003d new File(\"data\" + File.separator + \"duke\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final File BUDGETVIEW_FILE \u003d new File(DEFAULT_USER_DIRECTORY, \"budgetView.txt\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Constructor of Budget object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @throws DukeException if the file cannot be created or read."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @throws IOException   if the file cannot be created or read."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BudgetViewStorage() throws DukeException, IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        DEFAULT_USER_DIRECTORY.mkdirs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Writes to the save file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @throws DukeException if unable to save the file successfully"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void saveBudgetView (BudgetView budgetView) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            Map\u003cInteger, String\u003e budgetViewCategory \u003d budgetView.getBudgetViewCategory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            BUDGETVIEW_FILE.createNewFile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            try (FileWriter fileWriter \u003d new FileWriter(BUDGETVIEW_FILE)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                if (!budgetViewCategory.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                    for (Integer view : budgetViewCategory.keySet()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                        String category \u003d budgetViewCategory.get(view);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                        fileWriter.write(view + \" \" + category);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                        fileWriter.write(STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_SAVE_FILE_FAILED, BUDGETVIEW_FILE.getPath()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * loads from the save file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @throws DukeException if the file cannot be created or read.if the file cannot be created or read."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @throws IOException   if the file cannot be created or read."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BudgetView loadBudgetView() throws DukeException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        BUDGETVIEW_FILE.createNewFile();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        Map\u003cInteger, String\u003e budgetViewCategory \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        try (Scanner fileReader \u003d new Scanner(BUDGETVIEW_FILE).useDelimiter(STORAGE_DELIMITER)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            while (fileReader.hasNext()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                String line \u003d fileReader.next();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                String[] separatedLine \u003d line.split(\" \", 2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                int view \u003d Integer.parseInt(separatedLine[0]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                budgetViewCategory.put(view, separatedLine[1]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_LOAD_FILE_FAILED, BUDGETVIEW_FILE.getPath()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return new BudgetView(budgetViewCategory);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "termehlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 76
    }
  },
  {
    "path": "src/main/java/duke/storage/ExpenseListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.ExpenseList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public interface ExpenseListStorage {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void saveExpenseList(ExpenseList expenseList) throws DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ExpenseList loadExpenseList() throws DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 11
    }
  },
  {
    "path": "src/main/java/duke/storage/ExpenseListStorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.ExpenseList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class ExpenseListStorageManager implements ExpenseListStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final File DEFAULT_USER_DIRECTORY \u003d new File(\"data\" + File.separator + \"duke\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final File EXPENSES_FILE \u003d new File(DEFAULT_USER_DIRECTORY, \"expenses.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static String STORAGE_DELIMITER \u003d \"\\n\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ExpenseListStorageManager() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        DEFAULT_USER_DIRECTORY.mkdirs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void saveExpenseList(ExpenseList expenseList) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            EXPENSES_FILE.createNewFile();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            try (FileWriter fileWriter \u003d new FileWriter(EXPENSES_FILE)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                for (Expense expense : expenseList.getInternalList()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    fileWriter.write(expense.toStorageString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    fileWriter.write(STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_SAVE_FILE_FAILED, EXPENSES_FILE.getPath()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public ExpenseList loadExpenseList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        List\u003cExpense\u003e internalList \u003d new ArrayList\u003cExpense\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            EXPENSES_FILE.createNewFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            try (Scanner fileReader \u003d new Scanner(EXPENSES_FILE).useDelimiter(STORAGE_DELIMITER)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                while (fileReader.hasNext()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                    internalList.add(ExpenseList.itemFromStorageString(fileReader.next()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (IOException | DukeException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return new ExpenseList(internalList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return new ExpenseList(internalList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 56,
      "lucasfoo": 2
    }
  },
  {
    "path": "src/main/java/duke/storage/IncomeListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.model.IncomeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": "public interface IncomeListStorage {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void saveIncomeList(IncomeList incomeList) throws DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public IncomeList loadIncomeList() throws DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 11
    }
  },
  {
    "path": "src/main/java/duke/storage/IncomeListStorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.model.Income;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.model.IncomeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": "public class IncomeListStorageManager implements IncomeListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final File DEFAULT_USER_DIRECTORY \u003d new File(\"data\" + File.separator + \"duke\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final File INCOME_FILE \u003d new File(DEFAULT_USER_DIRECTORY, \"income.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static String STORAGE_DELIMITER \u003d \"\\n\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public IncomeListStorageManager() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        DEFAULT_USER_DIRECTORY.mkdirs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void saveIncomeList(IncomeList incomeList) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            INCOME_FILE.createNewFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            try (FileWriter fileWriter \u003d new FileWriter(INCOME_FILE)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                for (Income income : incomeList.getInternalList()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                    fileWriter.write(income.toStorageString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                    fileWriter.write(STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_SAVE_FILE_FAILED, INCOME_FILE.getPath()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public IncomeList loadIncomeList() throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        List\u003cIncome\u003e internalList \u003d new ArrayList\u003cIncome\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            INCOME_FILE.createNewFile();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            try (Scanner fileReader \u003d new Scanner(INCOME_FILE).useDelimiter(STORAGE_DELIMITER)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                while (fileReader.hasNext()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                    internalList.add(IncomeList.itemFromStorageString(fileReader.next()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        } catch (IOException | DukeException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_LOAD_FILE_FAILED, INCOME_FILE.getPath()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return new IncomeList(internalList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "termehlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 56
    }
  },
  {
    "path": "src/main/java/duke/storage/PlanAttributesStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public interface PlanAttributesStorage {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void savePlanAttributes(Map\u003cString, String\u003e attributes) throws DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Map\u003cString, String\u003e loadAttributes();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 12
    }
  },
  {
    "path": "src/main/java/duke/storage/PlanAttributesStorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class PlanAttributesStorageManager implements PlanAttributesStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final File DEFAULT_USER_DIRECTORY \u003d new File(\"data\" + File.separator + \"duke\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final File PLAN_ATTRIBUTES_FILE \u003d new File(DEFAULT_USER_DIRECTORY, \"planAttributes.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static String STORAGE_DELIMITER \u003d \"\\n\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public PlanAttributesStorageManager() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        DEFAULT_USER_DIRECTORY.mkdir();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void savePlanAttributes(Map\u003cString, String\u003e attributes) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            PLAN_ATTRIBUTES_FILE.createNewFile();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            try (FileWriter fileWriter \u003d new FileWriter(PLAN_ATTRIBUTES_FILE)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                for (String key : attributes.keySet()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    String value \u003d attributes.get(key);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    fileWriter.write(key + \" \" + value);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    fileWriter.write(STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            throw new DukeException(String.format(DukeException"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    .MESSAGE_SAVE_FILE_FAILED, PLAN_ATTRIBUTES_FILE.getPath()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Map\u003cString, String\u003e loadAttributes() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        Map\u003cString, String\u003e attributes \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            PLAN_ATTRIBUTES_FILE.createNewFile();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            try (Scanner scanner \u003d new Scanner(PLAN_ATTRIBUTES_FILE).useDelimiter(STORAGE_DELIMITER)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    String keyValue \u003d scanner.next();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    String[] keyValueArr \u003d keyValue.split(\" \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    if (keyValueArr.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        attributes.put(keyValueArr[0], keyValueArr[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return attributes;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 62
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.Budget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.model.BudgetView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.ExpenseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.payment.PaymentList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.model.IncomeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public interface Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    void saveExpenseList(ExpenseList expenseList) throws DukeException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    ExpenseList loadExpenseList() throws DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    void savePlanAttributes(Map\u003cString, String\u003e attributes) throws DukeException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    Map\u003cString, String\u003e loadPlanAttributes();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    void saveIncomeList(IncomeList incomeList) throws DukeException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    IncomeList loadIncomeList() throws DukeException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    Budget loadBudget() throws IOException, DukeException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    void saveBudget(Budget budget) throws DukeException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    BudgetView loadBudgetView() throws IOException, DukeException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    void saveBudgetView(BudgetView budgetView) throws DukeException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    Optional\u003cPaymentList\u003e loadPaymentList() throws DukeException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    void savePaymentList(PaymentList paymentList) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    // todo: add other interface methods for other lists."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 11,
      "ChaojieLiu666": 23,
      "lucasfoo": 11
    }
  },
  {
    "path": "src/main/java/duke/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.Budget;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.model.BudgetView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.ExpenseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.payment.PaymentList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.storage.payment.PaymentListStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.model.IncomeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private ExpenseListStorage expenseListStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private PlanAttributesStorage planAttributesStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private IncomeListStorage incomeListStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private BudgetStorage budgetStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private BudgetViewStorage budgetViewStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private PaymentListStorage paymentListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Constructor for StorageManager"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param expenseListStorage    storage for expense List"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param planAttributesStorage storage for PlanAttributes from PlanBot"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param budgetStorage         Storage for budget"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public StorageManager(ExpenseListStorage expenseListStorage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                          PlanAttributesStorage planAttributesStorage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                          IncomeListStorage incomeListStorage,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                          BudgetStorage budgetStorage,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                          BudgetViewStorage budgetViewStorage,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                          PaymentListStorage paymentListStorage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.expenseListStorage \u003d expenseListStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.planAttributesStorage \u003d planAttributesStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        this.incomeListStorage \u003d incomeListStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.budgetStorage \u003d budgetStorage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        this.budgetViewStorage \u003d budgetViewStorage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.paymentListStorage \u003d paymentListStorage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void saveExpenseList(ExpenseList expenseList) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        expenseListStorage.saveExpenseList(expenseList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public ExpenseList loadExpenseList() throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return expenseListStorage.loadExpenseList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void savePlanAttributes(Map\u003cString, String\u003e attributes) throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        planAttributesStorage.savePlanAttributes(attributes);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Map\u003cString, String\u003e loadPlanAttributes() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return planAttributesStorage.loadAttributes();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void saveIncomeList(IncomeList incomeList) throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        incomeListStorage.saveIncomeList(incomeList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public IncomeList loadIncomeList() throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return incomeListStorage.loadIncomeList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Budget loadBudget() throws IOException, DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        return budgetStorage.loadBudget();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void saveBudget(Budget budget) throws DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        budgetStorage.saveBudget(budget);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BudgetView loadBudgetView() throws IOException, DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return budgetViewStorage.loadBudgetView();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void saveBudgetView(BudgetView budgetView) throws DukeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        budgetViewStorage.saveBudgetView(budgetView);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public Optional\u003cPaymentList\u003e loadPaymentList() throws DukeException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"start loading paymentList\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return paymentListStorage.readPaymentList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void savePaymentList(PaymentList paymentList) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paymentListStorage.savePaymentList(paymentList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 29,
      "ChaojieLiu666": 44,
      "lucasfoo": 37
    }
  },
  {
    "path": "src/main/java/duke/storage/payment/JsonAdaptedPayment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.storage.payment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.payment.Payment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Jackson-friendly version of Payment."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class JsonAdaptedPayment {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private String receiver;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private String due;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private String remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private String amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private String priority;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Constructs a {@code JsonAdaptedPayment} with the given person details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public JsonAdaptedPayment(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                              @JsonProperty(\"receiver\") String receiver,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                              @JsonProperty(\"due\") String due,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                              @JsonProperty(\"remark\") String remark,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                              @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                              @JsonProperty(\"priority\") String priority) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.receiver \u003d receiver;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.due \u003d due;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Converts a given {@code Payment} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public JsonAdaptedPayment(Payment source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        receiver \u003d source.getReceiver();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        due \u003d source.getDue().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        remark \u003d source.getTag();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        amount \u003d source.getAmount().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        priority \u003d source.getPriority();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Converts this Jackson-friendly adapted payment object into the model\u0027s {@code Payment} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @throws DukeException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public Payment toModelType() throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Payment.Builder paymentBuilder \u003d new Payment.Builder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_PAYMENT_STORAGE_MISSING_FIELD, \"description\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paymentBuilder.setDescription(description);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (receiver \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_PAYMENT_STORAGE_MISSING_FIELD, \"receiver\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paymentBuilder.setReceiver(receiver);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (due \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_PAYMENT_STORAGE_MISSING_FIELD, \"due\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paymentBuilder.setDue(due);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_PAYMENT_STORAGE_MISSING_FIELD, \"remark\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paymentBuilder.setTag(remark);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_PAYMENT_STORAGE_MISSING_FIELD, \"amount\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paymentBuilder.setAmount(amount);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(String.format(DukeException.MESSAGE_PAYMENT_STORAGE_MISSING_FIELD, \"priority\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paymentBuilder.setPriority(priority);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return paymentBuilder.build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 109
    }
  },
  {
    "path": "src/main/java/duke/storage/payment/JsonSerializablePaymentList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.storage.payment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.payment.Payment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.payment.PaymentList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * A PaymentList that is serializable to JSON format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "@JsonRootName(value \u003d \"paymentList\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class JsonSerializablePaymentList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private final List\u003cJsonAdaptedPayment\u003e payments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Constructs a {@code JsonSerializablePaymentList} with the given payments."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public JsonSerializablePaymentList(@JsonProperty(\"payments\") List\u003cJsonAdaptedPayment\u003e payments) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.payments.addAll(payments);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Converts a given {@code PaymentList} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public JsonSerializablePaymentList(PaymentList source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        payments.addAll(source.getInternalList().stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .map(JsonAdaptedPayment::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @throws DukeException if there were any data constraints violated."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public PaymentList toModelType() throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        List\u003cPayment\u003e internalPaymentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        for (JsonAdaptedPayment jsonAdaptedPayment : payments) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            Payment payment \u003d jsonAdaptedPayment.toModelType();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            internalPaymentList.add(payment);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return new PaymentList(internalPaymentList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 54
    }
  },
  {
    "path": "src/main/java/duke/storage/payment/PaymentListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.storage.payment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.payment.PaymentList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " * Represents a storage for duke.model.payment.PaymentList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public interface PaymentListStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Returns PaymentList data as a PaymentList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @throws DukeException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     // * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    Optional\u003cPaymentList\u003e readPaymentList() throws DukeException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Saves the given PaymentList to the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param paymentList cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    void savePaymentList(PaymentList paymentList) throws IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 29
    }
  },
  {
    "path": "src/main/java/duke/storage/payment/PaymentListStorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.storage.payment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.commons.FileUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.commons.JsonUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.payment.PaymentList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class PaymentListStorageManager implements PaymentListStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(PaymentListStorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final File DEFAULT_USER_DIRECTORY \u003d new File(\"data\" + File.separator + \"duke\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final File PAYMENTS_FILE \u003d new File(DEFAULT_USER_DIRECTORY, \"payments.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final Path filePath \u003d PAYMENTS_FILE.toPath();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public PaymentListStorageManager() throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"PaymentList.txt file created\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public Optional\u003cPaymentList\u003e readPaymentList() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"Entered the JsonStorageManager\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(PAYMENTS_FILE.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return Optional.of(new PaymentList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Optional\u003cJsonSerializablePaymentList\u003e jsonPaymentList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                filePath, JsonSerializablePaymentList.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"Json file is read\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(!jsonPaymentList.isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            logger.info(\"returning the paymentList from storage\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            return Optional.of(jsonPaymentList.get().toModelType());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void savePaymentList(PaymentList paymentList) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        requireNonNull(paymentList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePaymentList(paymentList), filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 64
    }
  },
  {
    "path": "src/main/java/duke/ui/BudgetBar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.model.BudgetView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.text.FontWeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javax.swing.*;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "termehlee"
        },
        "content": "public class BudgetBar extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(BudgetBar.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String FXML_FILE_NAME \u003d \"BudgetBar.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public Logic logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private Map \u003cInteger,ProgressBar\u003e budgetBars \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    GridPane gridPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    VBox vBox1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    VBox vBox2;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    VBox vBox3;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    VBox vBox4;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    VBox vBox5;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    VBox vBox6;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BudgetBar(Logic logic) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        super(FXML_FILE_NAME,null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        gridPane.setStyle(\"-fx-background-color: mintcream;\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        gridPane.setGridLinesVisible(true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        gridPane.setSnapToPixel(true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        for(int viewPane \u003d 1; viewPane \u003c\u003d 6; viewPane++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            ProgressBar bar \u003d new ProgressBar();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            Text category \u003d new Text();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            Text remaining \u003d new Text();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            bar.setPrefWidth(250);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            bar.setPrefHeight(30);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            bar.setProgress(percentage(viewPane,logic));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            budgetBars.put(viewPane,bar);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            if(percentage(viewPane,logic) \u003e 0.9) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                bar.setStyle(\"-fx-accent: red;\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            } else if (percentage(viewPane,logic) \u003e 0.65) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                bar.setStyle(\"-fx-accent: orange;\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            } else if (percentage(viewPane,logic) \u003e 0.40) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                bar.setStyle(\"-fx-accent: yellow\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                bar.setStyle(\"-fx-accent: green\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            if(percentage(viewPane,logic) \u003c 1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                if(remainder(viewPane,logic).compareTo(BigDecimal.ZERO) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                    remaining.setText(\"     No budget set.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                    remaining.setText(\"     Remaining budget: $\" + remainder(viewPane, logic));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            } else if(percentage(viewPane,logic) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                remaining.setText(\"     Budget of \" + logic.getBudgetTag(logic.getBudgetViewCategory().get(viewPane)) + \" reached!\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                remaining.setText(\"     Exceeded budget by $\" + remainder(viewPane,logic).negate() + \"!\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            remaining.setStyle(\"-fx-font-size: 16px;\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            category.setStyle(\"-fx-font-size: 25px;\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            if(!logic.getBudgetViewCategory().containsKey(viewPane)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                bar.setVisible(false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                category.setVisible(false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                remaining.setVisible(false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                String tag \u003d logic.getBudgetViewCategory().get(viewPane);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                category.setText(tag.toUpperCase());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            if(viewPane \u003d\u003d 1) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                vBox1.getChildren().addAll(category, bar, remaining);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                vBox1.setSpacing(10);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            } else if(viewPane \u003d\u003d 2) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                vBox2.getChildren().addAll(category, bar, remaining);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                vBox2.setSpacing(10);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            } else if(viewPane \u003d\u003d 3) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                vBox3.getChildren().addAll(category, bar, remaining);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                vBox3.setSpacing(10);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            } else if(viewPane \u003d\u003d 4) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                vBox4.getChildren().addAll(category, bar, remaining);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                vBox4.setSpacing(10);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            } else if(viewPane \u003d\u003d 5) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                vBox5.getChildren().addAll(category, bar, remaining);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                vBox5.setSpacing(10);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                vBox6.getChildren().addAll(category, bar, remaining);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                vBox6.setSpacing(10);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public double percentage(int viewPane, Logic logic) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        String category \u003d logic.getBudgetViewCategory().get(viewPane);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        double percent \u003d logic.getTagAmount(category).doubleValue() / logic.getBudgetTag(category).doubleValue();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        //In the case where percent is NaN (Not a Number)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        if(Double.isNaN(percent)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            percent \u003d 0.0;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return percent;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BigDecimal remainder(int viewPane, Logic logic) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        String category \u003d logic.getBudgetViewCategory().get(viewPane);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        BigDecimal remaining \u003d logic.getBudgetTag(category).subtract(logic.getTagAmount(category));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return remaining;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "termehlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 146
    }
  },
  {
    "path": "src/main/java/duke/ui/BudgetGUI.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Expense;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.TableCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.TableRow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " * Controller for MainWindow.fxml"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class BudgetGUI /*extends UiPart\u003cBorderPane\u003e*/ /*{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Label totalSpentLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public BorderPane main;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public TextField inputField;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Label lastCommandLabel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public Label monthlyBudgetLabel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    Label remainingBudgetLabel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    TableView expenseTableView;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    ListView\u003cString\u003e budgetListView \u003d new ListView\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    Label dayLabel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    Label weekLabel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    Label monthLabel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    Label yearLabel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    Label allLabel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    Label filterLabel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Detects enter key and passes command entered in the TextField into Duke, and update the GUI accordingly."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void onEnter() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        String userInput \u003d inputField.getText();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        String response \u003d duke.getResponse(userInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        lastCommandLabel.setText(response);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        inputField.clear();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        updateTotalSpentLabel();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        updateTableListView();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateMonthlyBudget();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateRemainingBudget();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateBudgetListView();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateViewScopeLabel();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Sets the duke object in MainWindow."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param d \u003ccode\u003eDuke\u003c/code\u003eDuke object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.duke \u003d d;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        updateTotalSpentLabel();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateMonthlyBudget();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateRemainingBudget();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateTableListView();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateBudgetListView();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateViewScopeLabel();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        updateFilterLabel();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public Duke returnDuke() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return this.duke;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Populate the ListView with a list of expenses."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private void updateTableListView() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        expenseTableView.getItems().clear();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        expenseTableView.setPlaceholder(new Label(\"No expenses to display!\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TableColumn\u003cExpense, Void\u003e indexColumn \u003d new TableColumn\u003c\u003e(\"No.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        indexColumn.setCellFactory(col -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            TableCell\u003cExpense, Void\u003e cell \u003d new TableCell\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            cell.textProperty().bind(Bindings.createStringBinding(() -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                if (cell.isEmpty()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    return null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    return Integer.toString(cell.getIndex() + 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }, cell.emptyProperty(), cell.indexProperty()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            return cell;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        indexColumn.setSortable(false);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TableColumn\u003cString, Expense\u003e timeColumn \u003d new TableColumn\u003c\u003e(\"Time\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        timeColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"timeString\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        timeColumn.setSortable(false);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TableColumn\u003cString, Expense\u003e amountColumn \u003d new TableColumn\u003c\u003e(\"Amount\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        amountColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"amount\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        amountColumn.setSortable(false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TableColumn\u003cExpense, String\u003e descriptionColumn \u003d new TableColumn\u003c\u003e(\"Description\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        descriptionColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"description\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        descriptionColumn.setSortable(false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        TableColumn\u003cExpense, String\u003e tagColumn \u003d new TableColumn\u003c\u003e(\"Tags\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        tagColumn.setSortable(false);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        tagColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"tagsString\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        tagColumn.setSortable(false);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        expenseTableView.setRowFactory(new Callback\u003cTableView\u003cExpense\u003e, TableRow\u003cExpense\u003e\u003e() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            public TableRow\u003cExpense\u003e call(TableView\u003cExpense\u003e tableView) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                final TableRow\u003cExpense\u003e row \u003d new TableRow\u003cExpense\u003e() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    protected void updateItem(Expense expense, boolean empty) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        super.updateItem(expense, empty);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        if (expense !\u003d null \u0026\u0026 expense.isTentative()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            setStyle(\"-fx-text-background-color: grey;\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            setStyle(\"-fx-text-background-color: black;\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                };"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                return row;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        expenseTableView.getColumns().setAll("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                indexColumn,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                timeColumn,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                amountColumn,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                descriptionColumn,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                tagColumn"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        for (Expense expense : duke.expenseList.getExternalList()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            expenseTableView.getItems().add(expense);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Updates the total amount label."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void updateTotalSpentLabel() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        totalSpentLabel.setText(\"Total: \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                + ((duke.expenseList.getTotalExternalAmount().compareTo(BigDecimal.valueOf(0)) \u003c 0)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                ? \"-$\" + duke.expenseList.getTotalExternalAmount().abs() : \"$\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                + duke.expenseList.getTotalExternalAmount()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Updates the monthly budget label."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void updateMonthlyBudget() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        monthlyBudgetLabel.setText(\"Budget: \" + duke.budget.getMonthlyBudgetString());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Updates the remaining budget label."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void updateRemainingBudget() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        remainingBudgetLabel.setText(\"Remaining: \""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                + ((duke.budget.getRemaining(duke.expenseList.getTotalAmount()).compareTo(BigDecimal.valueOf(0)) \u003c 0)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                ? \"-$\" + duke.budget.getRemaining(duke.expenseList.getTotalAmount()).abs()"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                : \"$\" + duke.budget.getRemaining(duke.expenseList.getTotalAmount())));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Updates the Budget List of all categories."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void updateBudgetListView() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        budgetListView.getItems().clear();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        budgetListView.getItems().add(\"Tag: Spent/Budget\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        for (String tag : duke.budget.getBudgetCategory().keySet()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            budgetListView.getItems().add(tag"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    + \": $\" + duke.expenseList.getTagAmount(tag)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    + \" / $\" + duke.budget.getBudgetCategory().get(tag));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Updates View Scope Labels."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void updateViewScopeLabel() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        switch (duke.expenseList.getViewScope().getViewScopeName()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        case DAY:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            dayLabel.setTextFill(Color.BLACK);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            weekLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            monthLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            yearLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            allLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        case WEEK:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            weekLabel.setTextFill(Color.BLACK);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            dayLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            monthLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            yearLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            allLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        case MONTH:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            monthLabel.setTextFill(Color.BLACK);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            dayLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            weekLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            yearLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            allLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        case YEAR:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            yearLabel.setTextFill(Color.BLACK);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            dayLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            weekLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            monthLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            yearLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            dayLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            weekLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            monthLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            yearLabel.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            allLabel.setTextFill(Color.BLACK);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Updates Filter labels."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void updateFilterLabel() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        filterLabel.setText(duke.expenseList.getFilterCriteria());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "termehlee": 3,
      "otonashixav": 5,
      "ChaojieLiu666": 19,
      "lucasfoo": 236
    }
  },
  {
    "path": "src/main/java/duke/ui/BudgetPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.model.BudgetView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.model.Income;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.control.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javax.swing.*;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "termehlee"
        },
        "content": "public class BudgetPane extends UiPart\u003cAnchorPane\u003e  {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(BudgetPane.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String FXML_FILE_NAME \u003d \"BudgetPane.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    ListView\u003cIncome\u003e incomeListView;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    Label incomeLabel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    Pane paneView;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    Pane paneBudgetView;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    ListView\u003cString\u003e budgetListView;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public BudgetPane(ObservableList\u003cIncome\u003e incomeList, Logic logic) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        super(FXML_FILE_NAME, null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        logger.info(\"incomeList has length \" + incomeList.size());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        Label emptyIncomeListPlaceholder \u003d new Label();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        emptyIncomeListPlaceholder.setText(\"No Income yet!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        incomeListView.setPlaceholder(emptyIncomeListPlaceholder);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        incomeListView.setItems(incomeList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        logger.info(\"Items are set.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        incomeListView.setCellFactory(incomeListView -\u003e new IncomeListViewCell());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        logger.info(\"cell factory is set.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        incomeLabel.setText(\"Income\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        incomeLabel.setFont(new Font(\"Arial\", 20));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        Text text \u003d new Text();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        ProgressBar overallBudget \u003d new ProgressBar();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        double percent \u003d logic.getTotalAmount().doubleValue()/logic.getMonthlyBudget().doubleValue();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        String remaining \u003d logic.getRemaining(logic.getTotalAmount()).toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        overallBudget.setProgress(percent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        text.setText(\"Remaining: $\" + remaining);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        text.setStyle(\"-fx-font-size: 20px;\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        if(percent \u003e 0.9) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            overallBudget.setStyle(\"-fx-accent: red;\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        } else if (percent \u003e 0.65) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            overallBudget.setStyle(\"-fx-accent: orange;\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        } else if (percent \u003e 0.40) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            overallBudget.setStyle(\"-fx-accent: yellow\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            overallBudget.setStyle(\"-fx-accent: green\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        overallBudget.setLayoutX(150);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        overallBudget.setPrefWidth(500);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        overallBudget.setPrefHeight(30);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        text.setLayoutX(300);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        text.setLayoutY(50);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        paneView.getChildren().clear();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        paneView.getChildren().add(overallBudget);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        paneView.getChildren().add(text);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        paneBudgetView.getChildren().clear();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        paneBudgetView.getChildren().add(new BudgetBar(logic).getRoot());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        budgetListView.setItems(logic.getBudgetObservableList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    class IncomeListViewCell extends ListCell\u003cIncome\u003e {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        protected void updateItem(Income income, boolean empty) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            super.updateItem(income, empty);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            if (empty || income \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                int index \u003d incomeListView.getItems().indexOf(income) + 1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                setGraphic(new IncomeCard(income, index).getRoot());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "termehlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 108
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.PlanBot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class DialogBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String FXML_FILE_NAME \u003d \"DialogBox.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public final PlanBot.PlanDialog dialog;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    VBox textContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Controller for dialog box in PlanPane."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param dialog the dialog object given by PlanBot"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public DialogBox(PlanBot.PlanDialog dialog) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        super(FXML_FILE_NAME, null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.dialog \u003d dialog;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        text.setText(dialog.text);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        text.setBackground(new Background(new BackgroundFill(Color.LAVENDER, new CornerRadii(5), Insets.EMPTY)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (dialog.agent \u003d\u003d PlanBot.Agent.USER) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            textContainer.setAlignment(Pos.BOTTOM_RIGHT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            text.setAlignment(Pos.BOTTOM_LEFT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            text.setBackground(new Background(new BackgroundFill(Color.SANDYBROWN, new CornerRadii(5), Insets.EMPTY)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 43
    }
  },
  {
    "path": "src/main/java/duke/ui/ExpenseCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.Expense;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.PlanBot;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.ColorPicker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class ExpenseCard extends UiPart\u003cRegion\u003e{"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String FXML_FILE_NAME \u003d \"ExpenseCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public final Expense expense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private Label tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private VBox expenseContainer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public ExpenseCard(Expense expense, int index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        super(FXML_FILE_NAME, null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        this.expense \u003d expense;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        description.setText(index + \". \" + expense.getDescription());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        amount.setText(\"$\" + expense.getAmount().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        tag.setText(\"Tag: \" + expense.getTag());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        date.setText(expense.getTimeString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (expense.isRecurring()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            description.setTextFill(Color.GREEN);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            amount.setTextFill(Color.GREEN);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            tag.setTextFill(Color.GREEN);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            date.setTextFill(Color.GREEN);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } else if(expense.isTentative()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            description.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            amount.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            tag.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            date.setTextFill(Color.GRAY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 53
    }
  },
  {
    "path": "src/main/java/duke/ui/ExpensePane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.model.Expense;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "termehlee"
        },
        "content": "public class ExpensePane extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ExpensePane.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String FXML_FILE_NAME \u003d \"ExpensePane.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private Pane paneView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private PieChart pieChartSample;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    ListView\u003cExpense\u003e expenseListView;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    Label sortLabel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    Label filterLabel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    Label viewLabel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    Label totalLabel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public Set\u003cString\u003e tags;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public ExpensePane(ObservableList\u003cExpense\u003e expenseList, Logic logic,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                       StringProperty totalExpense,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                       StringProperty filterCriteria,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                       StringProperty sortCriteria,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                       StringProperty viewCriteria) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        super(FXML_FILE_NAME, null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        logger.info(\"expenseList has length \" + expenseList.size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        logger.info(\"expenseList has length \" + expenseList.size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        Label emptyExpenseListPlaceholder \u003d new Label();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        emptyExpenseListPlaceholder.setText(\"No Expenses yet. \" +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \"Type \\\"addExpense #amount\\\" to add one!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        expenseListView.setPlaceholder(emptyExpenseListPlaceholder);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        expenseListView.setItems(expenseList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        logger.info(\"Items are set.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        expenseListView.setCellFactory(expenseListView -\u003e new ExpenseListViewCell());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        logger.info(\"cell factory is set.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        sortLabel.textProperty().bindBidirectional(sortCriteria);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        filterLabel.textProperty().bindBidirectional(filterCriteria);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        viewLabel.textProperty().bindBidirectional(viewCriteria);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        totalLabel.textProperty().bindBidirectional(totalExpense);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        PieChart pieChartSample \u003d new PieChart();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        pieChartSample.setData(getData());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        paneView.getChildren().clear();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        pieChartSample.setTitle(\"Expenditure\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        paneView.getChildren().add(pieChartSample);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        logger.info(\"Pie chart is set.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Retrieves the amounts for each specific tag."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * @return ObservableList of type PieChart.data to be passed into the pie chart"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private ObservableList\u003cPieChart.Data\u003e getData() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        getTags();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e dataList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        for (Object tag : this.tags) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            dataList.add(new PieChart.Data((String) tag, logic.getTagAmount((String) tag).doubleValue()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        return dataList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     * Retrieves all tags as shown in external list and stores in a set {@code tags}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "termehlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private void getTags() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        for (Expense expense : logic.getExternalExpenseList()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            if(!expense.getTag().isEmpty()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                tags.add(expense.getTag());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code PlanBot.PlanDialog}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * using a {@code PlanBot.PlanDialog}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    class ExpenseListViewCell extends ListCell\u003cExpense\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        protected void updateItem(Expense expense, boolean empty) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            super.updateItem(expense, empty);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            if (empty || expense \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                int index \u003d expenseListView.getItems().indexOf(expense) + 1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                setGraphic(new ExpenseCard(expense, index).getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "termehlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 72,
      "lucasfoo": 57
    }
  },
  {
    "path": "src/main/java/duke/ui/IncomeCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.model.Income;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "public class IncomeCard extends UiPart\u003cRegion\u003e{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String FXML_FILE_NAME \u003d \"IncomeCard.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public final Income income;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private VBox incomeContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public IncomeCard(Income income, int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        super(FXML_FILE_NAME, null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        this.income \u003d income;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        description.setText(index + \". \" + income.getDescription());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        amount.setText(\"$\" + income.getAmount().toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "termehlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 28
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.logic.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.logic.Logic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.util.AutoCompleter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.util.InputHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "termehlee"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private static final String FXML_FILE_NAME \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private AutoCompleter autoCompleter;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private InputHistory inputHistory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private ExpensePane expensePane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private TrendingPane trendingPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private PaymentPane paymentPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private BudgetPane budgetPane;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private PlanPane planPane;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private CommandResult.DisplayedPane displayedPane;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    // The area that can be switched."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private StackPane paneStack;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    // TextInput and TextOutput"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private Label console;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Constructor for controller of the mainWindow."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param primaryStage Stage of Duke"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param logic Logic object of duke"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        super(FXML_FILE_NAME, primaryStage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        displayedPane \u003d CommandResult.DisplayedPane.EXPENSE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        if (logic.getExternalExpenseList().isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            //initial boot"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            displayedPane \u003d CommandResult.DisplayedPane.PLAN;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        fillInnerPart();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        inputHistory \u003d new InputHistory();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        autoCompleter \u003d new AutoCompleter();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.userInput.addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            if (event.getCode() \u003d\u003d KeyCode.TAB) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                autoCompleter.receiveText(userInput.getText());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                String fullSuggestion \u003d autoCompleter.getFullComplement();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                userInput.setText(fullSuggestion);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                userInput.positionCaret(userInput.getText().length());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                logger.info(\"Autocomplete finish\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        });"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private void fillInnerPart() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        expensePane \u003d new ExpensePane(logic.getExternalExpenseList(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                logic ,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                logic.getExpenseListTotalString(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                logic.getFilterCriteriaString(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                logic.getSortCriteriaString(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                logic.getViewCriteriaString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        logger.info(\"The filled externalList length \" + logic.getExternalExpenseList().size());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        trendingPane \u003d new TrendingPane();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        logger.info(\"trendingPane is constructed.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        planPane \u003d new PlanPane(logic.getDialogObservableList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        logger.info(\"planPane is constructed.\" + logic.getDialogObservableList().size());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        budgetPane \u003d new BudgetPane(logic.getExternalIncomeList(),logic);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paymentPane \u003d new PaymentPane(logic.getFilteredPaymentList(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                logic.getPaymentSortingCriteria(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                logic.getPaymentPredicate());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        logger.info(\"Budget plane is constructed.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        expensePane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        planPane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        trendingPane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paymentPane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        budgetPane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paneStack.getChildren().clear();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paneStack.getChildren().add(expensePane.getRoot());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paneStack.getChildren().add(planPane.getRoot());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paneStack.getChildren().add(trendingPane.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paneStack.getChildren().add(paymentPane.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        paneStack.getChildren().add(budgetPane.getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // this part should be unnecessary"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        switch (displayedPane) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        case TRENDING:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            trendingPane.getRoot().setVisible(true);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        case PLAN:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            planPane.getRoot().setVisible(true);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        case BUDGET:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            budgetPane.getRoot().setVisible(true);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        case PAYMENT:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            paymentPane.getRoot().setVisible(true);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        default: //Expense pane"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            expensePane.getRoot().setVisible(true);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        String inputString \u003d userInput.getText();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            CommandResult commandResult;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            if (displayedPane \u003d\u003d CommandResult.DisplayedPane.PLAN"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    \u0026\u0026 !inputString.contains(\"goto\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    \u0026\u0026 !inputString.contains(\"bye\")) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                commandResult \u003d logic.execute(\"plan \" + inputString);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                commandResult \u003d logic.execute(inputString);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            console.setText(commandResult.getConsoleInfo());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            fillInnerPart();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            showPane(commandResult);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            console.setText(e.getMessage());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        inputHistory.add(inputString);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private void handleKeyPressed(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            userInput.setText(inputHistory.getLastInput());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            userInput.setText(inputHistory.getNextInput());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            // other key events will be ignored."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private void showPane(CommandResult commandResult) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        displayedPane \u003d commandResult.getDisplayedPane();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        switch (displayedPane) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        case EXPENSE:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            showExpensePane();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        case TRENDING:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            showTrendingPane();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        case PLAN:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            showPlanPane();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        case PAYMENT:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            showPaymentPane();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        case BUDGET:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            showBudgetPane();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private void showExpensePane() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        expensePane.getRoot().setVisible(true);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        planPane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        trendingPane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paymentPane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        budgetPane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private void showTrendingPane() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        expensePane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        planPane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        trendingPane.getRoot().setVisible(true);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paymentPane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        budgetPane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private void showPlanPane() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        expensePane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        planPane.getRoot().setVisible(true);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        trendingPane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paymentPane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        budgetPane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    private void showBudgetPane() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        expensePane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        planPane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        trendingPane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        budgetPane.getRoot().setVisible(true);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paymentPane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private void showPaymentPane() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        expensePane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        planPane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        trendingPane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        budgetPane.getRoot().setVisible(false);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paymentPane.getRoot().setVisible(true);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "termehlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 107,
      "ChaojieLiu666": 110,
      "lucasfoo": 43
    }
  },
  {
    "path": "src/main/java/duke/ui/PaymentBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.payment.Payment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class PaymentBox extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String FXML_FILE_NAME \u003d \"PaymentBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String PRIORITY_PREFIX \u003d \"Priority.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private final Payment payment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Label indexLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Label amountLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Label receiverLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Label dueLabel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Label descriptionLabel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Label priorityLabel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Label tagLabel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Label overdueLabel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public PaymentBox(Payment payment, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super(FXML_FILE_NAME, null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.payment \u003d payment;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        indexLabel.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        amountLabel.setText(payment.getAmount().toString() + \" SGD\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        receiverLabel.setText(payment.getReceiver());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String due \u003d payment.getDue().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        dueLabel.setText(due);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        descriptionLabel.setText(payment.getDescription());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String priority \u003d payment.getPriority();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        BackgroundFill backgroundFill;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        switch (priority) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case \"High\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                backgroundFill \u003d new BackgroundFill(Color.RED, CornerRadii.EMPTY, Insets.EMPTY);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case \"Medium\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                backgroundFill \u003d new BackgroundFill(Color.ORANGE, CornerRadii.EMPTY, Insets.EMPTY);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            case \"Low\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                backgroundFill \u003d new BackgroundFill(Color.GREENYELLOW, CornerRadii.EMPTY, Insets.EMPTY);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                backgroundFill \u003d new BackgroundFill(Color.TRANSPARENT, CornerRadii.EMPTY, Insets.EMPTY);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        priorityLabel.setBackground(new Background(backgroundFill));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        priorityLabel.setText(PRIORITY_PREFIX + priority);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        tagLabel.setText(payment.getTag());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if(payment.getDue().isBefore(LocalDate.now())) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            overdueLabel.setVisible(true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 84
    }
  },
  {
    "path": "src/main/java/duke/ui/PaymentPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.payment.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class PaymentPane extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(PaymentPane.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final double FULL_OPACITY \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final double FADED_OPACITY \u003d 0.2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String FXML_FILE_NAME \u003d \"PaymentPane.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private StringProperty sortingCriteria;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private ObjectProperty\u003cPredicate\u003e predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    // private ObservableList\u003cString\u003e searchKeywordIndicator;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Label overdueLabel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Label weekLabel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Label monthLabel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Label allLabel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Label searchLabel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Label timeLabel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Label amountLabel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Label priorityLabel;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private ListView\u003cPayment\u003e paymentListView;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public PaymentPane(ObservableList\u003cPayment\u003e paymentList,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                       StringProperty sortingCriteria,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                       ObjectProperty\u003cPredicate\u003e predicate) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super(FXML_FILE_NAME, null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paymentListView.setItems(paymentList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        paymentListView.setCellFactory(listView -\u003e new PaymentListViewCell());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.sortingCriteria \u003d sortingCriteria;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.sortingCriteria.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            highlightSortLabel();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.predicate.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            highlightPredicateLabel();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        highlightSortLabel();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        highlightPredicateLabel();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Payment} using a {@code PaymentBox}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    class PaymentListViewCell extends ListCell\u003cPayment\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        protected void updateItem(Payment payment, boolean empty) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            super.updateItem(payment, empty);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            if (empty || payment \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                setGraphic(new PaymentBox(payment, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private void highlightSortLabel() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        switch (sortingCriteria.getValue()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        case \"time\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            timeLabel.setOpacity(FULL_OPACITY);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            amountLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            priorityLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        case \"amount\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            timeLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            amountLabel.setOpacity(FULL_OPACITY);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            priorityLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        case \"priority\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            timeLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            amountLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            priorityLabel.setOpacity(FULL_OPACITY);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private void highlightPredicateLabel() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (predicate.getValue() instanceof PaymentOverduePredicate) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            overdueLabel.setOpacity(FULL_OPACITY);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            weekLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            monthLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            allLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            searchLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } else if (predicate.getValue() instanceof PaymentInWeekPredicate) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            overdueLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            weekLabel.setOpacity(FULL_OPACITY);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            monthLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            allLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            searchLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } else if (predicate.getValue() instanceof PaymentInMonthPredicate) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            overdueLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            weekLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            monthLabel.setOpacity(FULL_OPACITY);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            allLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            searchLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } else if (predicate.getValue() instanceof SearchKeywordPredicate) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            overdueLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            weekLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            monthLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            allLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            searchLabel.setOpacity(FULL_OPACITY);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            overdueLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            weekLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            monthLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            allLabel.setOpacity(FULL_OPACITY);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            searchLabel.setOpacity(FADED_OPACITY);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 160
    }
  },
  {
    "path": "src/main/java/duke/ui/PlanPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.model.PlanBot;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class PlanPane extends UiPart\u003cBorderPane\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(PlanPane.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String FXML_FILE_NAME \u003d \"PlanPane.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private ListView\u003cPlanBot.PlanDialog\u003e dialogListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Constructor for the controller."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * @param dialogObservableList a ObservableList of PlanDialog from PlanBot"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public PlanPane(ObservableList\u003cPlanBot.PlanDialog\u003e dialogObservableList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        super(FXML_FILE_NAME, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        dialogListView.setItems(dialogObservableList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        logger.info(\"DialogList set\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        dialogListView.setCellFactory(planDialogListView -\u003e new PlanDialogListViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        Platform.runLater(() -\u003e dialogListView.scrollTo(dialogObservableList.size() - 1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code PlanBot.PlanDialog}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     * using a {@code PlanBot.PlanDialog}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    static class PlanDialogListViewCell extends ListCell\u003cPlanBot.PlanDialog\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        protected void updateItem(PlanBot.PlanDialog dialog, boolean empty) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            super.updateItem(dialog, empty);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            if (empty || dialog \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                setGraphic(new DialogBox(dialog).getRoot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 55
    }
  },
  {
    "path": "src/main/java/duke/ui/TextUi.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.model.ExpenseList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the User Interface of Duke, and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * manages both input and output operations."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class TextUi {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner dukeIn;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private String mostRecent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an Ui object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public TextUi() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        dukeIn \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows welcome message to the user when Duke starts."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"I am Duke. What can I do for you?\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reads one line of user\u0027s commands."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @return User\u0027s command in {@code String} type."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return dukeIn.nextLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Replaces the {@code System.out.println} method."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param s The string to be printed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void println(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        mostRecent \u003d s;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints the message of the exception."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param e the {@code DukeException} whose message will be printed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showError(DukeException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        mostRecent \u003d e.getMessage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Prints the {@code ExpenseList} given."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param expenseList {@code ExpenseList} that we want to be printed"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "/*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void printExpenseList(ExpenseList expenseList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        if (expenseList.internalSize() \u003e 0) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            int count \u003d 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            for (Expense expense : expenseList.getExternalList()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                println(expense.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public String getMostRecent() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return mostRecent;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 38,
      "-": 58
    }
  },
  {
    "path": "src/main/java/duke/ui/TrendingPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class TrendingPane extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String FXML_FILE_NAME \u003d \"TrendingPane.fxml\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public TrendingPane() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        super(FXML_FILE_NAME, null);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 13
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void start(Stage primaryStage);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 1,
      "ChaojieLiu666": 3,
      "lucasfoo": 4
    }
  },
  {
    "path": "src/main/java/duke/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.commons.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.Logic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        mainWindow.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        logger.info(\"MainWindow are showed and filled in.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 26,
      "lucasfoo": 1
    }
  },
  {
    "path": "src/main/java/duke/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        URL fxmlFileUrl \u003d Main.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 68,
      "lucasfoo": 1
    }
  },
  {
    "path": "src/main/java/duke/utils/DateCompare.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DateCompare {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if day2 lies inside of day1."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param day1 the whole day from 00:00 to 23:59:59"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param day2 the day we want to check if it is in day 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if day 2 is in day 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isSameDay(Date day1, Date day2) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        calendar.setTime(day1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        calendar.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        calendar.add(Calendar.SECOND, -1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Date day1End \u003d calendar.getTime();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        return day2.after(day1) \u0026\u0026 day2.before(day1End);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if 2 date ranges, A and B are overlapping each other."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDateA start of date A"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endDateA   end of date A"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDateB start of date B"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param endDateB   end of date B"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if dates are overlapping else return false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isOverlapping(Date startDateA, Date endDateA, Date startDateB, Date endDateB) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (startDateA.after(startDateB) \u0026\u0026 startDateA.before(endDateB)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (endDateA.after(startDateB) \u0026\u0026 endDateA.before(endDateB)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (startDateA.after(startDateB) \u0026\u0026 endDateA.before(endDateB)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (startDateB.after(startDateA) \u0026\u0026 startDateB.before(endDateA)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (endDateB.after(startDateA) \u0026\u0026 endDateB.before(endDateB)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (startDateB.after(startDateA) \u0026\u0026 endDateB.before(startDateB)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            return startDateA.equals(startDateB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || endDateA.equals(endDateB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || startDateA.equals(endDateB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                || endDateA.equals(startDateB);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 5,
      "-": 48
    }
  },
  {
    "path": "src/main/resources/layout/ExpenseCard.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "#amount {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-font-size: 28px;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 3
    }
  },
  {
    "path": "src/main/resources/layout/ExpensePane.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "#paneTitle {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-font-size: 32px;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-text-fill: GOLD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "#totalLabel{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-font-size: 32px;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "#sortLabel, #viewLabel, #filterLabel {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-text-fill: \tHONEYDEW;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "#totalLabel {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-text-fill: GREENYELLOW;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 16
    }
  },
  {
    "path": "src/main/resources/layout/IncomeCard.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "#amount {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    -fx-font-size: 28px;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 3
    }
  },
  {
    "path": "src/main/resources/layout/MainWindow.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "BorderPane {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "Textfield {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-alignment: bottom;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-padding: 20px;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": "#expenseListView, #budgetListView, #incomeListView{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-effect: dropshadow(three-pass-box, rgba(0, 0, 0, 0.8), 10, 0, 0, 0);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "HBox {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-min-width: 800px;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "VBox {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-padding: 5 5 5 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "#inputField {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-font-size: 1.5em;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "#MainContainer {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-background-color: \tLIGHTSLATEGREY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 1,
      "lucasfoo": 27
    }
  },
  {
    "path": "src/main/resources/layout/PlanPane.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ".list-cell{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-background-color: \tLIGHTGRAY"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ".list-view{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-effect: dropshadow(three-pass-box, rgba(0, 0, 0, 0.8), 10, 0, 0, 0);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "#paneTitle {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-font-size: 32px;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "#dialogListView {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 19
    }
  },
  {
    "path": "src/main/resources/view/BudgetBar.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003cGridPane fx:id\u003d\"gridPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    \u003cgridLinesVisible\u003etrue\u003c/gridLinesVisible\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        \u003cColumnConstraints percentWidth\u003d\"50\"  /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        \u003cColumnConstraints percentWidth\u003d\"50\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        \u003cRowConstraints percentHeight\u003d\"33.33\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        \u003cRowConstraints percentHeight\u003d\"33.33\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        \u003cRowConstraints percentHeight\u003d\"33.33\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "termehlee"
        },
        "content": "      \u003cVBox fx:id\u003d\"vBox1\" GridPane.rowIndex\u003d\"0\" GridPane.columnIndex\u003d\"0\" alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "termehlee"
        },
        "content": "      \u003cVBox fx:id\u003d\"vBox2\" GridPane.rowIndex\u003d\"0\" GridPane.columnIndex\u003d\"1\" alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "termehlee"
        },
        "content": "      \u003cVBox fx:id\u003d\"vBox3\" GridPane.rowIndex\u003d\"1\" GridPane.columnIndex\u003d\"0\" alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "termehlee"
        },
        "content": "      \u003cVBox fx:id\u003d\"vBox4\" GridPane.rowIndex\u003d\"1\" GridPane.columnIndex\u003d\"1\" alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "termehlee"
        },
        "content": "      \u003cVBox fx:id\u003d\"vBox5\" GridPane.rowIndex\u003d\"2\" GridPane.columnIndex\u003d\"0\" alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "termehlee"
        },
        "content": "      \u003cVBox fx:id\u003d\"vBox6\" GridPane.rowIndex\u003d\"2\" GridPane.columnIndex\u003d\"1\" alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "termehlee"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "termehlee": 29
    }
  },
  {
    "path": "src/main/resources/view/BudgetPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"640\" prefWidth\u003d\"1000\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "termehlee"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": "      \u003cPane fx:id\u003d\"paneView\" layoutX\u003d\"90.0\" layoutY\u003d\"23.0\" prefHeight\u003d\"120.0\" prefWidth\u003d\"828.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": "      \u003cLabel fx:id\u003d\"incomeLabel\" layoutX\u003d\"104.0\" layoutY\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "termehlee"
        },
        "content": "      \u003cVBox layoutX\u003d\"4\" layoutY\u003d\"180\" spacing\u003d\"40\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         \u003cListView fx:id\u003d\"incomeListView\" layoutX\u003d\"4.0\" layoutY\u003d\"100.0\" prefHeight\u003d\"175.0\" prefWidth\u003d\"250.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": "         \u003cListView fx:id\u003d\"budgetListView\" prefHeight\u003d\"200\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "termehlee"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "termehlee"
        },
        "content": "      \u003cPane fx:id\u003d\"paneBudgetView\" layoutX\u003d\"391.0\" layoutY\u003d\"192.0\" prefHeight\u003d\"504.0\" prefWidth\u003d\"720.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "termehlee"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "termehlee": 22
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            \u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            \u003cVBox  fx:id\u003d\"textContainer\" prefWidth\u003d\"950.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \u003cLabel fx:id\u003d\"text\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 15
    }
  },
  {
    "path": "src/main/resources/view/ExpenseCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    \u003cVBox fx:id\u003d\"expenseContainer\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        \u003cLabel fx:id\u003d\"description\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        \u003cLabel fx:id\u003d\"amount\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        \u003cLabel fx:id\u003d\"tag\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        \u003cLabel fx:id\u003d\"date\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        \u003cURL value\u003d\"@/layout/ExpenseCard.css\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 17
    }
  },
  {
    "path": "src/main/resources/view/ExpensePane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "           \u003cLabel fx:id\u003d\"paneTitle\" text\u003d\"Expense\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "           \u003cLabel fx:id\u003d\"otherPanes\" text\u003d\"Budget Plan Trend\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \u003cVBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    \u003cListView fx:id\u003d\"expenseListView\" prefWidth\u003d\"500\" prefHeight\u003d\"500\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        \u003cInsets top\u003d\"25\" right\u003d\"25\" bottom\u003d\"25\" left\u003d\"25\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    \u003cLabel fx:id\u003d\"totalLabel\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    \u003cLabel fx:id\u003d\"sortLabel\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    \u003cLabel fx:id\u003d\"viewLabel\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    \u003cLabel fx:id\u003d\"filterLabel\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \u003cVBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    \u003cPane fx:id\u003d\"paneView\" prefHeight\u003d\"200\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        \u003cURL value\u003d\"@/layout/ExpensePane.css\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "termehlee": 5,
      "lucasfoo": 33
    }
  },
  {
    "path": "src/main/resources/view/IncomeCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    \u003cVBox fx:id\u003d\"incomeContainer\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        \u003cLabel fx:id\u003d\"description\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        \u003cLabel fx:id\u003d\"amount\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        \u003cURL value\u003d\"@/layout/IncomeCard.css\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "termehlee": 15
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003cfx:root type\u003d\"Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            \u003cAnchorPane prefHeight\u003d\"700.0\" prefWidth\u003d\"1000.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    \u003cBorderPane fx:id\u003d\"MainContainer\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        \u003ccenter\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"paneStack\" prefHeight\u003d\"640.0\" prefWidth\u003d\"1000.0\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                       AnchorPane.bottomAnchor\u003d\"60.0\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                       AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        \u003c/center\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        \u003cbottom\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            \u003cVBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                                \u003cLabel fx:id\u003d\"console\" prefHeight\u003d\"20.0\" prefWidth\u003d\"1000.0\" text\u003d\"Welcome to Duke++\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                           onKeyPressed\u003d\"#handleKeyPressed\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                           prefHeight\u003d\"40.0\" prefWidth\u003d\"1000.0\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                                           promptText\u003d\"/Enter your command here...\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        \u003c/bottom\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    \u003cURL value\u003d\"@/layout/MainWindow.css\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 12,
      "lucasfoo": 28
    }
  },
  {
    "path": "src/main/resources/view/PaymentBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"100.0\" prefWidth\u003d\"900.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "      \u003cLabel fx:id\u003d\"indexLabel\" alignment\u003d\"CENTER\" prefHeight\u003d\"30.0\" prefWidth\u003d\"60.0\" text\u003d\"index\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "      \u003cLabel fx:id\u003d\"amountLabel\" layoutX\u003d\"60.0\" layoutY\u003d\"30.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"294.0\" text\u003d\"amount\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "      \u003cLabel fx:id\u003d\"receiverLabel\" layoutX\u003d\"122.0\" layoutY\u003d\"60.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"232.0\" text\u003d\"receiver\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "      \u003cLabel alignment\u003d\"CENTER\" layoutX\u003d\"572.0\" layoutY\u003d\"78.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"34.0\" text\u003d\"Due:\" AnchorPane.bottomAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "      \u003cLabel fx:id\u003d\"dueLabel\" layoutX\u003d\"606.0\" layoutY\u003d\"70.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"75.0\" text\u003d\"dueDate\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"219.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "      \u003cLabel fx:id\u003d\"descriptionLabel\" layoutX\u003d\"60.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"571.0\" text\u003d\"description\" AnchorPane.leftAnchor\u003d\"60.0\" AnchorPane.rightAnchor\u003d\"160.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "      \u003cLabel fx:id\u003d\"priorityLabel\" alignment\u003d\"CENTER\" layoutX\u003d\"755.0\" layoutY\u003d\"15.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"118.0\" text\u003d\"Priority\" textFill\u003d\"#fffefe\" AnchorPane.rightAnchor\u003d\"27.0\" AnchorPane.topAnchor\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "      \u003cLabel fx:id\u003d\"tagLabel\" layoutX\u003d\"572.0\" layoutY\u003d\"30.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"100.0\" text\u003d\"tag\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "      \u003cLabel fx:id\u003d\"receiverLabel1\" layoutX\u003d\"60.0\" layoutY\u003d\"60.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"60.0\" text\u003d\"Receiver:\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "      \u003cLabel fx:id\u003d\"overdueLabel\" alignment\u003d\"CENTER\" layoutX\u003d\"690.0\" layoutY\u003d\"70.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"60.0\" style\u003d\"-fx-background-color: #000000;\" text\u003d\"Overdue\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\" visible\u003d\"false\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"160.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 24
    }
  },
  {
    "path": "src/main/resources/view/PaymentPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"640.0\" prefWidth\u003d\"1000.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "      \u003cHBox layoutY\u003d\"63.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"500.0\" AnchorPane.bottomAnchor\u003d\"544.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"500.0\" AnchorPane.topAnchor\u003d\"63.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            \u003cLabel fx:id\u003d\"overdueLabel\" alignment\u003d\"CENTER\" opacity\u003d\"0.2\" prefHeight\u003d\"30.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-background-color: #000000;\" text\u003d\"OVERDUE\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                  \u003cFont name\u003d\"Helvetica Neue\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            \u003cLabel fx:id\u003d\"weekLabel\" alignment\u003d\"CENTER\" opacity\u003d\"0.2\" prefHeight\u003d\"30.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-background-color: #000000;\" text\u003d\"WEEK\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                  \u003cFont name\u003d\"Helvetica Neue\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            \u003cLabel fx:id\u003d\"monthLabel\" alignment\u003d\"CENTER\" opacity\u003d\"0.2\" prefHeight\u003d\"30.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-background-color: #000000;\" text\u003d\"MONTH\" textFill\u003d\"#f8f5f5\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                  \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            \u003cLabel fx:id\u003d\"allLabel\" alignment\u003d\"CENTER\" opacity\u003d\"0.2\" prefHeight\u003d\"30.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-background-color: #000000;\" text\u003d\"ALL\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                  \u003cFont name\u003d\"Helvetica Neue\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            \u003cLabel fx:id\u003d\"searchLabel\" alignment\u003d\"CENTER\" opacity\u003d\"0.2\" prefHeight\u003d\"30.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-background-color: #000000;\" text\u003d\"SEARCH\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                  \u003cFont name\u003d\"Helvetica Neue\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "      \u003cListView fx:id\u003d\"paymentListView\" layoutX\u003d\"143.0\" layoutY\u003d\"94.0\" prefHeight\u003d\"546.0\" prefWidth\u003d\"1000.0\" style\u003d\"-fx-background-color: FFF8DC;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"94.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "      \u003cLabel alignment\u003d\"CENTER\" layoutX\u003d\"500.0\" prefHeight\u003d\"50.0\" prefWidth\u003d\"1000.0\" text\u003d\"Pending Payments\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            \u003cFont name\u003d\"Helvetica Neue\" size\u003d\"36.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "      \u003cHBox prefHeight\u003d\"30.0\" prefWidth\u003d\"300.0\" AnchorPane.bottomAnchor\u003d\"548.0\" AnchorPane.leftAnchor\u003d\"700.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"62.0\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            \u003cLabel fx:id\u003d\"timeLabel\" alignment\u003d\"CENTER\" opacity\u003d\"0.2\" prefHeight\u003d\"30.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-background-color: #000000;\" text\u003d\"TIME\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                  \u003cFont name\u003d\"Helvetica Neue\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            \u003cLabel fx:id\u003d\"amountLabel\" alignment\u003d\"CENTER\" opacity\u003d\"0.2\" prefHeight\u003d\"30.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-background-color: #000000;\" text\u003d\"AMOUNT\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                  \u003cFont name\u003d\"Helvetica Neue\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            \u003cLabel fx:id\u003d\"priorityLabel\" alignment\u003d\"CENTER\" opacity\u003d\"0.2\" prefHeight\u003d\"30.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-background-color: #000000;\" text\u003d\"PRIORITY\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                  \u003cFont name\u003d\"Helvetica Neue\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 66
    }
  },
  {
    "path": "src/main/resources/view/PlanPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003cBorderPane xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            maxHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            maxWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            minWidth\u003d\"-Infinity\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    \u003ctop\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            \u003cLabel fx:id\u003d\"paneTitle\" text\u003d\"Plan\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            \u003cLabel fx:id\u003d\"otherPanes\" text\u003d\"Budget Expense Trend\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            \u003cListView prefWidth\u003d\"1000\" prefHeight\u003d\"500\" fx:id\u003d\"dialogListView\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    \u003c/top\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        \u003cURL value\u003d\"@/layout/PlanPane.css\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "\u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 26
    }
  },
  {
    "path": "src/main/resources/view/Tableview.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003cBorderPane fx:id\u003d\"main\" prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.ExpensePane\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    \u003ctop\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            \u003cLabel fx:id\u003d\"totalSpentLabel\" text\u003d\"Total: $0.00\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            \u003cLabel fx:id\u003d\"monthlyBudgetLabel\" text\u003d\"Budget:inf\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            \u003cLabel fx:id\u003d\"remainingBudgetLabel\" text\u003d\"Remaining:inf\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                \u003cTableView fx:id\u003d\"expenseTableView\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "termehlee"
        },
        "content": "                \u003cListView fx:id\u003d\"budgetListView\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "termehlee"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    \u003c/top\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "termehlee"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "termehlee": 25
    }
  },
  {
    "path": "src/main/resources/view/TrendingPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "      \u003cLabel layoutX\u003d\"261.0\" layoutY\u003d\"258.0\" text\u003d\"This is the Trending Chart to be implemented!\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 10
    }
  },
  {
    "path": "src/test/java/duke/logic/CommandParamsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.CommandParams;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "termehlee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class CommandParamsTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void testCorrectParamValues() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        CommandParams testParams \u003d new CommandParams(\"addExpense 2.12 /description hello /tag a b c\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(testParams.getCommand().getName(), \"addExpense\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testParams.getMainParam(), \"2.12\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testParams.getParam(\"description\"), \"hello\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testParams.getParam(\"tag\"), \"a b c\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertTrue(testParams.containsParams(\"tag\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertFalse(testParams.containsParams(\"time\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "termehlee"
        },
        "content": "    public void testCorrectNullParamValues() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        CommandParams testParams \u003d new CommandParams(\"addExpense /description /tag not null\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertNull(testParams.getMainParam());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testParams.getParam(\"tag\"), \"not null\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            testParams.getParam(\"description\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING_VALUE, \"description\"), e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testParamNotFoundException() throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        CommandParams testParams \u003d new CommandParams(\"addExpense\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            testParams.getParam(\"a\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                String.format(DukeException.MESSAGE_COMMAND_PARAM_MISSING_VALUE, \"a\"), e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testDuplicateParams() throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            CommandParams testParams \u003d new CommandParams(\"addExpense /time /time\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                String.format(DukeException.MESSAGE_COMMAND_PARAM_DUPLICATE, \"time\"), e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testAbbreviationFunctionality() throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            CommandParams testParams \u003d new CommandParams(\"b\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                DukeException.MESSAGE_COMMAND_NAME_UNKNOWN, e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        CommandParams testParams \u003d new CommandParams(\"addE /d description\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // assertEquals(testParams.getCommand().getName(), \"addExpense\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testParams.getParam(\"description\"), \"description\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 3,
      "otonashixav": 62,
      "ChaojieLiu666": 12,
      "lucasfoo": 9
    }
  },
  {
    "path": "src/test/java/duke/logic/util/AutoCompleterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class AutoCompleterTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String NULL_STRING \u003d null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String NOT_NULL_STRING_INPUT \u003d \"dummy\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String INPUT_WITH_ADD_PREFIX \u003d \"add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String PREFIX_ADD_FIRST_OPTION \u003d \"addExpense\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String PREFIX_ADD_SECOND_OPTION \u003d \"addPayment\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String PREFIX_ADD_THIRD_OPTION \u003d \"addBudget\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String PARAMETER_TO_COMPLETE \u003d \"addExpense /ti\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String PARAMETER_COMPLETED \u003d \"addExpense /time\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String PARAMETER_TO_PRODUCE \u003d \"addExpense 10 \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String PARAMETER_PRODUCED_FIRST_OPTION \u003d \"addExpense 10 /recurring\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String PARAMETER_PRODUCED_SECOND_OPTION \u003d \"addExpense 10 /description\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String NOT_IDENTIFIABLE_FRAGMENT \u003d \"arbitrary\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String DUMMY_BEFORE_PARAMETER_NAME \u003d \"addPayment 10 dummy/d\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String INCORRECT_COMMAND_NAME \u003d \"addDummy 10 \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String NO_SPACE_AT_END \u003d \"changePayment 60\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String SPACES_AT_FIRST \u003d \"    addE\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String SPACES_AT_FIRST_NO_PROBLEM \u003d \"    addExpense\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void receiveTest_nullStringInput_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        AutoCompleter autoCompleter \u003d new AutoCompleter();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e autoCompleter.receiveText(NULL_STRING));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void receiveTest_acceptableStringInput_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        AutoCompleter autoCompleter \u003d new AutoCompleter();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertDoesNotThrow(() -\u003e autoCompleter.receiveText(NOT_NULL_STRING_INPUT));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void getFullComplement() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        AutoCompleter autoCompleter \u003d new AutoCompleter();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Completes \"add\" to \"addExpense\"."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        autoCompleter.receiveText(INPUT_WITH_ADD_PREFIX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(PREFIX_ADD_FIRST_OPTION, autoCompleter.getFullComplement());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Iterates from \"addExpense\" to \"addPayment\"."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        autoCompleter.receiveText(PREFIX_ADD_FIRST_OPTION);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(PREFIX_ADD_SECOND_OPTION, autoCompleter.getFullComplement());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Iterates from \"addPayment\" to \"addBudget\"."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        autoCompleter.receiveText(PREFIX_ADD_SECOND_OPTION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(PREFIX_ADD_THIRD_OPTION, autoCompleter.getFullComplement());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Iterates from \"addBudget\" to \"addExpense\"."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        autoCompleter.receiveText(PREFIX_ADD_THIRD_OPTION);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(PREFIX_ADD_FIRST_OPTION, autoCompleter.getFullComplement());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Completes the parameter name \"/ti\" to \"/time\"."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        autoCompleter.receiveText(PARAMETER_TO_COMPLETE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(PARAMETER_COMPLETED, autoCompleter.getFullComplement());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Produces the first option \"/recurring\"."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        autoCompleter.receiveText(PARAMETER_TO_PRODUCE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(PARAMETER_PRODUCED_FIRST_OPTION, autoCompleter.getFullComplement());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Produces the second option \"/description\"."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        autoCompleter.receiveText(PARAMETER_PRODUCED_FIRST_OPTION);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(PARAMETER_PRODUCED_SECOND_OPTION, autoCompleter.getFullComplement());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // No complement is applied to not identifiable input."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        autoCompleter.receiveText(NOT_IDENTIFIABLE_FRAGMENT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(NOT_IDENTIFIABLE_FRAGMENT, autoCompleter.getFullComplement());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // No complement is applied to parameter name if dummy exists before it."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        autoCompleter.receiveText(DUMMY_BEFORE_PARAMETER_NAME);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(DUMMY_BEFORE_PARAMETER_NAME, autoCompleter.getFullComplement());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // No parameter name is produced if the command name is incorrect."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        autoCompleter.receiveText(INCORRECT_COMMAND_NAME);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(INCORRECT_COMMAND_NAME, autoCompleter.getFullComplement());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // No parameter is produced if the input does not end with space."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        autoCompleter.receiveText(NO_SPACE_AT_END);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(NO_SPACE_AT_END, autoCompleter.getFullComplement());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // No change is applied if the input is empty."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        autoCompleter.receiveText(EMPTY_STRING);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(EMPTY_STRING, autoCompleter.getFullComplement());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Spaces at the start of the input do not affect auto-complete."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        autoCompleter.receiveText(SPACES_AT_FIRST);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(SPACES_AT_FIRST_NO_PROBLEM, autoCompleter.getFullComplement());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 105
    }
  },
  {
    "path": "src/test/java/duke/logic/util/InputHistoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.logic.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class InputHistoryTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String NULL_OBJECT \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String NULL_STRING \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String SPACE_STRING \u003d \"  \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String FIRST_HISTORY_COMMAND \u003d \"addExpense /description phone bill\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String SECOND_HISTORY_COMMAND \u003d \"deleteExpense 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String THIRD_HISTORY_COMMAND \u003d \"sortExpense amount\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void add_nullStringInput_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        InputHistory inputHistory \u003d new InputHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e inputHistory.add(NULL_STRING));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void add_blankStringInput_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        InputHistory inputHistory \u003d new InputHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        inputHistory.add(EMPTY_STRING);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        inputHistory.add(SPACE_STRING);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // No history command has been added into inputHistory yet."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(EMPTY_STRING, inputHistory.getLastInput());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void add_acceptableCommandString_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        InputHistory inputHistory \u003d new InputHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertDoesNotThrow(() -\u003e inputHistory.add(FIRST_HISTORY_COMMAND));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void getLastInput() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        InputHistory inputHistory \u003d new InputHistory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        inputHistory.add(FIRST_HISTORY_COMMAND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        inputHistory.add(SECOND_HISTORY_COMMAND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        inputHistory.add(THIRD_HISTORY_COMMAND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Navigates to three previous commands."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(THIRD_HISTORY_COMMAND, inputHistory.getLastInput());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(SECOND_HISTORY_COMMAND, inputHistory.getLastInput());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(FIRST_HISTORY_COMMAND, inputHistory.getLastInput());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Remains at the earliest history command if the head is reached."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(FIRST_HISTORY_COMMAND, inputHistory.getLastInput());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void getNextInput() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        InputHistory inputHistory \u003d new InputHistory();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        inputHistory.add(FIRST_HISTORY_COMMAND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        inputHistory.add(SECOND_HISTORY_COMMAND);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        inputHistory.add(THIRD_HISTORY_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Navigates to three previous commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        inputHistory.getLastInput();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        inputHistory.getLastInput();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        inputHistory.getLastInput();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Navigates back to two recent commands."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(SECOND_HISTORY_COMMAND, inputHistory.getNextInput());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(THIRD_HISTORY_COMMAND, inputHistory.getNextInput());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Clears the output if the tail is exceeded."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(EMPTY_STRING, inputHistory.getNextInput());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 80
    }
  },
  {
    "path": "src/test/java/duke/model/BudgetTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class BudgetTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    File userDirectory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "termehlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testBasicOperations() throws IOException, DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        Budget budget \u003d new Budget(BigDecimal.ZERO, new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        budget.setMonthlyBudget(BigDecimal.TEN);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        Assertions.assertEquals(\"10\", budget.getMonthlyBudgetString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 1,
      "ChaojieLiu666": 1,
      "lucasfoo": 22
    }
  },
  {
    "path": "src/test/java/duke/model/ExpenseListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class ExpenseListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    File userDirectory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String STORAGE_DELIMITER \u003d \"\\n\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testBasicOperations() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        ExpenseList testExpenseList \u003d new ExpenseList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpense);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.get(1), testExpense);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.internalSize(), 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.remove(1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.internalSize(), 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testInvalidBasicOperations() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        ExpenseList testExpenseList \u003d new ExpenseList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpense);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            testExpenseList.get(2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            assertEquals(String.format(DukeException.MESSAGE_NO_ITEM_AT_INDEX, \"expense\", 2), e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            testExpenseList.remove(2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            assertEquals(String.format(DukeException.MESSAGE_NO_ITEM_AT_INDEX, \"expense\", 2), e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    /*TODO:This test is Currently broken due to regressions, please fix."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testUndoRedo() throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        ExpenseList testExpenseList \u003d new ExpenseList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpense);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.remove(1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.undo(1), 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.internalSize(), 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.undo(1), 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.internalSize(), 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.redo(1), 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.internalSize(), 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.redo(1), 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.internalSize(), 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.undo(2), 2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.redo(2), 2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testGetTotalAmount() throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        ExpenseList testExpenseList \u003d new ExpenseList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpenseOne \u003d new Expense.Builder().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpenseTwo \u003d new Expense.Builder().setAmount(\"12\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpenseThree \u003d new Expense.Builder().setAmount(\"13\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpenseFour \u003d new Expense.Builder().setAmount(\"12.4\").build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpenseFive \u003d new Expense.Builder().setAmount(\"12.23\").build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpenseOne);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpenseTwo);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpenseThree);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpenseFour);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        testExpenseList.add(testExpenseFive);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpenseList.getTotalAmount(), new BigDecimal(\"49.63\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "otonashixav": 74,
      "ChaojieLiu666": 1,
      "lucasfoo": 12
    }
  },
  {
    "path": "src/test/java/duke/model/ExpenseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.logic.Parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "public class ExpenseTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final BigDecimal DEFAULT_AMOUNT \u003d BigDecimal.ZERO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String DEFAULT_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final boolean DEFAULT_TENTATIVE \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String DEFAULT_TIME \u003d Parser.formatTime(LocalDateTime.now());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final BigDecimal TEST_AMOUNT \u003d new BigDecimal(\"1.23\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String TEST_DESCRIPTION \u003d \"test description\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final boolean TEST_TENTATIVE \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String TEST_TIME \u003d \"18:00 01/01/2000\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String TEST_TAG \u003d \"test tag\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String INVALID_STORAGE_STRING \u003d \"tags:tag1 tag2 tag3\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "termehlee"
        },
        "content": "            + \"amount:1.223\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"d:1\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"t:2\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    private static final String ACTUAL_TO_STRING \u003d \"$1.23 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"test description \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"18:00 01/01/2000 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"(tentative) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            + \"tag1 tag2 tag 3 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            + \"isRecurring:false\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String ACTUAL_TO_STORAGE_STRING \u003d \"tag:test tag\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"amount:1.23\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"description:test description\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            + \"time:18:00 01/01/2000\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            + \"isTentative:true\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            + \"isRecurring:false\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testDefaults() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getAmount(), DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getDescription(), DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.isTentative(), DEFAULT_TENTATIVE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(Parser.formatTime(testExpense.getTime()), DEFAULT_TIME);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        assertTrue(testExpense.getTag().isEmpty());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testBuilderFromExpense() throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .setAmount(TEST_AMOUNT)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .setDescription(TEST_DESCRIPTION)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .setTentative(TEST_TENTATIVE)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .setTime(TEST_TIME)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                .setTag(TEST_TAG)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpenseTwo \u003d new Expense.Builder(testExpense).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getAmount(), testExpenseTwo.getAmount());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getDescription(), testExpenseTwo.getDescription());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        assertEquals(testExpense.getTag(), testExpenseTwo.getTag());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getTime(), testExpenseTwo.getTime());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getAmount(), testExpenseTwo.getAmount());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testAmount() throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().setAmount(TEST_AMOUNT).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getAmount(), TEST_AMOUNT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testDescription() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().setDescription(TEST_DESCRIPTION).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getDescription(), TEST_DESCRIPTION);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testIsTentative() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().setTentative(TEST_TENTATIVE).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.isTentative(), TEST_TENTATIVE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testTime() throws DukeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().setTime(TEST_TIME).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(Parser.formatTime(testExpense.getTime()), TEST_TIME);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testTags() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder().setTag(TEST_TAG).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        assertEquals(testExpense.getTag(), TEST_TAG);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testToStorageString() throws DukeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        String storageString \u003d new Expense.Builder()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .setAmount(TEST_AMOUNT)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .setDescription(TEST_DESCRIPTION)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .setTentative(TEST_TENTATIVE)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .setTime(TEST_TIME)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                        .setTag(TEST_TAG)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .build()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "                        .toStorageString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(storageString, ACTUAL_TO_STORAGE_STRING);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        Expense testExpense \u003d new Expense.Builder(storageString).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getAmount(), TEST_AMOUNT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.getDescription(), TEST_DESCRIPTION);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(testExpense.isTentative(), TEST_TENTATIVE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        assertEquals(Parser.formatTime(testExpense.getTime()), TEST_TIME);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        assertEquals(testExpense.getTag(), TEST_TAG);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "otonashixav"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    public void testInvalidStorageString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            new Expense.Builder(INVALID_STORAGE_STRING);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "            assertEquals(String.format(DukeException.MESSAGE_EXPENSE_AMOUNT_INVALID, \"1.223\"), e.getMessage());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "otonashixav"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "termehlee": 1,
      "otonashixav": 110,
      "ChaojieLiu666": 2,
      "lucasfoo": 18
    }
  },
  {
    "path": "src/test/java/duke/model/PlanBotTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class PlanBotTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void PlanBotTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        Map\u003cString, String\u003e knownAttributes \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        PlanBot planBot \u003d new PlanBot(knownAttributes);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        Assertions.assertNotNull(planBot.getDialogObservableList());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        Assertions.assertFalse(planBot.getDialogObservableList().isEmpty());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        int currSize \u003d planBot.getDialogObservableList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        planBot.processInput(\"yes\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        int newSize \u003d planBot.getDialogObservableList().size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        Assertions.assertTrue(newSize \u003e currSize);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        knownAttributes.put(\"NUS_STUDENT\", \"TRUE\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        Assertions.assertEquals(planBot.getPlanAttributes(), knownAttributes);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 1,
      "lucasfoo": 23
    }
  },
  {
    "path": "src/test/java/duke/model/PlanQuestionBankTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.lang.reflect.Field;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class PlanQuestionBankTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testPlanQuestionBank() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Map\u003cString, String\u003e knownAttributes \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            PlanQuestionBank planQuestionBank \u003d new PlanQuestionBank();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Assertions.assertFalse(planQuestionBank.getQuestions(knownAttributes).isEmpty());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Queue\u003cPlanQuestion\u003e questionQueue \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            questionQueue.addAll(planQuestionBank.getQuestions(knownAttributes));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Assertions.assertFalse(questionQueue.isEmpty());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            PlanQuestion firstQuestion \u003d questionQueue.peek();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            questionQueue.remove();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Assertions.assertEquals(firstQuestion.getQuestion(), \"Are you a student from NUS? \u003cyes/no\u003e\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            PlanQuestion.Reply reply \u003d firstQuestion.getReply(\"yes\", knownAttributes);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            knownAttributes \u003d reply.getAttributes();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            questionQueue.addAll(planQuestionBank.getQuestions(knownAttributes));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Assertions.assertFalse(questionQueue.isEmpty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            This goes through the entire questionBank with the first valid answer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            and checks if we get a proper recommendation, i.e simulating a conversation."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "             */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            while (!questionQueue.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                PlanQuestion currentQuestion \u003d questionQueue.peek();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                questionQueue.remove();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                Field field \u003d PlanQuestion.class.getDeclaredField(\"answersAttributesValue\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                field.setAccessible(true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                Map\u003cString, String\u003e answerAttributeValue \u003d (Map\u003cString, String\u003e) field.get(currentQuestion);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                String answer \u003d answerAttributeValue.keySet().iterator().next();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                if (answer.equals(\"DOUBLE\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    answer \u003d \"10.00\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                PlanQuestion.Reply currentQuestionReply \u003d currentQuestion.getReply(answer, knownAttributes);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                Assertions.assertFalse(currentQuestionReply.getAttributes().isEmpty());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                Assertions.assertEquals(currentQuestionReply.getText(), \"Ok noted!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                knownAttributes \u003d currentQuestionReply.getAttributes();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                questionQueue.addAll(planQuestionBank.getQuestions(knownAttributes));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            PlanQuestionBank.PlanRecommendation recommendation \u003d planQuestionBank"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    .makeRecommendation(knownAttributes);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Assertions.assertNotEquals(recommendation.recommendation, \"I can\u0027t make any recommendations for you\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    + \" :(. Something probably went wrong\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Assertions.assertFalse(recommendation.getPlanBudget().isEmpty());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Assertions.assertNotNull(recommendation.getRecommendationExpenseList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (DukeException | NoSuchFieldException | IllegalAccessException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Assertions.fail(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testNegative() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Map\u003cString, String\u003e knownAttributes \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            PlanQuestionBank planQuestionBank \u003d new PlanQuestionBank();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                planQuestionBank.makeRecommendation(knownAttributes);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            });"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Assertions.fail(e.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 87
    }
  },
  {
    "path": "src/test/java/duke/model/PlanQuestionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "public class PlanQuestionTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String[] BOOL_ANSWERS \u003d {\"YES\", \"NO\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final String[] BOOL_ATTRIBUTE_VALUES \u003d {\"TRUE\", \"FALSE\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final Integer[] NEIGHBOUR_ARR \u003d {1, 2};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final Set\u003cInteger\u003e NEIGHBOUR_SET \u003d new HashSet\u003c\u003e(Arrays.asList(NEIGHBOUR_ARR));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final Map\u003cString, String\u003e KNOWN_ATTRIBUTES \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    private static final Map\u003cString, String\u003e UPDATED_ATTRIBUTES \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testConstruction() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            PlanQuestion question \u003d new PlanQuestion(\"Test Question\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    BOOL_ANSWERS,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    BOOL_ATTRIBUTE_VALUES,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    \"TEST\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Assertions.assertEquals(question.getQuestion(), \"Test Question\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Assertions.assertEquals(question.getAttribute(), \"TEST\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Assertions.fail();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testPositive() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            PlanQuestion question \u003d new PlanQuestion(\"Test Question\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    BOOL_ANSWERS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    BOOL_ATTRIBUTE_VALUES,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    \"TEST\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            PlanQuestion.Reply reply \u003d question.getReply(\"yes\", KNOWN_ATTRIBUTES);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Assertions.assertEquals(reply.getText(), \"Ok noted!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            UPDATED_ATTRIBUTES.put(\"TEST\", \"TRUE\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            question.addNeighbouring(\"TRUE\", 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            question.addNeighbouring(\"TRUE\", 2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Assertions.assertEquals(question.getNeighbouringQuestions(\"TRUE\"), NEIGHBOUR_SET);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Assertions.assertEquals(reply.getAttributes(), UPDATED_ATTRIBUTES);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Assertions.fail(e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    public void testNegative() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            PlanQuestion question \u003d new PlanQuestion(\"Test Question\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    BOOL_ANSWERS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    BOOL_ATTRIBUTE_VALUES,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                    \"TEST\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                question.getReply(\"some random input\", KNOWN_ATTRIBUTES);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Assertions.assertTrue(question.getNeighbouringQuestions(\"SOME_RANDOM__ATTRIBUTE\").isEmpty());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "                question.addNeighbouring(\"SOME_RANDOM__ATTRIBUTE\", 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "            Assertions.fail(e.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucasfoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucasfoo": 73
    }
  },
  {
    "path": "src/test/java/duke/model/payment/PaymentInMonthPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model.payment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class PaymentInMonthPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final LocalDate THIS_MONTH \u003d LocalDate.now();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String THIS_MONTH_DUE \u003d THIS_MONTH.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final LocalDate LAST_MONTH \u003d LocalDate.now().minusMonths(1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String LAST_MONTH_DUE \u003d LAST_MONTH.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final LocalDate NEXT_MONTH \u003d LocalDate.now().plusMonths(1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String NEXT_MONTH_DUE \u003d NEXT_MONTH.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private PaymentInMonthPredicate predicate \u003d new PaymentInMonthPredicate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void test_nullObject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e predicate.test(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void test_paymentDueBefore_returnsFalse() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertFalse(predicate.test(new Payment.Builder().setDue(LAST_MONTH_DUE).build()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void test_paymentDueInMonth_returnsTrue() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertTrue(predicate.test(new Payment.Builder().setDue(THIS_MONTH_DUE).build()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void test_paymentDueAfterMonth_returnFalse() throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertFalse(predicate.test(new Payment.Builder().setDue(NEXT_MONTH_DUE).build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 48
    }
  },
  {
    "path": "src/test/java/duke/model/payment/PaymentInWeekPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model.payment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class PaymentInWeekPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final LocalDate THIS_WEEK \u003d LocalDate.now();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String THIS_WEEK_DUE \u003d THIS_WEEK.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final LocalDate LAST_WEEK \u003d LocalDate.now().minusWeeks(1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String LAST_WEEK_DUE \u003d LAST_WEEK.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final LocalDate NEXT_WEEK \u003d LocalDate.now().plusWeeks(1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String NEXT_WEEK_DUE \u003d NEXT_WEEK.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private PaymentInWeekPredicate predicate \u003d new PaymentInWeekPredicate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void test_nullObject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e predicate.test(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void test_paymentDueBefore_returnsFalse() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertFalse(predicate.test(new Payment.Builder().setDue(LAST_WEEK_DUE).build()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void test_paymentDueInWeek_returnsTrue() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertTrue(predicate.test(new Payment.Builder().setDue(THIS_WEEK_DUE).build()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void test_paymentDueAfterWeek_returnFalse() throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertFalse(predicate.test(new Payment.Builder().setDue(NEXT_WEEK_DUE).build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 48
    }
  },
  {
    "path": "src/test/java/duke/model/payment/PaymentOverduePredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model.payment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class PaymentOverduePredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final LocalDate LAST_DAY \u003d LocalDate.now().minusDays(1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String LAST_DAY_DUE \u003d LAST_DAY.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final LocalDate NEXT_DAY \u003d LocalDate.now().plusDays(1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String NEXT_DAY_DUE \u003d NEXT_DAY.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private PaymentOverduePredicate predicate \u003d new PaymentOverduePredicate();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void test_nullObject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e predicate.test(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void test_paymentOverdue_returnsTrue() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertTrue(predicate.test(new Payment.Builder().setDue(LAST_DAY_DUE).build()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void test_paymentNotOverdue_returnsFalse() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertFalse(predicate.test(new Payment.Builder().setDue(NEXT_DAY_DUE).build()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 41
    }
  },
  {
    "path": "src/test/java/duke/model/payment/PaymentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model.payment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class PaymentTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final Payment.Builder NULL_BUILDER \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String NULL_STRING \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String DESCRIPTION_FOR_TEST \u003d \"Orientation Fee\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String RECEIVER_FOR_TEST \u003d \"OSA\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String DUE_FOR_TEST \u003d \"09/09/2019\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String INVALID_DUE_FOR_TEST \u003d \"9/9/2019\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String TAG_FOR_TEST \u003d \"School Life\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String AMOUNT_FOR_TEST \u003d \"30.5\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String INVALID_AMOUNT_FOR_TEST \u003d \"thirty.five\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String PRIORITY_FOR_TEST \u003d \"Medium\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String INVALID_PRIORITY_FOR_TEST \u003d \"Very High\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final int NUMERATED_PRIORITY_FOR_TEST \u003d 2;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String KEYWORD_FOUND \u003d \"Orientation\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String KEYWORD_NOT_FOUND \u003d \"Transportation\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private Payment.Builder paymentBuilder \u003d new Payment.Builder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void constructor_nullBuilder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Payment(NULL_BUILDER));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void getDescription() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e paymentBuilder.setDescription(NULL_STRING));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Payment payment \u003d paymentBuilder.setDescription(DESCRIPTION_FOR_TEST).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(DESCRIPTION_FOR_TEST, payment.getDescription());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void getReceiver() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e paymentBuilder.setReceiver(NULL_STRING));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Payment payment \u003d paymentBuilder.setReceiver(RECEIVER_FOR_TEST).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(RECEIVER_FOR_TEST, payment.getReceiver());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void getDue() throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e paymentBuilder.setReceiver(NULL_STRING));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e paymentBuilder.setDue(INVALID_DUE_FOR_TEST));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Payment payment \u003d paymentBuilder.setDue(DUE_FOR_TEST).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(DUE_FOR_TEST, payment.getDue().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void getTag() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e paymentBuilder.setTag(NULL_STRING));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Payment payment \u003d paymentBuilder.setTag(TAG_FOR_TEST).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(TAG_FOR_TEST, payment.getTag());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void getAmount() throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e paymentBuilder.setAmount(NULL_STRING));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e paymentBuilder.setAmount(INVALID_AMOUNT_FOR_TEST));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Payment payment \u003d paymentBuilder.setAmount(AMOUNT_FOR_TEST).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(AMOUNT_FOR_TEST, payment.getAmount().toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void getPriority() throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e paymentBuilder.setPriority(NULL_STRING));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e paymentBuilder.setPriority(INVALID_PRIORITY_FOR_TEST));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Payment payment \u003d paymentBuilder.setPriority(PRIORITY_FOR_TEST).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(PRIORITY_FOR_TEST, payment.getPriority());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Tests the getNumerated() method by the way."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertEquals(NUMERATED_PRIORITY_FOR_TEST, payment.getNumeratedPriority());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void containsKeyword() throws DukeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Payment payment \u003d paymentBuilder.setDescription(DESCRIPTION_FOR_TEST)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .setReceiver(RECEIVER_FOR_TEST)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .setTag(TAG_FOR_TEST).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertTrue(payment.containsKeyword(KEYWORD_FOUND));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertFalse(payment.containsKeyword(KEYWORD_NOT_FOUND));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 112
    }
  },
  {
    "path": "src/test/java/duke/model/payment/SearchKeywordPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "package duke.model.payment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "public class SearchKeywordPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String DESCRIPTION \u003d \"Orientation Fee\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String DESCRIPTION_KEYWORD \u003d \"Orientation\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String MIXED_CASE_DESCRIPTION_KEYWORD \u003d \"oRIentaTion\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String RECEIVER \u003d \"OSA\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String RECEIVER_KEYWORD \u003d \"OSA\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String MIXED_CASE_RECEIVER_KEYWORD \u003d \"osa\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String TAG \u003d \"School Life\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String TAG_KEYWORD \u003d \"School\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String MIXED_CASE_TAG_KEYWORD \u003d \"school\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    private static final String KEYWORD_NOT_FOUND \u003d \"Transportation\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void test_nullObject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SearchKeywordPredicate(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void test_descriptionContainsKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Payment payment \u003d new Payment.Builder().setDescription(DESCRIPTION).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Searches in description"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        SearchKeywordPredicate predicate \u003d new SearchKeywordPredicate(DESCRIPTION_KEYWORD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertTrue(predicate.test(payment));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Mixed-case description keywords"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        predicate \u003d new SearchKeywordPredicate(MIXED_CASE_DESCRIPTION_KEYWORD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertTrue(predicate.test(payment));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void test_receiverContainsKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Payment payment \u003d new Payment.Builder().setReceiver(RECEIVER).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Searches in receiver"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        SearchKeywordPredicate predicate \u003d new SearchKeywordPredicate(RECEIVER_KEYWORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertTrue(predicate.test(payment));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Mixed-case receiver keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        predicate \u003d new SearchKeywordPredicate(MIXED_CASE_RECEIVER_KEYWORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertTrue(predicate.test(payment));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void test_tagContainsKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Payment payment \u003d new Payment.Builder().setTag(TAG).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Searches in tag"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        SearchKeywordPredicate predicate \u003d new SearchKeywordPredicate(TAG_KEYWORD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertTrue(predicate.test(payment));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        // Mixed-case tag keywords"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        predicate \u003d new SearchKeywordPredicate(MIXED_CASE_TAG_KEYWORD);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertTrue(predicate.test(payment));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    public void test_keywordNotFound_returnsFalse() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        Payment payment \u003d new Payment.Builder().setDescription(DESCRIPTION)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .setReceiver(RECEIVER)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "                .setTag(TAG).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        SearchKeywordPredicate predicate \u003d new SearchKeywordPredicate(KEYWORD_NOT_FOUND);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "        assertFalse(predicate.test(payment));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChaojieLiu666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChaojieLiu666": 84
    }
  }
]
