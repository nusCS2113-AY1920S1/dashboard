[
  {
    "path": "src/main/java/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.parsers.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.NoteStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Returns main function for duke."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param args a String array that takes in input from the command line"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException | ParseException | IOException | NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cString\u003e CommandStack \u003d new Stack\u003cString\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage store \u003d new Storage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ui.showWelcome();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            list \u003d store.ReadFile();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            store.Read_Trivia(triviaManager);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            NoteStorage.readFromFile(\"NoteDaily.txt\", NoteList.daily);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            NoteStorage.readFromFile(\"NoteWeekly.txt\", NoteList.weekly);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            NoteStorage.readFromFile(\"NoteMonthly.txt\", NoteList.monthly);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.UpcomingTask(list);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            while (!isExit) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                ui.ReadCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                String command \u003d ui.FullCommand.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                Command c \u003d Parser.parse(command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                c.execute(list, ui, store, CommandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (!command.equals(\"undo\") \u0026\u0026 !command.equals(\"list\") \u0026\u0026 !command.contains(\"confirm\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    CommandStack.push(command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (DukeException | ParseException | IOException | NullPointerException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (e instanceof ParseException) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showDateFormatError();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (e instanceof IOException) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showIOErrorMessage(e);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"System exiting\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 4,
      "JasonLeeWeiHern": 5,
      "e0309463": 13,
      "yueyuu": 15,
      "-": 25
    }
  },
  {
    "path": "src/main/java/gazeeebo/TriviaManager/TriviaManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package gazeeebo.TriviaManager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class TriviaManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public static Map\u003cString, ArrayList\u003cString\u003e\u003e CommandMemory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    static {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        CommandMemory \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public TriviaManager(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.CommandMemory \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void learnInput(String InputCommand,Storage storage) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if(CommandMemory.containsKey(InputCommand.split(\" \")[0])) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ArrayList\u003cString\u003e oldlist \u003d new ArrayList\u003cString\u003e(CommandMemory.get(InputCommand.split(\" \")[0]));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            oldlist.add(InputCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            CommandMemory.put(InputCommand.split(\" \")[0], oldlist);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ArrayList\u003cString\u003e newlist \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            newlist.add(InputCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            CommandMemory.put(InputCommand.split(\" \")[0],newlist);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        storage.Storage_Trivia(InputCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void showPossibleInputs(String key){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"Could it be one of the below inputs?\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(CommandMemory.get(key));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void showAllMap(){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        CommandMemory.entrySet().forEach(entry-\u003e{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(entry.getKey() + \"\\n\" +entry.getValue());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 40,
      "yueyuu": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/UI/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.UI;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public String FullCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void ReadCommand() throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        BufferedReader reader \u003d new BufferedReader(new InputStreamReader(System.in));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FullCommand \u003d reader.readLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * This method prompts the user to input the password to login into GAZEEEBO and print a logo and message to welcome the user when he successfully log in."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return the logo"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException if tDate doesn\u0027t get updated."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public String showWelcome() throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Input password to enter Gazeebo:\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String logo \u003d \" ___   ___  ___  ___  ___  ___  ___   ___ \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"|     |   |   / |    |    |    |   \\\\ |   |\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"|  __ |__ |  /  |___ |___ |___ |___| |   |\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"|___| |   | /__ |___ |___ |___ |___/ |___|\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String welcomemessage \u003d \"\\nWelcome to Gazeebo\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\n__________________________________________\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + logo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\n__________________________________________\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ReadCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ArrayList\u003cString\u003e password_list;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            Storage store \u003d new Storage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            password_list \u003d store.Password();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (FullCommand.equals(password_list.get(0))) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(welcomemessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                LocalDate a \u003d LocalDate.now();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"Today is \" + a.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"Incorrect password, please try again:\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return welcomemessage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void UpcomingTask(ArrayList\u003cTask\u003e list) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cDeadline\u003e DeadlineList \u003d new ArrayList\u003cDeadline\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cEvent\u003e EventList \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (task.getClass().getName().equals(\"gazeeebo.Tasks.Deadline\") \u0026\u0026 !task.isDone) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                Deadline deadline \u003d new Deadline(task.description, task.toString().split(\"by:\")[1].trim());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                deadline.isDone \u003d task.isDone;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                DeadlineList.add(deadline);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (task.getClass().getName().equals(\"gazeeebo.Tasks.Event\") \u0026\u0026 !task.isDone) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Event event \u003d new Event(task.description, task.toString().split(\"at:\")[1].trim());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                event.isDone \u003d task.isDone;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                EventList.add(event);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Collections.sort(DeadlineList, Comparator.comparing(u -\u003e u.by));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Collections.sort(EventList, Comparator.comparing(u -\u003e u.date));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(\"Upcoming deadlines:\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (int i \u003d 0; i \u003c DeadlineList.size(); i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(i + 1 + \".\" + DeadlineList.get(i).listFormat());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(\"Upcoming events:\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (int i \u003d 0; i \u003c EventList.size(); i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(i + 1 + \".\" + EventList.get(i).listFormat());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void showProgessiveBar(ArrayList\u003cTask\u003e list) throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int UndoneNumber \u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int DoneNumber \u003d 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (list.get(i).isDone) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                DoneNumber++;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                UndoneNumber++;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        System.out.println(UndoneNumber+\" \"+DoneNumber);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        double ProgressPercentageTemp \u003d (DoneNumber * 1.00 / (DoneNumber + UndoneNumber) * 1.00) * 100.000;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int ProgressPercentage \u003d (int) ProgressPercentageTemp;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        System.out.println(ProgressPercentageTemp+\" \"+ProgressPercentage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StringBuilder progressivebar \u003d new StringBuilder();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0; i \u003c ProgressPercentage / 2; i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            progressivebar.append(\"/\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0; i \u003c (100 - ProgressPercentage) / 2; i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            progressivebar.append(\"_\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"Task progressive: \" + progressivebar.toString() + \"(\" + ProgressPercentage + \"%)\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void showDateFormatError() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.err.println(\"Date Time has to be in YYYY-MM-DD HH:mm:ss format\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void showDeadlineDateFormatError() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Date Time has to be in YYYY-MM-DD HH:mm:ss format\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public static void showEventDateFormatError() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Date Time has to be in YYYY-MM-DD HH:mm:ss-HH:mm:ss format\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void showIOErrorMessage(Exception e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.err.println(\"An IOException was caught :\" + e.getMessage());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void showErrorMessage(Exception e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 57,
      "mononokehime14": 30,
      "e0309463": 31,
      "yueyuu": 16
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Returns void execute function for gazeeebo.commands.ByeCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list An array list of type gazeeebo.Tasks.Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui Class ui"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param storage class storage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param commandStack"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param deletedTask"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return Void."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws DukeException | ParseException | IOException"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(\"Bye! Hope to see you again soon!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 2,
      "JasonLeeWeiHern": 4,
      "e0309463": 23,
      "yueyuu": 3
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/CategoryListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class CategoryListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cDeadline\u003e DeadlineList \u003d new ArrayList\u003cDeadline\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cEvent\u003e EventList \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTodo\u003e TodoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cFixedDuration\u003e FDList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTimebound\u003e TBList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (task.getClass().getName().equals(\"gazeeebo.Tasks.Deadline\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Deadline deadline \u003d new Deadline(task.description, task.toString().split(\"by:\")[1].trim());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                DeadlineList.add(deadline);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (task.getClass().getName().equals(\"gazeeebo.Tasks.Event\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Event event \u003d new Event(task.description, task.toString().split(\"at:\")[1].trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                EventList.add(event);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (task.getClass().getName().equals(\"gazeeebo.Tasks.Todo\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Todo todo \u003d new Todo(task.description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                TodoList.add(todo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            else if (task.getClass().getName().equals(\"gazeeebo.Tasks.FixedDuration\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                FixedDuration fixedDuration \u003d new FixedDuration(task.description, task.toString().split(\"\\\\|\")[3].trim());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                FDList.add(fixedDuration);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            else if (task.getClass().getName().equals(\"gazeeebo.Tasks.Timebound\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Timebound timebound \u003d new Timebound(task.description, task.toString().split(\"\\\\|\")[3].trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                TBList.add(timebound);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        if(ui.FullCommand.equals(\"deadline list\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"List of deadlines tasks:\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c DeadlineList.size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \".\" + DeadlineList.get(i).listFormat());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } else if (ui.FullCommand.equals(\"event list\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"List of events tasks:\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c EventList.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \".\" + EventList.get(i).listFormat());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } else if (ui.FullCommand.equals(\"todo list\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"List of todo tasks:\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c TodoList.size(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \".\" + TodoList.get(i).listFormat());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } else if (ui.FullCommand.equals(\"fixed duration list\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"List of fixed duration tasks:\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c FDList.size(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \".\" + FDList.get(i).listFormat());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        else if (ui.FullCommand.equals(\"timebound list\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"List of timebounded tasks:\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c TBList.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \".\" + TBList.get(i).listFormat());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 65,
      "mononokehime14": 2,
      "e0309463": 8,
      "yueyuu": 3
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/ChangePasswordCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class ChangePasswordCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *  This method will verify current password and write the new password to the Password.txt file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list task lists"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param storage the object that deals with storing data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask,TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Enter your current password:\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.ReadCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cString\u003e password_list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        while(!ui.FullCommand.equals(\"esc\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.FullCommand.equals(storage.Password().get(0))) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"Enter new password:\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.ReadCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                storage.Storages_password(ui.FullCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"Password successfully changed :)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"Wrong password, exit by entering esc or try again:\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.ReadCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 34,
      "mononokehime14": 2,
      "e0309463": 4,
      "yueyuu": 3
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": " * A base abstract class of all the gazeeebo.commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public abstract void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0323290": 1,
      "mononokehime14": 2,
      "JasonLeeWeiHern": 1,
      "e0309463": 10,
      "yueyuu": 6
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/ConfirmTentativeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class ConfirmTentativeCommand extends Command{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask,TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Event ev;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            TentativeEvent tev;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.FullCommand.length() \u003d\u003d 7) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new DukeException(\"OOPS!!! The index of tentative event cannot be empty.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    index \u003d Integer.parseInt(ui.FullCommand.substring(7).trim()) - 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    if(list.get(index).listFormat().getBytes()[1] !\u003d\u0027T\u0027 \u0026\u0026 list.get(index).listFormat().getBytes()[2] !\u003d \u0027E\u0027){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        throw new DukeException(\"OOPS!!! You can only confirm tentative event task.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        String tempstring \u003d list.get(index).listFormat();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        System.out.println(\"You are confirming this tentative event: \" + list.get(index).description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        System.out.println(tempstring);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        System.out.println(\"Please indicate which time slot you want to confirm\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        ui.ReadCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        int WhichTimeSlot \u003d Integer.parseInt(ui.FullCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        String[] timeslots \u003d list.get(index).toString().split(\"\\\\|\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        System.out.println(timeslots[WhichTimeSlot+2]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        ev \u003d new Event(list.get(index).description, timeslots[WhichTimeSlot+2]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        tev \u003d (TentativeEvent)list.get(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        System.out.println(\"Are you sure you want to confirm this time slot: \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        System.out.println(ev.listFormat());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        ui.ReadCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        if (ui.FullCommand.equals(\"yes\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            list.add(ev);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            list.remove(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            System.out.println(\"Confirmed.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (list.get(i).getClass().getName().equals(\"gazeeebo.Tasks.Deadline\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    } else if (list.get(i).getClass().getName().equals(\"gazeeebo.Tasks.Event\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(\"confirm\"+\"~\"+ev.toString()+\"~\"+tev.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void undo(String command, ArrayList\u003cTask\u003e list,Storage storage) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String[] splitCommand \u003d command.split(\"~\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String[] details \u003d splitCommand[1].split(\"\\\\|\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Event e \u003d new Event(details[2].trim(), details[3].substring(3).trim());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            e.isDone \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            e.isDone \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (Task it : list) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (it.toString().equals(e.toString())) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                list.remove(it);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cString\u003e timeslots \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String[] TEdetails \u003d splitCommand[2].split(\"\\\\|\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for(int i\u003d3;i\u003cTEdetails.length;i++){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            timeslots.add(TEdetails[i]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TentativeEvent TE \u003d new TentativeEvent(TEdetails[2].trim(),timeslots);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            TE.isDone \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            TE.isDone \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        list.add(TE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 5,
      "mononokehime14": 35,
      "JasonLeeWeiHern": 9,
      "e0309463": 46,
      "yueyuu": 6
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/Contact/AddContactCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.Contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class AddContactCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * This method allows add new contact into the contact page"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui      the object that deals with printing things to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param contact the object that map each name to its own phone number"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException catch any error if read file fails"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public AddContactCommand(Ui ui, Map\u003cString, String\u003e contact) throws IOException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(\"Input in this format: Name,Number\\n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.ReadCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String[] split_info \u003d ui.FullCommand.split(\",\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String name \u003d split_info[0];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String number \u003d split_info[1];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        contact.put(name, number);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(\"Okay we have successfully added a new contact - \" + ui.FullCommand + \"\\n\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 6,
      "e0309463": 18
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/Contact/ContactsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.Contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class ContactsCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * This method is the list of all the contact numbers and you got add/find/delete contacts."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list    list of all tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui      the object that deals with printing things to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param storage the object that deals with storing data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException Catch error if the read file fails"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.print(\"CONTACTS PAGE\\n\\n\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d storage.Contact(); //Read the file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Map\u003cString, String\u003e contact \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String LINE_BREAK \u003d \"------------------------------------------\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.print(\"Name:                         | Number:\\n\" + LINE_BREAK);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (String key : contact.keySet()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (!key.contains(\"NUS\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.print(key);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                int l \u003d 30 - key.length();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                for (int i \u003d 0; i \u003c l; i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.print(\" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.print(\"| \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.print(contact.get(key) + \"\\n\" + LINE_BREAK);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.print(\"\\nNUS CONTACTS:\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (String key : contact.keySet()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (key.contains(\"NUS\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.print(key);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                int l \u003d 30 - key.length();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                for (int i \u003d 0; i \u003c l; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.print(\" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.print(\"| \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.print(contact.get(key) + \"\\n\" + LINE_BREAK);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.ReadCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        while (!ui.FullCommand.equals(\"esc\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (ui.FullCommand.equals(\"add\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                new AddContactCommand(ui, contact);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (ui.FullCommand.split(\" \")[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                new FindContactCommand(ui, contact, LINE_BREAK);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (ui.FullCommand.equals(\"c_list\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                new ListContactCommand(contact, LINE_BREAK);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (ui.FullCommand.contains(\"delete\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                new DeleteContactCommand(ui, contact);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String toStore \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (String key : contact.keySet()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                toStore \u003d toStore.concat(key + \"|\" + contact.get(key) + \"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            storage.Storages_Contact(toStore);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            ui.ReadCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 2,
      "JasonLeeWeiHern": 13,
      "e0309463": 61,
      "yueyuu": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/Contact/DeleteContactCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.Contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class DeleteContactCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * This method deletes the contact from the contact list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui      the object that deals with printing things to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param contact the object that map each name to its own phone number"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException catch any error if read file fails"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public DeleteContactCommand(Ui ui, Map\u003cString, String\u003e contact) throws IOException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String name_to_delete \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (int i \u003d 1; i \u003c ui.FullCommand.split(\" \").length; i++) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (i !\u003d ui.FullCommand.split(\" \").length - 1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                name_to_delete \u003d name_to_delete.concat(ui.FullCommand.split(\" \")[i] + \" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                name_to_delete \u003d name_to_delete.concat(ui.FullCommand.split(\" \")[i]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (ui.FullCommand.equals(\"delete\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"You need to indicate what you want to delete, Format: delete name\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else if (contact.containsKey(name_to_delete)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            contact.remove(name_to_delete);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(name_to_delete + \" has been removed.\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(name_to_delete + \" is not in the list.\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 7,
      "e0309463": 28
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/Contact/FindContactCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.Contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class FindContactCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * This method finds the contact number with the contact name."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui         the object that deals with printing things to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param contact    the object that map each name to its own phone number"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param LINE_BREAK String separator"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public FindContactCommand(Ui ui, Map\u003cString, String\u003e contact, String LINE_BREAK) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int a \u003d ui.FullCommand.split(\" \")[1].toCharArray()[0];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String command \u003d ui.FullCommand.split(\" \")[0];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String name_to_find \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (int i \u003d 1; i \u003c ui.FullCommand.split(\" \").length; i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (i !\u003d ui.FullCommand.split(\" \").length - 1) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                name_to_find \u003d name_to_find.concat(ui.FullCommand.split(\" \")[i] + \" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                name_to_find \u003d name_to_find.concat(ui.FullCommand.split(\" \")[i]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (a \u003c\u003d 9) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Name not found.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(\"Name:                         | Number:\\n\" + LINE_BREAK);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (String keys : contact.keySet()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (keys.contains(name_to_find)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.print(keys);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    int l \u003d 30 - keys.length();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    for (int i \u003d 0; i \u003c l; i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        System.out.print(\" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.print(\"| \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.print(contact.get(keys) + \"\\n\" + LINE_BREAK);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 3,
      "e0309463": 41
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/Contact/ListContactCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.Contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class ListContactCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * This method list out all the phone numbers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param contact    Map each name to its phone number"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param LINE_BREAK String separator"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public ListContactCommand(Map\u003cString, String\u003e contact, String LINE_BREAK) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.print(\"Name:                         | Number:\\n\" + LINE_BREAK);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (String key : contact.keySet()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (!key.contains(\"NUS\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.print(key);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                int l \u003d 30 - key.length();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                for (int i \u003d 0; i \u003c l; i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.print(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.print(\"| \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.print(contact.get(key) + \"\\n\" + LINE_BREAK);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(\"\\nNUS CONTACTS:\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (String key : contact.keySet()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (key.contains(\"NUS\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.print(key);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                int l \u003d 30 - key.length();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                for (int i \u003d 0; i \u003c l; i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.print(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.print(\"| \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.print(contact.get(key) + \"\\n\" + LINE_BREAK);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 3,
      "e0309463": 37
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/DeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.FullCommand.length() \u003d\u003d 8) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                description \u003d ui.FullCommand.split(\"/by \")[0].substring(9);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                triviaManager.learnInput(ui.FullCommand,storage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Deadline d \u003d new Deadline(description, ui.FullCommand.split(\"/by \")[1]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.add(d);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(d.listFormat());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            triviaManager.showPossibleInputs(\"deadline\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | DateTimeParseException a) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Ui.showDeadlineDateFormatError();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void undo(String command, ArrayList\u003cTask\u003e list,Storage storage) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (Task it : list) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (it.description.contains(command.substring(9).trim())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                list.remove(it);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 5,
      "JasonLeeWeiHern": 12,
      "mononokehime14": 4,
      "e0309463": 30,
      "yueyuu": 12
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param commandStack"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param deletedTask"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws NullPointerException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (ui.FullCommand.length() \u003d\u003d 6) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a deletion cannot be empty.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (ui.FullCommand.length() \u003d\u003d 8) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    int index \u003d Integer.parseInt(ui.FullCommand.substring(6).trim()) - 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    deletedTask.add(list.get(index));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    String taskremoved \u003d list.get(index).listFormat();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    list.remove(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.println(taskremoved);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    } else if (ui.FullCommand.contains(\"all\")) { //delete all tasks at once"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        for (int i \u003d 0; i \u003c list.size(); i++){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            deletedTask.add(list.get(i));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        list.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println(\"Noted. I\u0027ve removed all the tasks.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    } else if (ui.FullCommand.contains(\"and\")) { //delete multiple chosen tasks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    int numOfAnds \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for(int i \u003d 0; i \u003c ui.FullCommand.length(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        if (ui.FullCommand.charAt(i) \u003d\u003d \u0027a\u0027) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            numOfAnds++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    String[] strNumberList \u003d ui.FullCommand.substring(7).split(\" and \", numOfAnds+1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    int size \u003d strNumberList.length;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    int[] intNumberList \u003d new int[size];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for(int j \u003d 0; j \u003c size; j++){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        intNumberList[j] \u003d Integer.parseInt(strNumberList[j]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    Arrays.sort(intNumberList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    int count \u003d 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for(int k \u003d 0; k \u003c size; k++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        int index \u003d intNumberList[k] - count;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        String taskremoved \u003d list.get(index).listFormat();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        deletedTask.add(list.get(index));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        list.remove(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println(taskremoved);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        count++;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void undo(ArrayList\u003cTask\u003e list, Storage storage,ArrayList\u003cTask\u003e deletedTask) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        list.addAll(deletedTask);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 36,
      "JasonLeeWeiHern": 17,
      "mononokehime14": 2,
      "e0309463": 39,
      "yueyuu": 4
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/DoAfterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.DoAfter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class DoAfterCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list task lists"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param storage the object that deals with storing data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws NullPointerException if tDate doesn\u0027t get updated."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String before \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String after \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String[] splitstring \u003d ui.FullCommand.split(\"/after\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        before \u003d splitstring[1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        after \u003d splitstring[0];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        DoAfter to \u003d new DoAfter(before, before, after);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(to);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(to.listFormat());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void undo(String command, ArrayList\u003cTask\u003e list, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String before \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String after \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String[] splitstring \u003d command.split(\"/after\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        before \u003d splitstring[1];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        after \u003d splitstring[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (Task it : list) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (it.listFormat().contains(after + \"(/after:\" + before + \")\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                list.remove(it);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Tells the main Duke class that the system should not exit and continue running"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 41,
      "mononokehime14": 2,
      "e0309463": 21,
      "yueyuu": 5
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (ui.FullCommand.equals(\"done\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                throw new DukeException(\"The task done number cannot be empty.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            int numbercheck \u003d Integer.parseInt(ui.FullCommand.substring(5)) - 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.get(numbercheck).isDone \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(list.get(numbercheck).listFormat());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "             * Print out the task to do after"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "             */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                if (list.get(i).description.contains(list.get(numbercheck).description) \u0026\u0026 list.get(i).listFormat().contains(\"/after\") \u0026\u0026 i !\u003d numbercheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    System.out.println(\"OK! Now you need to do the following:\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    String[] temp \u003d list.get(i).listFormat().split(\"\\\\(/after\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    System.out.println(temp[0].substring(7));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "             * Add some recurring task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "             */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            RecurringCommand rc \u003d new RecurringCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            rc.AddRecurring(list, numbercheck, list.get(numbercheck).toString(), storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "             * Filter out those task that are done"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "             */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ui.showProgessiveBar(list);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void undo(String command, ArrayList\u003cTask\u003e list, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int numberCheck \u003d Integer.parseInt(command.substring(5)) - 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        list.get(numberCheck).isDone \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve undo this command\" + command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 6,
      "JasonLeeWeiHern": 25,
      "mononokehime14": 4,
      "e0309463": 36,
      "yueyuu": 5
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/DoneListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class DoneListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTask\u003e DoneList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (ui.FullCommand.equals(\"done\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"Command for \u0027done\u0027 cannot be empty.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (Task task : list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (task.isDone \u003d\u003d true) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    DoneList.add(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (ui.FullCommand.equals(\"done list\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"List of tasks that are done:\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c DoneList.size(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(i + 1 + \".\" + DoneList.get(i).listFormat());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        public boolean isExit () {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      }
    ],
    "authorContributionMap": {
      "e0323290": 41,
      "mononokehime14": 2,
      "e0309463": 3,
      "yueyuu": 4
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/Edit/EditBothCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.Edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class EditBothCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * This method will receive the user new description and time and edit the old description and time in the list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list task lists"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param listno_index  the index of the list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public EditBothCommand(ArrayList\u003cTask\u003e list, Ui ui, int listno_index) throws IOException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.print(\"Type your description \u0026 date:\\n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.ReadCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String[] break_list_words \u003d list.get(listno_index).toString().split(\"\\\\|\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (break_list_words[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Todo newtodo \u003d new Todo(ui.FullCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(\"Ok, we have edited your ToDo description.\\n\\tFrom: \" + list.get(listno_index).listFormat() +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tTo:   \" + newtodo.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.set(listno_index, newtodo);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else if (break_list_words[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String[] break_deadline \u003d ui.FullCommand.split(\"/by \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String description \u003d break_deadline[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String by \u003d break_deadline[1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Deadline newdeadline \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(\"Ok, we have edited your Deadline description and time.\\n\\tFrom: \" + list.get(listno_index).listFormat() +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tTo:   \" + newdeadline.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.set(listno_index, newdeadline);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else if(break_list_words[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String[] break_event \u003d ui.FullCommand.split(\"/at \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String description \u003d break_event[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String at \u003d break_event[1];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Event newEvent \u003d new Event(description, at);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(\"Ok, we have edited your Event description and time.\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tFrom: \" + list.get(listno_index).listFormat() +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tTo:   \" + newEvent.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.set(listno_index, newEvent);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else if(break_list_words[0].equals(\"DA\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else if(break_list_words[0].equals(\"FD\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String[] break_FD \u003d ui.FullCommand.split(\" /require \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            FixedDuration newFD \u003d new FixedDuration(break_FD[0],break_FD[1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(\"Ok, we have edited your FixDuration description and time.\\n\\tFrom: \" + list.get(listno_index).listFormat() +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tTo:   \" + newFD.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.set(listno_index, newFD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        else if(break_list_words[0].equals(\"P\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String[] break_P \u003d ui.FullCommand.split(\" /between \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Timebound newP \u003d new Timebound(break_P[0], break_P[1]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(\"Ok, we have edited your FixDuration description and time.\\n\\tFrom: \" + list.get(listno_index).listFormat() +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tTo:   \" + newP.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.set(listno_index, newP);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 60,
      "yueyuu": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/Edit/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.Edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * This method will receive the user\u0027s input on which list index to edit and then receive another user\u0027s input, checking he/she wants to edit the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * task\u0027s description or time or both and execute them in the following methods respectively."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list    task lists"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui      the object that deals with printing things to the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param storage the object that deals with storing data to the Save.txt file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param commandStack"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param deletedTask"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws NullPointerException if tDate doesn\u0027t get updated."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String[] input \u003d ui.FullCommand.split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(\"Edit description/time/both ?\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int listno_index \u003d Integer.parseInt(input[1]) - 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.ReadCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (ui.FullCommand.equals(\"description\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            new EditDescriptionCommand(list, ui, listno_index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else if (ui.FullCommand.equals(\"time\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            new EditTimeCommand(list, ui, listno_index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            new EditBothCommand(list, ui, listno_index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Tells the main Duke class that the system should not exit and continue running"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 2,
      "e0309463": 52,
      "yueyuu": 3
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/Edit/EditDescriptionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.Edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class EditDescriptionCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * This method will receive the user new description and edit the old description in the list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list task lists"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param listno_index the index of the list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public EditDescriptionCommand(ArrayList\u003cTask\u003e list, Ui ui, int listno_index) throws IOException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.print(\"Type your description:\\n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.ReadCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String newDescription \u003d ui.FullCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String[] break_list_words \u003d list.get(listno_index).toString().split(\"\\\\|\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (break_list_words[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Todo newtodo \u003d new Todo(newDescription);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(\"Ok, we have edited your ToDo description.\" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tFrom: \" + list.get(listno_index).listFormat() +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tTo:   \" + newtodo.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.set(listno_index, newtodo);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else if (break_list_words[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String[] by \u003d break_list_words[3].split(\"by: \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Deadline newdeadline \u003d new Deadline(newDescription, by[1]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(\"Ok, we have edited your Deadline description.\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tFrom: \" + list.get(listno_index).listFormat() +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tTo:   \" + newdeadline.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.set(listno_index, newdeadline);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else if(break_list_words[0].equals(\"E\")){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String[] at \u003d break_list_words[3].split(\"at: \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Event newEvent \u003d new Event(newDescription, at[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(\"Ok, we have edited your Event description.\" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tFrom: \" + list.get(listno_index).listFormat() +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tTo:   \" + newEvent.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.set(listno_index, newEvent);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        else if(break_list_words[0].equals(\"DA\")){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String[] splitter \u003d newDescription.split(\" /after \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            DoAfter newDA \u003d new DoAfter(splitter[1],splitter[1],splitter[0]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(\"Ok, we have edited your DoAfter description.\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tFrom: \" + list.get(listno_index).listFormat() +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tTo:   \" + newDA.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.set(listno_index, newDA);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        else if(break_list_words[0].equals(\"FD\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String by \u003d break_list_words[3];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            FixedDuration newFA \u003d new FixedDuration(newDescription,by);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(\"Ok, we have edited your FixedDuration description.\" +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tFrom: \" + list.get(listno_index).listFormat() +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tTo:   \" + newFA.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.set(listno_index, newFA);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        else if(break_list_words[0].equals(\"P\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Timebound newP \u003d new Timebound(newDescription,break_list_words[3]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(\"Ok, we have edited your Timebound description.\" +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tFrom: \" + list.get(listno_index).listFormat() +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tTo:   \" + newP.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.set(listno_index, newP);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0309463": 70,
      "yueyuu": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/Edit/EditTimeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.Edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class EditTimeCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * This method will receive the user new time and edit the old time in the list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list task lists"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param listno_index the index of the list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public EditTimeCommand(ArrayList\u003cTask\u003e list, Ui ui, int listno_index) throws IOException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.print(\"Type your time:\\n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.ReadCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String newTime \u003d ui.FullCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String[] break_list_words \u003d list.get(listno_index).toString().split(\"\\\\|\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (break_list_words[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Deadline newdeadline \u003d new Deadline(break_list_words[2], newTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(\"Ok, we have edited your Deadline time.\" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tFrom: \" + list.get(listno_index).listFormat() +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tTo:   \" + newdeadline.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.set(listno_index, newdeadline);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else if(break_list_words[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Event newEvent \u003d new Event(break_list_words[2], newTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(\"Ok, we have edited your Event time.\" +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tFrom: \" + list.get(listno_index).listFormat() +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tTo:   \" + newEvent.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.set(listno_index, newEvent);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        else if(break_list_words[0].equals(\"DA\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"DoAfter only has description.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        else if(break_list_words[0].equals(\"FD\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            FixedDuration newFD \u003d new FixedDuration(break_list_words[2],newTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(\"Ok, we have edited your FixDuration time.\" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tFrom: \" + list.get(listno_index).listFormat() +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tTo:   \" + newFD.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.set(listno_index, newFD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        else if(break_list_words[0].equals(\"P\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Timebound newP \u003d new Timebound(break_list_words[2], newTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(\"Ok, we have edited your Timebound time.\" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tFrom: \" + list.get(listno_index).listFormat() +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    \"\\n\\tTo:   \" + newP.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.set(listno_index, newP);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 53,
      "yueyuu": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/EventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.FullCommand.length() \u003d\u003d 5) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                description \u003d ui.FullCommand.split(\"/at \")[0].substring(6);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                triviaManager.learnInput(ui.FullCommand,storage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            String at \u003d ui.FullCommand.split(\"/at \")[1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Event ev \u003d new Event(description, at);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            //CHECKING FOR SCHEDULE ANOMALIES------------------------------------------------------------------"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ArrayList\u003cEvent\u003e clash \u003d new ArrayList\u003cEvent\u003e(); //to store events that clash with the incoming event"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (Task t : list) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (t.getClass().getName().equals(\"gazeeebo.Tasks.Event\") \u0026\u0026 ((Event) t).date.equals(ev.date) \u0026\u0026"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        ((ev.start.isBefore(((Event) t).start) \u0026\u0026 ev.end.isAfter(((Event) t).start)) ||"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                                ev.start.equals(((Event) t).start) ||"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                                (ev.start.isAfter(((Event) t).start) \u0026\u0026 ev.start.isBefore(((Event) t).end)))) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    clash.add((Event) t);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (!clash.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"The following event(s) clash with your current event:\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                for (int i \u003d 0; i \u003c clash.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    System.out.println((i + 1) + \".\" + clash.get(i).listFormat());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            //--------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.add(ev);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(ev.listFormat());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            triviaManager.showPossibleInputs(\"event\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | DateTimeParseException a) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Ui.showEventDateFormatError();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void undo(String command, ArrayList\u003cTask\u003e list, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (Task it : list) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (it.description.contains(command.substring(7).trim())) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                list.remove(it);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 5,
      "JasonLeeWeiHern": 14,
      "mononokehime14": 4,
      "e0309463": 32,
      "yueyuu": 30
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.FullCommand.length() \u003d\u003d 5) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a search cannot be empty.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                ArrayList\u003cTask\u003e searchedlist \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                for (Task it : list) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (it.description.contains(ui.FullCommand.substring(4).trim())) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        searchedlist.add(it);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                for (int i \u003d 0; i \u003c searchedlist.size(); i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    System.out.println(i + 1 + \".\" + searchedlist.get(i).listFormat());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 9,
      "JasonLeeWeiHern": 9,
      "mononokehime14": 2,
      "e0309463": 19,
      "yueyuu": 4
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/FixDurationCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.FixedDuration;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class FixDurationCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list    task list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui      the object that deals with printing things to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param storage the object that deals with storing data to the Save.txt file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param commandStack"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param deletedTask"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws NullPointerException if tDate doesn\u0027t get updated."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String duration \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String[] splitstring;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        splitstring \u003d ui.FullCommand.split(\"/require\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        description \u003d splitstring[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        duration \u003d splitstring[1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FixedDuration to \u003d new FixedDuration(description, duration);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(to);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(to.listFormat());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void undo(String command, ArrayList\u003cTask\u003e list, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (Task it : list) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (it.description.contains(command.split(\"/requires\")[0].trim())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                list.remove(it);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Tells the main Duke class that the system should not exit and continue running"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 42,
      "mononokehime14": 2,
      "e0309463": 18,
      "yueyuu": 5
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(i + 1 + \".\" + list.get(i).listFormat());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.showProgessiveBar(list);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 6,
      "mononokehime14": 3,
      "e0309463": 14,
      "yueyuu": 4
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/RecurringCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class RecurringCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * This method replace the task to the following week/month/year base on the key word weekly/monthly/yearly respectively when the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * task is marked as done[D]."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list             task lists"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param numbercheck      the index of the list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list_description description of the index of the list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param storage          the object that deals with storing data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void AddRecurring(ArrayList\u003cTask\u003e list, int numbercheck, String list_description, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String[] splitstring;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String[] datesplitstring;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String[] toget_description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        int date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        if (list_description.contains(\"weekly\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (list_description.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitstring \u003d list_description.split(\"\\\\|at: \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                datesplitstring \u003d splitstring[1].split(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate \u003d LocalDate.parse(datesplitstring[0], DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(0).plusMonths(0).plusDays(7);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hour_min_sec \u003d datesplitstring[1];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String conc_time \u003d newDate + \" \" + hour_min_sec;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                toget_description \u003d splitstring[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d toget_description[toget_description.length - 1];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Event new_weeklyEvent \u003d new Event(description, (conc_time));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(numbercheck, new_weeklyEvent);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"\\nI\u0027ve automatically added this weekly task again:\\n\" + new_weeklyEvent.listFormat()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\nNow you have \" + list.size() + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (list_description.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitstring \u003d list_description.split(\"\\\\|by: \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                datesplitstring \u003d splitstring[1].split(\" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate \u003d LocalDate.parse(datesplitstring[0], DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(0).plusMonths(0).plusDays(7);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hour_min_sec \u003d datesplitstring[1];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String conc_time \u003d newDate + \" \" + hour_min_sec;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                toget_description \u003d splitstring[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d toget_description[toget_description.length - 1];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Deadline new_weeklyDeadline \u003d new Deadline(description, (conc_time));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(numbercheck, new_weeklyDeadline);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"\\nI\u0027ve automatically added this weekly task again:\\n\" + new_weeklyDeadline.listFormat()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\nNow you have \" + list.size() + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (list_description.contains(\"monthly\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (list_description.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitstring \u003d list_description.split(\"\\\\|at: \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                datesplitstring \u003d splitstring[1].split(\" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate \u003d LocalDate.parse(datesplitstring[0], DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(0).plusMonths(1).plusDays(0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hour_min_sec \u003d datesplitstring[1];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String conc_time \u003d newDate + \" \" + hour_min_sec;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                toget_description \u003d splitstring[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d toget_description[toget_description.length - 1];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Event new_monthlyEvent \u003d new Event(description, (conc_time));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(numbercheck, new_monthlyEvent);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"\\nI\u0027ve automatically added this monthly task again:\\n\" + new_monthlyEvent.listFormat()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\nNow you have \" + list.size() + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (list_description.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitstring \u003d list_description.split(\"\\\\|by: \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                datesplitstring \u003d splitstring[1].split(\" \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate \u003d LocalDate.parse(datesplitstring[0], DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(0).plusMonths(1).plusDays(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hour_min_sec \u003d datesplitstring[1];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String conc_time \u003d newDate + \" \" + hour_min_sec;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                toget_description \u003d splitstring[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d toget_description[toget_description.length - 1];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Deadline new_monthlyDeadline \u003d new Deadline(description, (conc_time));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(numbercheck, new_monthlyDeadline);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"\\nI\u0027ve automatically added this monthly task again:\\n\" + new_monthlyDeadline.listFormat()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\nNow you have \" + list.size() + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (list_description.contains(\"yearly\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (list_description.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitstring \u003d list_description.split(\"\\\\|at: \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                datesplitstring \u003d splitstring[1].split(\" \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate \u003d LocalDate.parse(datesplitstring[0], DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(1).plusMonths(0).plusDays(0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hour_min_sec \u003d datesplitstring[1];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String conc_time \u003d newDate + \" \" + hour_min_sec;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                toget_description \u003d splitstring[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d toget_description[toget_description.length - 1];"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Event new_yearlyEvent \u003d new Event(description, (conc_time));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(numbercheck, new_yearlyEvent);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"\\nI\u0027ve automatically added this yearly task again:\\n\" + new_yearlyEvent.listFormat()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\nNow you have \" + list.size() + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (list_description.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitstring \u003d list_description.split(\"\\\\|by: \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                datesplitstring \u003d splitstring[1].split(\" \");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate \u003d LocalDate.parse(datesplitstring[0], DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(1).plusMonths(0).plusDays(0);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hour_min_sec \u003d datesplitstring[1];"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String conc_time \u003d newDate + \" \" + hour_min_sec;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                toget_description \u003d splitstring[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d toget_description[toget_description.length - 1];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Deadline new_yearlyDeadline \u003d new Deadline(description, (conc_time));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(numbercheck, new_yearlyDeadline);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"\\nI\u0027ve automatically added this yearly task again:\\n\" + new_yearlyDeadline.listFormat()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\nNow you have \" + list.size() + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 2,
      "JasonLeeWeiHern": 140,
      "e0309463": 1,
      "yueyuu": 4
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/RescheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class RescheduleCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (ui.FullCommand.length() \u003d\u003d 10) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"OOPS!!! The object of a rescheduling cannot be null.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            int index \u003d Integer.parseInt(ui.FullCommand.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            String Decription \u003d list.get(index).description;;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"You are rescheduling this task: \" + Decription);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Please type in your new timeline\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.ReadCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            String time \u003d ui.FullCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Are you sure you want to reschedule this task? (yes/no)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.ReadCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            if (ui.FullCommand.equals(\"yes\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                if (list.get(index).listFormat().contains(\"by\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    Task RescheduledDeadline \u003d new Deadline(Decription, time);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    list.remove(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    list.add(RescheduledDeadline);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    System.out.println(\"Noted. I\u0027ve changed this task\u0027s timeline: \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    System.out.println(RescheduledDeadline.listFormat());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    Event RescheduledEvent \u003d new Event(Decription, time);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    list.remove(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    list.add(RescheduledEvent);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    System.out.println(\"Noted. I\u0027ve changed this task\u0027s timeline: \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    System.out.println(RescheduledEvent.listFormat());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    System.out.println(\"It\u0027s fine. Nothing has been changed.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 4,
      "mononokehime14": 3,
      "JasonLeeWeiHern": 5,
      "e0309463": 3,
      "yueyuu": 10,
      "-": 38
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class SnoozeCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if(ui.FullCommand.length() \u003d\u003d 6) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            throw new DukeException(\"OOPS!!! The object of a snoozing cannot be null.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            triviaManager.learnInput(ui.FullCommand,storage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            int index \u003d Integer.parseInt(ui.FullCommand.substring(6).trim()) - 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String Description\u003dlist.get(index).description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"You are snoozing this task: \"+list.get(index).description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"Please indicate how much time you want to snooze\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ui.ReadCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            int year \u003d Integer.parseInt(ui.FullCommand.split(\" \")[0]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            int day \u003d Integer.parseInt(ui.FullCommand.split(\" \")[2]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            int month \u003dInteger.parseInt(ui.FullCommand.split(\" \")[1]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            int hour \u003d Integer.parseInt(ui.FullCommand.split(\" \")[3]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (list.get(index).listFormat().contains(\"by\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                String date \u003d list.get(index).toString().split(\"\\\\|\")[3].substring(4);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                LocalDateTime newDate  \u003d LocalDateTime.parse(date,DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                newDate \u003d newDate.plusYears(year).plusMonths(month).plusDays(day).plusHours(hour);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                String newBy\u003d newDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                Task snoozedDeadline \u003d new Deadline(Description,newBy);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                list.remove(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                list.add(snoozedDeadline);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"Okay. I\u0027ve prolonged this task\u0027s deadline: \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(snoozedDeadline.listFormat());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String date \u003d list.get(index).toString().split(\"\\\\|\")[3].substring(4).split(\" \")[0];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String start \u003d list.get(index).toString().split(\"\\\\|\")[3].substring(4).split(\" \")[1].split(\"-\")[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String end \u003d list.get(index).toString().split(\"\\\\|\")[3].substring(4).split(\" \")[1].split(\"-\")[1];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                LocalDate newDate \u003d LocalDate.parse(date,DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                LocalTime newStart \u003d  LocalTime.parse(start,DateTimeFormatter.ofPattern(\"HH:mm:ss\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                LocalTime newEnd \u003d LocalTime.parse(end,DateTimeFormatter.ofPattern(\"HH:mm:ss\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                newDate \u003d newDate.plusYears(year).plusMonths(month).plusDays(day);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                newStart \u003d newStart.plusHours(hour);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                newEnd \u003d newEnd.plusHours(hour);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String newAt \u003d newDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"))+\" \"+newStart.format(DateTimeFormatter.ofPattern(\"HH:mm:ss\"))+\"-\"+newEnd.format(DateTimeFormatter.ofPattern(\"HH:mm:ss\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Event snoozedEvent \u003d new Event(Description,newAt);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                list.remove(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                list.add(snoozedEvent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"Okay. I\u0027ve prolonged this task\u0027s time: \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(snoozedEvent.listFormat());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            triviaManager.showPossibleInputs(\"snooze\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 8,
      "mononokehime14": 57,
      "e0309463": 3,
      "yueyuu": 12
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if(ui.FullCommand.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"OOPS!!! Please enter method of sorting.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ArrayList\u003cTask\u003e SortedList \u003d new ArrayList\u003cTask\u003e(list);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if(ui.FullCommand.split(\" \")[1].equals(\"name\")){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    Collections.sort(SortedList,new CustomNameComparator());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    for(int i \u003d0;i\u003cSortedList.size();i++){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        System.out.println(SortedList.get(i).listFormat());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }else if(ui.FullCommand.split(\" \")[1].equals(\"date\")){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Gazeebo currently does not support sort by date.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }else if(ui.FullCommand.split(\" \")[1].equals(\"priority\")){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Gazeebo currently does not support sort by priority.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }else{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Gazeebo currently does not support this sorting method.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "class CustomNameComparator implements Comparator\u003cTask\u003e{"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public int compare(Task a, Task b){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return a.description.compareTo(b.description);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "class CustomeDateComparator implements Comparator\u003cTask\u003e{"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public int compare(Task a,Task b){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if(a.toString().split(\"\\\\|\")[0].equals(\"E\") \u0026\u0026 b.toString().split(\"\\\\|\")[0].equals(\"E\")){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Event ea \u003d (Event)a;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Event eb \u003d (Event)b;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return LocalDateTime.of(ea.date,ea.start).compareTo(LocalDateTime.of(eb.date,eb.start));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }else if(a.toString().split(\"\\\\|\")[0].equals(\"D\") \u0026\u0026 b.toString().split(\"\\\\|\")[0].equals(\"D\")){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Deadline da \u003d (Deadline)a;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Deadline db \u003d (Deadline)b;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return da.by.compareTo(db.by);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }else if(a.toString().split(\"\\\\|\")[0].equals(\"E\") \u0026\u0026 b.toString().split(\"\\\\|\")[0].equals(\"D\")){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Event ea \u003d (Event)a;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Deadline db \u003d (Deadline)b;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            LocalDateTime temp \u003d LocalDateTime.of(ea.date,ea.start);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            int result \u003dtemp.compareTo(db.by);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return LocalDateTime.of(ea.date,ea.start).compareTo(db.by);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }else if(a.toString().split(\"\\\\|\")[0].equals(\"D\") \u0026\u0026 b.toString().split(\"\\\\|\")[0].equals(\"E\")){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Event eb \u003d (Event)b;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Deadline da \u003d (Deadline)a;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            LocalDateTime temp \u003dLocalDateTime.of(eb.date,eb.start);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            int result \u003d temp.compareTo(da.by);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return LocalDateTime.of(eb.date,eb.start).compareTo(da.by);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }else if((a.toString().split(\"\\\\|\")[0].equals(\"E\")||a.toString().split(\"\\\\|\")[0].equals(\"D\"))\u0026\u0026 !(b.toString().split(\"\\\\|\")[0].equals(\"E\")||b.toString().split(\"\\\\|\")[0].equals(\"D\"))){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }else if((b.toString().split(\"\\\\|\")[0].equals(\"E\")||b.toString().split(\"\\\\|\")[0].equals(\"D\"))\u0026\u0026 !(a.toString().split(\"\\\\|\")[0].equals(\"E\")||a.toString().split(\"\\\\|\")[0].equals(\"D\"))){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                    Collections.sort(SortedList,new CustomeDateComparator());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                            for(int i \u003d0;i\u003cSortedList.size();i++){"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        System.out.println(SortedList.get(i).listFormat());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        }"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 80,
      "e0309463": 2,
      "yueyuu": 5
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/TagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (ui.FullCommand.equals(\"#\") || ui.FullCommand.equals(\"# \")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"The tag description cannot be empty.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                ArrayList\u003cTask\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                String tag \u003d ui.FullCommand.substring(1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (Task it : list) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (it.description.contains(\"#\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        if (it.description.split(\"#\")[1].trim().equals(tag)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            tagList.add(it);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Here are the matching tags in your list:\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c tagList.size(); i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(i + 1 + \".\" + tagList.get(i).listFormat());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        catch(DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 36,
      "mononokehime14": 2,
      "e0309463": 3,
      "yueyuu": 3,
      "-": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/TentativeEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class TentativeEventCommand extends Command{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.FullCommand.length() \u003d\u003d 9) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of an tentative event cannot be empty.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                description \u003d ui.FullCommand.substring(10);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"You are creating a tentative event: \" + description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"Please enter possible time slots of the event\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"When you are done, key in \u0027/\u0027.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ArrayList\u003cString\u003e tentativetimes \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ui.ReadCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                while (!ui.FullCommand.equals(\"/\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    tentativetimes.add(ui.FullCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    ui.ReadCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                TentativeEvent newtentative \u003d new TentativeEvent(description,tentativetimes);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"Got it. I\u0027ve added this tentative event:\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(newtentative.listFormat());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"You could confirm one of the slots later.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                list.add(newtentative);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void undo(String command, ArrayList\u003cTask\u003e list, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (Task it : list) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (it.description.contains(command.substring(10)) \u0026\u0026 it.getClass().getName().equals(\"TentativeEvent\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                list.remove(it);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 4,
      "mononokehime14": 32,
      "JasonLeeWeiHern": 8,
      "e0309463": 16,
      "yueyuu": 5
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/TimeboundCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class TimeboundCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String duration \u003d ui.FullCommand.split(\"/\")[1];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (duration.length() \u003e 6 \u0026\u0026 duration.length() \u003c 33){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"OOPS!!! There is no proper duration of time allocated for this task.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                description \u003d ui.FullCommand.split(\"/between \")[0];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String period \u003d ui.FullCommand.split(\"/between \")[1];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            Timebound tb \u003d new Timebound(description, period);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            list.add(tb);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(tb.listFormat());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void undo(String command, ArrayList\u003cTask\u003e list, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (Task it : list) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (it.description.contains(command.split(\"/between \")[0])) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                list.remove(it);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 12,
      "JasonLeeWeiHern": 26,
      "mononokehime14": 2,
      "e0309463": 16,
      "yueyuu": 5
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/TodoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.FullCommand.length() \u003c\u003d 4) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                description \u003d ui.FullCommand.substring(5);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                triviaManager.learnInput(ui.FullCommand,storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Todo to \u003d new Todo(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        list.add(to);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(to.listFormat());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            triviaManager.showPossibleInputs(\"todo\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            //triviaManager.showAllMap();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void undo(String command, ArrayList\u003cTask\u003e list, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (Task it : list) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (it.description.contains(command.substring(6).trim())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                list.remove(it);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 5,
      "JasonLeeWeiHern": 12,
      "mononokehime14": 5,
      "e0309463": 35,
      "yueyuu": 5
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (!commandStack.empty() \u0026\u0026 commandStack.peek().contains(\"done\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            new DoneCommand().undo(commandStack.peek(),list,storage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"I\u0027ve undo your previous command\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            commandStack.pop();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else if (!commandStack.empty() \u0026\u0026 commandStack.peek().contains(\"delete\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            new DeleteCommand().undo(list,storage,deletedTask);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"I\u0027ve undo your previous command\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            commandStack.pop();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else if (!commandStack.empty() \u0026\u0026 commandStack.peek().contains(\"deadline\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            new DeadlineCommand().undo(commandStack.peek(),list,storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"I\u0027ve undo your previous command\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            commandStack.pop();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else if (!commandStack.empty() \u0026\u0026 commandStack.peek().contains(\"/after\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            new DoAfterCommand().undo(commandStack.peek(),list,storage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"I\u0027ve undo your previous command\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            commandStack.pop();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else if (!commandStack.empty() \u0026\u0026 commandStack.peek().contains(\"event\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            new EventCommand().undo(commandStack.peek(),list,storage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"I\u0027ve undo your previous command\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            commandStack.pop();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else if (!commandStack.empty() \u0026\u0026 commandStack.peek().contains(\"todo\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            new TodoCommand().undo(commandStack.peek(),list,storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"I\u0027ve undo your previous command\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            commandStack.pop();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else if (!commandStack.empty() \u0026\u0026 commandStack.peek().contains(\"/between\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            new TimeboundCommand().undo(commandStack.peek(),list,storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"I\u0027ve undo your previous command\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            commandStack.pop();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else if (!commandStack.empty() \u0026\u0026 commandStack.peek().contains(\"/require\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            new FixDurationCommand().undo(commandStack.peek(),list,storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"I\u0027ve undo your previous command\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            commandStack.pop();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else if (!commandStack.empty() \u0026\u0026 commandStack.peek().contains(\"tentative\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            new TentativeEventCommand().undo(commandStack.peek(),list,storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"I\u0027ve undo your previous command\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            commandStack.pop();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else if (!commandStack.empty() \u0026\u0026 commandStack.peek().contains(\"confirm\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            new ConfirmTentativeCommand().undo(commandStack.peek(),list,storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"I\u0027ve undo your previous command\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            commandStack.pop();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else if (!commandStack.empty() \u0026\u0026 commandStack.peek().contains(\"undone\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            new UndoneCommand().undo(commandStack.peek(),list,storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"I\u0027ve undo your previous command\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            commandStack.pop();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"The previous command cannot be undo\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (String command:commandStack) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println(command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 14,
      "mononokehime14": 2,
      "JasonLeeWeiHern": 2,
      "e0309463": 51,
      "yueyuu": 3
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/UndoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class UndoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (ui.FullCommand.equals(\"undo\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                throw new DukeException(\"The undo task number cannot be empty.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            int numberCheck \u003d Integer.parseInt(ui.FullCommand.substring(5)) - 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (list.get(numberCheck).isDone \u003d\u003d true) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                list.get(numberCheck).isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as undone: \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(list.get(numberCheck).listFormat());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void undo(String command, ArrayList\u003cTask\u003e list, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int numberCheck \u003d Integer.parseInt(command.substring(7)) - 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        list.get(numberCheck).isDone \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve undo this command\" + command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 1,
      "mononokehime14": 2,
      "e0309463": 44,
      "yueyuu": 3
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/UndoneListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class UndoneListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTask\u003e UndoneList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (ui.FullCommand.equals(\"undone\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"Command for \u0027undone\u0027 cannot be empty.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (Task task : list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (task.isDone \u003d\u003d false) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    UndoneList.add(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (ui.FullCommand.equals(\"undone list\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"List of tasks that are undone:\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c UndoneList.size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(i + 1 + \".\" + UndoneList.get(i).listFormat());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isExit () {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 41,
      "mononokehime14": 2,
      "e0309463": 3,
      "yueyuu": 3
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/expenses/AddExpensesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.expenses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class AddExpensesCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method adds the expense from the expense list and expenses."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage the object that deals with storing data, in this case storing data in the expenses map"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param expenses the object that map each expenses to its date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException catch any error if read file fails"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public AddExpensesCommand (Ui ui, Storage storage, Map\u003cLocalDate,ArrayList\u003cString\u003e\u003e expenses) throws IOException{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"What did you buy:\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.ReadCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String item \u003d ui.FullCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"How much did you spend:\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.ReadCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String price \u003d ui.FullCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String itemAndPrice \u003d item + \", \" + price;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"Date of purchase:\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.ReadCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String date \u003d ui.FullCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        LocalDate dateOfPurchase \u003d LocalDate.parse(date, fmt);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        /*Storing expenses value as an array to the date keys. If the item were bought on the same date as a previous item,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "          add the item in the array under the same key.*/"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e itemAndPriceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        boolean isEqual \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for(LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (dateOfPurchase.equals(key)) { //if date equal"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                expenses.get(key).add(itemAndPrice);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                isEqual \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        if (isEqual \u003d\u003d false) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            itemAndPriceList.add(itemAndPrice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            expenses.put(dateOfPurchase, itemAndPriceList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"Okay we have successfully added your new expense: \" + \"\\n\" + itemAndPrice + \", bought on \" + dateOfPurchase);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        /*Stores the updated expenses map after deletion of expenses*/"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String toStore \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (expenses.get(key).size() \u003e 1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c expenses.get(key).size(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    toStore \u003d toStore.concat(key + \"|\" + expenses.get(key).get(i) + \"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (expenses.get(key).size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                toStore \u003d toStore.concat(key + \"|\" + expenses.get(key).get(0) + \"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        storage.Storages_Expenses(toStore);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 70,
      "yueyuu": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/expenses/DeleteExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.expenses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class DeleteExpenseCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method deletes the expense from the expense list and expenses map."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage the object that deals with storing data, in this case storing data in the expenses map"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param expenses the object that map each expenses to its date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException catch any error if read file fails"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public DeleteExpenseCommand(Ui ui, Storage storage, Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e expenses) throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e expenseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"Enter the expense index that you wish to delete:\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        /* Prints list of expenses*/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c expenses.get(key).size(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                expenseList.add(expenses.get(key).get(i) + \" | bought on \" + key);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for (int j \u003d 0; j \u003c expenseList.size(); j++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println((j + 1) + \". \" + expenseList.get(j));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "         /* Reading the expense index that is entered*/"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.ReadCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String expenseIndex \u003d ui.FullCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        int index \u003d Integer.parseInt(expenseIndex) - 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"Expense \" +  expenseList.get(index) + \" deleted!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String getKeyFromList \u003d expenseList.get(index).split(\" \")[0];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        LocalDate getKey \u003d LocalDate.parse(getKeyFromList, fmt);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String getValueFromList \u003d expenseList.get(index).split(\" \")[1] + \" \" + expenseList.get(index).split(\" \")[2];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for(LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if(key.equals(getKey)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for(int i \u003d 0; i \u003c expenses.get(key).size(); i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if(expenses.get(key).get(i).equals(getValueFromList)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        expenses.get(key).remove(i);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        expenseList.remove(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        /*Stores the updated expenses map after deletion of expenses*/"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String toStore \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (expenses.get(key).size() \u003e 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c expenses.get(key).size(); i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    toStore \u003d toStore.concat(key + \"|\" + expenses.get(key).get(i) + \"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (expenses.get(key).size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                toStore \u003d toStore.concat(key + \"|\" + expenses.get(key).get(0) + \"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        storage.Storages_Expenses(toStore);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 75,
      "yueyuu": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/expenses/ExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.expenses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Allows user to call commands to record and manage their expenses."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class ExpenseCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method is allows user to call commands to add expenses, find expenses on a certain date, delete a chosen expense,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * see the expense list and exit the expense page."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list list of all tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage the object that deals with storing data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException Catch error if the read file fails"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e map \u003d storage.Expenses(); //Read the file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e expenses \u003d new TreeMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e(map);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e expenseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.print(\"Welcome to your expenses record! What would you like to do?\\n\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"__________________________________________________________\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"1. Add expenses command: add\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"2. Find expenses on a certain date: find\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"3. Delete a certain expense: delete\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"4. See your expense list: expense list\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"5. Exit Expense page: esc\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"__________________________________________________________\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.ReadCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        while(!ui.FullCommand.equals(\"esc\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (ui.FullCommand.contains(\"add\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new AddExpensesCommand(ui, storage, expenses);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if(ui.FullCommand.equals(\"find\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new FindExpenseCommand(ui, expenses);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if(ui.FullCommand.equals(\"delete\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new DeleteExpenseCommand(ui, storage, expenses);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if(ui.FullCommand.equals(\"expense list\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new ExpenseListCommand(ui, expenses);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ui.ReadCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 59,
      "yueyuu": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/expenses/ExpenseListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.expenses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class ExpenseListCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method prints the list of all the expenses"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param expenses the object that map each expenses to its date"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException catch any error if read file fails"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public ExpenseListCommand (Ui ui, Map\u003cLocalDate,ArrayList\u003cString\u003e\u003e expenses) throws IOException{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e expenseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"Here is the list of your expenses:\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c expenses.get(key).size(); i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                expenseList.add(expenses.get(key).get(i) + \" | bought on \" + key);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for (int j \u003d 0; j \u003c expenseList.size(); j++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println((j + 1) + \". \" + expenseList.get(j));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 33
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/expenses/FindExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.expenses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class FindExpenseCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method finds expenses bought on the same date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param expenses the object that map each expenses to its date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException catch any error if read file fails"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public FindExpenseCommand(Ui ui, Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e expenses) throws IOException, NullPointerException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"Please enter the date of expenses are you searching for:\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.ReadCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String date \u003d ui.FullCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        LocalDate dateOfPurchase \u003d LocalDate.parse(date, fmt);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        boolean isExist \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for(LocalDate key: expenses.keySet()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (dateOfPurchase.equals(key)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Expenses found:\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c expenses.get(key).size(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println((i+1) + \".\" + expenses.get(key).get(i));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                isExist \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        if(!isExist) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"Date does not exist!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0323290": 45
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/help/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.commands.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.help.HelpText;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //gazeeebo.help COMMAND or just gazeeebo.help"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //description of a gazeeebo.help can be empty"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        HelpText help \u003d new HelpText();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.FullCommand.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert command.length !\u003d 0 : \"Bug in parser that affects HelpCommand\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (command.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            description \u003d help.commandFormat + System.lineSeparator() + System.lineSeparator() +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    help.commandsHeader + help.commandSeparator +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    help.todo + help.commandSeparator +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    help.deadline + help.commandSeparator +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    help.event + help.commandSeparator +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    help.list + help.commandSeparator +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    help.delete + help.commandSeparator +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    help.done;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"todo\": description \u003d help.todo;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"deadline\": description \u003d help.deadline;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"event\": description \u003d help.event;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"list\": description \u003d help.list;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"delete\": description \u003d help.delete;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"done\": description \u003d help.done;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                description \u003d \"OOPS!!! There is no such command.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(description);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 61
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/note/AddNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.NoteStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Adds a new note to a particular day, week or month."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class AddNoteCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Decodes the user\u0027s input and handles incorrect input formats."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param command the command the user inputs"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param commandName the name of the command ie. addNote, editNote, deleteNote or listNote"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return the date specified by the user as a LocalDate object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException when the users input format is wrong"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected LocalDate processCommand(String[] command, String commandName) throws DukeException{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //addNote day/week/month yyyy-MM-dd"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //\u003cthe note they want to add\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                if (!(command[1].equals(\"day\") || command[1].equals(\"week\") || command[1].equals(\"month\"))) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    throw new DukeException(\"The second word in the command has to be \\\u0027day\\\u0027, \\\u0027week\\\u0027 or \\\u0027month\\\u0027.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException b) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a(n) \" + commandName +\" cannot be empty.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (command[1].equals(\"month\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                command[2] \u003d command[2] + \"-01\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(command[2], Note.noteFormatter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (command[1].equals(\"week\") \u0026\u0026 !date.getDayOfWeek().equals(DayOfWeek.MONDAY)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                throw new DukeException(\"OOPS!!! The date provided must be a Monday.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            throw new DukeException(\"Please input a date.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            //return;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DateTimeParseException a) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (command[1].equals(\"month\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                throw new DukeException(\"The date has to been in YYYY-MM format.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                throw new DukeException(\"The date has to been in YYYY-MM-DD format.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Adds a new note to the specified day, week or month if there are existing notes."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Else creates a new note object with the new note as the first note."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * After that, writes to the text file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param listOfNotes the list of Notes to add the new note to depending on if its a day, week or month"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param userDate the date specified by the user as a LocalDate object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param usersNote the new note that the user wants to add"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param date the date specified by the user as a String object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return the new note added"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected Note addToList(ArrayList\u003cNote\u003e listOfNotes, LocalDate userDate, String usersNote, String date,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                             String fileName) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        boolean hasNote \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note noteInQuestion \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Note n: listOfNotes) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (n.noteDate.equals(userDate)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                n.notes.add(usersNote);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteInQuestion \u003d n;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                hasNote \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (!hasNote) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Note newNote \u003d new Note(date, usersNote);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            listOfNotes.add(newNote);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            noteInQuestion \u003d newNote;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteStorage.writeToFile(fileName, listOfNotes);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return noteInQuestion;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the user that the new note had been added successfully."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param usersNote the note that the user wants to add"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param size the number of notes the user has for the specified period after the new note has been added"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param period is either day, week or month"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected void printConfirmationMessage(String usersNote, int size, String period) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this note to that \" + period +  \":\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(usersNote);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Now you have \" + size + \" note(s) for that \" + period + \".\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The main method that executes all the sub methods. */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.FullCommand.split(\" \");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.ReadCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d ui.FullCommand;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note noteSpecified;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"day\":"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.daily, userDate, usersNote, command[2], \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"week\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.weekly, userDate, usersNote, command[2], \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"month\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.monthly, userDate, usersNote, command[2], \"NoteMonthly.txt\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d null;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assert noteSpecified !\u003d null : \"there is a bug in AddNoteCommand\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printConfirmationMessage(usersNote, noteSpecified.notes.size(), command[1]);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"The \" + command[1] + \" file cannot be opened.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 3,
      "e0309463": 5,
      "yueyuu": 143
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/note/DeleteNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.NoteStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Deletes a note for a particular day, week or month."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class DeleteNoteCommand extends EditNoteCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Deletes the note specified if the note exists. Else it throws an exception."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param noteNumber the index of the note to delete"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param listToEdit the list of Notes that contains the note to delete depending on if its a day, week or month"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param dateToEdit the start date of the period of the note to delete"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param period is either day, week or month"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return the note that was deleted"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if the note to delete does not exist"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private String deleteNoteInList(int noteNumber, ArrayList\u003cNote\u003e listToEdit, LocalDate dateToEdit,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                                String period, String fileName) throws DukeException{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Note n: listToEdit) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (n.noteDate.equals(dateToEdit)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    String deletedNote \u003d n.notes.get(noteNumber-1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    n.notes.remove(noteNumber-1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    if (n.notes.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        listToEdit.remove(n);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    NoteStorage.writeToFile(fileName, listToEdit);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    return deletedNote;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    throw new DukeException(\"OOPS!!! That note number does not exist.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } catch (IOException f) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    throw new DukeException(\"The \" + fileName + \" file cannot be opened.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        throw new DukeException(\"OOPS!!! There are no gazeeebo.notes for this \" + period + \" to delete.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the user that the note has been successfully deleted."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param usersNote the note that was deleted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param period is either day, week or month"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private void printDeleteSuccess(String usersNote, String period) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve deleted this note for that \" + period +  \":\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(usersNote);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The main method that executes all the sub methods. */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //deleteNote day/week/month yyyy-MM-dd \u003cnote_num\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.FullCommand.split(\" \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"deleteNote\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int noteNum;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            noteNum \u003d Integer.parseInt(command[3]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException v) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please specify a note number.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String noteToBeDeleted;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"day\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteToBeDeleted \u003d deleteNoteInList(noteNum, NoteList.daily, userDate, command[1], \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"week\" :"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteToBeDeleted \u003d deleteNoteInList(noteNum, NoteList.weekly, userDate, command[1], \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"month\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteToBeDeleted \u003d deleteNoteInList(noteNum, NoteList.monthly, userDate, command[1], \"NoteMonthly.txt\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default: noteToBeDeleted \u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assert noteToBeDeleted !\u003d null : \"there is a bug in DeleteNoteCommand\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printDeleteSuccess(noteToBeDeleted, command[1]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(d);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 3,
      "e0309463": 5,
      "yueyuu": 100
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/note/EditNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.NoteStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Edits an existing note for a particular day, week or month."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class EditNoteCommand extends AddNoteCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Edits the specified note if it exists and writes to the text file. Else throws an exception."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param noteNumber the index of the note that the user wants to edit"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param listToEdit the list of Notes that contains the note to edit depending on if its a day, week or month"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param dateToEdit the start date of the period of the note to edit"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param editedNote the edited version of the note"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param period is either day, week or month"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if the note to edit does not exist"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected void editNoteInList(int noteNumber, ArrayList\u003cNote\u003e listToEdit, LocalDate dateToEdit,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                                  String editedNote, String period, String fileName) throws DukeException{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Note n: listToEdit) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (n.noteDate.equals(dateToEdit)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    n.notes.set(noteNumber-1, editedNote);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    NoteStorage.writeToFile(fileName, listToEdit);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    throw new DukeException(\"OOPS!!! That note number does not exist.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } catch (IOException f) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    throw new DukeException(\"The \" + fileName + \" file cannot be opened.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        throw new DukeException(\"OOPS!!! There are no gazeeebo.notes for this \" + period + \" to edit from.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the user that the note has been successfully edited."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param usersNote the edited version of the note"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param period is either day, week or month"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected void printEditSuccess(String usersNote, String period) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve edited this note for that \" + period +  \":\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(usersNote);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The main method that executes all the sub methods. */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //editNote day/week/month yyyy-MM-dd \u003cnote_num \u003d index+1\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //\u003cthe note they want to edit to become\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.FullCommand.split(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"editNote\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int noteNum;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            noteNum \u003d Integer.parseInt(command[3]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException v) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please specify a note number.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.ReadCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d ui.FullCommand;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"day\": editNoteInList(noteNum, NoteList.daily, userDate, usersNote, command[1], \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"week\": editNoteInList(noteNum, NoteList.weekly, userDate, usersNote, command[1], \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"month\": editNoteInList(noteNum, NoteList.monthly, userDate, usersNote, command[1], \"NoteMonthly.txt\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default: System.out.println(\"Bug in EditNoteCommand\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.exit(1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printEditSuccess(usersNote, command[1]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(d);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 3,
      "e0309463": 5,
      "yueyuu": 93
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/note/ListNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Lists out the notes for a particular day, week or month."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class ListNoteCommand extends AddNoteCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //listNote day/week/month yyyy-MM-dd"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Prints out the notes with indexes from a given list of notes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param listOFNotes the list of notes for the specified period"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private void printOutNoteList(ArrayList\u003cString\u003e listOFNotes) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert !listOFNotes.isEmpty() : \"there is an empty note section of a date (bug in DeleteNoteCommand)\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (int i \u003d 0; i \u003c listOFNotes.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println((i+1) + \". \" + listOFNotes.get(i));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Finds the list of notes for the specified period and prints them out."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param periodList the list of Notes for the specified period depending on if its a day, week or month"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param dateToList the date specified by the user"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param period is either day, week or month"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if there are no notes for the specified period"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private void printNoteList(ArrayList\u003cNote\u003e periodList, LocalDate dateToList, String period) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Note n: periodList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (n.noteDate.equals(dateToList)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println(\"Here are your gazeeebo.notes for that \" + period + \":\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                printOutNoteList(n.notes);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        throw new DukeException(\"There are no gazeeebo.notes for that \" + period + \".\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The main method that executes all the sub methods. */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.FullCommand.split(\" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"listNote\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"day\": printNoteList(NoteList.daily, userDate, command[1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"week\": printNoteList(NoteList.weekly, userDate, command[1]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"month\": printNoteList(NoteList.monthly, userDate, command[1]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default: System.out.println(\"Bug in ListNoteCommand\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.exit(1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(d);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 2,
      "e0309463": 6,
      "yueyuu": 71
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/places/AddPlacesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.places;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class AddPlacesCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * This method allows add new contact into the contact page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui      the object that deals with printing things to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param storage the object that deals with storing data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param places  Map each name to its own phone number"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException catch any error if read file fails"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public AddPlacesCommand(Ui ui, Storage storage, Map\u003cString, String\u003e places) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Input in this format: Room,Location\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            ui.ReadCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String[] split_info \u003d ui.FullCommand.split(\",\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String name \u003d split_info[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String number \u003d split_info[1];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            places.put(name, number);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Okay we have successfully added the new location :\" + ui.FullCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String toStore \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (String key : places.keySet()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                toStore \u003d toStore.concat(key + \"|\" + places.get(key) + \"\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            storage.Storages_Places(toStore);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (IOException|ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "           System.out.println(\"Please Input in the correct format\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 35,
      "yueyuu": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/places/DeletePlacesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.places;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class DeletePlacesCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param storage the object that deals with storing data."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param places Map each name to its own phone number"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException catch any error if read file fails"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public DeletePlacesCommand(Ui ui, Storage storage, Map\u003cString,String\u003e places) throws IOException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String placeToDelete \u003d ui.FullCommand.split(\"-\")[1];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (ui.FullCommand.equals(\"delete\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"You need to indicate what you want to delete, Format: delete name\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else if (places.containsKey(placeToDelete)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            places.remove(placeToDelete);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(placeToDelete + \" has been removed.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(placeToDelete + \" is not in the list.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String toStore \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (String key : places.keySet()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            toStore \u003d toStore.concat(key + \"|\" + places.get(key) + \"\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        storage.Storages_Places(toStore);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 32,
      "yueyuu": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/places/FindPlacesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.places;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class FindPlacesCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param places Map each name to its own phone number"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param LINE_BREAK String separator"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public FindPlacesCommand(Ui ui, Map\u003cString,String\u003e places, String LINE_BREAK) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String placeSearchingFor \u003d ui.FullCommand.split(\"-\")[1];"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Boolean isFound \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for(String keys:places.keySet()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if(keys.contains(placeSearchingFor)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.print(keys);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                isFound \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                int whiteSpaces \u003d 50 - keys.length();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                for (int i \u003d 0; i \u003c whiteSpaces; i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.print(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.print(\"| \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.print(places.get(keys) + \"\\n\" + LINE_BREAK);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if(!isFound) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "           System.out.println(\"This place cannot be found.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 33
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/places/ListPlacesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.places;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class ListPlacesCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * This method list out all the phone numbers."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param places Map each name to its phone number"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param LINE_BREAK String separator"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public ListPlacesCommand(Map\u003cString,String\u003e places, String LINE_BREAK) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.print(\"Room:                                             | Location:\\n\" + LINE_BREAK);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (String key : places.keySet()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(key);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            int whiteSpaces \u003d 50 - key.length();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 0; i \u003c whiteSpaces; i++) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.print(\" \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(\"| \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(places.get(key)+ \"\\n\" + LINE_BREAK);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 23
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/places/PlacesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.places;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class PlacesCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.print(\"PLACES IN SOC\\n\\nCommands:\\n\u0027list\u0027 list all places in SOC\\n\u0027add\u0027 adds a new place\\n\u0027delete-a place\u0027 delete a place\\n\u0027find-a place in SOC\u0027 find a place in SOC\\n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d storage.Read_Places();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Map\u003cString, String\u003e places \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String LINE_BREAK \u003d \"------------------------------------------\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        boolean isExitFromPlaces \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        while (!isExitFromPlaces) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            ui.ReadCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (ui.FullCommand.equals(\"add\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                new AddPlacesCommand(ui,storage,places);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (ui.FullCommand.split(\"-\")[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                new FindPlacesCommand(ui,places, LINE_BREAK);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (ui.FullCommand.equals(\"list\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                new ListPlacesCommand(places, LINE_BREAK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (ui.FullCommand.contains(\"delete\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                new DeletePlacesCommand(ui,storage,places);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (ui.FullCommand.equals(\"esc\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println(\"Going back to Main Menu\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                isExitFromPlaces \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println(\"There is no such command in Places.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 2,
      "e0309463": 38,
      "yueyuu": 3
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/schedule/ScheduleDailyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.commands.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Lists out all the tasks that the user has on the specified day."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class ScheduleDailyCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //format for the command: scheduleDaily \u003cyyyy-MM-dd\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * This is the main body of the ScheduleDaily command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param list the tasks list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param storage the object that deals with storing data to the Save.txt file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param commandStack not used"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param deletedTask not used"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws NullPointerException if tDate doesn\u0027t get updated."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.FullCommand.trim().split(\" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (command.length \u003e 2) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"The command should be in the format \\\"scheduleDaily yyyy-MM-dd\\\".\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            date \u003d LocalDate.parse(command[1], fmt);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please input the date in yyyy-MM-dd format.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"OOPS!!! The description of a scheduleDaily cannot be empty.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e schedule \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Task t: list) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            LocalDate tDate \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (t.getClass().getName()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                case \"gazeeebo.Tasks.Event\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    tDate \u003d ((Event) t).date;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                case \"gazeeebo.Tasks.Deadline\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    tDate \u003d ((Deadline) t).by.toLocalDate();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                case \"gazeeebo.Tasks.Timebound\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    LocalDate startDate \u003d ((Timebound) t).dateStart;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    LocalDate endDate \u003d ((Timebound) t).dateEnd;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    if (date.equals(startDate) || date.equals(endDate) ||"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                            (date.isAfter(startDate) \u0026\u0026 date.isBefore(endDate))) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        schedule.add(t);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (date.equals(tDate)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                schedule.add(t);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (schedule.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"You have nothing scheduled on this day!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Here is your schedule for \" + date.format(fmt) + \":\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (int i \u003d 0; i \u003c schedule.size(); i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println((i+1) + \".\" + schedule.get(i).listFormat());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the main Duke class that the system should not exit and continue running"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 2,
      "JasonLeeWeiHern": 7,
      "e0309463": 7,
      "yueyuu": 82
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/schedule/ScheduleMonthlyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.commands.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Lists out all the tasks that the user has in a specified month."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class ScheduleMonthlyCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //format for the command: scheduleMonthly \u003cyyyy-MM\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected LocalDate startMonth;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected LocalDate endMonth;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * This is the main body of the ScheduleMonthly command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param list the tasks list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param storage the object that deals with storing data to the Save.txt file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws NullPointerException if tDate doesn\u0027t get updated."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws NullPointerException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.FullCommand.trim().split(\" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (command.length \u003e 2) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"The command should be in the format \\\"scheduleMonthly yyyy-MM\\\".\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            startMonth \u003d LocalDate.parse(command[1]+\"-01\", fmt);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            String lengthOfMonth \u003d Integer.toString(startMonth.lengthOfMonth());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            endMonth \u003d LocalDate.parse(command[1] + \"-\" + lengthOfMonth, fmt);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please input the date in yyyy-MM format.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"OOPS!!! The description of a scheduleMonthly cannot be empty.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e schedule \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Task t: list) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            LocalDate tDate \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (t.getClass().getName()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            case \"gazeeebo.Tasks.Event\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                tDate \u003d ((Event) t).date;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            case \"gazeeebo.Tasks.Deadline\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                tDate \u003d ((Deadline) t).by.toLocalDate();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            case \"gazeeebo.Tasks.Timebound\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                LocalDate startDate \u003d ((Timebound) t).dateStart;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                LocalDate endDate \u003d ((Timebound) t).dateEnd;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                if (!(endDate.isBefore(startMonth) || startDate.isAfter(endMonth))) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    schedule.add(t);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (tDate !\u003d null \u0026\u0026 startMonth.getYear() \u003d\u003d tDate.getYear() \u0026\u0026"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    startMonth.getMonthValue() \u003d\u003d tDate.getMonthValue()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                schedule.add(t);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (schedule.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"You have nothing scheduled for this month!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Here is your schedule for \" + command[1] + \":\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (int i \u003d 0; i \u003c schedule.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println((i+1) + \".\" + schedule.get(i).listFormat());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the main Duke class that the system should not exit and continue running"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 2,
      "e0309463": 5,
      "yueyuu": 86
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/schedule/ScheduleWeeklyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.commands.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Lists out all the tasks that the user has in a specified week."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class ScheduleWeeklyCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //format for the command: scheduleWeekly \u003cyyyy-MM-dd(Mon) yyyy-MM-dd(Sun)\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected LocalDate mon;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected LocalDate sun;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final int ONE_WEEK \u003d 7;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * This is the main body of the ScheduleWeekly command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param list the tasks list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param storage the object that deals with storing data to the Save.txt file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws NullPointerException if tDate doesn\u0027t get updated."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cString\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws NullPointerException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            String[] date \u003d ui.FullCommand.trim().split(\" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (date.length \u003e 3) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"The command should be in the format \\\"scheduleWeekly yyyy-MM-dd yyyy-MM-dd\\\".\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                mon \u003d LocalDate.parse(date[1], fmt);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"OOPS!!! The description of a scheduleWeekly cannot be empty.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                sun \u003d LocalDate.parse(date[2], fmt);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException a) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"OOPS!!! Please specify an end date.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            long numOfDays \u003d DAYS.between(mon, sun) + 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (mon.getDayOfWeek() !\u003d DayOfWeek.MONDAY) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"The first date has to be a Monday.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (sun.getDayOfWeek() !\u003d DayOfWeek.SUNDAY) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"The second date has to be a Sunday.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (mon.isAfter(sun)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"The second date has to be later than the first date.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (numOfDays !\u003d ONE_WEEK) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"The duration you have specified is longer than 1 week.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(numOfDays);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                assert numOfDays \u003e 7 : \"numOfDays should be more than 7\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please input the date in yyyy-MM-dd format.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e schedule \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Task t: list) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            LocalDate tDate \u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (t.getClass().getName().equals(\"gazeeebo.Tasks.Event\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                tDate \u003d ((Event) t).date;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (t.getClass().getName().equals(\"gazeeebo.Tasks.Deadline\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                tDate \u003d ((Deadline) t).by.toLocalDate();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (t.getClass().getName().equals(\"gazeeebo.Tasks.Timebound\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                LocalDate startDate \u003d ((Timebound) t).dateStart;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                LocalDate endDate \u003d ((Timebound) t).dateEnd;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                if (endDate.equals(mon) || (startDate.isBefore(mon) \u0026\u0026 endDate.isAfter(mon)) ||"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        startDate.equals(mon) || (startDate.isAfter(mon) \u0026\u0026 startDate.isBefore(sun)) ||"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        startDate.equals(sun)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    schedule.add(t);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (tDate !\u003d null \u0026\u0026 (tDate.equals(mon) || (tDate.isAfter(mon) \u0026\u0026"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    tDate.isBefore(sun)) || tDate.equals(sun))) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                schedule.add(t);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (schedule.isEmpty()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"You have nothing scheduled for this week!\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Here is your schedule for the week:\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (int i \u003d 0; i \u003c schedule.size(); i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println((i+1) + \".\" + schedule.get(i).listFormat());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the main Duke class that the system should not exit and continue running"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 2,
      "e0309463": 5,
      "yueyuu": 117
    }
  },
  {
    "path": "src/main/java/gazeeebo/exception/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String errorMessage){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yueyuu": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/java/gazeeebo/help/HelpText.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class HelpText {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public final String commandSeparator \u003d System.lineSeparator() +"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"---------------------------------------------------------\\n\" +"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.lineSeparator();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public final String commandFormat \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"# Command Format #\\n\"+"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"Words in UPPER_CASE are the parameters to be supplied by the\\n\" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"user e.g. in todo TASK_DESCRIPTION, TASK_DESCRIPTION is a\\n\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"parameter which can be used as todo eat.\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public final String commandsHeader \u003d \"# Commands #\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public final String todo \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"[ todo ]\\n\" +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"Adds a todo task to the task list.\\n\" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"Format: todo TASK_DESCRIPTION\\n\" +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"Examples:\\n\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t- todo eat\\n\" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t- todo watch TV\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public final String deadline \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"[ deadline ]\\n\" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"Adds a deadline task to the task list.\\n\" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"Format: deadline TASK_DESCRIPTION /by YYYY-MM-DD HH:MM:SS\\n\" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"Examples:\\n\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t- deadline assignment /by 2019-12-04 12:07:08\\n\" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t- deadline watch TV /by 1988-06-27 08:46:37\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public final String event \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"[ event ]\\n\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"Adds an event task to the task list.\\n\" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"Format: event TASK_DESCRIPTION /at YYYY-MM-DD HH:MM:SS\\n\" +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"Examples: \\n\" +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t- event party /at 2019-12-04 12:07:08\\n\" +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t- event project meeting /at 1988-06-27 08:46:37\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public final String list \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"[ list ]\\n\" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"List out all the tasks in the task list.\\n\" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"Format: list\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public final String delete \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"[ delete ]\\n\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"Deletes n number of tasks at once from the list or delete all tasks at once.\\n\" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"Format: delete TASK_NUM1 and TASK_NUM2...OR delete all\\n\" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"Examples:\\n\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t- delete 3 and 5\\n\" +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t- delete 6\\n\" +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t- delete all\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public final String done \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"[ done ]\\n\" +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"Marks a task as done.\\n\" +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"Format: done TASK_NUM\\n\" +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"Examples:\\n\" +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t- done 1\\n\" +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t- done 6\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 61
    }
  },
  {
    "path": "src/main/java/gazeeebo/notes/Note.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Maps notes to a particular date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** Stores the date of the note"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *  If the note is for a particular day, it will store that day\u0027s date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *  If the note is for a particular week, it will store the date of that week\u0027s Monday."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *  If the note is for a particular month, it will store the first date of that month."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *  */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public LocalDate noteDate; //yyyy-MM-dd"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The list that contains all the notes for a particular period ie day, week or month. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public ArrayList\u003cString\u003e notes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static DateTimeFormatter noteFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Constructor that maps a date to the first note for that date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param dateOfNote the starting date of the period"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param firstNote the first note to be added to the specified period"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public Note(String dateOfNote, String firstNote) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        noteDate \u003d LocalDate.parse(dateOfNote, noteFormatter);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        notes \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        notes.add(firstNote);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 1,
      "yueyuu": 31
    }
  },
  {
    "path": "src/main/java/gazeeebo/notes/NoteList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Contains the list of Note objects for a particular period."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class NoteList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The list of Note objects for day. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static ArrayList\u003cNote\u003e daily \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The list of Note objects for week. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static ArrayList\u003cNote\u003e weekly \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The list of Note objects for month. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static ArrayList\u003cNote\u003e monthly \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 1,
      "yueyuu": 14
    }
  },
  {
    "path": "src/main/java/gazeeebo/parsers/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.expenses.ExpenseCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Contact.ContactsCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Edit.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.note.AddNoteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.note.DeleteNoteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.note.EditNoteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.note.ListNoteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.places.PlacesCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.schedule.ScheduleDailyCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.schedule.ScheduleMonthlyCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.schedule.ScheduleWeeklyCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public static Command parse(String command) throws DukeException, IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] splitCommand \u003d command.split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (splitCommand[0].equals(\"list\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (command.contains(\"event\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                return new CategoryListCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (command.contains(\"deadline\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                return new CategoryListCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (command.contains(\"todo\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                return new CategoryListCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (command.contains(\"fixed\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                return new CategoryListCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (command.contains(\"timebound\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                return new CategoryListCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (command.equals(\"done list\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            return new DoneListCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (command.equals(\"undo list\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            return new UndoneListCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (splitCommand[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new DoneCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (splitCommand[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new DeleteCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (splitCommand[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new DeadlineCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } else if (command.contains(\"/after\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            return new DoAfterCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (splitCommand[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new EventCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (splitCommand[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new TodoCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (command.contains(\"/between\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            return new TimeboundCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (splitCommand[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new FindCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (command.equals(\"contact\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            return new ContactsCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } else if (command.equals(\"expenses\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            return new ExpenseCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else if (command.equals(\"places\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new PlacesCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (splitCommand[0].equals(\"bye\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } else if (command.contains(\"/require\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            return new FixDurationCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (splitCommand[0].equals(\"reschedule\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return new RescheduleCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (splitCommand[0].equals(\"sort\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return new SortCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (splitCommand[0].equals(\"scheduleDaily\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return new ScheduleDailyCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (splitCommand[0].equals(\"scheduleWeekly\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return new ScheduleWeeklyCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (splitCommand[0].equals(\"scheduleMonthly\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return new ScheduleMonthlyCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (splitCommand[0].equals(\"snooze\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return new SnoozeCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (splitCommand[0].equals(\"tentative\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return new TentativeEventCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (splitCommand[0].equals(\"confirm\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return new ConfirmTentativeCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (splitCommand[0].contains(\"undone\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new UndoneCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (splitCommand[0].equals(\"undo\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (splitCommand[0].equals(\"edit\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            return new EditCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (splitCommand[0].equals(\"addNote\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return new AddNoteCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (splitCommand[0].equals(\"editNote\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return new EditNoteCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (splitCommand[0].equals(\"deleteNote\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return new DeleteNoteCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (splitCommand[0].equals(\"listNote\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return new ListNoteCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (splitCommand[0].equals(\"help\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309463"
        },
        "content": "       } else if (command.equals(\"change password\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            return new ChangePasswordCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (command.contains(\"#\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            return new TagCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 24,
      "JasonLeeWeiHern": 9,
      "mononokehime14": 7,
      "e0309463": 26,
      "yueyuu": 42
    }
  },
  {
    "path": "src/main/java/gazeeebo/storage/NoteStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Reads and writes data for the NoteCommands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class NoteStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Writes the whole list of Notes to the specified text file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Overrides the existing data in the file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param fileName the text file to write the data to"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param listToWrite the list of Notes to be written to the text file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if the file specified cannot be written to or is not a file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void writeToFile(String fileName, ArrayList\u003cNote\u003elistToWrite) throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        FileWriter file \u003d new FileWriter(\"data/note/\" + fileName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Note n : listToWrite) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            file.write(Note.noteFormatter.format(n.noteDate) + \"\\n\"); //date"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            file.write(n.notes.size() + \"\\n\"); //size of individual note list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (String s: n.notes) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                file.write(s + \"\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        file.close();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Reads the list of Notes from a text file and stores it into the given ArrayList\u003c\u003eNotes\u003c/\u003e."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param fileName the text file the data is to be read from"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param listToReadTo the ArrayList\u003c\u003eNotes\u003c/\u003e that the data is to be stored in"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if the file specified cannot be created or is not a file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void readFromFile(String fileName, ArrayList\u003cNote\u003e listToReadTo) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        File data \u003d new File(\"data/note/\" + fileName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (data.createNewFile()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Existing \" + fileName + \" file does not exist.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"I have created a new text file for you.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert !data.createNewFile() : \"There is no \" + fileName + \" file to read from (NoteStorage)\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Scanner txtFile \u003d new Scanner(data);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        while (txtFile.hasNextLine()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            String date \u003d txtFile.nextLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            int sizeOfNotes \u003d Integer.parseInt(txtFile.nextLine());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            String firstNote \u003d txtFile.nextLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Note newNote \u003d new Note(date, firstNote);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (int i \u003d 0; i \u003c sizeOfNotes-1; i++) { //sizeOfNotes-1 as the first note has already been added"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                newNote.notes.add(txtFile.nextLine());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            listToReadTo.add(newNote);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 1,
      "yueyuu": 59
    }
  },
  {
    "path": "src/main/java/gazeeebo/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String absolutePath \u003d \"Save.txt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private String absolutePath_password \u003d \"Password.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private String absolutePath_Contact \u003d \"Contact.txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private String absolutePath_Expenses \u003d \"Expenses.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String absolutePath_Places \u003d \"Places.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private String absolutePath_Trivia \u003d \"Trivia.txt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void Storages(String fileContent) throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(absolutePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public ArrayList\u003cTask\u003e ReadFile() throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e tList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (new File(absolutePath).exists()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            File file \u003d new File(absolutePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                String[] details \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (details[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    Todo t \u003d new Todo(details[2].trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        t.isDone \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        t.isDone \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    tList.add(t);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (details[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    Deadline d \u003d new Deadline(details[2].trim(), details[3].substring(3).trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        d.isDone \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        d.isDone \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    tList.add(d);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (details[0].equals(\"E)\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    Event e \u003d new Event(details[2].trim(), details[3].substring(3).trim());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        e.isDone \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        e.isDone \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    tList.add(e);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (details[0].equals(\"P\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    Timebound tb \u003d new Timebound(details[2].trim(), details[3].substring(8).trim());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        tb.isDone \u003d true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        tb.isDone \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    tList.add(tb);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (details[0].equals(\"FD\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    FixedDuration FD \u003d new FixedDuration(details[2].trim(), details[3].trim());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        FD.isDone \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        FD.isDone \u003d false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    tList.add(FD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (details[0].equals(\"DA\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    DoAfter DA \u003d new DoAfter(details[3].trim(), details[3].trim(), details[2].trim());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        DA.isDone \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        DA.isDone \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    tList.add(DA);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                } else if (details[0].equals(\"TE\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    ArrayList\u003cString\u003e timeslots \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    for (int i \u003d 3; i \u003c details.length; i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        timeslots.add(details[i]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    TentativeEvent TE \u003d new TentativeEvent(details[2].trim(), timeslots);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        TE.isDone \u003d true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        TE.isDone \u003d false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    tList.add(TE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    if (details[3].contains(\"at:\") || details[3].contains(\"by:\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        Event e \u003d new Event(details[2].trim(), details[3].substring(3).trim());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            e.isDone \u003d true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            e.isDone \u003d false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        tList.add(e);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    } else if (details[0].contains(\"P\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        Timebound tb \u003d new Timebound(details[2].trim(), details[3].trim());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            tb.isDone \u003d true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            tb.isDone \u003d false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        tList.add(tb);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        FixedDuration FD \u003d new FixedDuration(details[2].trim(), details[3].trim());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            FD.isDone \u003d true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            FD.isDone \u003d false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        tList.add(FD);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return tList;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void Storages_password(String fileContent) throws IOException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(absolutePath_password);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public ArrayList\u003cString\u003e Password() throws IOException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cString\u003e passwordList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        if (new File(absolutePath_password).exists()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            File file \u003d new File(absolutePath_password);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                passwordList.add(sc.nextLine());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return passwordList;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * THis method writes to the file Contact.txt"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param fileContent save the contact information into this file"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void Storages_Contact(String fileContent) throws IOException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(absolutePath_Contact);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * This method read from the file Contact.txt and put the details into a HashMap"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return Returns the HashMap of contacts, key is the contact name and the value is the phone number"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public HashMap\u003cString, String\u003e Contact() throws IOException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        HashMap\u003cString, String\u003e contactList \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        if (new File(absolutePath_Contact).exists()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            File file \u003d new File(absolutePath_Contact);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String[] split \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                contactList.put(split[0], split[1]);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return contactList;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void Storages_Expenses(String fileContent) throws IOException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(absolutePath_Expenses);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        public void Storages_Places (String fileContent) throws IOException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(absolutePath_Places);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            fileWriter.flush();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        public HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e Expenses () throws IOException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e expenses \u003d new HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (new File(absolutePath_Expenses).exists()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                File file \u003d new File(absolutePath_Expenses);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                while (sc.hasNext()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    ArrayList\u003cString\u003e itemAndPriceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    String[] split \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    LocalDate dateOfPurchase \u003d LocalDate.parse(split[0], fmt);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    boolean isEqual \u003d false;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        if (dateOfPurchase.equals(key)) { //if date equal"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            expenses.get(key).add(split[1]);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            isEqual \u003d true;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (isEqual \u003d\u003d false) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        itemAndPriceList.add(split[1]);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        expenses.put(dateOfPurchase, itemAndPriceList);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            return expenses;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        public HashMap\u003cString, String\u003e Read_Places () throws IOException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            HashMap\u003cString, String\u003e placesList \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (new File(absolutePath_Places).exists()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                File file \u003d new File(absolutePath_Places);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                while (sc.hasNext()) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    String[] split \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    placesList.put(split[0], split[1]);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return placesList;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void Read_Trivia(TriviaManager triviamanager) throws IOException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if (new File(absolutePath_Trivia).exists()) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            File file \u003d new File(absolutePath_Trivia);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String InputCommand\u003d sc.nextLine();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if(triviamanager.CommandMemory.containsKey(InputCommand.split(\" \")[0])) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    ArrayList\u003cString\u003e oldlist \u003d new ArrayList\u003cString\u003e(triviamanager.CommandMemory.get(InputCommand.split(\" \")[0]));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    oldlist.add(InputCommand);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    triviamanager.CommandMemory.put(InputCommand.split(\" \")[0], oldlist);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }else{"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    ArrayList\u003cString\u003e newlist \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    newlist.add(InputCommand);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    triviamanager.CommandMemory.put(InputCommand.split(\" \")[0],newlist);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void Storage_Trivia(String fileContent) throws IOException{"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        BufferedWriter fileWriter \u003d new BufferedWriter(new FileWriter(absolutePath_Trivia,true));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        fileWriter.newLine();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 45,
      "mononokehime14": 41,
      "JasonLeeWeiHern": 92,
      "e0309463": 65,
      "yueyuu": 22
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public LocalDateTime by ;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static DateTimeFormatter fmtD \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");//24h clock"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.by \u003d LocalDateTime.parse(by, fmtD);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return \"D\"+ \"|\" + super.getStatusIcon() + \"|\" + super.description + \"|\" + \"by: \" + by.format(fmtD);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String listFormat(){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return \"[D]\" + \"[\" + super.getStatusIcon() + \"] \" + super.description + \"(by:\" + by.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy HH:mm:ss\")) + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 3,
      "e0309463": 11,
      "yueyuu": 10
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/DoAfter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoAfter extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public String before;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public String after;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoAfter(String description, String before, String after) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        this.before \u003d before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        this.after \u003d after;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return \"DA\" + \"|\" + super.getStatusIcon() + \"|\" + after + \"|\" + before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String listFormat() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return \"[DA]\" + \"[\" + super.getStatusIcon() + \"] \" + after + \"(/after:\" + before + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 5,
      "yueyuu": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public LocalDate date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public LocalTime start;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public LocalTime end;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static DateTimeFormatter fmtED \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"); //formatter for date"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static DateTimeFormatter fmtET \u003d DateTimeFormatter.ofPattern(\"HH:mm:ss\"); //formatter for time"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public Event(String description, String at) throws DateTimeParseException, ArrayIndexOutOfBoundsException{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] dateTime \u003d at.split(\" \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] time \u003d dateTime[1].split(\"-\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.date \u003d LocalDate.parse(dateTime[0], fmtED);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.start \u003d LocalTime.parse(time[0], fmtET);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.end \u003d LocalTime.parse(time[1], fmtET);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return \"E\"+ \"|\" + super.getStatusIcon() + \"|\" + super.description + \"|\" + \"at: \" + fmtED.format(date)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \" \" + this.start.format(fmtET) + \"-\" + this.end.format(fmtET);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String listFormat(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String dateString \u003d date.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy\"));// You can change to this format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return \"[E]\" + \"[\" + super.getStatusIcon() + \"]\" + super.description + \"(at:\" + dateString + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + this.start.format(fmtET) + \"-\" + this.end.format(fmtET) + \")\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 1,
      "e0309463": 11,
      "yueyuu": 25
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/FixedDuration.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "public class FixedDuration extends Task {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    public String duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public FixedDuration(String description, String duration) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return \"FD\"+ \"|\" + super.getStatusIcon() + \"|\" + super.description + \"|\" + duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String listFormat(){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return \"[FD]\" + \"[\" + super.getStatusIcon() + \"] \" + super.description + \"(requires:\" + duration + \")\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 3,
      "yueyuu": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return (isDone ? \"D\" : \"ND\"); //return tick or X symbols"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String listFormat() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 1,
      "yueyuu": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/TentativeEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class TentativeEvent extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public ArrayList\u003cString\u003e tentativetimes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public TentativeEvent(String description,ArrayList\u003cString\u003e tentativetimes) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.tentativetimes \u003d tentativetimes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String timeslots \u003d \"TE\"+ \"|\" + super.getStatusIcon() + \"|\" + super.description ;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0; i \u003c tentativetimes.size(); i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            timeslots +\u003d  \"|\" + tentativetimes.get(i);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return timeslots;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String listFormat(){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String timeslots \u003d \"[TE]\"+ \"[\" + super.getStatusIcon() + \"] \"+description+\"\\n\" ;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0; i \u003c tentativetimes.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            DateTimeFormatter fmtED \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            DateTimeFormatter fmtET \u003d DateTimeFormatter.ofPattern(\"HH:mm:ss\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String[] dateTime \u003d tentativetimes.get(i).split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String[] time \u003d dateTime[1].split(\"-\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String datestring \u003d LocalDate.parse(dateTime[0], fmtED).format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String output \u003d datestring + \" \"+  LocalTime.parse(time[0], fmtET).format(fmtET) + \"-\" + LocalTime.parse(time[1], fmtET).format(fmtET) + \")\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if(i\u003d\u003d0){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                timeslots +\u003d \"at \"+output+\"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                timeslots +\u003d \"or \"+output+\"\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return timeslots;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 42,
      "yueyuu": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/Timebound.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class Timebound extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public LocalDate dateStart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public LocalDate dateEnd;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public static DateTimeFormatter fmtD \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public Timebound (String description, String period) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String[] date \u003d period.split(\" and \");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        this.dateStart \u003d LocalDate.parse(date[0], fmtD);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        this.dateEnd \u003d LocalDate.parse(date[1], fmtD);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return \"P\"+ \"|\" + super.getStatusIcon() + \"|\" + super.description + \"|\" + dateStart.format(fmtD) + \" and \" + dateEnd.format(fmtD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String listFormat(){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return \"[P]\" + \"[\" + super.getStatusIcon() + \"] \" + super.description + \"(between: \" + dateStart.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy\")) + \" and \" + dateEnd.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy\")) + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0323290": 20,
      "JasonLeeWeiHern": 12,
      "yueyuu": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"T\"+ \"|\" + super.getStatusIcon() + \"| \" + super.description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String listFormat(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return \"[T]\" + \"[\" + super.getStatusIcon() + \"] \" + super.description ;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 1,
      "yueyuu": 2,
      "-": 12
    }
  },
  {
    "path": "src/test/java/ContactsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.Contact.AddContactCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Contact.ContactsCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.Contact.DeleteContactCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.Contact.ListContactCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class ContactsCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    TriviaManager triviaManager \u003d new TriviaManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    Stack\u003cString\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testwelcome() throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ContactsCommand testc \u003d new ContactsCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"esc\".getBytes());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        testc.execute(list, ui, storage, commandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"CONTACTS PAGE\\n\\n\" +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"Name:                         | Number:\\n------------------------------------------\\n\" +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"RenHao                        | 8712 2345\\n------------------------------------------\\n\" +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"janel                         | 9123 4567\\n------------------------------------------\\n\" +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"jason                         | 9123 4567\\n------------------------------------------\\n\" +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"jess                          | 9123 4567\\n------------------------------------------\\n\" +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"yueyu                         | 9876 5432\\n------------------------------------------\\n\" +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"\\nNUS CONTACTS:\\n\" +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"NUS Campus.S(Bukit Timah)     | 6516 3636\\n------------------------------------------\\n\" +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"NUS Campus.S(KR)              | 6874 1616\\n------------------------------------------\\n\" +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"NUS Campus.S(Outram)          | 6222 5568\\n------------------------------------------\\n\" +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"NUS Lifeline                  | 6516 7777\\n------------------------------------------\\n\" +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"NUS OCS BTC                   | 6516 3636\\n------------------------------------------\\n\" +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"NUS OCS KRC                   | 6874 1616\\n------------------------------------------\\n\" +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"NUS OCS UTOWN                 | 6601 2004\\n------------------------------------------\\n\" +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"NUS OSHE                      | 6778 6304\\n------------------------------------------\\n\", output.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testAddContactsCommand() throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e(); //Read the file"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Map\u003cString, String\u003e contact \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"Test,9625 1822\".getBytes());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        AddContactCommand test \u003d new AddContactCommand(ui, contact);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Input in this format: Name,Number\\n\" +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                \"Okay we have successfully added a new contact - Test,9625 1822\\n\", output.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testDeleteInContactsCommand() throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e(); //Read the file"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Map\u003cString, String\u003e contact \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"jason\", \"9625 1722\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.FullCommand \u003d \"delete jason\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        DeleteContactCommand test \u003d new DeleteContactCommand(ui, contact);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"jason has been removed.\\n\", output.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testDeleteNotInContactsCommand() throws IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e(); //Read the file"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Map\u003cString, String\u003e contact \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"janel\", \"9625 1722\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.FullCommand \u003d \"delete jason\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        DeleteContactCommand test \u003d new DeleteContactCommand(ui, contact);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"jason is not in the list.\\n\", output.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testDeleteWrongFormatContactsCommand() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e(); //Read the file"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Map\u003cString, String\u003e contact \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"janel\", \"9625 1722\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.FullCommand \u003d \"delete\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        DeleteContactCommand test \u003d new DeleteContactCommand(ui, contact);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"You need to indicate what you want to delete, Format: delete name\\n\", output.toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testListContactsCommand() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e(); //Read the file"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Map\u003cString, String\u003e contact \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String LINE_BREAK \u003d \"------------------------------------------\\n\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"janel\", \"9625 1722\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"jason\", \"9825 1822\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ListContactCommand test \u003d new ListContactCommand(contact, LINE_BREAK);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Name:                         | Number:\\n\" +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LINE_BREAK + \"janel                         | 9625 1722\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + LINE_BREAK + \"jason                         | 9825 1822\\n\" +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LINE_BREAK + \"\\nNUS CONTACTS:\\n\", output.toString());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 7,
      "JasonLeeWeiHern": 65,
      "e0309463": 50,
      "yueyuu": 2
    }
  },
  {
    "path": "src/test/java/DoAfterCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.DoAfter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class DoAfterCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    DoAfter testdoAfter \u003d new DoAfter(\"read book\",\"read book\",\"return book\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testtoString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"DA|ND|return book|read book\", testdoAfter.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testlistformat() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"[DA][ND] return book(/after:read book)\", testdoAfter.listFormat());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 2,
      "JasonLeeWeiHern": 17,
      "yueyuu": 1
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void test() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cString\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            deadlineCommand.execute(tasks,ui,storage,commandStack,deletedTask,triviaManager);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch(IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"An IOException was caught :\" +e.getStackTrace()+\"The system cannot find the path specified\", e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"Date Time has to be in YYYY-MM-DD HH:mm:ss format\",e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(e.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException e){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(e.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testUpcomingTasks() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.UpcomingTask(tasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"Date Time has to be in YYYY-MM-DD HH:mm:ss format\",e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException e){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(e.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 3,
      "JasonLeeWeiHern": 2,
      "e0309463": 7,
      "yueyuu": 3,
      "-": 34
    }
  },
  {
    "path": "src/test/java/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Edit.EditBothCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Edit.EditDescriptionCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Edit.EditTimeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testEditTime() throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Deadline testd \u003d new Deadline(\"tutorial homework\", \"2019-12-12 10:10:10\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream third \u003d new ByteArrayInputStream(\"2020-12-12 11:11:11\".getBytes());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(third);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        EditTimeCommand test \u003d new EditTimeCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your time:\\n\" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"Ok, we have edited your Deadline time.\" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"\\n\\tFrom: [D][ND] tutorial homework(by:12 Dec 2019 10:10:10)\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"\\n\\tTo:   [D][ND] tutorial homework(by:12 Dec 2020 11:11:11)\\n\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testEditDescription() throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Deadline testd \u003d new Deadline(\"tutorial homework\", \"2019-12-12 10:10:10\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream third \u003d new ByteArrayInputStream(\"tutorial assignment\".getBytes());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(third);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        EditDescriptionCommand test \u003d new EditDescriptionCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description:\\n\" +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"Ok, we have edited your Deadline description.\" +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"\\n\\tFrom: [D][ND] tutorial homework(by:12 Dec 2019 10:10:10)\" +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"\\n\\tTo:   [D][ND] tutorial assignment(by:12 Dec 2019 10:10:10)\\n\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testBoth() throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Event testE \u003d new Event(\"banner rev\", \"2019-12-12 10:10:10-11:00:00\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream third \u003d new ByteArrayInputStream(\"basketball trg /at 2019-12-12 09:00:00-11:00:00\".getBytes());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(third);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        EditBothCommand test \u003d new EditBothCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description \u0026 date:\\n\" +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"Ok, we have edited your Event description and time.\" +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"\\n\\tFrom: [E][ND]banner rev(at:12 Dec 2019 10:10:10-11:00:00)\" +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"\\n\\tTo:   [E][ND]basketball trg (at:12 Dec 2019 09:00:00-11:00:00)\\n\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 2,
      "JasonLeeWeiHern": 73,
      "e0309463": 7,
      "yueyuu": 3
    }
  },
  {
    "path": "src/test/java/EventCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.EventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class EventCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //creating a stream to hold the output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    //saving the original System.out"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        //tell java to print to my own stream"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void restoreStream(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_scheduleAnomalies_clash1() throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //start time of clashing events are the same"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.FullCommand \u003d \"event sleep/at 2019-12-12 03:03:03-04:04:04\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand ec \u003d new EventCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cString\u003e CommandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Event e \u003d new Event(\"eat\", \"2019-12-12 03:03:03-04:04:04\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ec.execute(tasks, ui, storage, CommandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ParseException | DukeException e1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"The following event(s) clash with your current event:\\r\\n\" +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"1.[E][ND]eat(at:12 Dec 2019 03:03:03-04:04:04)\\r\\n\\r\\n\" +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Got it. I\u0027ve added this task:\\r\\n\" +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"[E][ND]sleep(at:12 Dec 2019 03:03:03-04:04:04)\\r\\n\" +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"Now you have 2 tasks in the list.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_scheduleAnomalies_clash2() throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //start time of new event being added is earlier than old event but clash still occurs"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.FullCommand \u003d \"event sleep/at 2019-12-12 02:03:03-03:10:04\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        EventCommand ec \u003d new EventCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cString\u003e CommandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Event e \u003d new Event(\"eat\", \"2019-12-12 03:03:03-04:04:04\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        tasks.add(e);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ec.execute(tasks, ui, storage, CommandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ParseException | DukeException e1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"The following event(s) clash with your current event:\\r\\n\" +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"1.[E][ND]eat(at:12 Dec 2019 03:03:03-04:04:04)\\r\\n\\r\\n\" +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"Got it. I\u0027ve added this task:\\r\\n\" +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"[E][ND]sleep(at:12 Dec 2019 02:03:03-03:10:04)\\r\\n\" +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"Now you have 2 tasks in the list.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_scheduleAnomalies_clash3() throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //start time of new event being added is after that of old event but clash still occurs"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.FullCommand \u003d \"event sleep/at 2019-12-12 03:10:03-03:50:04\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        EventCommand ec \u003d new EventCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cString\u003e CommandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Event e \u003d new Event(\"eat\", \"2019-12-12 03:03:03-04:04:04\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        tasks.add(e);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ec.execute(tasks, ui, storage, CommandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ParseException | DukeException e1) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"The following event(s) clash with your current event:\\r\\n\" +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"1.[E][ND]eat(at:12 Dec 2019 03:03:03-04:04:04)\\r\\n\\r\\n\" +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"Got it. I\u0027ve added this task:\\r\\n\" +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"[E][ND]sleep(at:12 Dec 2019 03:10:03-03:50:04)\\r\\n\" +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"Now you have 2 tasks in the list.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_scheduleAnomalies_noClash() throws IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.FullCommand \u003d \"event sleep/at 2019-12-12 12:03:03-14:10:04\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        EventCommand ec \u003d new EventCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cString\u003e CommandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Event e \u003d new Event(\"eat\", \"2019-12-12 03:03:03-04:04:04\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        tasks.add(e);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ec.execute(tasks, ui, storage, CommandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ParseException | DukeException e1) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task:\\r\\n\" +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"[E][ND]sleep(at:12 Dec 2019 12:03:03-14:10:04)\\r\\n\" +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Now you have 2 tasks in the list.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 7,
      "mononokehime14": 9,
      "e0309463": 28,
      "yueyuu": 52,
      "-": 40
    }
  },
  {
    "path": "src/test/java/FixDurationCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.FixedDuration;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class FixDurationCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    FixedDuration testFD \u003d new FixedDuration(\"playing basketball\", \"4 hours\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testtoString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"FD|ND|playing basketball|4 hours\", testFD.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testlistformat() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"[FD][ND] playing basketball(requires:4 hours)\", testFD.listFormat());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 2,
      "JasonLeeWeiHern": 15,
      "yueyuu": 1
    }
  },
  {
    "path": "src/test/java/RecurringCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.RecurringCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class RecurringCommandTest  {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream(){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testRecurring() throws ParseException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        RecurringCommand testR \u003d new RecurringCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Deadline newd \u003d new Deadline(\"yearly assignment\", \"2019-01-01 01:01:01\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.FullCommand \u003d \"done 1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        testR.AddRecurring(list, 0,list.get(0).toString(),storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"\\nI\u0027ve automatically added this yearly task again:\\n[D][ND] yearly assignment(by:01 Jan 2020 01:01:01)\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\nNow you have \" + list.size() + \" tasks in the list.\\n\",output.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0323290": 3,
      "JasonLeeWeiHern": 42,
      "e0309463": 2,
      "yueyuu": 3
    }
  },
  {
    "path": "src/test/java/RescheduleCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.SnoozeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class RescheduleCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testExecuteSnooze() throws ParseException,IOException,DukeException{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SnoozeCommand snoozeCommand \u003d new SnoozeCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cString\u003e CommandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.FullCommand \u003d \"deadline return book /by 2008-07-07 03:03:03\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            deadlineCommand.execute(tasks,ui,storage, CommandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            dukeException.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.FullCommand \u003d \"reschedule 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int index \u003d0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String Decription \u003d tasks.get(index).description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.FullCommand\u003d\"2019-09-18 05:05:05\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Task RescheduledDeadline \u003d new Deadline(Decription, ui.FullCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(RescheduledDeadline);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(tasks.get(0).toString(),\"D|ND|return book |by: 2019-09-18 05:05:05\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 3,
      "mononokehime14": 9,
      "e0309463": 11,
      "yueyuu": 4,
      "-": 19
    }
  },
  {
    "path": "src/test/java/ShowWelcomeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class ShowWelcomeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void test() throws IOException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String logo \u003d \" ___   ___  ___  ___  ___  ___  ___   ___ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"|     |   |   / |    |    |    |   \\\\ |   |\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"|  __ |__ |  /  |___ |___ |___ |___| |   |\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"|___| |   | /__ |___ |___ |___ |___/ |___|\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"jjjjjj\".getBytes());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream second \u003d new ByteArrayInputStream(\"jjjry\".getBytes());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(second);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"\\nWelcome to Gazeebo\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\n__________________________________________\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + logo"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\n__________________________________________\\n\",ui.showWelcome());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 25,
      "e0309463": 1
    }
  },
  {
    "path": "src/test/java/SnoozeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.SnoozeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SnoozeCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void testExecuteSnooze() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        SnoozeCommand snoozeCommand \u003d new SnoozeCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cString\u003e CommandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.FullCommand \u003d \"deadline return book /by 2008-07-07 03:03:03\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            deadlineCommand.execute(tasks,ui,storage, CommandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (DukeException | ParseException |IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int year \u003d 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int day \u003d1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int month \u003d1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int hour \u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String Description \u003d tasks.get(index).description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String date \u003d tasks.get(index).toString().split(\"\\\\|\")[3].substring(4);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        LocalDateTime newDate  \u003d LocalDateTime.parse(date, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        newDate \u003d newDate.plusYears(year).plusMonths(month).plusDays(day).plusHours(hour);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String newBy\u003d newDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Task snoozedDeadline \u003d new Deadline(Description,newBy);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(snoozedDeadline);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(tasks.get(0).toString(),\"D|ND|return book |by: 2009-08-08 04:03:03\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 3,
      "mononokehime14": 20,
      "e0309463": 11,
      "yueyuu": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/TentativeEventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.TentativeEvent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class TentativeEventTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void testListFormat() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        String description \u003d \"return book\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e tentativetimes \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        tentativetimes.add(\"2008-06-07 05:05:05-08:08:08\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        tentativetimes.add(\"2007-03-02 04:04:04-10:10:10\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TentativeEvent newtentative \u003d new TentativeEvent(description,tentativetimes);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String timeslots \u003d \"[TE]\"+ \"[\" + newtentative.getStatusIcon() + \"] \"+description+\"\\n\" ;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c tentativetimes.size(); i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            DateTimeFormatter fmtED \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            DateTimeFormatter fmtET \u003d DateTimeFormatter.ofPattern(\"HH:mm:ss\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String[] dateTime \u003d tentativetimes.get(i).split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String[] time \u003d dateTime[1].split(\"-\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String datestring \u003d LocalDate.parse(dateTime[0], fmtED).format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String output \u003d datestring + \" \"+  LocalTime.parse(time[0], fmtET).format(fmtET) + \"-\" + LocalTime.parse(time[1], fmtET).format(fmtET) + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if(i\u003d\u003d0){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                timeslots +\u003d \"at \"+output+\"\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                timeslots +\u003d \"or \"+output+\"\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(newtentative.listFormat(),timeslots);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 15,
      "e0309463": 2,
      "yueyuu": 3,
      "-": 16
    }
  },
  {
    "path": "src/test/java/TimeboundTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class TimeboundTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private Timebound timeboundTest \u003d new Timebound(\"task to be done\", \"2019-08-12 and 2019-08-13\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    void getDescriptionTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"[P][ND] task to be done(between: 12 Aug 2019 and 13 Aug 2019)\", timeboundTest.listFormat());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    void getFormatTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"P|ND|task to be done|2019-08-12 and 2019-08-13\", timeboundTest.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 5,
      "JasonLeeWeiHern": 2,
      "yueyuu": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/TriviaTest/TriviaManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package TriviaTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class TriviaManagerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    //private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    //private final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        //System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        //System.setErr(originalErr);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void testLearnInput() throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String testinput \u003d \"Love Qinhuai River\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        triviaManager.learnInput(testinput,storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        assertEquals(\"Love Qinhuai River\",triviaManager.CommandMemory.get(\"Love\").get(0));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        triviaManager.CommandMemory.remove(\"Love\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void testShowPossibleInput() throws IOException{"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String testinput \u003d \"Love Qinhuai River\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager\u003d new TriviaManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        triviaManager.learnInput(testinput,storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        triviaManager.showPossibleInputs(\"Love\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        System.out.print(\"Could it be one of the below inputs?\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        System.out.print(triviaManager.CommandMemory.get(\"Love\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        assertEquals(\"Could it be one of the below inputs?\\n\"+triviaManager.CommandMemory.get(\"Love\").toString()+\"\\n\",outContent.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        triviaManager.CommandMemory.remove(\"Love\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 52,
      "yueyuu": 1
    }
  },
  {
    "path": "src/test/java/UndoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.UndoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void restoreStream(){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void EmptyCommandStackTest() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cString\u003e CommandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            undoCommand.execute(tasks, ui, storage, CommandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ParseException | IOException | DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"The previous command cannot be undo\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 3,
      "e0309463": 45,
      "yueyuu": 3
    }
  },
  {
    "path": "src/test/java/note/AddNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.note.AddNoteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "class AddNoteCommandTest extends AddNoteCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void restoreStream(){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //processCommand() tests"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void processCommand_emptyDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d \"addNote\".split(\" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"OOPS!!! The description of a(n) addNote cannot be empty.\", d.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void processCommand_wrongSecondWord_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d \"addNote weekly 2019-09-09\".split(\" \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"The second word in the command has to be \\\u0027day\\\u0027, \\\u0027week\\\u0027 or \\\u0027month\\\u0027.\", d.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void processCommand_emptyDateField_exceptionThrown() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d \"addNote day\".split(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"Please input a date.\", d.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void processCommand_wrongDateFormatForDay_exceptionThrown() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d \"addNote day 2019-1-1\".split(\" \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"The date has to been in YYYY-MM-DD format.\", d.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void processCommand_wrongDateFormatForWeek_exceptionThrown() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d \"addNote week 2019-2-1\".split(\" \"); //this date is not a Monday"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"The date has to been in YYYY-MM-DD format.\", d.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void processCommand_wrongDateFormatForMonth_exceptionThrown() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d \"addNote month 2019-2-1\".split(\" \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"The date has to been in YYYY-MM format.\", d.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void processCommand_dateForWeekIsNotMonday_exceptionThrown() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d \"addNote week 2019-02-01\".split(\" \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"OOPS!!! The date provided must be a Monday.\", d.getMessage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //execute() tests"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_day_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.FullCommand \u003d \"addNote day 2019-10-12\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.FullCommand.split(\" \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d \"testing note\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note noteSpecified;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"day\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.daily, userDate, usersNote, command[2], \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"week\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.weekly, userDate, usersNote, command[2], \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"month\":"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.monthly, userDate, usersNote, command[2], \"NoteMonthly.txt\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d null;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assert noteSpecified !\u003d null : \"there is a bug in AddNoteCommand\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printConfirmationMessage(usersNote, noteSpecified.notes.size(), command[1]);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"The \" + command[1] + \" file cannot be opened.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this note to that day:\\r\\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"testing note\\r\\n\" + \"Now you have 1 note(s) for that day.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_week_success() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.FullCommand \u003d \"addNote week 2019-10-14\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.FullCommand.split(\" \");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d \"testing note\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note noteSpecified;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"day\":"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.daily, userDate, usersNote, command[2], \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"week\":"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.weekly, userDate, usersNote, command[2], \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"month\":"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.monthly, userDate, usersNote, command[2], \"NoteMonthly.txt\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d null;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assert noteSpecified !\u003d null : \"there is a bug in AddNoteCommand\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printConfirmationMessage(usersNote, noteSpecified.notes.size(), command[1]);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"The \" + command[1] + \" file cannot be opened.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this note to that week:\\r\\n\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"testing note\\r\\n\" + \"Now you have 1 note(s) for that week.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_month_success() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.FullCommand \u003d \"addNote month 2019-12\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.FullCommand.split(\" \");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d \"testing note\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note noteSpecified;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"day\":"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.daily, userDate, usersNote, command[2], \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"week\":"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.weekly, userDate, usersNote, command[2], \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"month\":"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.monthly, userDate, usersNote, command[2], \"NoteMonthly.txt\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d null;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assert noteSpecified !\u003d null : \"there is a bug in AddNoteCommand\";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printConfirmationMessage(usersNote, noteSpecified.notes.size(), command[1]);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"The \" + command[1] + \" file cannot be opened.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this note to that month:\\r\\n\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"testing note\\r\\n\" + \"Now you have 1 note(s) for that month.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 4,
      "yueyuu": 230
    }
  },
  {
    "path": "src/test/java/note/DeleteNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.note.DeleteNoteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "class DeleteNoteCommandTest extends DeleteNoteCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void restoreStream(){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_day_success() throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note note \u003d new Note(\"2020-09-11\", \"note 1\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        note.notes.add(\"note 2\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.daily.add(note);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.FullCommand \u003d \"deleteNote day 2020-09-11 2\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        execute(null, ui, null, null, null,null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve deleted this note for that day:\\r\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"note 2\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_week_success() throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note note \u003d new Note(\"2020-01-06\", \"note 1\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        note.notes.add(\"note 2\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.weekly.add(note);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.FullCommand \u003d \"deleteNote week 2020-01-06 2\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        execute(null, ui, null, null, null,null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve deleted this note for that week:\\r\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"note 2\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_month_success() throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note note \u003d new Note(\"2020-03-01\", \"note 1\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        note.notes.add(\"note 2\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.monthly.add(note);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.FullCommand \u003d \"deleteNote month 2020-03 2\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        execute(null, ui, null, null, null,null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve deleted this note for that month:\\r\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"note 2\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_noteNumberNotSpecified_errorMessagePrinted() throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.FullCommand \u003d \"deleteNote month 2020-03\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        execute(null, ui, null, null, null,null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Please specify a note number.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_noteNumberNonExistent_errorMessagePrinted() throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note note \u003d new Note(\"2020-09-11\", \"note 1\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        note.notes.add(\"note 2\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.daily.add(note);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.FullCommand \u003d \"deleteNote day 2020-09-11 3\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        execute(null, ui, null, null, null,null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"OOPS!!! That note number does not exist.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_noNotesOnSpecifiedDay_errorMessagePrinted() throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.FullCommand \u003d \"deleteNote day 2020-12-29 3\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        execute(null, ui, null, null, null,null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"OOPS!!! There are no notes for this day to delete.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 11,
      "yueyuu": 80
    }
  },
  {
    "path": "src/test/java/note/EditNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.note.EditNoteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "class EditNoteCommandTest extends EditNoteCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void restoreStream(){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void editNoteInList_noteNumberNonExistent_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.daily.add(new Note(\"2019-08-11\", \"note to be edited\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2019-08-11\", Note.noteFormatter);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            editNoteInList(3, NoteList.daily, date, \"edited note\", \"day\", \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"OOPS!!! That note number does not exist.\", d.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void editNoteInList_noNotesOnSpecifiedDay_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2019-06-03\", Note.noteFormatter);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            editNoteInList(1, NoteList.weekly, date, \"edited note\", \"week\", \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"OOPS!!! There are no notes for this week to edit from.\", d.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_noteNumberNotSpecified_errorMessagePrinted() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.FullCommand \u003d \"editNote day 2019-08-11\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.FullCommand.split(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int noteNum;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            noteNum \u003d Integer.parseInt(command[3]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException v) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please specify a note number.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Please specify a note number.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_day_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.daily.add(new Note(\"2019-08-11\", \"note to be edited\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.FullCommand \u003d \"editNote day 2019-08-11 1\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.FullCommand.split(\" \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"editNote\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int noteNum;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            noteNum \u003d Integer.parseInt(command[3]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException v) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please specify a note number.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d \"updated note\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"day\": editNoteInList(noteNum, NoteList.daily, userDate, usersNote, command[1], \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"week\": editNoteInList(noteNum, NoteList.weekly, userDate, usersNote, command[1], \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"month\": editNoteInList(noteNum, NoteList.monthly, userDate, usersNote, command[1], \"NoteMonthly.txt\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default: System.out.println(\"Bug in EditNoteCommand\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.exit(1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printEditSuccess(usersNote, command[1]);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(d);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve edited this note for that day:\\r\\n\" + \"updated note\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_week_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.weekly.add(new Note(\"2019-10-14\", \"note to be edited\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.FullCommand \u003d \"editNote week 2019-10-14 1\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.FullCommand.split(\" \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"editNote\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int noteNum;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            noteNum \u003d Integer.parseInt(command[3]);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException v) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please specify a note number.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d \"updated note\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"day\": editNoteInList(noteNum, NoteList.daily, userDate, usersNote, command[1], \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"week\": editNoteInList(noteNum, NoteList.weekly, userDate, usersNote, command[1], \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"month\": editNoteInList(noteNum, NoteList.monthly, userDate, usersNote, command[1], \"NoteMonthly.txt\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default: System.out.println(\"Bug in EditNoteCommand\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.exit(1);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printEditSuccess(usersNote, command[1]);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(d);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve edited this note for that week:\\r\\n\" + \"updated note\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_month_success() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.monthly.add(new Note(\"2019-08-01\", \"note to be edited\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.FullCommand \u003d \"editNote month 2019-08 1\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.FullCommand.split(\" \");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"editNote\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int noteNum;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            noteNum \u003d Integer.parseInt(command[3]);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException v) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please specify a note number.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d \"updated note\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"day\": editNoteInList(noteNum, NoteList.daily, userDate, usersNote, command[1], \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"week\": editNoteInList(noteNum, NoteList.weekly, userDate, usersNote, command[1], \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"month\": editNoteInList(noteNum, NoteList.monthly, userDate, usersNote, command[1], \"NoteMonthly.txt\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default: System.out.println(\"Bug in EditNoteCommand\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.exit(1);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printEditSuccess(usersNote, command[1]);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(d);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve edited this note for that month:\\r\\n\" + \"updated note\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 4,
      "yueyuu": 187
    }
  },
  {
    "path": "src/test/java/note/ListNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.note.ListNoteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "class ListNoteCommandTest extends ListNoteCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void restoreStream(){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_notesExistForTheSpecifiedPeriod_success() throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note note \u003d new Note(\"2019-11-12\", \"note 1\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        note.notes.add(\"note 2\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        note.notes.add(\"note 3\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.daily.add(note);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.FullCommand \u003d \"listNote day 2019-11-12\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        execute(null, ui, null, null, null,null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Here are your notes for that day:\\r\\n\" + \"1. note 1\\r\\n2. note 2\\r\\n3. note 3\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_noNotesExistForTheSpecifiedPeriod_success() throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.FullCommand \u003d \"listNote month 2019-10\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        execute(null, ui, null, null, null,null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"There are no notes for that month.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 7,
      "yueyuu": 45
    }
  }
]
